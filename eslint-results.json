[{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\App.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\api\\base44Client.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\api\\entities.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\api\\fallbackFunctions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\api\\functions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\api\\integrations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\api\\mockData.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\accounts\\AccountCard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Building2' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Building2"},"fix":{"range":[293,306],"text":""},"desc":"Remove unused variable 'Building2'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Mail,\n  Phone,\n  Building2,\n  Edit,\n  Trash2,\n  MapPin,\n  Globe,\n  Users,\n  DollarSign,\n  Eye,\n} from \"lucide-react\";\nimport PhoneDisplay from \"../shared/PhoneDisplay\";\n\n// Matching the stat card colors - semi-transparent backgrounds\nconst typeColors = {\n  prospect: 'bg-blue-900/20 text-blue-300 border-blue-700',\n  customer: 'bg-green-900/20 text-green-300 border-green-700',\n  partner: 'bg-purple-900/20 text-purple-300 border-purple-700',\n  competitor: 'bg-red-900/20 text-red-300 border-red-700',\n  vendor: 'bg-amber-900/20 text-amber-300 border-amber-700',\n  inactive: 'bg-gray-900/20 text-gray-300 border-gray-700'\n};\n\nexport default function AccountCard({ account, assignedUserName, onEdit, onDelete, onViewDetails, onClick, isSelected, onSelect, user }) {\n  return (\n    <Card \n      className={`hover:shadow-lg transition-all duration-200 border-l-4 flex flex-col bg-slate-800 border-slate-700 hover:bg-slate-700/50 cursor-pointer ${\n        isSelected ? 'ring-2 ring-blue-500 bg-slate-700/50' : ''\n      }`}\n      style={{ borderLeftColor: account.type === 'customer' ? '#10b981' : account.type === 'prospect' ? '#3b82f6' : '#8b5cf6' }}\n      onClick={onClick}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex justify-between items-start\">\n          <div className=\"flex items-center gap-3 flex-1\">\n            <Checkbox\n              checked={isSelected}\n              onCheckedChange={onSelect}\n              onClick={(e) => e.stopPropagation()}\n              className=\"border-slate-600 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n            />\n            <div className=\"flex-1\">\n              <CardTitle className=\"text-lg font-bold text-slate-100\">\n                {account.name}\n              </CardTitle>\n              <p className=\"text-sm font-normal text-slate-400 mt-1\">\n                {account.industry?.replace(/_/g, ' ')}\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"flex-grow space-y-4\">\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex items-center gap-2 text-slate-300\">\n            <Mail className=\"w-4 h-4 text-slate-500\" />\n            {account.email ? (\n              <a href={`mailto:${account.email}`} className=\"hover:text-blue-400\" onClick={(e) => e.stopPropagation()}>\n                {account.email}\n              </a>\n            ) : (\n              <span className=\"text-slate-500 italic\">No email</span>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2 text-slate-300\">\n            <Phone className=\"w-4 h-4 text-slate-500\" />\n            {account.phone ? (\n              <PhoneDisplay\n                user={user}\n                phone={account.phone}\n                contactName={account.name}\n                enableCalling={true}\n                className=\"text-slate-300 hover:text-blue-400\"\n              />\n            ) : (\n              <span className=\"text-slate-500 italic\">No phone</span>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2 text-slate-300\">\n            <Globe className=\"w-4 h-4 text-slate-500\" />\n            {account.website ? (\n              <a href={account.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:text-blue-400\" onClick={(e) => e.stopPropagation()}>\n                {account.website.replace(/^https?:\\/\\//, '')}\n              </a>\n            ) : (\n              <span className=\"text-slate-500 italic\">No website</span>\n            )}\n          </div>\n          {account.city && (\n            <div className=\"flex items-center gap-2 text-slate-300\">\n              <MapPin className=\"w-4 h-4 text-slate-500\" />\n              <span>{account.city}{account.state && `, ${account.state}`}</span>\n            </div>\n          )}\n        </div>\n\n        {(account.annual_revenue || account.employee_count) && (\n          <div className=\"grid grid-cols-2 gap-4 pt-2 border-t border-slate-700\">\n            {account.annual_revenue && (\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-1 text-slate-400 mb-1\">\n                  <DollarSign className=\"w-3 h-3\" />\n                  <span className=\"text-xs\">Revenue</span>\n                </div>\n                <span className=\"text-sm font-semibold text-slate-200\">\n                  ${(account.annual_revenue / 1000000).toFixed(1)}M\n                </span>\n              </div>\n            )}\n            {account.employee_count && (\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-1 text-slate-400 mb-1\">\n                  <Users className=\"w-3 h-3\" />\n                  <span className=\"text-xs\">Employees</span>\n                </div>\n                <span className=\"text-sm font-semibold text-slate-200\">{account.employee_count}</span>\n              </div>\n            )}\n          </div>\n        )}\n\n        <div className=\"flex justify-between items-center pt-2 border-t border-slate-700\">\n          <Badge className={`${typeColors[account.type]} border capitalize`}>\n            {account.type}\n          </Badge>\n          <span className=\"text-xs text-slate-500\">\n            {assignedUserName}\n          </span>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"flex justify-between items-center pt-4 border-t border-slate-700\">\n        <div className=\"flex gap-2 flex-wrap\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={(e) => { e.stopPropagation(); onEdit(account); }}\n            className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n          >\n            <Edit className=\"w-3 h-3 mr-1\" />\n            Edit\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={(e) => { e.stopPropagation(); onViewDetails(account); }}\n            className=\"bg-slate-700 border-slate-600 text-slate-400 hover:bg-slate-600 hover:text-slate-300\"\n          >\n            <Eye className=\"w-3 h-3 mr-1\" />\n            View\n          </Button>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={(e) => { e.stopPropagation(); onDelete(account.id); }}\n          className=\"text-red-400 hover:text-red-300 hover:bg-slate-700\"\n        >\n          <Trash2 className=\"w-4 h-4\" />\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\accounts\\AccountDetailPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'onRefresh' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"onRefresh"},"fix":{"range":[215,228],"text":""},"desc":"Remove unused variable 'onRefresh'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport UniversalDetailPanel from \"../shared/UniversalDetailPanel\";\n\nexport default function AccountDetailPanel({\n  account,\n  assignedUserName,\n  open,\n  onOpenChange,\n  onEdit,\n  onDelete,\n  onRefresh,\n  user\n}) {\n  if (!account) {\n    return null;\n  }\n\n  return (\n    <UniversalDetailPanel\n      entity={account}\n      entityType=\"account\"\n      open={open}\n      onOpenChange={onOpenChange}\n      onEdit={onEdit}\n      onDelete={onDelete}\n      user={user}\n      displayData={{\n        \"Assigned To\": (\n          <p className=\"text-slate-200 font-medium mt-1\">\n            {assignedUserName || account.assigned_to || 'Unassigned'}\n          </p>\n        )\n      }}\n      customActions={[]}\n      showNotes={true}\n    />\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\accounts\\AccountForm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\accounts\\BulkActionsMenu.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ChevronDown, UserCheck, Tag, Trash2 } from \"lucide-react\";\nimport LazyEmployeeSelector from \"../shared/LazyEmployeeSelector\";\n\nexport default function BulkActionsMenu({ \n  selectedCount, \n  onBulkTypeChange, \n  onBulkAssign,\n  onBulkDelete,\n  selectAllMode = false,\n  totalCount = 0\n}) {\n  const [showTypeDialog, setShowTypeDialog] = useState(false);\n  const [showAssignDialog, setShowAssignDialog] = useState(false);\n  const [newType, setNewType] = useState(\"\");\n  const [newAssignee, setNewAssignee] = useState(\"\");\n\n  const displayCount = selectAllMode ? totalCount : selectedCount;\n  const countLabel = selectAllMode ? `All ${displayCount}` : displayCount;\n\n  const handleTypeChange = () => {\n    if (newType) {\n      onBulkTypeChange(newType);\n      setShowTypeDialog(false);\n      setNewType(\"\");\n    }\n  };\n\n  const handleAssign = () => {\n    onBulkAssign(newAssignee);\n    setShowAssignDialog(false);\n    setNewAssignee(\"\");\n  };\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n            Bulk Actions ({countLabel})\n            <ChevronDown className=\"w-4 h-4 ml-2\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"bg-slate-800 border-slate-700\">\n          <DropdownMenuLabel className=\"text-slate-200\">\n            Actions for {selectAllMode ? `all ${displayCount}` : displayCount} account(s)\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator className=\"bg-slate-700\" />\n          <DropdownMenuItem \n            onClick={() => setShowTypeDialog(true)}\n            className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n          >\n            <Tag className=\"w-4 h-4 mr-2\" />\n            Change Type\n          </DropdownMenuItem>\n          <DropdownMenuItem \n            onClick={() => setShowAssignDialog(true)}\n            className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n          >\n            <UserCheck className=\"w-4 h-4 mr-2\" />\n            Assign To\n          </DropdownMenuItem>\n          <DropdownMenuSeparator className=\"bg-slate-700\" />\n          <DropdownMenuItem \n            onClick={onBulkDelete}\n            className=\"text-red-400 hover:bg-red-900/20 cursor-pointer\"\n          >\n            <Trash2 className=\"w-4 h-4 mr-2\" />\n            Delete Selected\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Type Change Dialog */}\n      <Dialog open={showTypeDialog} onOpenChange={setShowTypeDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle>Change Type for {countLabel} Account(s)</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Select a new type to apply to {selectAllMode ? 'all selected' : 'the selected'} accounts.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"type\" className=\"text-slate-200\">New Type</Label>\n              <Select value={newType} onValueChange={setNewType}>\n                <SelectTrigger className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"Select type...\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"prospect\" className=\"text-slate-200 hover:bg-slate-700\">Prospect</SelectItem>\n                  <SelectItem value=\"customer\" className=\"text-slate-200 hover:bg-slate-700\">Customer</SelectItem>\n                  <SelectItem value=\"partner\" className=\"text-slate-200 hover:bg-slate-700\">Partner</SelectItem>\n                  <SelectItem value=\"competitor\" className=\"text-slate-200 hover:bg-slate-700\">Competitor</SelectItem>\n                  <SelectItem value=\"vendor\" className=\"text-slate-200 hover:bg-slate-700\">Vendor</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowTypeDialog(false)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button onClick={handleTypeChange} disabled={!newType} className=\"bg-blue-600 hover:bg-blue-700\">\n              Update Type\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Assignment Dialog */}\n      <Dialog open={showAssignDialog} onOpenChange={setShowAssignDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle>Assign {countLabel} Account(s)</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Select an employee to assign {selectAllMode ? 'all selected' : 'the selected'} accounts to.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"assignee\" className=\"text-slate-200\">Assign To</Label>\n              <LazyEmployeeSelector\n                value={newAssignee}\n                onValueChange={setNewAssignee}\n                placeholder=\"Select employee...\"\n                className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\"\n                contentClassName=\"bg-slate-800 border-slate-700\"\n                itemClassName=\"text-slate-200 hover:bg-slate-700\"\n                allowUnassigned={true}\n                showLoadingState={true}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAssignDialog(false)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button onClick={handleAssign} className=\"bg-blue-600 hover:bg-blue-700\">\n              Assign Accounts\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\accounts\\CreateAccountDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":12,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"Plus"},"fix":{"range":[577,583],"text":""},"desc":"Remove unused variable 'Plus'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":12,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"X"},"fix":{"range":[583,586],"text":""},"desc":"Remove unused variable 'X'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Account } from \"@/api/entities\";\nimport { Lead } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport AddressFields from \"../shared/AddressFields\";\nimport PhoneInput from \"../shared/PhoneInput\";\nimport { Loader2, Plus, X } from \"lucide-react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { toast } from \"react-hot-toast\";\n\nexport default function CreateAccountDialog({ open, onOpenChange, onAccountCreated }) {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    type: \"prospect\",\n    industry: \"\",\n    website: \"\",\n    phone: \"\",\n    email: \"\",\n    annual_revenue: \"\",\n    employee_count: \"\",\n    address_1: \"\",\n    address_2: \"\",\n    city: \"\",\n    state: \"\",\n    zip: \"\",\n    country: \"United States\",\n    description: \"\",\n    tags: [],\n    is_test_data: false,\n  });\n\n  // Lead creation fields\n  const [createLead, setCreateLead] = useState(false);\n  const [leadData, setLeadData] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    phone: \"\",\n    job_title: \"\",\n    source: \"website\",\n    status: \"new\",\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  React.useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const user = await User.me();\n        setCurrentUser(user);\n      } catch (error) {\n        console.error(\"Failed to load user:\", error);\n      }\n    };\n    loadUser();\n  }, []);\n\n  const handleChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleLeadChange = (field, value) => {\n    setLeadData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!currentUser) return;\n\n    setIsSubmitting(true);\n    try {\n      const accountPayload = {\n        ...formData,\n        tenant_id: currentUser.tenant_id,\n        annual_revenue: formData.annual_revenue ? parseFloat(formData.annual_revenue) : undefined,\n        employee_count: formData.employee_count ? parseInt(formData.employee_count) : undefined,\n      };\n\n      const newAccount = await Account.create(accountPayload);\n\n      // If user wants to create a lead, create it now\n      if (createLead && leadData.first_name && leadData.last_name) {\n        const leadPayload = {\n          ...leadData,\n          tenant_id: currentUser.tenant_id,\n          account_id: newAccount.id,\n          company: newAccount.name,\n          assigned_to: currentUser.email,\n        };\n        await Lead.create(leadPayload);\n        toast.success(\"Account and Lead created successfully!\");\n      } else {\n        toast.success(\"Account created successfully!\");\n      }\n\n      if (onAccountCreated) {\n        onAccountCreated(newAccount);\n      }\n      onOpenChange(false);\n    } catch (error) {\n      console.error(\"Error creating account:\", error);\n      toast.error(\"Failed to create account. Please try again.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!open) return null;\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"md:col-span-2\">\n          <Label htmlFor=\"acc-name\" className=\"text-slate-300\">\n            Company Name <span className=\"text-red-400\">*</span>\n          </Label>\n          <Input\n            id=\"acc-name\"\n            value={formData.name}\n            onChange={(e) => handleChange('name', e.target.value)}\n            required\n            className=\"bg-slate-700 border-slate-600 text-white\"\n            placeholder=\"Enter company name\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"acc-type\" className=\"text-slate-300\">Type</Label>\n          <Select value={formData.type} onValueChange={(value) => handleChange('type', value)}>\n            <SelectTrigger id=\"acc-type\" className=\"bg-slate-700 border-slate-600 text-white\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"bg-slate-800 border-slate-600\" style={{ zIndex: 2147483648 }}>\n              <SelectItem value=\"prospect\">Prospect</SelectItem>\n              <SelectItem value=\"customer\">Customer</SelectItem>\n              <SelectItem value=\"partner\">Partner</SelectItem>\n              <SelectItem value=\"competitor\">Competitor</SelectItem>\n              <SelectItem value=\"vendor\">Vendor</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label htmlFor=\"acc-industry\" className=\"text-slate-300\">Industry</Label>\n          <Select value={formData.industry} onValueChange={(value) => handleChange('industry', value)}>\n            <SelectTrigger id=\"acc-industry\" className=\"bg-slate-700 border-slate-600 text-white\">\n              <SelectValue placeholder=\"Select industry\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-slate-800 border-slate-600\" style={{ zIndex: 2147483648 }}>\n              <SelectItem value=\"aerospace_and_defense\">Aerospace & Defense</SelectItem>\n              <SelectItem value=\"agriculture\">Agriculture</SelectItem>\n              <SelectItem value=\"automotive\">Automotive</SelectItem>\n              <SelectItem value=\"banking_and_financial_services\">Banking & Financial Services</SelectItem>\n              <SelectItem value=\"construction\">Construction</SelectItem>\n              <SelectItem value=\"consumer_goods\">Consumer Goods</SelectItem>\n              <SelectItem value=\"education\">Education</SelectItem>\n              <SelectItem value=\"energy_and_utilities\">Energy & Utilities</SelectItem>\n              <SelectItem value=\"healthcare_and_life_sciences\">Healthcare & Life Sciences</SelectItem>\n              <SelectItem value=\"information_technology\">Information Technology</SelectItem>\n              <SelectItem value=\"manufacturing\">Manufacturing</SelectItem>\n              <SelectItem value=\"real_estate\">Real Estate</SelectItem>\n              <SelectItem value=\"retail_and_wholesale\">Retail & Wholesale</SelectItem>\n              <SelectItem value=\"telecommunications\">Telecommunications</SelectItem>\n              <SelectItem value=\"other\">Other</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label htmlFor=\"acc-website\" className=\"text-slate-300\">Website</Label>\n          <Input\n            id=\"acc-website\"\n            type=\"url\"\n            value={formData.website}\n            onChange={(e) => handleChange('website', e.target.value)}\n            className=\"bg-slate-700 border-slate-600 text-white\"\n            placeholder=\"https://example.com\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"acc-phone\" className=\"text-slate-300\">Phone</Label>\n          <PhoneInput\n            id=\"acc-phone\"\n            value={formData.phone}\n            onChange={(value) => handleChange('phone', value)}\n            className=\"bg-slate-700 border-slate-600 text-white\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"acc-email\" className=\"text-slate-300\">Email</Label>\n          <Input\n            id=\"acc-email\"\n            type=\"email\"\n            value={formData.email}\n            onChange={(e) => handleChange('email', e.target.value)}\n            className=\"bg-slate-700 border-slate-600 text-white\"\n            placeholder=\"contact@company.com\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"acc-revenue\" className=\"text-slate-300\">Annual Revenue</Label>\n          <Input\n            id=\"acc-revenue\"\n            type=\"number\"\n            value={formData.annual_revenue}\n            onChange={(e) => handleChange('annual_revenue', e.target.value)}\n            className=\"bg-slate-700 border-slate-600 text-white\"\n            placeholder=\"0\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"acc-employees\" className=\"text-slate-300\">Employee Count</Label>\n          <Input\n            id=\"acc-employees\"\n            type=\"number\"\n            value={formData.employee_count}\n            onChange={(e) => handleChange('employee_count', e.target.value)}\n            className=\"bg-slate-700 border-slate-600 text-white\"\n            placeholder=\"0\"\n          />\n        </div>\n      </div>\n\n      <AddressFields\n        formData={formData}\n        onChange={handleChange}\n        className=\"bg-slate-700 border-slate-600 text-white\"\n      />\n\n      <div>\n        <Label htmlFor=\"acc-description\" className=\"text-slate-300\">Description</Label>\n        <Textarea\n          id=\"acc-description\"\n          value={formData.description}\n          onChange={(e) => handleChange('description', e.target.value)}\n          className=\"bg-slate-700 border-slate-600 text-white\"\n          rows={3}\n          placeholder=\"Add notes about this account...\"\n        />\n      </div>\n\n      {/* Optional Lead Creation Section */}\n      <div className=\"border-t border-slate-700 pt-4\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Checkbox\n            id=\"create-lead\"\n            checked={createLead}\n            onCheckedChange={setCreateLead}\n            className=\"border-slate-600\"\n          />\n          <Label htmlFor=\"create-lead\" className=\"text-slate-300 cursor-pointer\">\n            Create a Lead for this Account\n          </Label>\n        </div>\n\n        {createLead && (\n          <div className=\"space-y-4 pl-6 border-l-2 border-blue-600\">\n            <p className=\"text-sm text-slate-400\">Add a contact person for this account</p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"lead-first-name\" className=\"text-slate-300\">\n                  First Name <span className=\"text-red-400\">*</span>\n                </Label>\n                <Input\n                  id=\"lead-first-name\"\n                  value={leadData.first_name}\n                  onChange={(e) => handleLeadChange('first_name', e.target.value)}\n                  required={createLead}\n                  className=\"bg-slate-700 border-slate-600 text-white\"\n                  placeholder=\"John\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"lead-last-name\" className=\"text-slate-300\">\n                  Last Name <span className=\"text-red-400\">*</span>\n                </Label>\n                <Input\n                  id=\"lead-last-name\"\n                  value={leadData.last_name}\n                  onChange={(e) => handleLeadChange('last_name', e.target.value)}\n                  required={createLead}\n                  className=\"bg-slate-700 border-slate-600 text-white\"\n                  placeholder=\"Doe\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"lead-email\" className=\"text-slate-300\">Email</Label>\n                <Input\n                  id=\"lead-email\"\n                  type=\"email\"\n                  value={leadData.email}\n                  onChange={(e) => handleLeadChange('email', e.target.value)}\n                  className=\"bg-slate-700 border-slate-600 text-white\"\n                  placeholder=\"john.doe@company.com\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"lead-phone\" className=\"text-slate-300\">Phone</Label>\n                <PhoneInput\n                  id=\"lead-phone\"\n                  value={leadData.phone}\n                  onChange={(value) => handleLeadChange('phone', value)}\n                  className=\"bg-slate-700 border-slate-600 text-white\"\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"lead-job-title\" className=\"text-slate-300\">Job Title</Label>\n                <Input\n                  id=\"lead-job-title\"\n                  value={leadData.job_title}\n                  onChange={(e) => handleLeadChange('job_title', e.target.value)}\n                  className=\"bg-slate-700 border-slate-600 text-white\"\n                  placeholder=\"Sales Manager\"\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {currentUser?.role === 'admin' && (\n        <div className=\"flex items-center gap-2\">\n          <Checkbox\n            id=\"test-data\"\n            checked={formData.is_test_data}\n            onCheckedChange={(checked) => handleChange('is_test_data', checked)}\n            className=\"border-slate-600\"\n          />\n          <Label htmlFor=\"test-data\" className=\"text-slate-300 cursor-pointer\">\n            Mark as test data\n          </Label>\n        </div>\n      )}\n\n      <div className=\"flex justify-end gap-3 pt-4 border-t border-slate-700\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={() => onOpenChange(false)}\n          className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n        >\n          Cancel\n        </Button>\n        <Button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n        >\n          {isSubmitting ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              Creating...\n            </>\n          ) : (\n            `Create Account${createLead ? ' & Lead' : ''}`\n          )}\n        </Button>\n      </div>\n    </form>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\activities\\AICallActivityForm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\activities\\ActivityCard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,19],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Calendar, Clock, MoreHorizontal, Edit, Trash2, Eye, CheckCircle, Phone, Mail, Users, FileText } from \"lucide-react\";\nimport { format, isPast, isToday } from \"date-fns\";\n\n// Matching the stat card colors - semi-transparent backgrounds\nconst statusColors = {\n  scheduled: \"bg-blue-900/20 text-blue-300 border-blue-700\",\n  in_progress: \"bg-yellow-900/20 text-yellow-300 border-yellow-700\",\n  overdue: \"bg-red-900/20 text-red-300 border-red-700\",\n  completed: \"bg-emerald-900/20 text-emerald-300 border-emerald-700\",\n  cancelled: \"bg-slate-900/20 text-slate-300 border-slate-700\"\n};\n\nconst priorityColors = {\n  low: \"bg-slate-600 text-white\",\n  normal: \"bg-blue-600 text-white\",\n  high: \"bg-orange-600 text-white\",\n  urgent: \"bg-red-600 text-white\"\n};\n\nconst typeIcons = {\n  call: Phone,\n  email: Mail,\n  meeting: Users,\n  task: CheckCircle,\n  note: FileText\n};\n\nexport default function ActivityCard({\n  activity,\n  relatedName,\n  assignedUserName,\n  onEdit,\n  onDelete,\n  onViewDetails,\n  onComplete,\n  isSelected,\n  onSelect\n}) {\n  const TypeIcon = typeIcons[activity.type] || Calendar;\n  \n  const isDue = activity.due_date && isPast(new Date(activity.due_date)) && activity.status !== 'completed';\n  const isTodayActivity = activity.due_date && isToday(new Date(activity.due_date));\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700 hover:shadow-lg transition-all duration-200\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-3\">\n          <div className=\"flex items-start gap-3 flex-1 min-w-0\">\n            <Checkbox\n              checked={isSelected}\n              onCheckedChange={onSelect}\n              className=\"mt-1 border-slate-600 data-[state=checked]:bg-blue-600 flex-shrink-0\"\n            />\n            <div className=\"flex-1 min-w-0\">\n              <h3 \n                className=\"font-semibold text-slate-100 mb-1 cursor-pointer hover:text-blue-400 transition-colors break-words line-clamp-2\"\n                onClick={onViewDetails}\n              >\n                {activity.subject}\n              </h3>\n              {relatedName && (\n                <p className=\"text-sm text-slate-400 break-words line-clamp-1\">{relatedName}</p>\n              )}\n            </div>\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-slate-400 hover:text-slate-200 hover:bg-slate-700 flex-shrink-0\">\n                <MoreHorizontal className=\"w-4 h-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"bg-slate-800 border-slate-700 text-slate-200\">\n              {activity.status !== 'completed' && onComplete && (\n                <DropdownMenuItem onClick={() => onComplete(activity)} className=\"hover:bg-slate-700\">\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                  Mark Complete\n                </DropdownMenuItem>\n              )}\n              <DropdownMenuItem onClick={onEdit} className=\"hover:bg-slate-700\">\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Edit\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={onViewDetails} className=\"hover:bg-slate-700\">\n                <Eye className=\"w-4 h-4 mr-2\" />\n                View Details\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={onDelete} className=\"text-red-400 hover:bg-slate-700 focus:text-red-400\">\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Delete\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-3\">\n        <div className=\"flex flex-wrap gap-2\">\n          <div className=\"flex items-center gap-1\">\n            <Badge variant=\"outline\" className={statusColors[activity.status.replace(/-/g, '_')] || statusColors.scheduled}>\n              {activity.status?.replace(/_/g, ' ')}\n            </Badge>\n          </div>\n          \n          <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n            <TypeIcon className=\"w-3 h-3 mr-1\" />\n            {activity.type}\n          </Badge>\n          \n          <Badge className={priorityColors[activity.priority] || priorityColors.normal}>\n            {activity.priority}\n          </Badge>\n        </div>\n\n        {activity.due_date && (\n          <div className=\"flex items-center gap-2 text-sm text-slate-400\">\n            <Calendar className=\"w-4 h-4 flex-shrink-0\" />\n            <span className={isDue ? 'text-red-400 font-semibold' : isTodayActivity ? 'text-yellow-400 font-semibold' : ''}>\n              {format(new Date(activity.due_date), 'MMM d, yyyy')}\n              {activity.due_time && ` at ${activity.due_time}`}\n            </span>\n          </div>\n        )}\n\n        {activity.duration && (\n          <div className=\"flex items-center gap-2 text-sm text-slate-400\">\n            <Clock className=\"w-4 h-4 flex-shrink-0\" />\n            <span>{activity.duration} minutes</span>\n          </div>\n        )}\n\n        {assignedUserName && (\n          <div className=\"text-sm text-slate-400 pt-2 border-t border-slate-700 break-words\">\n            Assigned: {assignedUserName}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\activities\\ActivityDetailPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[181,186],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":5,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[185,198],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":5,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardHeader"},"fix":{"range":[198,210],"text":""},"desc":"Remove unused variable 'CardHeader'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardTitle"},"fix":{"range":[210,221],"text":""},"desc":"Remove unused variable 'CardTitle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Select' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[358,365],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectContent' is defined but never used.","line":8,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectContent"},"fix":{"range":[364,379],"text":""},"desc":"Remove unused variable 'SelectContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectItem' is defined but never used.","line":8,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectItem"},"fix":{"range":[379,391],"text":""},"desc":"Remove unused variable 'SelectItem'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectTrigger' is defined but never used.","line":8,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":58,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectTrigger"},"fix":{"range":[391,406],"text":""},"desc":"Remove unused variable 'SelectTrigger'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectValue' is defined but never used.","line":8,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":71,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectValue"},"fix":{"range":[406,419],"text":""},"desc":"Remove unused variable 'SelectValue'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":10,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"Clock"},"fix":{"range":[536,543],"text":""},"desc":"Remove unused variable 'Clock'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'utcToLocal' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"utcToLocal"},"fix":{"range":[692,703],"text":""},"desc":"Remove unused variable 'utcToLocal'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is defined but never used.","line":15,"column":117,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":121,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[983,989],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'onStatusChange' is defined but never used.","line":15,"column":123,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":137,"suggestions":[{"messageId":"removeVar","data":{"varName":"onStatusChange"},"fix":{"range":[989,1005],"text":""},"desc":"Remove unused variable 'onStatusChange'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useMemo } from 'react';\nimport { format } from 'date-fns';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { AlertCircle, Calendar, Clock, User, MapPin, Phone, ChevronDown, ChevronUp, Edit, Trash2 } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { utcToLocal, getCurrentTimezoneOffset, getTimezoneDisplayName, formatActivityDateTime } from '../shared/timezoneUtils';\nimport { useTimezone } from '../shared/TimezoneContext';\n\nconst ActivityDetailPanel = ({ activity, assignedUserName, relatedRecordInfo, open, onOpenChange, onEdit, onDelete, user, onStatusChange, onAddNote }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [newNote, setNewNote] = useState('');\n  const { selectedTimezone } = useTimezone();\n  const offsetMinutes = getCurrentTimezoneOffset(selectedTimezone);\n\n  // The statusColors object is no longer needed for the badge as it's handled by the `contrast-badge` class and data attributes.\n\n  const formattedDueDate = useMemo(() => {\n    if (!activity) return 'Not set';\n    return formatActivityDateTime(activity, offsetMinutes);\n  }, [activity, offsetMinutes]);\n\n  const timezoneDisplay = useMemo(() => {\n    return getTimezoneDisplayName(selectedTimezone);\n  }, [selectedTimezone]);\n\n  const handleAddNote = () => {\n    if (newNote.trim() && onAddNote) {\n      onAddNote(activity.id, newNote.trim());\n      setNewNote('');\n    }\n  };\n\n  return (\n    <Sheet open={open} onOpenChange={onOpenChange}>\n      <SheetContent className=\"w-[600px] sm:max-w-[600px] bg-slate-800 border-slate-700 text-slate-200 overflow-y-auto activity-detail-panel\">\n        {!activity ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-center p-8\">\n              <Calendar className=\"w-12 h-12 mx-auto mb-4 text-slate-600\" />\n              <p className=\"text-slate-400 text-lg font-medium\">Select an activity to view details</p>\n              <p className=\"text-slate-500 text-sm mt-2\">Click on any activity from the list to see more information</p>\n            </div>\n          </div>\n        ) : (\n          <>\n            <SheetHeader className=\"border-b border-slate-700 pb-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1 pr-4\">\n                  <SheetTitle className=\"text-xl mb-2 text-slate-100\">{activity.subject}</SheetTitle>\n                  <div className=\"flex items-center gap-2 flex-wrap\">\n                    <Badge className=\"contrast-badge\" data-variant=\"status\" data-status={activity.status}>\n                      {activity.status.replace('_', ' ').toUpperCase()}\n                    </Badge>\n                    {activity.type && (\n                      <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300 contrast-badge\" data-variant=\"type\">\n                        {activity.type}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  {onEdit && (\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => onEdit(activity)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n                      <Edit className=\"w-4 h-4 mr-1\" />\n                      Edit\n                    </Button>\n                  )}\n                  {onDelete && (\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => onDelete(activity.id)} className=\"bg-slate-700 border-slate-600 text-red-400 hover:bg-slate-600 hover:text-red-300\">\n                      <Trash2 className=\"w-4 h-4 mr-1\" />\n                      Delete\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </SheetHeader>\n\n            <div className=\"space-y-4 py-6\">\n              {/* Due Date & Time */}\n              <div className=\"flex items-center gap-3 p-3 bg-slate-700/50 rounded-lg border border-slate-600\">\n                <Calendar className=\"h-5 w-5 text-slate-400 flex-shrink-0\" />\n                <div>\n                  <p className=\"font-medium text-slate-200\">Due Date & Time</p>\n                  <p className=\"text-sm text-slate-400\">\n                    {formattedDueDate !== 'Not set' ? `${formattedDueDate} (${timezoneDisplay})` : formattedDueDate}\n                  </p>\n                </div>\n              </div>\n\n              {/* Assigned To */}\n              {assignedUserName && (\n                <div className=\"flex items-center gap-3 p-3 bg-slate-700/50 rounded-lg border border-slate-600\">\n                  <User className=\"h-5 w-5 text-slate-400 flex-shrink-0\" />\n                  <div>\n                    <p className=\"font-medium text-slate-200\">Assigned To</p>\n                    <p className=\"text-sm text-slate-400\">{assignedUserName}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Related Record */}\n              {relatedRecordInfo && relatedRecordInfo.name !== 'N/A' && (\n                <div className=\"flex items-center gap-3 p-3 bg-slate-700/50 rounded-lg border border-slate-600\">\n                  <User className=\"h-5 w-5 text-slate-400 flex-shrink-0\" />\n                  <div>\n                    <p className=\"font-medium text-slate-200\">Related To</p>\n                    <p className=\"text-sm text-slate-400\">{relatedRecordInfo.name}</p>\n                    {relatedRecordInfo.phone && (\n                      <div className=\"flex items-center gap-1 mt-1\">\n                        <Phone className=\"h-4 w-4 text-slate-500\" />\n                        <span className=\"text-sm text-slate-400\">{relatedRecordInfo.phone}</span>\n                      </div>\n                    )}\n                    {relatedRecordInfo.company && (\n                      <p className=\"text-xs text-slate-500\">{relatedRecordInfo.company}</p>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Priority */}\n              {activity.priority && (\n                <div className=\"flex items-center gap-3 p-3 bg-slate-700/50 rounded-lg border border-slate-600\">\n                  <AlertCircle className=\"h-5 w-5 text-slate-400 flex-shrink-0\" />\n                  <div>\n                    <p className=\"font-medium text-slate-200\">Priority</p>\n                    <Badge\n                      className=\"contrast-badge\"\n                      data-variant=\"priority\"\n                      data-priority={activity.priority}\n                    >\n                      {activity.priority.toUpperCase()}\n                    </Badge>\n                  </div>\n                </div>\n              )}\n\n              {/* Location */}\n              {activity.location && (\n                <div className=\"flex items-center gap-3 p-3 bg-slate-700/50 rounded-lg border border-slate-600\">\n                  <MapPin className=\"h-5 w-5 text-slate-400 flex-shrink-0\" />\n                  <div>\n                    <p className=\"font-medium text-slate-200\">Location</p>\n                    <p className=\"text-sm text-slate-400\">{activity.location}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Description */}\n              {activity.description && (\n                <div className=\"p-3 bg-slate-700/50 rounded-lg border border-slate-600\">\n                  <p className=\"font-medium mb-2 text-slate-200\">Description</p>\n                  <p className=\"text-sm text-slate-400 whitespace-pre-wrap\">\n                    {activity.description}\n                  </p>\n                </div>\n              )}\n\n              {/* Outcome */}\n              {activity.outcome && (\n                <div className=\"p-3 bg-slate-700/50 rounded-lg border border-slate-600\">\n                  <p className=\"font-medium mb-2 text-slate-200\">Outcome</p>\n                  <p className=\"text-sm text-slate-400 whitespace-pre-wrap\">\n                    {activity.outcome}\n                  </p>\n                </div>\n              )}\n\n              {/* Notes Section */}\n              <div className=\"border-t pt-4 border-slate-600\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setIsExpanded(!isExpanded)}\n                  className=\"w-full justify-between p-0 h-auto text-slate-200 hover:text-slate-100 hover:bg-slate-700/50\"\n                >\n                  <span className=\"font-medium\">Notes ({activity.notes?.length || 0})</span>\n                  {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                </Button>\n\n                <AnimatePresence>\n                  {isExpanded && (\n                    <motion.div\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{ height: 'auto', opacity: 1 }}\n                      exit={{ height: 0, opacity: 0 }}\n                      className=\"mt-4 space-y-3\"\n                    >\n                      {/* Existing Notes */}\n                      {activity.notes?.map((note, index) => (\n                        <div key={index} className=\"p-3 bg-slate-700/30 rounded-lg border border-slate-600\">\n                          <p className=\"text-sm whitespace-pre-wrap text-slate-300\">{note.content}</p>\n                          {note.created_date && (\n                            <p className=\"text-xs text-slate-500 mt-2\">\n                              {format(new Date(note.created_date), 'PPp')}\n                            </p>\n                          )}\n                        </div>\n                      ))}\n\n                      {/* Add New Note */}\n                      {onAddNote && (\n                        <div className=\"space-y-2\">\n                          <Textarea\n                            value={newNote}\n                            onChange={(e) => setNewNote(e.target.value)}\n                            placeholder=\"Add a note...\"\n                            className=\"min-h-20 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                          />\n                          <Button\n                            onClick={handleAddNote}\n                            disabled={!newNote.trim()}\n                            size=\"sm\"\n                            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                          >\n                            Add Note\n                          </Button>\n                        </div>\n                      )}\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </div>\n\n              {/* Metadata */}\n              {activity.created_date && (\n                <div className=\"border-t pt-4 text-xs text-slate-500 border-slate-600\">\n                  <p>Created: {format(new Date(activity.created_date), 'PPp')}</p>\n                  {activity.updated_date && (\n                    <p>Updated: {format(new Date(activity.updated_date), 'PPp')}</p>\n                  )}\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n};\n\nexport default ActivityDetailPanel;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\activities\\ActivityForm.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[768,773],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":14,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[772,785],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":14,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardHeader"},"fix":{"range":[785,797],"text":""},"desc":"Remove unused variable 'CardHeader'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":14,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardTitle"},"fix":{"range":[797,808],"text":""},"desc":"Remove unused variable 'CardTitle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Popover' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"Popover"},"fix":{"range":[898,906],"text":""},"desc":"Remove unused variable 'Popover'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'PopoverContent' is defined but never used.","line":16,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"PopoverContent"},"fix":{"range":[905,921],"text":""},"desc":"Remove unused variable 'PopoverContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'PopoverTrigger' is defined but never used.","line":16,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"PopoverTrigger"},"fix":{"range":[921,937],"text":""},"desc":"Remove unused variable 'PopoverTrigger'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Bot' is defined but never used.","line":18,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Bot"},"fix":{"range":[1040,1045],"text":""},"desc":"Remove unused variable 'Bot'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":18,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":59,"suggestions":[{"messageId":"removeVar","data":{"varName":"Clock"},"fix":{"range":[1058,1065],"text":""},"desc":"Remove unused variable 'Clock'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'BrainCircuit' is defined but never used.","line":18,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":73,"suggestions":[{"messageId":"removeVar","data":{"varName":"BrainCircuit"},"fix":{"range":[1065,1079],"text":""},"desc":"Remove unused variable 'BrainCircuit'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":18,"column":75,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":76,"suggestions":[{"messageId":"removeVar","data":{"varName":"X"},"fix":{"range":[1079,1082],"text":""},"desc":"Remove unused variable 'X'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Save' is defined but never used.","line":18,"column":78,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":82,"suggestions":[{"messageId":"removeVar","data":{"varName":"Save"},"fix":{"range":[1082,1088],"text":""},"desc":"Remove unused variable 'Save'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'motion' is defined but never used.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"motion"},"fix":{"range":[1190,1229],"text":""},"desc":"Remove unused variable 'motion'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'selectedRelatedRecord' is assigned a value but never used.","line":47,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedRelatedRecord"},"fix":{"range":[2217,2238],"text":""},"desc":"Remove unused variable 'selectedRelatedRecord'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'loadingUser' is assigned a value but never used.","line":51,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"loadingUser"},"fix":{"range":[2385,2396],"text":""},"desc":"Remove unused variable 'loadingUser'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Activity } from '@/api/entities';\nimport { Contact, Account, Lead, Opportunity, User } from '@/api/entities';\nimport { Note } from \"@/api/entities\"; // NEW: Import Note entity\nimport { useTimezone } from '../shared/TimezoneContext';\nimport { localToUtc, utcToLocal, getCurrentTimezoneOffset } from '../shared/timezoneUtils';\nimport EmployeeSelector from \"../shared/EmployeeSelector\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon, Bot, Mail, Phone, Clock, BrainCircuit, X, Save, Loader2, FileText } from \"lucide-react\"; // NEW: Add FileText icon\nimport { toast } from \"sonner\";\n\nimport { motion } from 'framer-motion';\n\n// Helper to generate time options with 15-minute increments\nconst generateTimeOptions = () => {\n  const options = [];\n  for (let i = 0; i < 24; i++) {\n    for (let j = 0; j < 60; j += 15) { // Changed from j += 30 to j += 15\n      const hour = i.toString().padStart(2, '0');\n      const minute = j.toString().padStart(2, '0');\n      options.push(`${hour}:${minute}`);\n    }\n  }\n  return options;\n};\n\nconst timeOptions = generateTimeOptions();\n\nexport default function ActivityForm({ activity, relatedTo, relatedId, onSave, onCancel, tenantId }) {\n  const { selectedTimezone } = useTimezone();\n  const offsetMinutes = getCurrentTimezoneOffset(selectedTimezone);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [contacts, setContacts] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [leads, setLeads] = useState([]);\n  const [opportunities, setOpportunities] = useState([]);\n  const [relatedRecords, setRelatedRecords] = useState([]);\n  const [selectedRelatedRecord, setSelectedRelatedRecord] = useState(null);\n\n  // NEW: User state and loading for admin check\n  const [user, setUser] = useState(null);\n  const [loadingUser, setLoadingUser] = useState(true); // Renamed to avoid conflict with loadingNotes\n  const isAdmin = user?.role === 'admin' || user?.role === 'superadmin';\n\n  // NEW: State for notes section\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [loadingNotes, setLoadingNotes] = useState(false);\n\n  // Initialize form data using a function, memoized with useCallback\n  const getInitialFormData = useCallback(() => {\n    let initialData = {\n      type: activity?.type || 'task',\n      subject: activity?.subject || '',\n      due_date: '',\n      due_time: '',\n      duration: activity?.duration || '',\n      description: activity?.description || '',\n      status: activity?.status || 'scheduled',\n      priority: activity?.priority || 'normal',\n      assigned_to: activity?.assigned_to || '',\n      related_to: 'none', // Default, will be overridden\n      related_id: 'none', // Default, will be overridden\n      outcome: activity?.outcome || '',\n      location: activity?.location || '',\n      is_test_data: activity?.is_test_data || false,\n      ai_call_config: activity?.ai_call_config || {\n        ai_provider: 'callfluent',\n        prompt: '',\n        contact_phone: '',\n        contact_name: '',\n        call_objective: 'follow_up',\n        max_duration: 300,\n        retry_count: 0,\n        max_retries: 2,\n      },\n      ai_email_config: activity?.ai_email_config || {\n        subject_template: '',\n        body_prompt: '',\n      },\n    };\n\n    // FIXED: Ensure related_to and related_id are properly set when editing\n    if (activity) {\n      // If we're editing an existing activity, preserve its relationships\n      initialData.related_to = activity.related_to || 'none';\n      initialData.related_id = activity.related_id || 'none';\n      \n      console.log('ActivityForm: Editing existing activity:', {\n        id: activity.id,\n        related_to: activity.related_to,\n        related_id: activity.related_id,\n        subject: activity.subject\n      });\n    } else if (relatedTo && relatedId) {\n      // If we're creating a new activity with preset relationships\n      initialData.related_to = relatedTo;\n      initialData.related_id = relatedId;\n      \n      console.log('ActivityForm: Creating new activity with preset relationship:', {\n        relatedTo,\n        relatedId\n      });\n    }\n\n    // FIXED: Use the now-fixed imported utcToLocal function\n    if (activity?.due_date && activity?.due_time) {\n      const datePart = activity.due_date.split('T')[0]; // Ensure only date part is used\n      const utcString = `${datePart}T${activity.due_time}:00.000Z`;\n      \n      const localDate = utcToLocal(utcString, offsetMinutes);\n      \n      initialData.due_date = localDate.toISOString().split('T')[0];\n      // A more reliable way to get HH:mm format\n      initialData.due_time = `${localDate.getHours().toString().padStart(2, '0')}:${localDate.getMinutes().toString().padStart(2, '0')}`;\n    } else if (activity?.due_date) {\n      initialData.due_date = activity.due_date.split('T')[0]; // Ensure only date part is used\n      initialData.due_time = '';\n    } else if (!activity) {\n      initialData.due_date = new Date().toISOString().split('T')[0];\n    }\n    return initialData;\n  }, [activity, relatedTo, relatedId, offsetMinutes]);\n\n  const [formData, setFormData] = useState(getInitialFormData());\n\n  useEffect(() => {\n    setFormData(getInitialFormData());\n  }, [activity, relatedTo, relatedId, getInitialFormData]);\n\n  // NEW: Load user for admin check\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const currentUser = await User.me();\n        setUser(currentUser);\n      } catch (error) {\n        console.error('Failed to load current user:', error);\n        toast.error('Failed to load user information.');\n      } finally {\n        setLoadingUser(false);\n      }\n    };\n    if (!user && tenantId) { // Only load if user not already set and tenantId is available\n      loadUser();\n    }\n  }, [user, tenantId]);\n\n\n  // Load related data\n  useEffect(() => {\n    const loadRelatedData = async () => {\n      try {\n        if (tenantId) {\n          const [contactsData, accountsData, leadsData, opportunitiesData] = await Promise.all([\n            Contact.filter({ tenant_id: tenantId }),\n            Account.filter({ tenant_id: tenantId }),\n            Lead.filter({ tenant_id: tenantId }),\n            Opportunity.filter({ tenant_id: tenantId })\n          ]);\n\n          setContacts(contactsData);\n          setAccounts(accountsData);\n          setLeads(leadsData);\n          setOpportunities(opportunitiesData);\n        }\n      } catch (error) {\n        console.error('Error loading related data:', error);\n        toast.error('Failed to load related records.');\n      }\n    };\n\n    if (tenantId) {\n      loadRelatedData();\n    }\n  }, [tenantId]);\n\n  // NEW: Load notes for this activity\n  useEffect(() => {\n    const loadNotes = async () => {\n      if (!activity?.id) return;\n      \n      setLoadingNotes(true);\n      try {\n        const activityNotes = await Note.filter({\n          related_to: 'activity',\n          related_id: activity.id\n        }, '-created_date');\n        setNotes(activityNotes);\n      } catch (error) {\n        console.error('Failed to load activity notes:', error);\n      } finally {\n        setLoadingNotes(false);\n      }\n    };\n\n    if (activity?.id) {\n      loadNotes();\n    }\n  }, [activity?.id]);\n\n  // Update related records when related_to changes\n  useEffect(() => {\n    let records = [];\n    switch (formData.related_to) {\n      case 'contact':\n        records = contacts.map(c => ({\n          id: c.id,\n          name: `${c.first_name} ${c.last_name}`,\n          phone: c.phone || c.mobile,\n          email: c.email\n        }));\n        break;\n      case 'account':\n        records = accounts.map(a => ({\n          id: a.id,\n          name: a.name,\n          phone: a.phone,\n          email: null\n        }));\n        break;\n      case 'lead':\n        records = leads.map(l => ({\n          id: l.id,\n          name: `${l.first_name} ${l.last_name}`,\n          phone: l.phone,\n          email: l.email\n        }));\n        break;\n      case 'opportunity':\n        records = opportunities.map(o => ({\n          id: o.id,\n          name: o.name,\n          phone: null,\n          email: null\n        }));\n        break;\n      case 'none': // Handle 'none' value explicitly\n      default:\n        records = [];\n    }\n    setRelatedRecords(records);\n\n    // FIXED: Better logic for preserving related_id when editing\n    if (formData.related_to === 'none' || formData.related_to === null) {\n      // If no relationship type, clear the related_id\n      if (formData.related_id !== 'none') {\n        setFormData(prev => ({\n          ...prev,\n          related_id: 'none',\n        }));\n      }\n    } else if (records.length > 0) {\n      // Check if current related_id exists in the new records\n      const currentRecordExists = records.some(r => r.id === formData.related_id);\n      \n      if (!currentRecordExists && formData.related_id !== 'none') {\n        console.log('ActivityForm: Current related_id not found in records, resetting to none');\n        console.log('Current related_id:', formData.related_id);\n        console.log('Available records:', records.map(r => ({ id: r.id, name: r.name })));\n        \n        setFormData(prev => ({\n          ...prev,\n          related_id: 'none',\n        }));\n      } else if (currentRecordExists) {\n        console.log('ActivityForm: Related record found and preserved:', {\n          related_to: formData.related_to,\n          related_id: formData.related_id,\n          record_name: records.find(r => r.id === formData.related_id)?.name\n        });\n      }\n    }\n  }, [formData.related_to, formData.related_id, contacts, accounts, leads, opportunities]);\n\n  // Auto-populate contact info for AI calls\n  useEffect(() => {\n    if (formData.related_id && formData.related_id !== 'none') {\n      const record = relatedRecords.find(r => r.id === formData.related_id);\n      if (record) {\n        setSelectedRelatedRecord(record);\n        if (formData.type === 'scheduled_ai_call') {\n          setFormData(prev => ({\n            ...prev,\n            ai_call_config: {\n              ...prev.ai_call_config,\n              contact_name: record.name,\n              contact_phone: record.phone || ''\n            }\n          }));\n        }\n      }\n    } else {\n      if (formData.type === 'scheduled_ai_call') {\n        setFormData(prev => ({\n          ...prev,\n          ai_call_config: {\n            ...prev.ai_call_config,\n            contact_name: '',\n            contact_phone: ''\n          }\n        }));\n      }\n      setSelectedRelatedRecord(null);\n    }\n  }, [formData.type, formData.related_id, relatedRecords]);\n\n  const handleChange = useCallback((name, value) => {\n    setFormData(prev => {\n      if (name.startsWith('ai_call_config.')) {\n        const aiConfigField = name.split('.')[1];\n        return {\n          ...prev,\n          ai_call_config: {\n            ...prev.ai_call_config,\n            [aiConfigField]: value\n          }\n        };\n      }\n      if (name.startsWith('ai_email_config.')) {\n        const aiEmailConfigField = name.split('.')[1];\n        return {\n          ...prev,\n          ai_email_config: {\n            ...prev.ai_email_config,\n            [aiEmailConfigField]: value\n          }\n        };\n      }\n      return {\n        ...prev,\n        [name]: value\n      };\n    });\n  }, []);\n\n  // NEW: handleAddNote function\n  const handleAddNote = async () => {\n    if (!newNote.trim() || !activity?.id) return;\n    \n    try {\n      const noteData = {\n        tenant_id: tenantId,\n        related_to: 'activity',\n        related_id: activity.id,\n        title: 'Activity Note',\n        content: newNote.trim(),\n        type: 'general'\n      };\n      \n      const createdNote = await Note.create(noteData);\n      setNotes(prev => [createdNote, ...prev]);\n      setNewNote('');\n      toast.success('Note added successfully!');\n    } catch (error) {\n      console.error('Failed to add note:', error);\n      toast.error('Failed to add note');\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Prevent double submission from programmatic triggers or quick clicks\n    if (isSubmitting) {\n      console.warn('ActivityForm: Submission already in progress. Ignoring duplicate call.');\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    try {\n      if (!formData.subject) {\n        toast.error('Subject is required.');\n        setIsSubmitting(false); // Reset submitting state on validation failure\n        return;\n      }\n      if (!formData.due_date && (formData.type === 'call' || formData.type === 'meeting' || formData.type === 'demo' || formData.type === 'scheduled_ai_call')) {\n          toast.error('Due Date is required for calls, meetings, demos, and AI scheduled calls.');\n          setIsSubmitting(false); // Reset submitting state on validation failure\n          return;\n      }\n\n\n      if (!tenantId) {\n        toast.error('Error: No tenant ID provided. Cannot save activity.');\n        setIsSubmitting(false); // Reset submitting state on validation failure\n        return;\n      }\n\n      if (formData.type === 'scheduled_ai_call') {\n        if (!formData.due_time) {\n          toast.error('AI Call requires a Due Time.');\n          setIsSubmitting(false); // Reset submitting state on validation failure\n          return;\n        }\n        if (!formData.ai_call_config.contact_phone) {\n          toast.error('AI Call requires a Contact Phone.');\n          setIsSubmitting(false); // Reset submitting state on validation failure\n          return;\n        }\n        if (!formData.ai_call_config.prompt) {\n          toast.error('AI Call requires an AI Conversation Prompt.');\n          setIsSubmitting(false); // Reset submitting state on validation failure\n          return;\n        }\n        if (!formData.due_date) {\n          toast.error('AI Call requires a Due Date.');\n          setIsSubmitting(false); // Reset submitting state on validation failure\n          return;\n        }\n      }\n\n      if (formData.type === 'scheduled_ai_email') {\n        if (!formData.ai_email_config.subject_template) {\n          toast.error('AI Email requires a Subject Template.');\n          setIsSubmitting(false); // Reset submitting state on validation failure\n          return;\n        }\n        if (!formData.ai_email_config.body_prompt) {\n          toast.error('AI Email requires an AI Body Prompt.');\n          setIsSubmitting(false); // Reset submitting state on validation failure\n          return;\n        }\n      }\n\n      let processedData = { ...formData };\n\n      if (processedData.due_date && processedData.due_time) {\n\n        let timeString = processedData.due_time;\n\n        if (!/^\\d{2}:\\d{2}$/.test(timeString)) {\n          throw new Error(`Invalid time format: ${timeString}. Expected HH:MM in 24-hour format.`);\n        }\n\n        const utcDateTimeString = localToUtc(\n          processedData.due_date,\n          timeString,\n          offsetMinutes\n        );\n\n        const utcDateTime = new Date(utcDateTimeString);\n        processedData.due_date = utcDateTime.toISOString().split('T')[0];\n        processedData.due_time = utcDateTime.toISOString().split('T')[1].substring(0, 5);\n\n      } else if (processedData.due_date && !processedData.due_time) {\n        processedData.due_time = null;\n      } else {\n        processedData.due_date = null;\n        processedData.due_time = null;\n      }\n\n      let activityData = {\n        type: processedData.type,\n        subject: processedData.subject,\n        description: processedData.description || null,\n        status: processedData.status,\n        priority: processedData.priority,\n        assigned_to: processedData.assigned_to || null,\n        related_to: processedData.related_to === 'none' ? null : processedData.related_to,\n        related_id: processedData.related_id === 'none' ? null : processedData.related_id,\n        outcome: processedData.outcome || null,\n        location: processedData.location || null,\n        duration: processedData.duration ? parseInt(processedData.duration) : null,\n        is_test_data: processedData.is_test_data,\n        tenant_id: tenantId,\n        due_date: processedData.due_date,\n        due_time: processedData.due_time,\n      };\n\n      if (processedData.type === 'scheduled_ai_call') {\n        activityData.ai_call_config = processedData.ai_call_config;\n      }\n      if (processedData.type === 'scheduled_ai_email') {\n        activityData.ai_email_config = processedData.ai_email_config;\n      }\n\n      let result;\n      if (activity?.id) {\n        result = await Activity.update(activity.id, activityData);\n        toast.success('Activity updated successfully!');\n      } else {\n        result = await Activity.create(activityData);\n        toast.success('Activity created successfully!');\n      }\n\n      if (onSave) {\n        onSave(result);\n      }\n\n    } catch (error) {\n      console.error('Error saving activity:', error);\n      toast.error(`Error saving activity: ${error.message || 'Unknown error occurred'}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Options for Select components\n  const activityTypes = [\n    { value: 'task', label: 'Task' },\n    { value: 'email', label: 'Email' },\n    { value: 'call', label: 'Call' },\n    { value: 'meeting', label: 'Meeting' },\n    { value: 'demo', label: 'Demo' },\n    { value: 'proposal', label: 'Proposal' },\n    { value: 'note', label: 'Note' },\n    { value: 'scheduled_ai_call', label: 'AI Scheduled Call' },\n    { value: 'scheduled_ai_email', label: 'AI Scheduled Email' },\n  ];\n\n  const priorityOptions = [\n    { value: 'low', label: 'Low Priority' },\n    { value: 'normal', label: 'Normal Priority' },\n    { value: 'high', label: 'High Priority' },\n    { value: 'urgent', label: 'Urgent' },\n  ];\n\n  const statusOptions = [\n    { value: 'scheduled', label: 'Scheduled' },\n    { value: 'completed', label: 'Completed' },\n    { value: 'cancelled', label: 'Cancelled' },\n    { value: 'in-progress', label: 'In Progress' },\n  ];\n\n  return (\n      <div className=\"p-1 bg-slate-800 max-h-[85vh] overflow-y-auto\">\n        <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"activity-form\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"type\" className=\"text-slate-200\">Activity Type *</Label>\n              <Select value={formData.type} onValueChange={(value) => handleChange('type', value)}>\n                <SelectTrigger className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200\" data-testid=\"activity-type-select\">\n                  <SelectValue placeholder=\"Select type...\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700 z-[2147483010]\">\n                  {activityTypes.map((option) => (\n                    <SelectItem key={option.value} value={option.value} className=\"text-slate-200 hover:bg-slate-700\">\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"priority\" className=\"text-slate-200\">Priority</Label>\n              <Select value={formData.priority} onValueChange={(value) => handleChange('priority', value)}>\n                <SelectTrigger className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200\" data-testid=\"activity-priority-select\">\n                  <SelectValue placeholder=\"Select priority...\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700 z-[2147483010]\">\n                  {priorityOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value} className=\"text-slate-200 hover:bg-slate-700\">\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"subject\" className=\"text-slate-200\">Subject *</Label>\n            <Input\n              id=\"subject\"\n              value={formData.subject}\n              onChange={(e) => handleChange('subject', e.target.value)}\n              required\n              className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              placeholder=\"Enter activity subject\"\n              data-testid=\"activity-subject-input\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"due_date\" className=\"text-slate-200\">Due Date {['call', 'meeting', 'demo', 'scheduled_ai_call'].includes(formData.type) ? '*' : ''}</Label>\n              <Input\n                id=\"due_date\"\n                type=\"date\"\n                value={formData.due_date}\n                onChange={(e) => handleChange('due_date', e.target.value)}\n                className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                data-testid=\"activity-due-date-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"due_time\" className=\"text-slate-200\">Time {formData.type === 'scheduled_ai_call' ? '*' : ''}</Label>\n              <Select value={formData.due_time || \"\"} onValueChange={(value) => handleChange('due_time', value)}>\n                <SelectTrigger className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200\" data-testid=\"activity-due-time-select\">\n                  <SelectValue placeholder=\"Select time...\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700 z-[2147483010] max-h-[300px]\">\n                  {timeOptions.map((time) => (\n                    <SelectItem key={time} value={time} className=\"text-slate-200 hover:bg-slate-700\">\n                      {/* Format for display, e.g., 09:30 -> 9:30 AM */}\n                      {new Date(`1970-01-01T${time}:00`).toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"duration\" className=\"text-slate-200\">Duration (minutes)</Label>\n              <Input\n                id=\"duration\"\n                type=\"number\"\n                min=\"0\"\n                value={formData.duration}\n                onChange={(e) => handleChange('duration', e.target.value)}\n                className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                placeholder=\"30\"\n                data-testid=\"activity-duration-input\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"status\" className=\"text-slate-200\">Status</Label>\n              <Select value={formData.status} onValueChange={(value) => handleChange('status', value)}>\n                <SelectTrigger className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200\" data-testid=\"activity-status-select\">\n                  <SelectValue placeholder=\"Select status...\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700 z-[2147483010]\">\n                  {statusOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value} className=\"text-slate-200 hover:bg-slate-700\">\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"related_to\" className=\"text-slate-200\">Related To</Label>\n              <Select value={formData.related_to} onValueChange={(value) => handleChange('related_to', value)}>\n                <SelectTrigger className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200\" data-testid=\"activity-related-to-select\">\n                  <SelectValue placeholder=\"Select entity\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700 z-[2147483010]\">\n                  <SelectItem value=\"none\" className=\"text-slate-200 hover:bg-slate-700\">None</SelectItem>\n                  <SelectItem value=\"contact\" className=\"text-slate-200 hover:bg-slate-700\">Contact</SelectItem>\n                  <SelectItem value=\"account\" className=\"text-slate-200 hover:bg-slate-700\">Account</SelectItem>\n                  <SelectItem value=\"lead\" className=\"text-slate-200 hover:bg-slate-700\">Lead</SelectItem>\n                  <SelectItem value=\"opportunity\" className=\"text-slate-200 hover:bg-slate-700\">Opportunity</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"related_id\" className=\"text-slate-200\">Related Record</Label>\n              <Select\n                value={formData.related_id}\n                onValueChange={(value) => handleChange('related_id', value)}\n                disabled={!formData.related_to || formData.related_to === 'none'}\n              >\n                <SelectTrigger className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200\" data-testid=\"activity-related-record-select\">\n                  <SelectValue placeholder=\"Select record\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700 z-[2147483010] max-h-[300px]\">\n                  <SelectItem value=\"none\" className=\"text-slate-200 hover:bg-slate-700\">None</SelectItem>\n                  {relatedRecords.map((record) => (\n                    <SelectItem key={record.id} value={record.id} className=\"text-slate-200 hover:bg-slate-700\">\n                      {record.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"assigned_to\" className=\"text-slate-200\">Assigned To</Label>\n            <EmployeeSelector\n              value={formData.assigned_to}\n              onValueChange={(value) => handleChange('assigned_to', value)}\n              placeholder=\"Assign to employee...\"\n              tenantId={tenantId}\n              className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              data-testid=\"activity-assigned-to-select\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"location\" className=\"text-slate-200\">Location</Label>\n            <Input\n              id=\"location\"\n              value={formData.location}\n              onChange={(e) => handleChange('location', e.target.value)}\n              className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              placeholder=\"Meeting location or call details\"\n              data-testid=\"activity-location-input\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\" className=\"text-slate-200\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => handleChange('description', e.target.value)}\n              rows={4}\n              className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              placeholder=\"Activity details and notes...\"\n              data-testid=\"activity-description-textarea\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"outcome\" className=\"text-slate-200\">Outcome/Result</Label>\n            <Textarea\n              id=\"outcome\"\n              name=\"outcome\"\n              value={formData.outcome}\n              onChange={(e) => handleChange('outcome', e.target.value)}\n              placeholder=\"Activity outcome or result...\"\n              className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              data-testid=\"activity-outcome-textarea\"\n            />\n          </div>\n\n          {/* Notes Section (only show if editing existing activity) */}\n          {activity?.id && (\n            <div className=\"border border-slate-600 rounded-lg p-4 bg-slate-700/30\">\n              <h4 className=\"font-semibold text-slate-200 mb-3 flex items-center gap-2\">\n                <FileText className=\"w-4 h-4\" />\n                Activity Notes ({notes.length})\n              </h4>\n              \n              {/* Add new note */}\n              <div className=\"space-y-2 mb-4\">\n                <Textarea\n                  value={newNote}\n                  onChange={(e) => setNewNote(e.target.value)}\n                  placeholder=\"Add a note to this activity...\"\n                  className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                  rows={2}\n                />\n                <Button\n                  type=\"button\"\n                  onClick={handleAddNote}\n                  disabled={!newNote.trim()}\n                  size=\"sm\"\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  Add Note\n                </Button>\n              </div>\n\n              {/* Display existing notes */}\n              {loadingNotes ? (\n                <div className=\"flex items-center justify-center py-4\">\n                  <Loader2 className=\"w-5 h-5 animate-spin text-slate-400\" />\n                </div>\n              ) : notes.length > 0 ? (\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                  {notes.map((note) => (\n                    <div key={note.id} className=\"bg-slate-800 rounded p-3 border border-slate-600\">\n                      <p className=\"text-sm text-slate-300 whitespace-pre-wrap\">{note.content}</p>\n                      <p className=\"text-xs text-slate-500 mt-2\">\n                        {format(new Date(note.created_date), 'MMM d, yyyy h:mm a')} by {note.created_by || 'Unknown'}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-slate-400 italic\">No notes yet</p>\n              )}\n            </div>\n          )}\n\n          {formData.type === 'scheduled_ai_call' && (\n            <div className=\"p-4 border rounded-lg bg-slate-700/50 border-blue-700/50 space-y-4\">\n              <h4 className=\"font-semibold text-slate-200 flex items-center gap-2\"><Phone className=\"w-5 h-5 text-blue-400\" /> AI Call Configuration</h4>\n\n              <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div>\n                    <Label className=\"text-slate-200\">AI Provider *</Label>\n                    <Select\n                      value={formData.ai_call_config.ai_provider}\n                      onValueChange={(value) => handleChange('ai_call_config.ai_provider', value)}\n                    >\n                      <SelectTrigger className=\"mt-1 bg-slate-600 border-slate-500 text-slate-200\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-700 border-slate-600 z-[2147483010]\">\n                        <SelectItem value=\"callfluent\" className=\"text-slate-200 hover:bg-slate-500\">CallFluent</SelectItem>\n                        <SelectItem value=\"thoughtly\" className=\"text-slate-200 hover:bg-slate-500\">Thoughtly</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"call_objective\" className=\"text-slate-300\">Call Objective *</Label>\n                    <Select name=\"ai_call_config.call_objective\" onValueChange={(value) => handleChange('ai_call_config.call_objective', value)} value={formData.ai_call_config.call_objective}>\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                        <SelectValue placeholder=\"Select call objective\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200 z-[2147483010]\">\n                        <SelectItem value=\"follow_up\" className=\"hover:bg-slate-700\">Follow-up</SelectItem>\n                        <SelectItem value=\"qualification\" className=\"hover:bg-slate-700\">Qualification</SelectItem>\n                        <SelectItem value=\"appointment_setting\" className=\"hover:bg-slate-700\">Appointment Setting</SelectItem>\n                        <SelectItem value=\"customer_service\" className=\"hover:bg-slate-700\">Customer Service</SelectItem>\n                        <SelectItem value=\"survey\" className=\"hover:bg-slate-700\">Survey</SelectItem>\n                        <SelectItem value=\"custom\" className=\"hover:bg-slate-700\">Custom</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n              </div>\n\n              <div>\n                  <Label className=\"text-slate-200\">Max Duration (seconds)</Label>\n                  <Input\n                    type=\"number\"\n                    value={formData.ai_call_config.max_duration}\n                    onChange={(e) => handleChange('ai_call_config.max_duration', parseInt(e.target.value))}\n                    min=\"60\"\n                    max=\"1800\"\n                    className=\"mt-1 bg-slate-600 border-slate-500 text-slate-200 placeholder:text-slate-400 focus:border-slate-400\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div>\n                    <Label className=\"text-slate-200\">Contact Phone *</Label>\n                    <Input\n                      value={formData.ai_call_config.contact_phone}\n                      onChange={(e) => handleChange('ai_call_config.contact_phone', e.target.value)}\n                      placeholder=\"Auto-filled from related record\"\n                      required\n                      className=\"mt-1 bg-slate-600 border-slate-500 text-slate-200 placeholder:text-slate-400 focus:border-slate-400\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label className=\"text-slate-200\">Contact Name</Label>\n                    <Input\n                      value={formData.ai_call_config.contact_name}\n                      onChange={(e) => handleChange('ai_call_config.contact_name', e.target.value)}\n                      placeholder=\"Auto-filled from related record\"\n                      readOnly\n                      className=\"mt-1 bg-slate-600 border-slate-500 text-slate-200 placeholder:text-slate-400 focus:border-slate-400\"\n                    />\n                  </div>\n                </div>\n\n              <div>\n                <Label htmlFor=\"ai_prompt\" className=\"text-slate-300\">AI Prompt *</Label>\n                <Textarea\n                  id=\"ai_prompt\"\n                  name=\"ai_call_config.prompt\"\n                  value={formData.ai_call_config.prompt}\n                  onChange={(e) => handleChange(e.target.name, e.target.value)}\n                  placeholder=\"Enter the script or instructions for the AI. Use variables like {{contact_name}}.\"\n                  className=\"bg-slate-700 border-slate-600 text-slate-200\"\n                  rows={4}\n                  required\n                />\n              </div>\n            </div>\n          )}\n\n          {formData.type === 'scheduled_ai_email' && (\n            <div className=\"p-4 border rounded-lg bg-slate-700/50 border-green-700/50 space-y-4\">\n              <h4 className=\"font-semibold text-slate-200 flex items-center gap-2\"><Mail className=\"w-5 h-5 text-green-400\" /> AI Email Configuration</h4>\n              <div>\n                <Label htmlFor=\"email_subject_template\" className=\"text-slate-300\">Subject Template *</Label>\n                 <Input\n                  id=\"email_subject_template\"\n                  name=\"ai_email_config.subject_template\"\n                  value={formData.ai_email_config.subject_template}\n                  onChange={(e) => handleChange(e.target.name, e.target.value)}\n                  placeholder=\"e.g., Checking in with {{contact_name}}\"\n                  className=\"bg-slate-700 border-slate-600 text-slate-200\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"ai_email_prompt\" className=\"text-slate-300\">AI Body Prompt *</Label>\n                <Textarea\n                  id=\"ai_email_prompt\"\n                  name=\"ai_email_config.body_prompt\"\n                  value={formData.ai_email_config.body_prompt}\n                  onChange={(e) => handleChange(e.target.name, e.target.value)}\n                  placeholder=\"Describe the email content for the AI. Use variables like {{contact_name}} and {{company}}. E.g., 'Write a friendly follow-up email to {{contact_name}}...'\"\n                  className=\"bg-slate-700 border-slate-600 text-slate-200\"\n                  rows={4}\n                  required\n                />\n              </div>\n            </div>\n          )}\n\n          {/* ONLY show test data toggle to admins */}\n          {isAdmin && (\n            <div className=\"flex items-center space-x-2 p-4 bg-amber-900/20 border border-amber-700/50 rounded-lg\">\n              <Switch\n                id=\"is_test_data\"\n                checked={formData.is_test_data || false}\n                onCheckedChange={(checked) => handleChange('is_test_data', checked)}\n                className=\"data-[state=checked]:bg-amber-600\"\n                data-testid=\"activity-test-data-switch\"\n              />\n              <Label htmlFor=\"is_test_data\" className=\"text-amber-300 font-medium\">\n                Mark as Test Data\n              </Label>\n              <span className=\"text-xs text-amber-400 ml-2\">\n                (For admin cleanup purposes)\n              </span>\n            </div>\n          )}\n\n          <div className=\"flex justify-end gap-3 pt-6 border-t border-slate-600 sticky bottom-0 bg-slate-800 pb-2\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onCancel}\n              disabled={isSubmitting}\n              className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600 disabled:opacity-50\"\n              data-testid=\"activity-cancel-button\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"bg-indigo-600 hover:bg-indigo-700 text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"activity-save-button\"\n            >\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Saving...\n                </>\n              ) : (\n                <>\n                  <CalendarIcon className=\"w-4 h-4 mr-2\" />\n                  {activity ? 'Update Activity' : 'Create Activity'}\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\activities\\BulkActionsMenu.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ChevronDown, UserCheck, Tag, Trash2 } from \"lucide-react\";\nimport LazyEmployeeSelector from \"../shared/LazyEmployeeSelector\";\n\nexport default function BulkActionsMenu({ \n  selectedCount, \n  onBulkStatusChange, \n  onBulkAssign,\n  onBulkDelete,\n  selectAllMode = false,\n  totalCount = 0\n}) {\n  const [showStatusDialog, setShowStatusDialog] = useState(false);\n  const [showAssignDialog, setShowAssignDialog] = useState(false);\n  const [newStatus, setNewStatus] = useState(\"\");\n  const [newAssignee, setNewAssignee] = useState(\"\");\n\n  const displayCount = selectAllMode ? totalCount : selectedCount;\n  const countLabel = selectAllMode ? `All ${displayCount}` : displayCount;\n\n  const handleStatusChange = () => {\n    if (newStatus) {\n      onBulkStatusChange(newStatus);\n      setShowStatusDialog(false);\n      setNewStatus(\"\");\n    }\n  };\n\n  const handleAssign = () => {\n    onBulkAssign(newAssignee);\n    setShowAssignDialog(false);\n    setNewAssignee(\"\");\n  };\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n            Bulk Actions ({countLabel})\n            <ChevronDown className=\"w-4 h-4 ml-2\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"bg-slate-800 border-slate-700\">\n          <DropdownMenuLabel className=\"text-slate-200\">\n            Actions for {selectAllMode ? `all ${displayCount}` : displayCount} activity/activities\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator className=\"bg-slate-700\" />\n          <DropdownMenuItem \n            onClick={() => setShowStatusDialog(true)}\n            className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n          >\n            <Tag className=\"w-4 h-4 mr-2\" />\n            Change Status\n          </DropdownMenuItem>\n          <DropdownMenuItem \n            onClick={() => setShowAssignDialog(true)}\n            className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n          >\n            <UserCheck className=\"w-4 h-4 mr-2\" />\n            Assign To\n          </DropdownMenuItem>\n          <DropdownMenuSeparator className=\"bg-slate-700\" />\n          <DropdownMenuItem \n            onClick={onBulkDelete}\n            className=\"text-red-400 hover:bg-red-900/20 cursor-pointer\"\n          >\n            <Trash2 className=\"w-4 h-4 mr-2\" />\n            Delete Selected\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Status Change Dialog */}\n      <Dialog open={showStatusDialog} onOpenChange={setShowStatusDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle>Change Status for {countLabel} Activity/Activities</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Select a new status to apply to {selectAllMode ? 'all selected' : 'the selected'} activities.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"status\" className=\"text-slate-200\">New Status</Label>\n              <Select value={newStatus} onValueChange={setNewStatus}>\n                <SelectTrigger className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"Select status...\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"scheduled\" className=\"text-slate-200 hover:bg-slate-700\">Scheduled</SelectItem>\n                  <SelectItem value=\"in_progress\" className=\"text-slate-200 hover:bg-slate-700\">In Progress</SelectItem>\n                  <SelectItem value=\"completed\" className=\"text-slate-200 hover:bg-slate-700\">Completed</SelectItem>\n                  <SelectItem value=\"cancelled\" className=\"text-slate-200 hover:bg-slate-700\">Cancelled</SelectItem>\n                  <SelectItem value=\"overdue\" className=\"text-slate-200 hover:bg-slate-700\">Overdue</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowStatusDialog(false)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button onClick={handleStatusChange} disabled={!newStatus} className=\"bg-blue-600 hover:bg-blue-700\">\n              Update Status\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Assignment Dialog */}\n      <Dialog open={showAssignDialog} onOpenChange={setShowAssignDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle>Assign {countLabel} Activity/Activities</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Select an employee to assign {selectAllMode ? 'all selected' : 'the selected'} activities to.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"assignee\" className=\"text-slate-200\">Assign To</Label>\n              <LazyEmployeeSelector\n                value={newAssignee}\n                onValueChange={setNewAssignee}\n                placeholder=\"Select employee...\"\n                className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\"\n                contentClassName=\"bg-slate-800 border-slate-700\"\n                itemClassName=\"text-slate-200 hover:bg-slate-700\"\n                allowUnassigned={true}\n                showLoadingState={true}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAssignDialog(false)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button onClick={handleAssign} className=\"bg-blue-600 hover:bg-blue-700\">\n              Assign Activities\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\agents\\AgentChat.jsx","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":458,"column":43,"nodeType":"BlockStatement","messageId":"unexpected","endLine":458,"endColumn":45,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[17769,17769],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":462,"column":49,"nodeType":"BlockStatement","messageId":"unexpected","endLine":462,"endColumn":51,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[17918,17918],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":466,"column":60,"nodeType":"BlockStatement","messageId":"unexpected","endLine":466,"endColumn":62,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[18049,18049],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":582,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22955,23088],"text":"\n              Say &quot;What opportunities do I have open?\" or \"Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22955,23088],"text":"\n              Say &ldquo;What opportunities do I have open?\" or \"Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22955,23088],"text":"\n              Say &#34;What opportunities do I have open?\" or \"Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22955,23088],"text":"\n              Say &rdquo;What opportunities do I have open?\" or \"Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":582,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?&quot; or \"Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?&ldquo; or \"Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?&#34; or \"Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?&rdquo; or \"Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":582,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?\" or &quot;Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?\" or &ldquo;Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?\" or &#34;Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?\" or &rdquo;Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":582,"column":119,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?\" or \"Create a lead for Jane Doe at Acme, title Marketing Manager&quot;\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?\" or \"Create a lead for Jane Doe at Acme, title Marketing Manager&ldquo;\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?\" or \"Create a lead for Jane Doe at Acme, title Marketing Manager&#34;\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22955,23088],"text":"\n              Say \"What opportunities do I have open?\" or \"Create a lead for Jane Doe at Acme, title Marketing Manager&rdquo;\n            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useEffect, useMemo, useRef, useState, useCallback } from \"react\";\n// import { agentSDK } from \"@/agents\"; // TODO: Create src/agents file or remove this dependency\nconst agentSDK = null; // Temporary stub to fix build\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Send, MessageSquare, ExternalLink, Sparkles, RefreshCw, Trash2 } from \"lucide-react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { isValidId } from \"../shared/tenantUtils\";\n\nimport { User } from \"@/api/entities\";\nimport { Lead } from \"@/api/entities\";\nimport { Opportunity } from \"@/api/entities\";\nimport { Activity } from \"@/api/entities\";\nimport { Account } from \"@/api/entities\";\nimport MicButton from \"../ai/MicButton\";\nimport { generateElevenLabsSpeech } from \"@/api/functions\";\n\n// Helper to strip tenant context from display\nfunction stripTenantContext(content) {\n  if (!content) return content;\n  return content.replace(/^\\[Client ID:.*?\\]\\n?/, '');\n}\n\n// Helper to strip markdown for TTS\nfunction stripMarkdownForTTS(text) {\n  if (!text) return '';\n  return text\n    .replace(/\\*\\*\\*(.*?)\\*\\*\\*/g, '$1') // Bold+italic\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1')     // Bold\n    .replace(/\\*(.*?)\\*/g, '$1')         // Italic\n    .replace(/`(.*?)`/g, '$1')           // Inline code\n    .replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1')  // Links\n    .replace(/#+\\s/g, '')                // Headers\n    .replace(/>\\s/g, '')                 // Blockquotes\n    .replace(/[-*+]\\s/g, '')             // List markers (e.g., -, *, +)\n    .replace(/^-+\\s*$/gm, '')            // Horizontal rules (e.g., ---)\n    .replace(/\\n\\s*\\n/g, '\\n\\n')         // Reduce multiple empty lines to one\n    .trim();\n}\n\nfunction Bubble({ role, content }) {\n  const isUser = role === \"user\";\n  const displayContent = isUser ? stripTenantContext(content) : content;\n  \n  return (\n    <div className={`flex ${isUser ? \"justify-end\" : \"justify-start\"} my-1 gap-2`}>\n      <div className={`${isUser ? \"bg-blue-600 text-white\" : \"bg-slate-800 text-slate-200\"} px-3 py-2 rounded-xl max-w-[80%]`}>\n        {isUser ? (\n          <p className=\"whitespace-pre-wrap\">{displayContent}</p>\n        ) : (\n          <ReactMarkdown \n            className=\"prose prose-sm prose-invert max-w-none\"\n            components={{\n              p: ({children}) => <p className=\"my-1 whitespace-pre-wrap\">{children}</p>,\n              strong: ({children}) => <strong className=\"font-bold text-slate-100\">{children}</strong>,\n              em: ({children}) => <em className=\"italic\">{children}</em>,\n              ul: ({children}) => <ul className=\"list-disc list-inside my-1\">{children}</ul>,\n              ol: ({children}) => <ol className=\"list-decimal list-inside my-1\">{children}</ol>,\n              li: ({children}) => <li className=\"my-0.5\">{children}</li>,\n              code: ({inline, children}) => \n                inline ? \n                  <code className=\"bg-slate-700 px-1 py-0.5 rounded text-sm\">{children}</code> :\n                  <code className=\"block bg-slate-700 p-2 rounded my-1\">{children}</code>\n            }}\n          >\n            {displayContent || \"\"}\n          </ReactMarkdown>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default function AgentChat({ agentName = \"crm_assistant\", tenantId, tenantName, voiceEnabled = true }) {\n  const [conversation, setConversation] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [sending, setSending] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [input, setInput] = useState(\"\");\n  const [micActive, setMicActive] = useState(false);\n  const unsubRef = useRef(null);\n  const [contextLoading, setContextLoading] = useState(false);\n  const didContextRef = useRef(false);\n  const audioRef = useRef(null);\n  const urlRef = useRef(null);\n  const lastMessageCountRef = useRef(0);\n\n  useEffect(() => {\n    if (!tenantId || typeof tenantId !== 'string' || !isValidId(tenantId)) {\n      console.error('[AgentChat] Invalid or missing tenant ID:', tenantId);\n    } else {\n      console.log('[AgentChat] Active tenant context:', { tenantId, tenantName });\n    }\n  }, [tenantId, tenantName]);\n\n  const whatsappUrl = useMemo(() => {\n    try {\n      return agentSDK.getWhatsAppConnectURL(agentName);\n    } catch {\n      return null;\n    }\n  }, [agentName]);\n\n  // DEBUG: Log mic state changes in parent component\n  useEffect(() => {\n    console.log('[AgentChat] Current state:', { micActive, voiceEnabled, messageCount: messages.length });\n  }, [micActive, voiceEnabled, messages.length]);\n\n  const injectContextPrimer = useCallback(async (convo) => {\n    if (!convo || !tenantId) {\n      console.error('[AgentChat] Cannot inject context: missing conversation or tenant ID');\n      return;\n    }\n    \n    if (typeof tenantId !== 'string' || !isValidId(tenantId)) {\n      console.error('[AgentChat] Invalid tenant ID format, blocking context injection:', tenantId);\n      return;\n    }\n    \n    try {\n      setContextLoading(true);\n      const me = await User.me().catch(() => null);\n      if (!me) {\n        console.error('[AgentChat] User not authenticated, cannot inject context');\n        return;\n      }\n\n      const filter = { tenant_id: tenantId };\n      \n      console.log('[AgentChat] Loading context with STRICT tenant filter:', filter);\n      \n      const [recentActivities, openOpps, hotLeads, keyAccounts] = await Promise.all([\n        Activity.filter({ ...filter, status: { $in: [\"completed\", \"in-progress\", \"scheduled\"] } }, \"-created_date\", 5).catch((e) => {\n          console.error('[AgentChat] Failed to fetch activities for tenant:', tenantId, e);\n          return [];\n        }),\n        Opportunity.filter({ ...filter, stage: { $nin: [\"closed_won\", \"closed_lost\"] } }, \"-updated_date\", 5).catch((e) => {\n          console.error('[AgentChat] Failed to fetch opportunities for tenant:', tenantId, e);\n          return [];\n        }),\n        Lead.filter({ ...filter, status: { $in: [\"new\", \"contacted\", \"qualified\"] } }, \"-created_date\", 5).catch((e) => {\n          console.error('[AgentChat] Failed to fetch leads for tenant:', tenantId, e);\n          return [];\n        }),\n        Account.filter(filter, \"-updated_date\", 3).catch((e) => {\n          console.error('[AgentChat] Failed to fetch accounts for tenant:', tenantId, e);\n          return [];\n        }),\n      ]);\n\n      console.log('[AgentChat] Context loaded:', {\n        tenant: tenantId,\n        activities: recentActivities.length,\n        opportunities: openOpps.length,\n        leads: hotLeads.length,\n        accounts: keyAccounts.length\n      });\n\n      const verifyTenant = (records, entityType) => {\n        const wrongTenant = records.filter(r => r.tenant_id !== tenantId);\n        if (wrongTenant.length > 0) {\n          console.error(`[AgentChat] TENANT ISOLATION BREACH: ${wrongTenant.length} ${entityType} records from wrong tenant!`, {\n            expected: tenantId,\n            found: wrongTenant.map(r => ({ id: r.id, tenant_id: r.tenant_id }))\n          });\n          return records.filter(r => r.tenant_id === tenantId);\n        }\n        return records;\n      };\n\n      const safeActivities = verifyTenant(recentActivities, 'Activity');\n      const safeOpps = verifyTenant(openOpps, 'Opportunity');\n      const safeLeads = verifyTenant(hotLeads, 'Lead');\n      const safeAccounts = verifyTenant(keyAccounts, 'Account');\n\n      const lines = [];\n      lines.push(`Context for ${me.email} (role: ${me.role}) ΓÇó Client: ${tenantName || tenantId}`);\n      \n      if (safeActivities.length) {\n        lines.push(`Recent activities (${safeActivities.length}): ${safeActivities.map(a => a.subject).slice(0,3).join(\"; \")}`);\n      }\n      if (safeOpps.length) {\n        const topOpps = safeOpps.slice(0,3).map(o => `${o.name} ($${o.amount || 0}, ${o.stage})`);\n        lines.push(`Open opps (${safeOpps.length}): ${topOpps.join(\"; \")}`);\n      }\n      if (safeLeads.length) {\n        const topLeads = safeLeads.slice(0,3).map(l => `${l.first_name} ${l.last_name}${l.company ? \" @ \" + l.company : \"\"}`);\n        lines.push(`Active leads (${safeLeads.length}): ${topLeads.join(\"; \")}`);\n      }\n      if (safeAccounts.length) {\n        const topAccts = safeAccounts.slice(0,3).map(a => a.name);\n        lines.push(`Key accounts: ${topAccts.join(\"; \")}`);\n      }\n      \n      if (lines.length === 1) {\n        lines.push(\"No recent data found yetΓÇöask me to create a lead or log an activity to get started.\");\n      }\n\n      console.log('[AgentChat] Γ£ô Context refreshed successfully for tenant:', tenantId);\n      \n      didContextRef.current = true;\n    } catch (error) {\n      console.error('[AgentChat] Failed to inject context primer:', error);\n    } finally {\n      setContextLoading(false);\n    }\n  }, [tenantId, tenantName]);\n\n  const handleSend = useCallback(async (messageText) => {\n    // Allow passing message directly (for voice input) or use state\n    const text = messageText ? messageText.trim() : (input || \"\").trim();\n    if (!text || !conversation || sending) return;\n    \n    if (!tenantId) {\n      alert('Please select a client before sending messages');\n      return;\n    }\n    \n    setSending(true);\n    try {\n      // Add tenant context for the agent but it will be hidden in display\n      const messageWithContext = `[Client ID: ${tenantId}${tenantName ? ` | Client Name: ${tenantName}` : ''}]\\n${text}`;\n      \n      console.log('[AgentChat] Sending message with client context:', { tenantId, tenantName });\n      \n      await agentSDK.addMessage(conversation, { \n        role: \"user\", \n        content: messageWithContext\n      });\n      setInput(\"\");\n    } catch (e) {\n      console.error(\"[AgentChat] Send failed:\", e);\n    } finally {\n      setSending(false);\n    }\n  }, [input, conversation, sending, tenantId, tenantName]);\n\n  // Listen for voice input results from MicButton\n  useEffect(() => {\n    const handleVoiceResult = (event) => {\n      const { transcript } = event.detail || {};\n      if (transcript && transcript.trim()) {\n        console.log('[AgentChat] Voice result received, auto-sending:', transcript);\n        // Send immediately with the transcript\n        handleSend(transcript);\n      }\n    };\n\n    window.addEventListener('chat:voice-result', handleVoiceResult);\n    console.log('[AgentChat] Listening for voice input events');\n\n    return () => {\n      window.removeEventListener('chat:voice-result', handleVoiceResult);\n    };\n  }, [handleSend]);\n\n  // Listen for mic state changes\n  useEffect(() => {\n    const handleMicChange = (event) => {\n      const { active } = event.detail || {};\n      console.log('[AgentChat] Mic state changed:', active);\n      setMicActive(active);\n    };\n\n    window.addEventListener('chat:mic-active', handleMicChange);\n    console.log('[AgentChat] Registered mic-active listener');\n\n    return () => {\n      window.removeEventListener('chat:mic-active', handleMicChange);\n    };\n  }, []);\n\n  // AUTO-PLAY audio when new AI message arrives and mic is active\n  useEffect(() => {\n    if (!micActive || !messages.length) return;\n    \n    const lastMessage = messages[messages.length - 1];\n    const isNewAIMessage = \n      lastMessage?.role === 'assistant' && \n      messages.length > lastMessageCountRef.current;\n    \n    if (isNewAIMessage) {\n      lastMessageCountRef.current = messages.length;\n      \n      // Auto-play the audio\n      const playAudio = async () => {\n        try {\n          // CRITICAL: Strip markdown and check if message has content\n          const rawText = (lastMessage.content || '').trim();\n          const messageText = stripMarkdownForTTS(rawText);\n          \n          if (!messageText) {\n            console.warn('[AgentChat] Message content is empty after markdown stripping, skipping audio');\n            window.dispatchEvent(new CustomEvent(\"chat:unlock-open\"));\n            return;\n          }\n\n          // Clean up previous audio\n          if (audioRef.current) {\n            try { audioRef.current.pause(); } catch (e) { console.warn(\"Error pausing previous audio\", e); }\n            audioRef.current = null;\n          }\n          if (urlRef.current) {\n            try { URL.revokeObjectURL(urlRef.current); } catch (e) { console.warn(\"Error revoking previous audio URL\", e); }\n            urlRef.current = null;\n          }\n\n          console.log('[AgentChat] Auto-playing audio for new message:', messageText.substring(0, 50) + '...');\n          console.log('[AgentChat] Message length:', messageText.length, 'characters');\n          \n          const resp = await generateElevenLabsSpeech({ \n            text: messageText, \n            voice_id: \"21m00Tcm4TlvDq8ikWAM\" \n          });\n\n          const data = resp?.data;\n          let blob;\n\n          if (data?.audio_base64 && typeof data.audio_base64 === \"string\") {\n            const decoded = Uint8Array.from(atob(data.audio_base64), c => c.charCodeAt(0));\n            blob = new Blob([decoded], { type: \"audio/mpeg\" });\n            console.log('[AgentChat] Audio blob created, size:', blob.size, 'bytes');\n          }\n\n          if (blob && blob.size > 0) {\n            const url = URL.createObjectURL(blob);\n            urlRef.current = url;\n            const audio = new Audio(url);\n            audio.preload = \"auto\";\n            audioRef.current = audio;\n\n            // Better event handling\n            audio.onended = () => {\n              console.log('[AgentChat] Audio playback ended naturally');\n              // Add delay before unlocking to prevent premature restart\n              setTimeout(() => {\n                window.dispatchEvent(new CustomEvent(\"chat:unlock-open\"));\n              }, 500);\n            };\n\n            audio.onerror = (e) => {\n              console.error('[AgentChat] Audio playback error:', e);\n              setTimeout(() => {\n                window.dispatchEvent(new CustomEvent(\"chat:unlock-open\"));\n              }, 500);\n            };\n\n            audio.onpause = () => {\n              console.warn('[AgentChat] Audio was paused unexpectedly');\n            };\n\n            audio.onabort = () => {\n              console.warn('[AgentChat] Audio was aborted');\n            };\n\n            // Lock the mic BEFORE playing\n            window.dispatchEvent(new CustomEvent(\"chat:lock-open\"));\n            console.log('[AgentChat] Mic locked, starting audio playback');\n            \n            // Add small delay before playing to ensure lock takes effect\n            await new Promise(resolve => setTimeout(resolve, 200));\n            \n            await audio.play();\n            console.log('[AgentChat] Audio playback started, duration:', audio.duration || 'unknown', 'seconds');\n          } else {\n            console.warn('[AgentChat] No audio blob generated or blob is empty.');\n            window.dispatchEvent(new CustomEvent(\"chat:unlock-open\"));\n          }\n        } catch (error) {\n          console.error('[AgentChat] Auto-play audio failed:', error);\n          window.dispatchEvent(new CustomEvent(\"chat:unlock-open\"));\n        }\n      };\n\n      playAudio();\n    }\n  }, [messages, micActive]);\n\n\n  useEffect(() => {\n    let mounted = true;\n\n    const init = async () => {\n      setLoading(true);\n      didContextRef.current = false;\n      lastMessageCountRef.current = 0; // Reset message count on init\n      \n      try {\n        const storageKey = `agent_conversation_${agentName}_${tenantId || 'default'}`;\n        const savedConvId = localStorage.getItem(storageKey);\n        \n        let convo = null;\n        \n        if (savedConvId) {\n          try {\n            convo = await agentSDK.getConversation(savedConvId);\n            console.log('[AgentChat] Loaded saved conversation:', savedConvId);\n          } catch (error) {\n            console.warn('[AgentChat] Saved conversation not found, creating new one:', error);\n            localStorage.removeItem(storageKey);\n          }\n        }\n        \n        if (!convo) {\n          convo = await agentSDK.createConversation({\n            agent_name: agentName,\n            metadata: {\n              name: \"Ai-SHA Executive Assistant\",\n              description: \"Context-aware CRM assistant with memory\",\n              tenant_id: tenantId,\n              tenant_name: tenantName\n            }\n          });\n          localStorage.setItem(storageKey, convo.id);\n          console.log('[AgentChat] Created new conversation:', convo.id, 'for tenant:', tenantId);\n          \n          try {\n            await agentSDK.addMessage(convo, {\n              role: \"assistant\",\n              content: \"Hi, how may I help?\"\n            });\n          } catch (greetErr) {\n            console.warn('[AgentChat] Failed to add greeting message:', greetErr);\n          }\n        }\n        \n        if (!mounted) return;\n        setConversation(convo);\n        \n        const conversationMessages = (convo?.messages || []).filter(m => m.role !== 'system');\n        \n        if (conversationMessages.length === 0) {\n          setMessages([{ role: 'assistant', content: 'Hi, how may I help?' }]);\n        } else {\n          setMessages(conversationMessages);\n        }\n        lastMessageCountRef.current = conversationMessages.length || 1; // Initialize for existing messages\n\n        unsubRef.current = agentSDK.subscribeToConversation(convo.id, (data) => {\n          setMessages((data.messages || []).filter(m => m.role !== 'system'));\n        });\n\n        if (!didContextRef.current) {\n          await injectContextPrimer(convo);\n        }\n      } catch (e) {\n        console.error(\"[AgentChat] init failed:\", e);\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    };\n\n    init();\n    return () => {\n      mounted = false;\n      if (unsubRef.current) {\n        try { unsubRef.current(); } catch {}\n      }\n      // Clean up any playing audio when component unmounts\n      if (audioRef.current) {\n        try { audioRef.current.pause(); } catch {}\n        audioRef.current = null;\n      }\n      if (urlRef.current) {\n        try { URL.revokeObjectURL(urlRef.current); } catch {}\n        urlRef.current = null;\n      }\n    };\n  }, [agentName, tenantId, tenantName, injectContextPrimer]);\n\n\n  if (loading) {\n    return (\n      <div className=\"h-[70vh] flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <Card className=\"bg-slate-800 border-slate-700 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-9 h-9 rounded-lg bg-slate-700 flex items-center justify-center\">\n              <Sparkles className=\"w-5 h-5 text-cyan-400\" />\n            </div>\n            <div>\n              <div className=\"text-slate-100 font-semibold\">Ai-SHA</div>\n              <div className=\"text-slate-400 text-sm\">{tenantName || tenantId || 'No client selected'}</div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              className=\"bg-slate-900 border-slate-600 text-slate-200 hover:bg-slate-700\"\n              onClick={() => conversation && injectContextPrimer(conversation)}\n              disabled={contextLoading || !conversation || !tenantId}\n            >\n              <RefreshCw className={`w-4 h-4 mr-2 ${contextLoading ? \"animate-spin\" : \"\"}`} />\n              {contextLoading ? \"RefreshingΓÇª\" : \"Refresh context\"}\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"bg-slate-900 border-slate-600 text-red-400 hover:bg-slate-700 hover:text-red-300\"\n              onClick={async () => {\n                if (window.confirm('Clear this conversation and start fresh?')) {\n                  try {\n                    if (unsubRef.current) unsubRef.current();\n                    \n                    const newConvo = await agentSDK.createConversation({\n                      agent_name: agentName,\n                      metadata: {\n                        name: \"Ai-SHA Executive Assistant\",\n                        description: \"Context-aware CRM assistant with memory\",\n                        tenant_id: tenantId,\n                        tenant_name: tenantName\n                      }\n                    });\n                    \n                    const storageKey = `agent_conversation_${agentName}_${tenantId || 'default'}`;\n                    localStorage.setItem(storageKey, newConvo.id);\n                    \n                    setConversation(newConvo);\n                    setMessages([]);\n                    didContextRef.current = false;\n                    lastMessageCountRef.current = 0; // Reset message count after clear\n                    \n                    try {\n                      await agentSDK.addMessage(newConvo, {\n                        role: \"assistant\",\n                        content: \"Hi, how may I help?\"\n                      });\n                      setMessages([{ role: 'assistant', content: 'Hi, how may I help?' }]);\n                    } catch (greetErr) {\n                      console.warn('[AgentChat] Failed to add greeting message to cleared conversation:', greetErr);\n                      setMessages([{ role: 'assistant', content: 'Hi, how may I help?' }]);\n                    }\n                    lastMessageCountRef.current = 1; // For the initial greeting message\n\n                    unsubRef.current = agentSDK.subscribeToConversation(newConvo.id, (data) => {\n                      setMessages((data.messages || []).filter(m => m.role !== 'system'));\n                    });\n                    \n                    await injectContextPrimer(newConvo);\n                  } catch (e) {\n                    console.error('Failed to clear conversation:', e);\n                  }\n                }\n              }}\n              disabled={!conversation}\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Clear conversation\n            </Button>\n            {whatsappUrl && (\n              <a href={whatsappUrl} target=\"_blank\" rel=\"noreferrer\">\n                <Button variant=\"outline\" className=\"bg-slate-900 border-slate-600 text-slate-200 hover:bg-slate-700\">\n                  <MessageSquare className=\"w-4 h-4 mr-2\" />\n                  WhatsApp\n                  <ExternalLink className=\"w-3 h-3 ml-2\" />\n                </Button>\n              </a>\n            )}\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"bg-slate-800 border-slate-700 p-4 h-[60vh] flex flex-col\">\n        <div className=\"flex-1 overflow-y-auto pr-1\">\n          {messages?.length ? (\n            messages.map((m, idx) => (\n              <Bubble \n                key={idx} \n                role={m.role} \n                content={m.content} \n              />\n            ))\n          ) : (\n            <div className=\"text-slate-400 text-sm\">\n              Say \"What opportunities do I have open?\" or \"Create a lead for Jane Doe at Acme, title Marketing Manager\"\n            </div>\n          )}\n        </div>\n\n        <div className=\"mt-3 flex items-center gap-2\">\n          <input\n            className=\"flex-1 bg-slate-900 border border-slate-700 rounded-lg px-3 py-2 text-slate-200 outline-none focus:border-slate-500\"\n            placeholder=\"Type a messageΓÇª\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyDown={(e) => { if (e.key === \"Enter\" && !e.shiftKey) { e.preventDefault(); handleSend(); } }}\n            disabled={!tenantId}\n          />\n          {voiceEnabled && (\n            <MicButton \n              disabled={!tenantId}\n            />\n          )}\n          <Button onClick={() => handleSend()} disabled={sending || !input.trim() || !tenantId} className=\"bg-blue-600 hover:bg-blue-700\">\n            {sending ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : <Send className=\"w-4 h-4\" />}\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\AIAssistantWidget.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[268,273],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setBriefingEnabled' is assigned a value but never used.","line":21,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"setBriefingEnabled"},"fix":{"range":[1053,1073],"text":""},"desc":"Remove unused variable 'setBriefingEnabled'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'checkMicrophonePermissions' is assigned a value but never used.","line":242,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":242,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"checkMicrophonePermissions"},"fix":{"range":[9111,10183],"text":""},"desc":"Remove unused variable 'checkMicrophonePermissions'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":646,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":646,"endColumn":18},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":815,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[31659,31679],"text":"\n                  &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[31659,31679],"text":"\n                  &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[31659,31679],"text":"\n                  &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[31659,31679],"text":"\n                  &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":815,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[31698,31716],"text":"&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[31698,31716],"text":"&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[31698,31716],"text":"&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[31698,31716],"text":"&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":841,"column":156,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[32819,32918],"text":" icon in your browser&apos;s address bar ΓåÆ Allow microphone access ΓåÆ Refresh page\n                      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[32819,32918],"text":" icon in your browser&lsquo;s address bar ΓåÆ Allow microphone access ΓåÆ Refresh page\n                      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[32819,32918],"text":" icon in your browser&#39;s address bar ΓåÆ Allow microphone access ΓåÆ Refresh page\n                      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[32819,32918],"text":" icon in your browser&rsquo;s address bar ΓåÆ Allow microphone access ΓåÆ Refresh page\n                      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":852,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[33252,33290],"text":"Hello! I&apos;m Ai-SHA, your CRM assistant."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[33252,33290],"text":"Hello! I&lsquo;m Ai-SHA, your CRM assistant."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[33252,33290],"text":"Hello! I&#39;m Ai-SHA, your CRM assistant."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[33252,33290],"text":"Hello! I&rsquo;m Ai-SHA, your CRM assistant."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { MessageCircle, X, Mic, MicOff, Volume2, VolumeX, Loader2 } from 'lucide-react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { toast } from \"sonner\";\nimport { generateDailyBriefing } from \"@/api/functions\";\nimport { generateElevenLabsSpeech } from \"@/api/functions\";\nimport { processChatCommand } from \"@/api/functions\";\n\nexport default function AIAssistantWidget({ user }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [speechRecognition, setSpeechRecognition] = useState(null);\n  const [briefingEnabled, setBriefingEnabled] = useState(true);\n  const [hasBriefedToday, setHasBriefingToday] = useState(false);\n  const [currentAudio, setCurrentAudio] = useState(null);\n  const [voiceEnabled, setVoiceEnabled] = useState(true);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [micPermissionStatus, setMicPermissionStatus] = useState('unknown');\n  const [permissionError, setPermissionError] = useState('');\n  const [isDetectingVoice, setIsDetectingVoice] = useState(false);\n  const [currentTranscript, setCurrentTranscript] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false); // Add processing state to prevent loops\n\n  const messagesEndRef = useRef(null);\n  const recognitionRef = useRef(null);\n  const timerIntervalRef = useRef(null);\n\n  // Refs to hold mutable state/callback values for stable useEffect closures\n  const isListeningRef = useRef(isListening);\n  const currentTranscriptRef = useRef(currentTranscript);\n  const handleSendMessageRef = useRef(() => {}); // Will be updated by useEffect\n  const stopVoiceModeRef = useRef(() => {}); // Will be updated by useEffect\n  const isProcessingRef = useRef(isProcessing); // New ref for isProcessing\n  const isLoadingRef = useRef(isLoading); // New ref for isLoading\n  const processVoiceMessageRef = useRef(() => {}); // New ref for processVoiceMessage\n\n  // Update refs whenever the corresponding state/callback changes\n  useEffect(() => { isListeningRef.current = isListening; }, [isListening]);\n  useEffect(() => { currentTranscriptRef.current = currentTranscript; }, [currentTranscript]);\n  useEffect(() => { isProcessingRef.current = isProcessing; }, [isProcessing]);\n  useEffect(() => { isLoadingRef.current = isLoading; }, [isLoading]);\n\n\n  // Format time remaining for display\n  const formatTimeRemaining = useCallback((seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  const stopSpeaking = useCallback(() => {\n    if (currentAudio) {\n      currentAudio.pause();\n      currentAudio.currentTime = 0;\n      setCurrentAudio(null);\n    }\n    \n    if ('speechSynthesis' in window) {\n      window.speechSynthesis.cancel();\n    }\n    \n    setIsSpeaking(false);\n  }, [currentAudio]);\n\n  // Separate fallback function to avoid repetition\n  const fallbackToWebSpeech = useCallback((text) => {\n    if (!voiceEnabled || !text || typeof text !== 'string' || text.trim().length === 0) {\n      console.log('Γ¥î Cannot speak (fallback): voiceEnabled =', voiceEnabled, 'text =', text);\n      return;\n    }\n\n    if ('speechSynthesis' in window) {\n      try {\n        window.speechSynthesis.cancel();\n        \n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.rate = 0.9;\n        utterance.pitch = 1.1;\n        utterance.volume = 0.8;\n        \n        // Try to find a female voice\n        const voices = window.speechSynthesis.getVoices();\n        const femaleVoice = voices.find(voice => \n          voice.name.toLowerCase().includes('female') || \n          voice.name.toLowerCase().includes('samantha') ||\n          voice.name.toLowerCase().includes('karen') ||\n          voice.name.toLowerCase().includes('susan')\n        );\n        \n        if (femaleVoice) {\n          utterance.voice = femaleVoice;\n        }\n        \n        utterance.onstart = () => {\n          console.log('≡ƒöè Web Speech API started');\n          setIsSpeaking(true);\n        };\n        utterance.onend = () => {\n          console.log('≡ƒöè Web Speech API ended');\n          setIsSpeaking(false);\n        };\n        utterance.onerror = (error) => {\n          console.error('≡ƒöè Web Speech API error:', error);\n          setIsSpeaking(false);\n        };\n        \n        window.speechSynthesis.speak(utterance);\n        console.log('≡ƒöè Using browser TTS fallback');\n      } catch (webSpeechError) {\n        console.error('Γ¥î Web Speech API also failed:', webSpeechError);\n        setIsSpeaking(false);\n      }\n    } else {\n      console.warn('Γ¥î No speech synthesis available');\n      setIsSpeaking(false);\n    }\n  }, [voiceEnabled]);\n\n  const speakText = useCallback(async (text) => {\n    if (!voiceEnabled || !text || typeof text !== 'string' || text.trim().length === 0) {\n      console.log('Γ¥î Cannot speak: voiceEnabled =', voiceEnabled, 'text =', text);\n      return;\n    }\n    \n    try {\n      // Stop any current speech\n      stopSpeaking();\n      \n      setIsSpeaking(true);\n\n      // Try ElevenLabs first (premium voice - Rachel)\n      console.log('≡ƒÄ╡ Calling ElevenLabs TTS with text:', text.substring(0, Math.min(text.length, 50)) + '...');\n      \n      const response = await generateElevenLabsSpeech({\n        text: text.trim(), // Ensure text is properly passed and trimmed\n        voice_id: '21m00Tcm4TlvDq8ikWAM' // Rachel - professional female voice\n      });\n\n      if (response && response.data && response.data.success) {\n        // Play ElevenLabs audio\n        console.log('Γ£à ElevenLabs response received, creating audio...');\n        const audioBlob = new Blob([\n          Uint8Array.from(atob(response.data.audio_base64), c => c.charCodeAt(0))\n        ], { type: 'audio/mpeg' });\n        \n        const audioUrl = URL.createObjectURL(audioBlob);\n        const audio = new Audio(audioUrl);\n        \n        setCurrentAudio(audio);\n        \n        audio.onended = () => {\n          console.log('≡ƒÄ╡ Audio playback ended');\n          setIsSpeaking(false);\n          setCurrentAudio(null);\n          URL.revokeObjectURL(audioUrl);\n        };\n        \n        audio.onerror = (error) => {\n          console.warn('Γ¥î ElevenLabs audio playback failed:', error);\n          setIsSpeaking(false);\n          setCurrentAudio(null);\n          URL.revokeObjectURL(audioUrl);\n          fallbackToWebSpeech(text);\n        };\n        \n        try {\n          await audio.play();\n          console.log('Γ£¿ Using ElevenLabs premium voice (Rachel)');\n        } catch (playError) {\n          console.warn('Γ¥î Audio play failed:', playError);\n          fallbackToWebSpeech(text);\n        }\n        \n      } else {\n        console.warn('Γ¥î ElevenLabs response unsuccessful:', response?.data);\n        fallbackToWebSpeech(text);\n      }\n      \n    } catch (error) {\n      console.warn('Γ¥î ElevenLabs TTS failed:', error.message);\n      setIsSpeaking(false);\n      fallbackToWebSpeech(text);\n    }\n  }, [voiceEnabled, stopSpeaking, fallbackToWebSpeech]);\n\n  const triggerDailyBriefing = useCallback(async () => {\n    if (isLoading) return;\n    \n    setIsLoading(true);\n    \n    try {\n      console.log('≡ƒîà Generating daily briefing...');\n      \n      const response = await generateDailyBriefing();\n      \n      if (response.data && response.data.success) {\n        const briefingMessage = {\n          role: 'assistant',\n          content: response.data.briefing,\n          isBriefing: true,\n          timestamp: Date.now()\n        };\n        \n        setMessages(prev => [...prev, briefingMessage]);\n        \n        // Mark as briefed today\n        const today = new Date().toDateString();\n        localStorage.setItem('lastBriefingDate', today);\n        setHasBriefingToday(true);\n        \n        // Auto-speak the briefing\n        await speakText(response.data.briefing);\n        \n        toast.success('≡ƒîà Daily briefing generated!');\n      } else {\n        throw new Error(response.data?.error || 'Failed to generate briefing');\n      }\n    } catch (error) {\n      console.error('Daily briefing error:', error);\n      const errorMessage = {\n        role: 'assistant',\n        content: 'I apologize, but I encountered an issue generating your daily briefing. Please try again.',\n        timestamp: Date.now(),\n        isError: true // Added isError for styling\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      toast.error('Daily briefing failed: ' + error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isLoading, speakText]);\n\n  // Check microphone permissions (kept for permission indicator, though startVoiceMode handles acquisition)\n  const checkMicrophonePermissions = useCallback(async () => {\n    if (!navigator.permissions || !navigator.mediaDevices) {\n      console.warn('Permissions API or MediaDevices not supported');\n      setMicPermissionStatus('unknown');\n      return 'unknown';\n    }\n\n    try {\n      // Check current permission status\n      const permissionStatus = await navigator.permissions.query({ name: 'microphone' });\n      setMicPermissionStatus(permissionStatus.state);\n      \n      // Listen for permission changes\n      permissionStatus.onchange = () => {\n        setMicPermissionStatus(permissionStatus.state);\n        if (permissionStatus.state === 'denied' && isListeningRef.current) { // Use ref here\n          stopVoiceModeRef.current(); // Use ref here\n          setPermissionError('Microphone access was revoked. Voice mode has been disabled.');\n        }\n      };\n\n      return permissionStatus.state;\n    } catch (error) {\n      console.warn('Could not check microphone permissions:', error);\n      setMicPermissionStatus('unknown');\n      return 'unknown';\n    }\n  }, []);\n\n  // UNUSED: Request microphone access (kept for manual request, though startVoiceMode handles acquisition)\n  // const requestMicrophoneAccess = useCallback(async () => {\n  //   setPermissionError('');\n  //   \n  //   try {\n  //     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  //     stream.getTracks().forEach(track => track.stop());\n  //     await checkMicrophonePermissions();\n  //     toast.success('≡ƒÄñ Microphone access granted! Voice mode is ready.');\n  //     return true;\n  //   } catch (error) {\n  //     console.error('Microphone access denied:', error);\n  //     if (error.name === 'NotAllowedError') {\n  //       setPermissionError('Microphone access denied. Please enable microphone permissions in your browser settings.');\n  //       setMicPermissionStatus('denied');\n  //     } else if (error.name === 'NotFoundError') {\n  //       setPermissionError('No microphone found. Please connect a microphone and try again.');\n  //     } else {\n  //       setPermissionError('Could not access microphone. Please check your device settings.');\n  //     }\n  //     toast.error('Microphone access failed. Check permissions and try again.');\n  //     return false;\n  //   }\n  // }, [checkMicrophonePermissions]);\n\n  // Separate function to process voice messages\n  const processVoiceMessage = useCallback(async (messageText) => {\n    // Prevent duplicate processing\n    if (isProcessingRef.current || isLoadingRef.current) { // Use refs for latest state\n      console.warn('ΓÜá∩╕Å Already processing or loading, skipping voice message');\n      return;\n    }\n\n    setIsProcessing(true);\n    setIsLoading(true);\n\n    try {\n      console.log('≡ƒñû Sending voice message to AI:', messageText);\n      \n      const response = await processChatCommand({\n        message: messageText,\n        user_context: {\n          email: user.email,\n          full_name: user.full_name || user.display_name,\n          role: user.role,\n          tenant_id: user.tenant_id\n        }\n      });\n\n      // Check if we should still process (user might have stopped voice mode)\n      if (!isListeningRef.current && !voiceEnabled) { // Use ref for isListening\n        console.log('≡ƒ¢æ User stopped voice mode or voice is disabled, not adding response or speaking.');\n        return; // Early exit if voice mode is off and voice disabled\n      }\n\n      if (response?.data?.status === 'success' && response.data.response) {\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response,\n          timestamp: Date.now(),\n          source: response.data.source || 'ai',\n          isVoiceResponse: true\n        };\n        \n        console.log('≡ƒñû Adding AI response to chat:', assistantMessage.content.substring(0, Math.min(assistantMessage.content.length, 100)) + '...');\n        setMessages(prev => [...prev, assistantMessage]);\n        \n        // Only speak if voice is still enabled\n        if (voiceEnabled) {\n          console.log('≡ƒöè Speaking AI response...');\n          setTimeout(() => {\n            speakText(response.data.response);\n          }, 300); // Small delay to allow UI update\n        }\n        \n        toast.success('≡ƒñû AI responded to your voice message!');\n        \n      } else {\n        throw new Error(response?.data?.response || 'No response received from AI');\n      }\n      \n    } catch (error) {\n      console.error('≡ƒÆ¼ Voice message processing failed:', error);\n      \n      // Only show error if voice is enabled or we are still \"listening\"\n      if (voiceEnabled || isListeningRef.current) {\n        const errorMessage = {\n          role: 'assistant',\n          content: `I apologize, but I encountered an error processing your voice message: ${error.message}. Please try again.`,\n          timestamp: Date.now(),\n          isError: true\n        };\n        setMessages(prev => [...prev, errorMessage]);\n        toast.error('Voice processing failed: ' + error.message);\n      }\n    } finally {\n      setIsLoading(false);\n      setIsProcessing(false);\n    }\n  }, [user, voiceEnabled, speakText]);\n\n  // Update processVoiceMessageRef whenever processVoiceMessage changes\n  useEffect(() => { processVoiceMessageRef.current = processVoiceMessage; }, [processVoiceMessage]);\n\n\n  // Update handleSendMessage to work better with voice\n  const handleSendMessage = useCallback(async (messageText = null) => {\n    const messageToSend = messageText || inputMessage.trim();\n    if (!messageToSend || isLoadingRef.current || isProcessingRef.current) { // Use refs for latest state\n      console.warn('Cannot send message: empty, loading, or already processing');\n      return;\n    }\n\n    // Only add user message if it's not from voice (voice already added it)\n    if (!messageText) { // If messageText is null, it's a typed message\n      setInputMessage(''); // Clear input for typed messages\n      \n      const userMessage = {\n        role: 'user',\n        content: messageToSend,\n        timestamp: Date.now(),\n        isVoice: false // Mark as not from voice for distinction\n      };\n      \n      setMessages(prev => [...prev, userMessage]);\n    }\n\n    // Process the message (reuse the voice processing logic)\n    await processVoiceMessage(messageToSend);\n    \n  }, [inputMessage, processVoiceMessage]); // Dependencies updated\n\n  // Update handleSendMessageRef whenever handleSendMessage changes\n  useEffect(() => { handleSendMessageRef.current = handleSendMessage; }, [handleSendMessage]);\n\n  const stopVoiceMode = useCallback(() => {\n    console.log('≡ƒ¢æ Stopping voice mode...');\n    \n    setIsListening(false);\n    setTimeRemaining(0);\n    setIsDetectingVoice(false);\n    setCurrentTranscript('');\n    \n    // Clear timer\n    if (timerIntervalRef.current) {\n      clearInterval(timerIntervalRef.current);\n      timerIntervalRef.current = null;\n      console.log('ΓÅ░ Timer cleared');\n    }\n\n    // Stop recognition\n    if (recognitionRef.current) {\n      try {\n        recognitionRef.current.stop();\n      } catch (error) {\n        console.warn('Error stopping recognition:', error);\n      }\n    }\n    \n    stopSpeaking();\n    toast.success('≡ƒÄñ Voice mode OFF');\n  }, [stopSpeaking]);\n\n  // Update stopVoiceModeRef whenever stopVoiceMode changes\n  useEffect(() => { stopVoiceModeRef.current = stopVoiceMode; }, [stopVoiceMode]);\n\n  const startVoiceMode = useCallback(async () => {\n    console.log('≡ƒÜÇ Starting voice mode...');\n    \n    // Check for speech recognition support first\n    if (!speechRecognition) {\n      toast.error('Voice recognition not supported in this browser');\n      setPermissionError('Speech recognition is not supported in this browser. Please use Chrome, Edge, or Safari for voice commands.');\n      return;\n    }\n\n    try {\n      // Request microphone permission\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      stream.getTracks().forEach(track => track.stop()); // Stop immediately, we just needed permission\n      \n      // Clear any existing states\n      setIsListening(true);\n      setTimeRemaining(120); // 2 minutes\n      setIsDetectingVoice(false);\n      setCurrentTranscript('');\n      setPermissionError(null);\n\n      // Add greeting message\n      const greetingMessage = {\n        role: 'assistant',\n        content: \"≡ƒÄñ Voice mode activated! I'm listening for 2 minutes. You can ask me about your contacts, leads, activities, or anything else in your CRM.\",\n        timestamp: Date.now(),\n        isGreeting: true\n      };\n      setMessages(prev => [...prev, greetingMessage]);\n\n      // Start the timer countdown\n      console.log('ΓÅ░ Starting timer countdown...');\n      // Clear any existing timer\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n      }\n      timerIntervalRef.current = setInterval(() => {\n        setTimeRemaining(prev => {\n          console.log('ΓÅ░ Timer tick, remaining:', prev - 1);\n          if (prev <= 1) {\n            console.log('ΓÅ░ Timer expired');\n            stopVoiceMode();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n\n      // Stop any active speech before starting recognition\n      stopSpeaking();\n\n      // Start speech recognition\n      console.log('≡ƒÄñ Starting speech recognition...');\n      if (recognitionRef.current) {\n        console.log('≡ƒÄñ Starting speech recognition...');\n        recognitionRef.current.start();\n        toast.success('≡ƒÄñ Voice mode ON - Speak now!');\n      } else {\n        console.error('Recognition ref is null, could not start.');\n      }\n    } catch (error) {\n      console.error('Γ¥î Failed to start voice mode:', error);\n      toast.error('Failed to start voice recognition: ' + error.message);\n      setPermissionError('Microphone access denied. Please allow access and try again.');\n      // Ensure voice mode states are reset if start fails\n      setIsListening(false);\n      setTimeRemaining(0);\n      setIsDetectingVoice(false);\n      setCurrentTranscript('');\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    }\n  }, [speechRecognition, stopVoiceMode, stopSpeaking]);\n\n\n  const toggleVoiceMode = useCallback(() => {\n    console.log('≡ƒöä Toggle voice mode - current state:', isListening);\n    if (isListening) {\n      stopVoiceMode();\n    } else {\n      startVoiceMode();\n    }\n  }, [isListening, stopVoiceMode, startVoiceMode]);\n\n  // Simplified speech recognition setup\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    \n    if (SpeechRecognition) {\n      const recognition = new SpeechRecognition();\n      \n      recognition.continuous = false; // Simplified: listen for one utterance then fires onend\n      recognition.interimResults = true;\n      recognition.lang = 'en-US';\n\n      recognition.onresult = (event) => {\n        if (!isListeningRef.current) { // Use ref for latest state\n            console.log('≡ƒÄñ Ignoring result - not listening anymore (via onresult)');\n            return;\n        }\n\n        console.log('≡ƒÄñ Speech result received');\n        let finalTranscript = '';\n        let interimTranscript = '';\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript;\n          if (event.results[i].isFinal) {\n            finalTranscript += transcript;\n          } else {\n            interimTranscript += transcript;\n          }\n        }\n\n        // Show what we're hearing\n        const displayText = finalTranscript || interimTranscript;\n        if (displayText.trim()) {\n          setCurrentTranscript(displayText.trim());\n          setIsDetectingVoice(true);\n        }\n\n        // Process final result\n        if (finalTranscript.trim() && finalTranscript.trim().length > 3) {\n          console.log('≡ƒÄñ Final speech:', finalTranscript);\n          \n          // Clear transcript display after brief delay\n          setTimeout(() => setCurrentTranscript(''), 500);\n          \n          // Add user message\n          const userMessage = {\n            role: 'user',\n            content: finalTranscript.trim(),\n            timestamp: Date.now(),\n            isVoice: true\n          };\n          setMessages(prev => [...prev, userMessage]);\n          \n          // Process with AI\n          // Use ref for handleSendMessage to ensure latest version is called\n          setTimeout(() => {\n            handleSendMessageRef.current(finalTranscript.trim());\n          }, 200);\n        }\n      };\n\n      recognition.onstart = () => {\n        console.log('≡ƒÄñ Recognition started');\n        setIsDetectingVoice(false);\n      };\n\n      recognition.onend = () => {\n        console.log('≡ƒÄñ Recognition ended, listening:', isListeningRef.current, 'time remaining:', timeRemaining);\n        setIsDetectingVoice(false);\n        \n        // Restart if we're still supposed to be listening (2-min timer active)\n        if (isListeningRef.current && timeRemaining > 0) {\n          setTimeout(() => {\n            if (isListeningRef.current && recognitionRef.current) { // Double check again before restarting\n              try {\n                recognitionRef.current.start();\n                console.log('≡ƒÄñ Recognition restarted successfully');\n              } catch (error) {\n                console.warn('Failed to restart recognition:', error);\n              }\n            }\n          }, 100); // Small delay before attempting to restart\n        } else if (recognitionRef.current) {\n            // If we're not listening, ensure recognition is stopped\n            try {\n                recognitionRef.current.stop();\n                console.log('≡ƒÄñ Recognition manually stopped via onend (not listening)');\n            } catch(e) {\n                console.warn('Error stopping recognition onend cleanup:', e);\n            }\n        }\n      };\n\n      recognition.onerror = (event) => {\n        console.log('≡ƒÄñ Recognition error:', event.error);\n        setIsDetectingVoice(false);\n        \n        if (event.error === 'not-allowed') {\n          toast.error('Microphone access denied. Please enable permissions.');\n          stopVoiceModeRef.current(); // Use ref here to ensure latest stopVoiceMode is called\n          setPermissionError('Microphone access denied. Please allow access and try again.');\n        } else if (event.error !== 'aborted' && event.error !== 'no-speech') {\n          console.error('≡ƒÄñ Unexpected recognition error:', event.error);\n          // For other errors, don't stop voice mode, let onend handle restart if still active\n        }\n      };\n\n      recognitionRef.current = recognition;\n      setSpeechRecognition(recognition);\n      console.log('≡ƒÄñ Speech recognition initialized');\n    }\n\n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n      if (recognitionRef.current) {\n        try {\n          recognitionRef.current.abort(); // Use abort for immediate cleanup on unmount\n        } catch(e) {\n          // Ignore errors during cleanup\n        }\n      }\n    };\n  }, [stopVoiceMode, timeRemaining, isListening, handleSendMessage]); // Dependencies updated for stability\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Check if user has been briefed today\n  useEffect(() => {\n    const lastBriefingDate = localStorage.getItem('lastBriefingDate');\n    const today = new Date().toDateString();\n    setHasBriefingToday(lastBriefingDate === today);\n  }, []);\n\n  // Auto-trigger briefing when widget opens (if enabled and not briefed today)\n  useEffect(() => {\n    if (isOpen && briefingEnabled && !hasBriefedToday && user) {\n      const timer = setTimeout(() => {\n        triggerDailyBriefing();\n      }, 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [isOpen, briefingEnabled, hasBriefedToday, user, triggerDailyBriefing]);\n\n  // Handle key press for Enter to send\n  const handleKeyPress = useCallback((e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }, [handleSendMessage]);\n\n  // Helper function to get permission status icon and color\n  const getPermissionIndicator = () => {\n    switch (micPermissionStatus) {\n      case 'granted':\n        return { icon: 'Γ£à', color: 'text-green-600', text: 'Microphone ready' };\n      case 'denied':\n        return { icon: 'Γ¥î', color: 'text-red-600', text: 'Microphone blocked' };\n      case 'prompt':\n        return { icon: 'Γ¥ô', color: 'text-yellow-600', text: 'Permission needed' };\n      default:\n        return { icon: 'ΓÜí', color: 'text-gray-600', text: 'Checking...' };\n    }\n  };\n\n  // Render messages with better key handling and styling\n  const renderMessages = () => {\n    return messages.map((message, index) => (\n      <div key={`${message.timestamp}-${index}`} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n        <div className={`max-w-[80%] p-3 rounded-lg ${\n          message.role === 'user' \n            ? 'bg-blue-500 text-white rounded-br-sm' \n            : message.isBriefing\n            ? 'bg-gradient-to-r from-purple-100 to-blue-100 border-l-4 border-purple-500 rounded-bl-sm'\n            : message.isGreeting\n            ? 'bg-gradient-to-r from-green-100 to-emerald-100 border-l-4 border-green-500 rounded-bl-sm'\n            : message.isError // New condition for error messages\n            ? 'bg-red-50 text-red-700 border border-red-200 rounded-bl-sm'\n            : 'bg-gray-100 text-gray-800 rounded-bl-sm'\n        }`}>\n          {message.isBriefing && <Badge className=\"mb-2 text-xs\">Daily Briefing</Badge>}\n          {message.isGreeting && <Badge className=\"mb-2 text-xs bg-green-600\">Voice Greeting</Badge>}\n          {message.isVoice && <Badge className=\"mb-2 text-xs bg-blue-400 text-white\">Voice Input</Badge>}\n          {message.isVoiceResponse && <Badge className=\"mb-2 text-xs bg-emerald-400 text-white\">Voice Response</Badge>}\n          <p className=\"text-sm whitespace-pre-wrap break-words\">{message.content}</p>\n          {message.source && message.source !== 'ai' && ( // Only show if source is not 'ai'\n            <div className=\"mt-2 text-xs opacity-75\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Source: {message.source}\n              </Badge>\n            </div>\n          )}\n        </div>\n      </div>\n    ));\n  };\n\n\n  if (!user) return null;\n\n  const permissionIndicator = getPermissionIndicator();\n\n  return (\n    <>\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <div className=\"relative\">\n          <Button\n            onClick={() => setIsOpen(!isOpen)}\n            className={`w-14 h-14 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 ${\n              isListening \n                ? 'bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600' \n                : 'bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700'\n            } ${isDetectingVoice ? 'animate-pulse ring-4 ring-green-300' : ''}`}\n          >\n            {isOpen ? <X className=\"w-6 h-6\" /> : <MessageCircle className=\"w-6 h-6\" />}\n          </Button>\n          \n          {/* Permission Status Indicator */}\n          {micPermissionStatus === 'denied' && (\n            <div className=\"absolute -top-2 -right-2 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center text-white text-xs\">\n              !\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Chat Widget */}\n      {isOpen && (\n        <div className=\"fixed bottom-24 right-6 w-96 h-[500px] bg-white rounded-lg shadow-2xl border z-50 flex flex-col\">\n          {/* Header */}\n          <CardHeader className=\"text-white rounded-t-lg p-4 bg-gradient-to-r from-purple-600 to-blue-600\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg font-semibold\">\n                ≡ƒñû Ai-SHA Assistant\n              </CardTitle>\n              <div className=\"flex items-center gap-2\">\n                {isSpeaking && <Badge variant=\"secondary\" className=\"text-xs\">Speaking</Badge>}\n                {isListening && timeRemaining > 0 && (\n                  <Badge variant=\"secondary\" className={`text-xs ${isDetectingVoice ? 'animate-pulse bg-green-200' : ''}`}>\n                    ≡ƒÄñ {formatTimeRemaining(timeRemaining)}\n                  </Badge>\n                )}\n                {isDetectingVoice && (\n                  <Badge variant=\"secondary\" className=\"text-xs bg-green-200 text-green-800 animate-pulse\">\n                    ≡ƒùú∩╕Å Hearing You!\n                  </Badge>\n                )}\n                 <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setVoiceEnabled(!voiceEnabled)}\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  {voiceEnabled ? <Volume2 className=\"w-4 h-4\" /> : <VolumeX className=\"w-4 h-4\" />}\n                </Button>\n              </div>\n            </div>\n            \n            {/* Permission Status */}\n            {recognitionRef.current && (\n              <div className=\"mt-2 text-xs opacity-90 flex items-center gap-1\">\n                <span>{permissionIndicator.icon}</span>\n                <span>{permissionIndicator.text}</span>\n              </div>\n            )}\n          </CardHeader>\n          \n          {/* Voice Mode Indicator - New Placement */}\n          {isListening && (\n            <div className={`text-white p-3 text-center ${\n              isDetectingVoice\n                ? 'bg-gradient-to-r from-green-500 to-emerald-500 animate-pulse'\n                : 'bg-gradient-to-r from-red-500 to-pink-500' \n            }`}>\n              <div className=\"flex items-center justify-center gap-2\">\n                <div className={`w-3 h-3 bg-white rounded-full ${isDetectingVoice ? 'animate-pulse' : ''}`}></div>\n                <span className=\"font-medium text-lg\">\n                  ≡ƒÄñ LISTENING - {Math.floor(timeRemaining / 60)}:{(timeRemaining % 60).toString().padStart(2, '0')}\n                </span>\n              </div>\n              {currentTranscript && (\n                <div className=\"mt-2 text-sm bg-white/20 rounded p-2\">\n                  \"{currentTranscript}\"\n                </div>\n              )}\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={stopVoiceMode}\n                className=\"mt-2 text-white hover:bg-white/20\"\n              >\n                Stop Listening\n              </Button>\n            </div>\n          )}\n\n          {/* Messages */}\n          <CardContent className=\"flex-1 overflow-y-auto p-4 space-y-3\">\n            {/* Permission Error Alert */}\n            {permissionError && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-3 mb-3\">\n                <div className=\"flex items-start gap-2\">\n                  <span className=\"text-red-500\">ΓÜá∩╕Å</span>\n                  <div className=\"text-red-700 text-xs\">\n                    <p className=\"font-semibold mb-1\">Microphone Issue</p>\n                    <p>{permissionError}</p>\n                    {micPermissionStatus === 'denied' && (\n                      <p className=\"mt-2\">\n                        <strong>Fix:</strong> Click the <span className=\"font-bold\">≡ƒöÆ</span> or <span className=\"font-bold\">≡ƒÄñ</span> icon in your browser's address bar ΓåÆ Allow microphone access ΓåÆ Refresh page\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {messages.length === 0 && !permissionError ? (\n              <div className=\"text-center text-gray-500 mt-8\">\n                <MessageCircle className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                <p>Hello! I'm Ai-SHA, your CRM assistant.</p>\n                <p className=\"text-sm\">Ask me about contacts, leads, or use voice mode!</p>\n                <ul className=\"text-xs mt-2 space-y-1\">\n                  <li>≡ƒÄñ <strong>Toggle voice mode</strong> for 2 minutes</li>\n                  <li>≡ƒÆ¼ Type commands</li>\n                  <li>≡ƒôè Ask about your CRM data</li>\n                  <li>≡ƒôà Get daily briefings</li>\n                </ul>\n                \n                {recognitionRef.current && micPermissionStatus === 'prompt' && (\n                  <div className=\"mt-3 p-2 bg-blue-50 rounded text-xs\">\n                    <p className=\"text-blue-700\">≡ƒÄñ Click the microphone button to enable voice mode</p>\n                  </div>\n                )}\n              </div>\n            ) : (\n              renderMessages() // Call the new renderMessages function here\n            )}\n            \n            {isLoading && (\n              <div className=\"flex justify-start\">\n                <div className=\"bg-gray-100 p-3 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    <span className=\"text-sm\">Ai-SHA is thinking...</span>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </CardContent>\n\n          {/* Input */}\n          <div className=\"p-4 border-t\">\n            <div className=\"flex gap-2\">\n              <Button\n                variant={isListening ? \"destructive\" : micPermissionStatus === 'denied' ? \"secondary\" : \"outline\"}\n                size=\"sm\"\n                onClick={toggleVoiceMode}\n                disabled={isLoading || !recognitionRef.current || isSpeaking || (micPermissionStatus === 'denied' && !isListening) || isProcessing}\n                className={`shrink-0 ${isDetectingVoice ? 'animate-pulse ring-2 ring-green-400' : ''}`}\n                title={micPermissionStatus === 'denied' ? 'Microphone access blocked' : 'Toggle voice mode'}\n              >\n                {isDetectingVoice ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse mr-1\"></div>\n                    <Mic className=\"w-4 h-4\" />\n                  </div>\n                ) : isListening ? (\n                  <MicOff className=\"w-4 h-4\" />\n                ) : (\n                  <Mic className=\"w-4 h-4\" />\n                )}\n              </Button>\n              <Input\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder={\n                  micPermissionStatus === 'denied'\n                    ? \"Microphone access blocked. Enable for voice.\"\n                    : \"Type a message or click mic for voice mode...\"\n                }\n                disabled={isLoading || isListening || micPermissionStatus === 'denied' || isProcessing}\n                className=\"flex-1\"\n              />\n              <Button \n                onClick={() => handleSendMessage()} \n                disabled={!inputMessage.trim() || isLoading || isProcessing}\n                size=\"sm\"\n              >\n                {isLoading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : 'Send'}\n              </Button>\n            </div>\n            \n            {/* Daily Briefing Button */}\n            {briefingEnabled && !hasBriefedToday && (\n              <div className=\"mt-2\">\n                <Button\n                  onClick={triggerDailyBriefing}\n                  disabled={isLoading || isProcessing}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full\"\n                >\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n                      Generating briefing...\n                    </>\n                  ) : (\n                    <>\n                      ΓÿÇ∩╕Å Get Daily Briefing\n                    </>\n                  )}\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\AudioPlayerButton.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":39,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":49},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":46,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":60},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":135,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":135,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":148,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":148,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Volume2, VolumeX, Loader2 } from \"lucide-react\";\nimport { generateElevenLabsSpeech } from \"@/api/functions\";\n\nexport default function AudioPlayerButton(props) {\n  // AUTO-CLEAR old disable flag on mount\n  React.useEffect(() => {\n    try {\n      if (typeof localStorage !== \"undefined\" && localStorage.getItem('disable_inline_audio') === 'true') {\n        localStorage.removeItem('disable_inline_audio');\n        console.log('[AudioPlayerButton] Cleared old disable_inline_audio flag from localStorage');\n      }\n      if (typeof window !== \"undefined\" && window.__AI_CONTEXT?.disable_inline_audio === true) {\n        window.__AI_CONTEXT.disable_inline_audio = false;\n        console.log('[AudioPlayerButton] Cleared global disable_inline_audio flag from window.__AI_CONTEXT');\n      }\n    } catch (e) {\n      console.warn('[AudioPlayerButton] Could not clear disable flags:', e);\n    }\n  }, []);\n\n  // Compute disabled flag without early-returning before hooks\n  const disabledByProp = props?.hidden === true || props?.disableInlineAudio === true;\n  const disabledByGlobal =\n    (typeof window !== \"undefined\" && window.__AI_CONTEXT?.disable_inline_audio === true) ||\n    (typeof localStorage !== \"undefined\" && localStorage.getItem(\"disable_inline_audio\") === \"true\");\n  const disabled = disabledByProp || disabledByGlobal;\n\n  // Hooks must always be called in the same order\n  const [loading, setLoading] = React.useState(false);\n  const [playing, setPlaying] = React.useState(false);\n  const audioRef = React.useRef(null);\n  const urlRef = React.useRef(null);\n\n  const cleanup = () => {\n    if (audioRef.current) {\n      try { audioRef.current.pause(); } catch (e) { /* ignore */ }\n      audioRef.current.onended = null;\n      audioRef.current.onpause = null;\n      audioRef.current.onerror = null;\n      audioRef.current = null;\n    }\n    if (urlRef.current) {\n      try { URL.revokeObjectURL(urlRef.current); } catch (e) { /* ignore */ }\n      urlRef.current = null;\n    }\n    setPlaying(false);\n  };\n\n  React.useEffect(() => () => cleanup(), []);\n\n  // If disabled, render nothing (hooks already called above to satisfy rules)\n  if (disabled) {\n    return null;\n  }\n\n  const ensureAudio = async () => {\n    if (audioRef.current) return audioRef.current;\n\n    setLoading(true);\n    try {\n      const resp = await generateElevenLabsSpeech({ text: props.text, voice_id: props.voiceId || \"21m00Tcm4TlvDq8ikWAM\" });\n\n      let blob;\n      const headers = resp?.headers;\n      const ct = (headers?.[\"content-type\"] || headers?.get?.(\"content-type\") || \"\").toLowerCase();\n      const data = resp?.data;\n\n      // Preferred: JSON with base64 from our backend\n      if (data?.audio_base64 && typeof data.audio_base64 === \"string\") {\n        const decoded = Uint8Array.from(atob(data.audio_base64), c => c.charCodeAt(0));\n        blob = new Blob([decoded], { type: \"audio/mpeg\" });\n      } else if (typeof data === \"string\" && data.length > 0) {\n        // Some wrappers may return a string; try parse JSON or base64\n        try {\n          const parsed = JSON.parse(data);\n          if (parsed?.audio_base64) {\n            const decoded = Uint8Array.from(atob(parsed.audio_base64), c => c.charCodeAt(0));\n            blob = new Blob([decoded], { type: \"audio/mpeg\" });\n          }\n        } catch {\n          // If JSON.parse failed, try direct base64\n          try {\n            const decoded = Uint8Array.from(atob(data), c => c.charCodeAt(0));\n            blob = new Blob([decoded], { type: \"audio/mpeg\" });\n          } catch {\n            // failed to parse as JSON or base64 string\n          }\n        }\n      } else if (ct.includes(\"audio/\") || data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n        // Raw audio fallback\n        const bytes = data instanceof ArrayBuffer ? new Uint8Array(data) : (ArrayBuffer.isView(data) ? data : new Uint8Array([]));\n        blob = new Blob([bytes], { type: \"audio/mpeg\" });\n      }\n\n      // Sanity: ensure we have some audio bytes (allow very short clips)\n      if (!blob || blob.size <= 0) {\n        throw new Error(\"Received empty audio\");\n      }\n\n      const url = URL.createObjectURL(blob);\n      urlRef.current = url;\n      const audio = new Audio(url);\n      audio.preload = \"auto\";\n\n      audio.onended = () => {\n        setPlaying(false);\n        window.dispatchEvent(new CustomEvent(\"chat:unlock-open\"));\n      };\n      audio.onpause = () => {\n        if (playing) {\n          setPlaying(false);\n          window.dispatchEvent(new CustomEvent(\"chat:unlock-open\"));\n        }\n      };\n      audio.onerror = () => {\n        setPlaying(false);\n        window.dispatchEvent(new CustomEvent(\"chat:unlock-open\"));\n      };\n\n      audioRef.current = audio;\n      return audio;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onClick = async () => {\n    if (loading) return;\n\n    // Toggle pause if already playing\n    if (playing) {\n      try { audioRef.current?.pause(); } catch (e) { /* ignore */ }\n      setPlaying(false);\n      window.dispatchEvent(new CustomEvent(\"chat:unlock-open\"));\n      return;\n    }\n\n    const audio = await ensureAudio();\n    if (!audio) return;\n\n    try {\n      window.dispatchEvent(new CustomEvent(\"chat:lock-open\"));\n      await audio.play();\n      setPlaying(true);\n    } catch (e) {\n      // If autoplay/gesture blocks, unlock and stop\n      window.dispatchEvent(new CustomEvent(\"chat:unlock-open\"));\n      setPlaying(false);\n    }\n  };\n\n  return (\n    <Button variant=\"ghost\" size=\"icon\" onClick={onClick} className={props.className || \"\"} title=\"Speak message\">\n      {loading ? <Loader2 className=\"w-4 h-4 animate-spin text-slate-400\" /> : (\n        playing ? <VolumeX className=\"w-4 h-4 text-slate-300\" /> : <Volume2 className=\"w-4 h-4 text-slate-300\" />\n      )}\n    </Button>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\AvatarWidget.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'agentId' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"agentId"},"fix":{"range":[103,111],"text":""},"desc":"Remove unused variable 'agentId'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'apiKey' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"apiKey"},"fix":{"range":[110,120],"text":""},"desc":"Remove unused variable 'apiKey'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'onMessage' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"onMessage"},"fix":{"range":[120,133],"text":""},"desc":"Remove unused variable 'onMessage'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'onNavigate' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"onNavigate"},"fix":{"range":[133,147],"text":""},"desc":"Remove unused variable 'onNavigate'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'isReady' is assigned a value but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"isReady"},"fix":{"range":[162,169],"text":""},"desc":"Remove unused variable 'isReady'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setIsReady' is assigned a value but never used.","line":10,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"setIsReady"},"fix":{"range":[169,181],"text":""},"desc":"Remove unused variable 'setIsReady'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useRef } from \"react\";\n\nexport default function AvatarWidget({\n  agentId,\n  apiKey,\n  onMessage,\n  onNavigate\n}) {\n  const [isReady, setIsReady] = useState(false); // isReady state added as per outline\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n\n  const widgetRef = useRef(null);\n\n  // This useEffect now only handles global AI events to update listening/speaking states.\n  // It no longer handles 'thinking' state as per the new design,\n  // and 'idle' is used to correctly reset 'speaking'.\n  useEffect(() => {\n    const onSpeaking = () => setIsSpeaking(true);\n    const onIdle = () => {\n      // The original audio element dispatched 'ai:idle' on 'onEnded'.\n      // With the audio element removed, 'ai:idle' must be dispatched by some other\n      // mechanism when speaking stops, or 'isSpeaking' will remain true.\n      // Assuming 'ai:idle' still functions as the event to signal the end of AI activity.\n      setIsSpeaking(false);\n    };\n    const onListening = (e) => setIsListening(e.detail.isListening);\n\n    window.addEventListener('ai:speaking', onSpeaking);\n    window.addEventListener('ai:idle', onIdle);\n    window.addEventListener('ai:listening', onListening);\n\n    return () => {\n      window.removeEventListener('ai:speaking', onSpeaking);\n      window.removeEventListener('ai:idle', onIdle);\n      window.removeEventListener('ai:listening', onListening);\n    };\n  }, []);\n\n  return (\n    <div\n      id=\"ai-avatar-launcher\"\n      ref={widgetRef}\n      className=\"fixed bottom-4 right-24 z-[10005]\"\n      style={{\n        width: '80px',\n        height: '80px',\n        borderRadius: '50%',\n      }}\n    >\n      {/* Animated Glow Ring - BEHIND everything */}\n      <div\n        className={`absolute inset-0 transition-all duration-300 ${\n          isSpeaking ? 'animate-pulse' : ''\n        }`}\n        style={{\n          borderRadius: '50%',\n          background: isSpeaking\n            ? 'radial-gradient(circle, rgba(34, 197, 94, 0.5) 0%, rgba(34, 197, 94, 0.2) 50%, transparent 70%)'\n            : isListening\n            ? 'radial-gradient(circle, rgba(59, 130, 246, 0.5) 0%, rgba(59, 130, 246, 0.2) 50%, transparent 70%)'\n            : 'radial-gradient(circle, rgba(234, 179, 8, 0.4) 0%, rgba(234, 179, 8, 0.15) 50%, transparent 70%)',\n          filter: 'blur(12px)',\n          transform: isSpeaking ? 'scale(1.4)' : isListening ? 'scale(1.3)' : 'scale(1.2)',\n        }}\n      />\n\n      {/* Colored Border Circle */}\n      <div\n        className=\"absolute inset-0 transition-all duration-300\"\n        style={{\n          borderRadius: '50%',\n          border: '3px solid',\n          borderColor: isSpeaking\n            ? 'rgb(34, 197, 94)' // green-500\n            : isListening\n            ? 'rgb(59, 130, 246)' // blue-500\n            : 'rgb(234, 179, 8)', // yellow-500\n          boxShadow: isSpeaking\n            ? '0 0 25px rgba(34, 197, 94, 0.7), 0 0 50px rgba(34, 197, 94, 0.4), inset 0 0 20px rgba(34, 197, 94, 0.2)'\n            : isListening\n            ? '0 0 25px rgba(59, 130, 246, 0.7), 0 0 50px rgba(59, 130, 246, 0.4), inset 0 0 20px rgba(59, 130, 246, 0.2)'\n            : '0 0 20px rgba(234, 179, 8, 0.5), 0 0 40px rgba(234, 179, 8, 0.3)',\n        }}\n      />\n\n      {/* Avatar Image Container - FULLY CIRCULAR */}\n      <div\n        className=\"absolute flex items-center justify-center bg-slate-900 overflow-hidden\"\n        style={{\n          top: '6px',\n          left: '6px',\n          right: '6px',\n          bottom: '6px',\n          borderRadius: '50%',\n          width: 'calc(100% - 12px)',\n          height: 'calc(100% - 12px)',\n        }}\n      >\n        <img\n          src=\"https://qtrypzzcjebvfcihiynt.supabase.co/storage/v1/object/public/base44-prod/public/68ad592dcffacef630b477d2/1fee90417_aisha_new_nobg.png\"\n          alt=\"AI Assistant\"\n          style={{\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover',\n            borderRadius: '50%',\n            transform: isSpeaking ? 'scale(1.08)' : 'scale(1)',\n            transition: 'transform 0.3s ease',\n          }}\n        />\n      </div>\n\n      {/* Status Indicator Dot */}\n      <div\n        className=\"absolute bottom-0 right-0\"\n        style={{\n          width: '16px',\n          height: '16px',\n          borderRadius: '50%',\n          border: '2px solid rgb(15, 23, 42)',\n          backgroundColor: isSpeaking\n            ? 'rgb(34, 197, 94)' // green\n            : isListening\n            ? 'rgb(59, 130, 246)' // blue\n            : 'rgb(234, 179, 8)', // yellow\n          boxShadow: isSpeaking || isListening\n            ? '0 0 10px currentColor, 0 0 20px currentColor'\n            : '0 0 6px currentColor',\n        }}\n      />\n\n      {/* Pulse animation rings for speaking */}\n      {isSpeaking && (\n        <>\n          <div\n            className=\"absolute inset-0 border-2 border-green-500 animate-ping\"\n            style={{\n              borderRadius: '50%',\n              opacity: 0.4,\n              animationDuration: '1s'\n            }}\n          />\n          <div\n            className=\"absolute inset-0 border-2 border-green-400 animate-ping\"\n            style={{\n              borderRadius: '50%',\n              opacity: 0.3,\n              animationDuration: '1.5s'\n            }}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\ChatInterface.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Send, Loader2, Phone, FileText, Headphones, ExternalLink } from \"lucide-react\";\nimport ReactMarkdown from 'react-markdown';\nimport toast from 'react-hot-toast';\n\nimport { processChatCommand } from '@/api/functions';\n\nexport default function ChatInterface({ user }) {\n  const [messages, setMessages] = useState([\n    {\n      role: 'assistant',\n      content: `Hello ${user?.full_name || 'there'}! I'm your AI CRM assistant. I can help you with questions about your contacts, leads, opportunities, and activities. What would you like to know?`,\n      timestamp: new Date(),\n      actions: [],\n      data: {}\n    }\n  ]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!input.trim() || isLoading) return;\n\n    const userMessage = input.trim();\n    setInput('');\n    setIsLoading(true);\n\n    // Add user message\n    setMessages(prev => [...prev, { role: 'user', content: userMessage, timestamp: new Date() }]);\n\n    try {\n      const response = await processChatCommand({ message: userMessage });\n      \n      if (response.status === 200) {\n        const data = response.data;\n        \n        if (data.status === 'success') {\n          setMessages(prev => [...prev, { \n            role: 'assistant', \n            content: data.response,\n            timestamp: new Date(),\n            actions: Array.isArray(data.actions) ? data.actions : [],\n            data: data.data || {},\n            data_summary: data.data_summary\n          }]);\n        } else {\n          setMessages(prev => [...prev, { \n            role: 'assistant', \n            content: `I encountered an issue: ${data.message}. Please try rephrasing your question or contact support if this persists.`,\n            timestamp: new Date(),\n            actions: [],\n            data: {},\n            error: true\n          }]);\n        }\n      } else {\n        throw new Error(`Server returned status ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Chat error:', error);\n      \n      let errorMessage = \"I'm having trouble processing your request right now. \";\n      \n      if (error.message.includes('401')) {\n        errorMessage += \"Please log out and log back in to refresh your session.\";\n      } else if (error.message.includes('403')) {\n        errorMessage += \"You may not have permission to access this data.\";\n      } else if (error.message.includes('network') || error.message.includes('fetch')) {\n        errorMessage += \"Please check your internet connection and try again.\";\n      } else {\n        errorMessage += \"Please try again in a moment, or contact support if the issue persists.\";\n      }\n\n      setMessages(prev => [...prev, { \n        role: 'assistant', \n        content: errorMessage,\n        timestamp: new Date(),\n        actions: [],\n        data: {},\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAction = async (action) => {\n    console.log('Action clicked:', action);\n    if (action.type === 'call' && action.data?.phone) {\n      try {\n        const { makeCall } = await import('@/api/functions');\n        const response = await makeCall({ \n          to: action.data.phone,\n          contactName: action.data.name || 'Contact'\n        });\n        \n        if (response.data.status === 'success') {\n          toast.success(`Call initiated to ${action.data.name || action.data.phone}`);\n        } else {\n          throw new Error(response.data.message || 'Call failed');\n        }\n      } catch (error) {\n        console.error('Call error:', error);\n        toast.error(`Failed to initiate call: ${error.message || 'Unknown error'}. Trying direct dial.`);\n        window.location.href = `tel:${action.data.phone.replace(/[^\\d+]/g, '')}`;\n      }\n    } else if (action.type === 'navigate' && action.data?.url) {\n      window.open(action.data.url, '_blank');\n      toast.success(`Navigating to ${action.label || action.data.url}`);\n    } else if (action.type === 'open_document' && action.data?.document_id) {\n        toast.info(`Attempting to open document ID: ${action.data.document_id}`);\n    } else if (action.type === 'schedule') {\n        toast.info(`Scheduling action: ${action.label}`);\n    } else if (action.type === 'create') {\n        toast.info(`Creating new entry: ${action.label}`);\n    } else {\n      toast.error(`Unsupported action type: ${action.type}`);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-50\">\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.length === 0 ? (\n          <div className=\"text-center text-gray-500 mt-8\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Headphones className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">AI Admin Asst</h3>\n            <p className=\"text-sm\">Ask me about your CRM data, contacts, leads, or any questions!</p>\n          </div>\n        ) : (\n          messages.map((message, index) => (\n            <div key={index} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n              <div className={`max-w-[80%] rounded-lg p-3 ${\n                message.role === 'user' \n                  ? 'bg-blue-600 text-white' \n                  : message.error ? 'bg-red-50 border border-red-200 shadow-sm' : 'bg-white border shadow-sm'\n              }`}>\n                <ReactMarkdown \n                  className={`text-sm prose prose-sm max-w-none ${message.role === 'user' ? 'text-white' : 'text-slate-800'} [&>*:first-child]:mt-0 [&>*:last-child]:mb-0`}\n                  components={{\n                    p: ({ children }) => <p className=\"mb-2 last:mb-0\">{children}</p>,\n                    ul: ({ children }) => <ul className=\"mb-2 last:mb-0 ml-4 list-disc\">{children}</ul>,\n                    ol: ({ children }) => <ol className=\"mb-2 last:mb-0 ml-4 list-decimal\">{children}</ol>,\n                    li: ({ children }) => <li className=\"mb-1\">{children}</li>,\n                    strong: ({ children }) => <strong className=\"font-semibold\">{children}</strong>,\n                    h1: ({ children }) => <h1 className=\"text-base font-bold mb-2\">{children}</h1>,\n                    h2: ({ children }) => <h2 className=\"text-sm font-bold mb-2\">{children}</h2>,\n                    h3: ({ children }) => <h3 className=\"text-sm font-semibold mb-1\">{children}</h3>,\n                    code: ({ children }) => <code className=\"bg-slate-100 px-1 py-0.5 rounded text-xs\">{children}</code>,\n                    blockquote: ({ children }) => <blockquote className=\"border-l-2 border-slate-300 pl-3 italic\">{children}</blockquote>\n                  }}\n                >\n                  {message.content}\n                </ReactMarkdown>\n                \n                {message.role === 'assistant' && Array.isArray(message.actions) && message.actions.length > 0 && (\n                  <div className=\"mt-3 flex flex-wrap gap-2\">\n                    {message.actions.map((action, actionIndex) => (\n                      <Button\n                        key={actionIndex}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleAction(action)}\n                        className=\"text-xs bg-white hover:bg-slate-50 text-slate-700 border-slate-300\"\n                      >\n                        {action.type === 'call' && <Phone className=\"w-3 h-3 mr-1\" />}\n                        {action.type === 'navigate' && <ExternalLink className=\"w-3 h-3 mr-1\" />}\n                        {action.type === 'open_document' && <FileText className=\"w-3 h-3 mr-1\" />}\n                        {action.label || 'Action'}\n                      </Button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          ))\n        )}\n        \n        {isLoading && (\n          <div className=\"flex justify-start\">\n            <div className=\"bg-white border shadow-sm p-3 rounded-lg\">\n              <div className=\"flex items-center gap-2 text-slate-600\">\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n                <span className=\"text-sm\">Thinking...</span>\n              </div>\n            </div>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <div className=\"p-4 border-t bg-white\">\n        <form onSubmit={handleSubmit} className=\"flex gap-2\">\n          <Input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Ask me anything about your CRM...\"\n            className=\"flex-1\"\n            disabled={isLoading}\n          />\n          <Button type=\"submit\" disabled={isLoading || !input.trim()}>\n            <Send className=\"w-4 h-4\" />\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\ChatWindow.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { \n  Bot, \n  Send, \n  Paperclip, \n  Minimize2, \n  Maximize2, \n  Loader2,\n  Trash2\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { base44 } from \"@/api/base44Client\";\nimport { User } from \"@/api/entities\";\nimport { Tenant } from \"@/api/entities\";\nimport { UploadFile } from \"@/api/integrations\";\nimport MicButton from \"./MicButton\";\nimport MessageBubble from \"./MessageBubble\";\n\nconst INDUSTRY_LABELS = {\n  aerospace_and_defense: \"Aerospace & Defense\",\n  agriculture_and_farming: \"Agriculture & Farming\",\n  automotive_and_transportation: \"Automotive & Transportation\",\n  banking_and_financial_services: \"Banking & Financial Services\",\n  biotechnology_and_pharmaceuticals: \"Biotechnology & Pharmaceuticals\",\n  chemicals_and_materials: \"Chemicals & Materials\",\n  construction_and_engineering: \"Construction & Engineering\",\n  consumer_goods_and_retail: \"Consumer Goods & Retail\",\n  education_and_training: \"Education & Training\",\n  energy_oil_and_gas: \"Energy, Oil & Gas\",\n  entertainment_and_media: \"Entertainment & Media\",\n  environmental_services: \"Environmental Services\",\n  food_and_beverage: \"Food & Beverage\",\n  government_and_public_sector: \"Government & Public Sector\",\n  green_energy_and_solar: \"Green Energy & Solar\",\n  healthcare_and_medical_services: \"Healthcare & Medical Services\",\n  hospitality_and_tourism: \"Hospitality & Tourism\",\n  information_technology_and_software: \"Information Technology & Software\",\n  insurance: \"Insurance\",\n  legal_services: \"Legal Services\",\n  logistics_and_supply_chain: \"Logistics & Supply Chain\",\n  manufacturing_industrial: \"Manufacturing (Industrial)\",\n  marketing_advertising_and_pr: \"Marketing, Advertising & PR\",\n  mining_and_metals: \"Mining & Metals\",\n  nonprofit_and_ngos: \"Nonprofit & NGOs\",\n  real_estate_and_property_management: \"Real Estate & Property Management\",\n  renewable_energy: \"Renewable Energy\",\n  retail_and_wholesale: \"Retail & Wholesale\",\n  telecommunications: \"Telecommunications\",\n  textiles_and_apparel: \"Textiles & Apparel\",\n  utilities_water_and_waste: \"Utilities (Water & Waste)\",\n  veterinary_services: \"Veterinary Services\",\n  warehousing_and_distribution: \"Warehousing & Distribution\",\n  other: \"Other\"\n};\n\n// Wrap messages to ensure they have the expected structure\nconst wrapMessage = (msg) => {\n  if (!msg) return { role: 'assistant', content: '', tool_calls: [] };\n  return {\n    role: msg.role || 'assistant',\n    content: msg.content || '',\n    tool_calls: msg.tool_calls || []\n  };\n};\n\nexport default function ChatWindow() {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [conversationId, setConversationId] = useState(null);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [showClearConfirm, setShowClearConfirm] = useState(false);\n  const [tenantInfo, setTenantInfo] = useState(null);\n  const [industryContext, setIndustryContext] = useState(\"\");\n  const messagesEndRef = useRef(null);\n  const { toast } = useToast();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    loadTenantContext();\n  }, []);\n\n  const loadTenantContext = async () => {\n    try {\n      const user = await User.me();\n      if (user?.tenant_id) {\n        const tenant = await Tenant.get(user.tenant_id);\n        setTenantInfo(tenant);\n        \n        if (tenant.industry) {\n          const industryLabel = INDUSTRY_LABELS[tenant.industry] || tenant.industry;\n          const businessModel = tenant.business_model || \"B2B\";\n          const geoFocus = tenant.geographic_focus || \"North America\";\n          \n          setIndustryContext(`\n\n**IMPORTANT CONTEXT - Your Client's Industry:**\n- Primary Industry: ${industryLabel}\n- Business Model: ${businessModel}\n- Geographic Focus: ${geoFocus}\n- Company: ${tenant.name}\n\n**Instructions:**\nWhen answering questions about market trends, economic climate, competitors, customer behavior, industry challenges, or business strategy, you MUST provide information SPECIFICALLY for the ${industryLabel} industry in the ${geoFocus} region, unless the user explicitly asks about a different industry.\n\nIf discussing market size, growth rates, key players, or industry-specific trends, always frame your response in the context of ${industryLabel}.\n\nIf the user asks a general question without specifying an industry, assume they're asking about ${industryLabel}.\n\nOnly discuss other industries if explicitly requested by the user (e.g., \"What about the healthcare industry?\" or \"Compare this to the automotive sector\").`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error loading tenant context:\", error);\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const loadConversation = useCallback(async () => {\n    if (!conversationId) return;\n    try {\n      const conv = await base44.agents.getConversation(conversationId);\n      if (conv?.messages) {\n        setMessages(conv.messages.map(wrapMessage));\n      }\n    } catch (error) {\n      console.error(\"Error loading conversation:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load conversation history\",\n        variant: \"destructive\",\n      });\n    }\n  }, [conversationId, toast]);\n\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      try {\n        const conv = await base44.agents.createConversation({\n          agent_name: \"crm_assistant\",\n          metadata: { name: \"Chat Session\", description: \"User chat session\" }\n        });\n        if (mounted && conv?.id) {\n          setConversationId(conv.id);\n        }\n      } catch (error) {\n        console.error(\"Error creating conversation:\", error);\n      }\n    })();\n    return () => { mounted = false; };\n  }, []);\n\n  useEffect(() => {\n    if (!conversationId) return;\n    loadConversation();\n    const unsub = base44.agents.subscribeToConversation(conversationId, (data) => {\n      if (data?.messages) {\n        setMessages(data.messages.map(wrapMessage));\n        setIsLoading(false);\n      }\n    });\n    return () => unsub();\n  }, [conversationId, loadConversation]);\n\n  const handleSend = async () => {\n    if (!inputValue.trim() || !conversationId || isLoading) return;\n\n    const userMessage = inputValue.trim();\n    setInputValue(\"\");\n    setIsLoading(true);\n\n    try {\n      const conv = await base44.agents.getConversation(conversationId);\n      \n      // Add industry context to the message if it exists\n      const enhancedMessage = industryContext \n        ? `${industryContext}\\n\\nUser Question: ${userMessage}`\n        : userMessage;\n      \n      await base44.agents.addMessage(conv, {\n        role: \"user\",\n        content: enhancedMessage\n      });\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      setIsLoading(false);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleClearChat = async () => {\n    if (!conversationId) return;\n    try {\n      const newConv = await base44.agents.createConversation({\n        agent_name: \"crm_assistant\",\n        metadata: { name: \"Chat Session\", description: \"User chat session\" }\n      });\n      if (newConv?.id) {\n        setConversationId(newConv.id);\n        setMessages([]);\n        setShowClearConfirm(false);\n        toast({\n          title: \"Success\",\n          description: \"Chat cleared successfully\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error clearing chat:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear chat\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleFileUpload = async (event) => {\n    const file = event.target.files?.[0];\n    if (!file || !conversationId || isLoading) return;\n\n    setIsLoading(true);\n\n    try {\n      const { file_url } = await UploadFile({ file });\n      const conv = await base44.agents.getConversation(conversationId);\n      \n      // Add industry context even for file uploads\n      const fileMessage = industryContext\n        ? `${industryContext}\\n\\nUser uploaded a file for analysis.`\n        : `User uploaded a file: ${file.name}`;\n      \n      await base44.agents.addMessage(conv, {\n        role: \"user\",\n        content: fileMessage,\n        file_urls: [file_url]\n      });\n\n      toast({\n        title: \"File uploaded\",\n        description: `${file.name} has been added to the conversation`,\n      });\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      setIsLoading(false);\n      toast({\n        title: \"Upload failed\",\n        description: error.message || \"Could not upload file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Card className={cn(\n      \"fixed bottom-4 right-4 w-96 shadow-2xl border-slate-700 bg-slate-900 flex flex-col transition-all duration-300\",\n      isMinimized ? \"h-16\" : \"h-[600px]\"\n    )}>\n      <CardHeader className=\"flex flex-row items-center justify-between p-4 border-b border-slate-700 cursor-pointer\"\n                  onClick={() => setIsMinimized(!isMinimized)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"relative\">\n            <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center\">\n              <Bot className=\"w-6 h-6 text-white\" />\n            </div>\n            <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-slate-900\"></div>\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-slate-100\">AI Assistant</h3>\n            {tenantInfo?.industry && (\n              <p className=\"text-xs text-slate-400\">\n                {INDUSTRY_LABELS[tenantInfo.industry] || tenantInfo.industry} Expert\n              </p>\n            )}\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowClearConfirm(true);\n            }}\n            className=\"h-8 w-8 text-slate-400 hover:text-slate-200\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={(e) => {\n              e.stopPropagation();\n              setIsMinimized(!isMinimized);\n            }}\n            className=\"h-8 w-8 text-slate-400 hover:text-slate-200\"\n          >\n            {isMinimized ? <Maximize2 className=\"w-4 h-4\" /> : <Minimize2 className=\"w-4 h-4\" />}\n          </Button>\n        </div>\n      </CardHeader>\n\n      {!isMinimized && (\n        <>\n          <CardContent className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n            {messages.length === 0 && (\n              <div className=\"flex flex-col items-center justify-center h-full text-center p-6\">\n                <Bot className=\"w-16 h-16 text-slate-600 mb-4\" />\n                <h4 className=\"text-lg font-semibold text-slate-300 mb-2\">\n                  {tenantInfo?.industry ? `${INDUSTRY_LABELS[tenantInfo.industry]} AI Assistant` : 'AI Assistant'}\n                </h4>\n                <p className=\"text-sm text-slate-400\">\n                  {tenantInfo?.industry \n                    ? `Ask me anything about ${INDUSTRY_LABELS[tenantInfo.industry]}, your CRM data, market trends, or business strategies.`\n                    : 'Ask me anything about your CRM data, market trends, or business strategies.'\n                  }\n                </p>\n              </div>\n            )}\n            {messages.map((msg, idx) => (\n              <MessageBubble key={idx} message={msg} />\n            ))}\n            {isLoading && (\n              <div className=\"flex items-center gap-2 text-slate-400\">\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n                <span className=\"text-sm\">Thinking...</span>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </CardContent>\n\n          <div className=\"p-4 border-t border-slate-700\">\n            <div className=\"flex items-center gap-2\">\n              <Input\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                onKeyPress={(e) => e.key === \"Enter\" && !e.shiftKey && handleSend()}\n                placeholder={tenantInfo?.industry \n                  ? `Ask about ${INDUSTRY_LABELS[tenantInfo.industry]}...`\n                  : \"Type your message...\"\n                }\n                disabled={isLoading || !conversationId}\n                className=\"flex-1 bg-slate-800 border-slate-600 text-slate-100 placeholder:text-slate-500\"\n              />\n              <input\n                type=\"file\"\n                id=\"file-upload\"\n                className=\"hidden\"\n                onChange={handleFileUpload}\n                disabled={isLoading || !conversationId}\n              />\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => document.getElementById('file-upload')?.click()}\n                disabled={isLoading || !conversationId}\n                className=\"bg-slate-800 border-slate-600 hover:bg-slate-700\"\n              >\n                <Paperclip className=\"w-4 h-4 text-slate-400\" />\n              </Button>\n              <MicButton conversationId={conversationId} disabled={isLoading} />\n              <Button\n                onClick={handleSend}\n                disabled={!inputValue.trim() || isLoading || !conversationId}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* Clear Chat Confirmation Dialog */}\n      {showClearConfirm && (\n        <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center p-4 rounded-lg\">\n          <Card className=\"bg-slate-800 border-slate-700 max-w-sm\">\n            <CardHeader>\n              <h3 className=\"text-lg font-semibold text-slate-100\">Clear Chat History?</h3>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-slate-400 mb-4\">\n                This will start a new conversation. Your previous messages will be lost.\n              </p>\n              <div className=\"flex gap-2 justify-end\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowClearConfirm(false)}\n                  className=\"bg-slate-700 border-slate-600 hover:bg-slate-600\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleClearChat}\n                  className=\"bg-red-600 hover:bg-red-700\"\n                >\n                  Clear Chat\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\ClearChatButton.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":7,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":7,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":37,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":37,"endColumn":26},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":44,"column":11,"nodeType":"BlockStatement","messageId":"unexpected","endLine":44,"endColumn":13,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1557,1557],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { RotateCcw } from \"lucide-react\";\n\n// Exportable helpers so other places (menu/shortcuts) can trigger the same behavior\nexport function wipeChatStorage() {\n  try {\n    const ls = window.localStorage;\n    const prefixes = [\"chat_\", \"agent_\", \"ai_chat_\", \"agent_conversation\", \"conversation_\"];\n    const toRemove = [];\n    for (let i = 0; i < ls.length; i++) {\n      const k = ls.key(i);\n      if (!k) continue;\n      if (prefixes.some((p) => k.startsWith(p))) toRemove.push(k);\n    }\n    toRemove.forEach((k) => ls.removeItem(k));\n  } catch (e) {\n    console.warn(\"ClearChat: failed clearing localStorage keys:\", e);\n  }\n\n  try {\n    const ss = window.sessionStorage;\n    const prefixes = [\"chat_\", \"agent_\", \"ai_chat_\", \"agent_conversation\", \"conversation_\"];\n    const toRemove = [];\n    for (let i = 0; i < ss.length; i++) {\n      const k = ss.key(i);\n      if (!k) continue;\n      if (prefixes.some((p) => k.startsWith(p))) toRemove.push(k);\n    }\n    toRemove.forEach((k) => ss.removeItem(k));\n  } catch (e) {\n    console.warn(\"ClearChat: failed clearing sessionStorage keys:\", e);\n  }\n}\n\nexport function clearChat({ reload = true, confirmFirst = false } = {}) {\n  if (confirmFirst) {\n    const ok = window.confirm(\"Clear all prior chat messages for this session?\");\n    if (!ok) return;\n  }\n  try {\n    window.dispatchEvent(new CustomEvent(\"chat:reset\"));\n  } catch {}\n  wipeChatStorage();\n  if (reload) {\n    setTimeout(() => window.location.reload(), 50);\n  }\n}\n\nexport default function ClearChatButton() {\n  const handleClear = () => clearChat({ reload: true, confirmFirst: true });\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            data-testid=\"btn-clear-chat\"\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleClear}\n            className=\"text-slate-400 hover:text-slate-300 hover:bg-slate-800\"\n            aria-label=\"Clear chat\"\n            title=\"Clear chat\"\n          >\n            <RotateCcw className=\"w-5 h-5\" />\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <p>Clear chat</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\CommandPalette.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\CommandPaletteWidget.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[202,213],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * NOTES - CommandPaletteWidget (Wrapper)\n * Formerly a wrapper around CommandPalette; now wraps the persistent ChatWindow\n * so any legacy usage still brings up the new chat experience.\n */\nimport React from \"react\";\nimport ChatWindow from \"./ChatWindow\";\n\nexport default function CommandPaletteWidget() {\n  return <ChatWindow />;\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\EnhancedAIAssistant.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Send,\n  Bot,\n  User,\n  Loader2,\n  Zap,\n  Database,\n  Brain,\n  Workflow\n} from \"lucide-react\";\nimport ReactMarkdown from 'react-markdown';\nimport MiddlewareClient from \"../middleware/MiddlewareClient\";\n\nimport { invokeTenantLLM } from \"@/api/functions\";\nimport { invokeSystemOpenAI } from \"@/api/functions\";\n\nexport default function EnhancedAIAssistant({ user }) {\n  const [messages, setMessages] = useState([\n    {\n      id: 1,\n      role: 'assistant',\n      content: `Hello ${user?.full_name || 'there'}! I'm your enhanced AI assistant. I can:\n\n- Access your CRM data directly (when middleware is available)\n- Use multiple AI models (GPT-4, Claude, etc.)\n- Trigger n8n workflows\n- Fall back to Base44 integrations when needed\n\n${user?.role === 'admin' ? 'As an admin, you can configure the middleware connection in Settings.' : ''}\n\nHow can I help you today?`,\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedModel, setSelectedModel] = useState('openai-gpt4');\n  const [connectionStatus, setConnectionStatus] = useState('checking'); // Renamed from isConnected\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    checkConnection();\n    scrollToBottom();\n  }, [messages]);\n\n  const checkConnection = async () => {\n    try {\n      const health = await MiddlewareClient.healthCheck();\n      setConnectionStatus(health.status === 'healthy' ? 'connected' : 'fallback');\n    } catch (error) {\n      setConnectionStatus('fallback');\n      console.error('Middleware connection check failed:', error);\n    }\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const generateFallbackResponse = (message) => {\n    const lowerMessage = message.toLowerCase();\n\n    if (lowerMessage.includes(\"hello\") || lowerMessage.includes(\"hi\")) {\n      return \"Hello! How can I assist you with your CRM today?\";\n    }\n    if (lowerMessage.includes(\"crm\")) {\n      return \"I can help with CRM related queries, but my advanced features for data retrieval require active AI services. Would you like to know about general CRM concepts?\";\n    }\n    if (lowerMessage.includes(\"contact\") || lowerMessage.includes(\"lead\") || lowerMessage.includes(\"opportunity\") || lowerMessage.includes(\"account\")) {\n      return \"To provide specific contact, lead, account, or opportunity information, an AI service needs to be properly configured. I'm unable to access your live data in fallback mode.\";\n    }\n    if (lowerMessage.includes(\"thank you\") || lowerMessage.includes(\"thanks\")) {\n      return \"You're welcome! Feel free to ask if you have more questions.\";\n    }\n\n    return \"I understand you're asking about your CRM data, but I need an AI service to be configured to provide detailed insights. Please contact your administrator to set up AI integration.\";\n  };\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim() || isLoading) return;\n\n    const userMessage = {\n      id: Date.now(),\n      role: 'user',\n      content: inputMessage,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n\n    try {\n      let aiResponse = null;\n      let usedSystemFallback = false;\n\n      // First try tenant-specific LLM\n      try {\n        const tenantResponse = await invokeTenantLLM({\n          prompt: userMessage.content,\n          // Extract only role and content for conversation context\n          conversation_context: messages.slice(-6).map(msg => ({ role: msg.role, content: msg.content }))\n        });\n\n        if (tenantResponse.data?.success && tenantResponse.data?.response) {\n          aiResponse = tenantResponse.data.response;\n        } else {\n          console.log('Tenant LLM did not return a successful response or data, attempting fallback:', tenantResponse);\n        }\n      } catch (tenantError) {\n        console.log('Tenant LLM unavailable, trying system OpenAI fallback:', tenantError.message);\n      }\n\n      // If tenant LLM failed, try system OpenAI fallback\n      if (!aiResponse) {\n        try {\n          const systemResponse = await invokeSystemOpenAI({\n            prompt: `As a CRM assistant, please help with: ${userMessage.content}`,\n            context_data: {\n              user_context: {\n                email: user?.email,\n                role: user?.role,\n                tenant_id: user?.tenant_id\n              },\n              // Extract only role and content for conversation context\n              conversation_context: messages.slice(-4).map(msg => ({ role: msg.role, content: msg.content }))\n            }\n          });\n\n          if (systemResponse.data?.success && systemResponse.data?.response) {\n            aiResponse = systemResponse.data.response;\n            usedSystemFallback = true;\n          } else {\n            console.log('System OpenAI did not return a successful response or data, attempting rule-based fallback:', systemResponse);\n          }\n        } catch (systemError) {\n          console.log('System OpenAI also unavailable:', systemError.message);\n        }\n      }\n\n      // Final fallback to rule-based responses\n      if (!aiResponse) {\n        aiResponse = generateFallbackResponse(userMessage.content);\n        usedSystemFallback = false; // Rule-based is not System OpenAI\n      }\n\n      const assistantMessage = {\n        id: Date.now() + 1,\n        role: \"assistant\",\n        content: aiResponse,\n        timestamp: new Date(),\n        metadata: usedSystemFallback ? { source: 'system_openai' } : null\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n\n    } catch (error) {\n      console.error(\"Chat error:\", error);\n      const errorMessage = {\n        id: Date.now() + 1,\n        role: \"assistant\",\n        content: \"I apologize, but I'm having trouble processing your request right now. Please try again later or contact support if the issue persists.\",\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const getConnectionBadge = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return (\n          <Badge variant=\"default\" className=\"flex items-center gap-1 bg-green-600\">\n            <div className=\"w-2 h-2 rounded-full bg-white\" />\n            Middleware\n          </Badge>\n        );\n      case 'fallback':\n        return (\n          <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n            <div className=\"w-2 h-2 rounded-full bg-orange-500\" />\n            Base44\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n            <div className=\"w-2 h-2 rounded-full bg-gray-400\" />\n            Checking\n          </Badge>\n        );\n    }\n  };\n\n  return (\n    <Card className=\"w-full h-[600px] flex flex-col\">\n      <CardHeader className=\"flex-shrink-0 pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5 text-purple-600\" />\n            Enhanced AI Assistant\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            {getConnectionBadge()}\n            <select\n              value={selectedModel}\n              onChange={(e) => setSelectedModel(e.target.value)}\n              className=\"text-xs bg-slate-100 border rounded px-2 py-1\"\n            >\n              <option value=\"openai-gpt4\">GPT-4</option>\n              <option value=\"openai-gpt35\">GPT-3.5</option>\n              <option value=\"anthropic-claude\">Claude</option>\n            </select>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 flex flex-col p-0\">\n        <ScrollArea className=\"flex-1 px-4\">\n          <div className=\"space-y-4 py-4\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex gap-3 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n              >\n                {message.role === 'assistant' && (\n                  <div className=\"w-8 h-8 rounded-full bg-purple-100 flex items-center justify-center flex-shrink-0\">\n                    <Bot className=\"w-4 h-4 text-purple-600\" />\n                  </div>\n                )}\n\n                <div className={`max-w-[80%] rounded-lg p-3 ${\n                  message.role === 'user'\n                    ? 'bg-blue-600 text-white'\n                    : message.isError\n                    ? 'bg-red-50 text-red-900 border border-red-200'\n                    : 'bg-slate-100 text-slate-900'\n                }`}>\n                  {message.role === 'user' ? (\n                    <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                  ) : (\n                    <div className=\"prose prose-sm max-w-none\">\n                      <ReactMarkdown>{message.content}</ReactMarkdown>\n                    </div>\n                  )}\n\n                  <div className=\"flex items-center justify-between mt-2 text-xs opacity-70\">\n                    <span>{message.timestamp.toLocaleTimeString()}</span>\n                    {message.role === 'assistant' && (\n                      <div className=\"flex items-center gap-1\">\n                        {message.metadata?.source === 'system_openai' && (\n                           <Badge variant=\"outline\" className=\"text-xs px-1 py-0.5 bg-gray-100 text-gray-600\">System AI</Badge>\n                        )}\n                        <Database className=\"w-3 h-3\" />\n                        <Workflow className=\"w-3 h-3\" />\n                        <Zap className=\"w-3 h-3\" />\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {message.role === 'user' && (\n                  <div className=\"w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center flex-shrink-0\">\n                    <User className=\"w-4 h-4 text-blue-600\" />\n                  </div>\n                )}\n              </div>\n            ))}\n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n\n        <div className=\"border-t p-4\">\n          <div className=\"flex gap-2\">\n            <Input\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={isLoading ? \"AI is thinking...\" : \"Ask me anything...\"}\n              disabled={isLoading || connectionStatus === 'checking'}\n              className=\"flex-1\"\n            />\n            <Button\n              onClick={handleSendMessage}\n              disabled={!inputMessage.trim() || isLoading || connectionStatus === 'checking'}\n              size=\"icon\"\n            >\n              {isLoading ? (\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n              ) : (\n                <Send className=\"w-4 h-4\" />\n              )}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\FloatingAIWidget.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'CommandPalette' is defined but never used.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"CommandPalette"},"fix":{"range":[211,231],"text":""},"desc":"Remove unused variable 'CommandPalette'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Brain, MessageSquare, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport CommandPalette from './CommandPalette';\nimport { User } from \"@/api/entities\";\nimport { Tenant } from \"@/api/entities\";\nimport { useTenant } from \"../shared/tenantContext\";\nimport { checkBackendStatus } from \"@/api/functions\";\n\nexport default function FloatingAIWidget() {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const tenantCtx = useTenant();\n  const selectedTenantId = tenantCtx?.selectedTenantId || null;\n  const [logoUrl, setLogoUrl] = useState(null);\n  const [status, setStatus] = useState(\"checking\");\n\n  React.useEffect(() => {\n    let mounted = true;\n    const fallbackLogo = \"https://qtrypzzcjebvfcihiynt.supabase.co/storage/v1/object/public/base44-prod/public/68ad592dcffacef630b477d2/bc12c2284_Ai-SHA-logo-3.png\";\n\n    const loadBranding = async () => {\n      try {\n        const me = await User.me();\n        let tenantId = null;\n        if ((me?.role === \"superadmin\" || me?.role === \"admin\") && selectedTenantId) {\n          tenantId = selectedTenantId;\n        } else if (me?.tenant_id) {\n          tenantId = me.tenant_id;\n        }\n        let logo = null;\n        if (tenantId) {\n          try {\n            const t = await Tenant.get(tenantId);\n            logo = t?.logo_url || null;\n          } catch {\n            // ignore\n          }\n        }\n        if (!logo && me?.branding_settings?.logoUrl) {\n          logo = me.branding_settings.logoUrl;\n        }\n        if (mounted) setLogoUrl(logo || fallbackLogo);\n      } catch {\n        if (mounted) setLogoUrl(fallbackLogo);\n      }\n    };\n\n    const pollStatus = async () => {\n      try {\n        const { data } = await checkBackendStatus();\n        const health = data?.overall_status || \"error\";\n        if (mounted) {\n          setStatus(health === \"healthy\" ? \"healthy\" : health === \"degraded\" ? \"degraded\" : \"error\");\n        }\n      } catch {\n        if (mounted) setStatus(\"error\");\n      }\n    };\n\n    loadBranding();\n    pollStatus();\n    const id = setInterval(pollStatus, 60000);\n    return () => {\n      mounted = false;\n      clearInterval(id);\n    };\n  }, [selectedTenantId]);\n\n  const statusColor =\n    status === \"healthy\" ? \"bg-green-500\" :\n    status === \"degraded\" ? \"bg-yellow-500\" :\n    status === \"error\" ? \"bg-red-500\" :\n    \"bg-slate-500\";\n\n  return (\n    <>\n      <motion.div\n        className=\"fixed bottom-6 right-24 z-[30]\"\n        initial={{ scale: 0, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ delay: 1, duration: 0.3 }}\n      >\n        <AnimatePresence>\n          {!isExpanded ? (\n            <motion.div\n              key=\"collapsed\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              exit={{ scale: 0 }}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              className=\"relative group\"\n            >\n              <span\n                aria-hidden=\"true\"\n                className=\"pointer-events-none absolute -inset-2 rounded-full opacity-60 blur-2xl transition-opacity group-hover:opacity-80\"\n                style={{\n                  backgroundImage:\n                    \"linear-gradient(135deg, var(--primary-color) 0%, #facc15 30%, #22c55e 60%, var(--accent-color) 100%)\",\n                  filter: \"blur(22px)\",\n                }}\n              />\n              <Button\n                onClick={() => {\n                  if (window.openCommandPalette) {\n                    window.openCommandPalette();\n                  }\n                }}\n                className=\"relative w-16 h-16 aspect-square rounded-full shadow-lg hover:shadow-xl transition-all duration-300 text-white border-0 p-0\"\n                size=\"lg\"\n                aria-label=\"Open AI Command\"\n                title=\"AI Command\"\n                style={{\n                  backgroundImage:\n                    \"linear-gradient(135deg, var(--primary-color) 0%, #facc15 30%, #22c55e 60%, var(--accent-color) 100%)\",\n                }}\n              >\n                <div className=\"absolute inset-0 rounded-full ring-1 ring-white/15\" />\n                <Brain className=\"w-9 h-9 ai-command-icon relative\" strokeWidth={2.25} />\n              </Button>\n            </motion.div>\n          ) : (\n            <motion.div\n              key=\"expanded\"\n              initial={{ scale: 0, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0, opacity: 0 }}\n              className=\"bg-slate-800 rounded-2xl shadow-2xl border border-slate-700 p-4 w-80 h-96\"\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center gap-3\">\n                  {logoUrl && (\n                    <img\n                      src={logoUrl || \"\"}\n                      alt=\"Logo\"\n                      className=\"h-5 w-auto max-w-[120px] object-contain\"\n                      onError={(e) => { e.currentTarget.style.display = \"none\"; }}\n                    />\n                  )}\n                  <span\n                    className={`inline-block h-2.5 w-2.5 rounded-full ${statusColor}`}\n                    title={status === \"healthy\" ? \"Online\" : status === \"degraded\" ? \"Degraded\" : status === \"error\" ? \"Unavailable\" : \"Checking\"}\n                  />\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setIsExpanded(false)}\n                  className=\"text-slate-400 hover:text-slate-200 hover:bg-slate-700\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"text-center py-8\">\n                <p className=\"text-slate-400 mb-4\">Use Ctrl/Cmd + K to open the AI Command Palette</p>\n                <Button\n                  onClick={() => {\n                    if (window.openCommandPalette) {\n                      window.openCommandPalette();\n                    }\n                    setIsExpanded(false);\n                  }}\n                  className=\"bg-primary hover:opacity-90 text-white\"\n                >\n                  <MessageSquare className=\"w-4 h-4 mr-2\" />\n                  Open AI Command\n                </Button>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\InternetSearchResults.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,19],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { Globe, ExternalLink, Building2, User, Link as LinkIcon, MapPin } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function InternetSearchResults({ results = [], onAddLead, onAddContact }) {\n  if (!results || results.length === 0) {\n    return (\n      <div className=\"text-slate-400 text-sm\">No web results yet. Try another query.</div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {results.map((item, idx) => {\n        const isCompany = (item.type || \"\").toLowerCase().includes(\"company\");\n        const hasUrl = !!item.website || !!item.domain || !!item.linkedin;\n        const primaryUrl = item.website || (item.domain ? `https://${item.domain}` : item.linkedin);\n\n        return (\n          <div\n            key={idx}\n            className=\"rounded-lg border border-slate-700 bg-slate-800/70 p-3 hover:bg-slate-800 transition-colors\"\n          >\n            <div className=\"flex items-start justify-between gap-3\">\n              <div className=\"min-w-0\">\n                <div className=\"flex items-center gap-2\">\n                  {isCompany ? (\n                    <Building2 className=\"w-4 h-4 text-blue-400\" />\n                  ) : (\n                    <User className=\"w-4 h-4 text-purple-400\" />\n                  )}\n                  <h4 className=\"text-slate-100 font-medium truncate\">{item.name || item.title || \"Unknown\"}</h4>\n                </div>\n                {item.summary && (\n                  <p className=\"mt-1 text-sm text-slate-300 line-clamp-3\">{item.summary}</p>\n                )}\n                <div className=\"mt-2 flex flex-wrap gap-3 text-xs text-slate-400\">\n                  {item.location && (\n                    <span className=\"inline-flex items-center gap-1\">\n                      <MapPin className=\"w-3 h-3\" />\n                      {item.location}\n                    </span>\n                  )}\n                  {item.domain && (\n                    <span className=\"inline-flex items-center gap-1\">\n                      <Globe className=\"w-3 h-3\" />\n                      {item.domain}\n                    </span>\n                  )}\n                  {item.linkedin && (\n                    <span className=\"inline-flex items-center gap-1\">\n                      <LinkIcon className=\"w-3 h-3\" />\n                      LinkedIn\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"shrink-0 flex flex-col items-end gap-2\">\n                {hasUrl && primaryUrl && (\n                  <a\n                    href={primaryUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-1 text-xs text-slate-200 hover:text-white\"\n                  >\n                    Open <ExternalLink className=\"w-3 h-3\" />\n                  </a>\n                )}\n                <div className=\"flex gap-2\">\n                  {onAddLead && (\n                    <Button\n                      size=\"sm\"\n                      className=\"bg-blue-600 hover:bg-blue-700 h-7 px-2 text-xs\"\n                      onClick={() => onAddLead(item)}\n                      title=\"Create a Lead from this result\"\n                    >\n                      Save as Lead\n                    </Button>\n                  )}\n                  {onAddContact && (\n                    <Button\n                      size=\"sm\"\n                      className=\"bg-emerald-600 hover:bg-emerald-700 h-7 px-2 text-xs\"\n                      onClick={() => onAddContact(item)}\n                      title=\"Create a Contact from this result\"\n                    >\n                      Save as Contact\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\MessageBubble.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Button } from \"@/components/ui/button\";\nimport { Copy, Zap, CheckCircle2, AlertCircle, Loader2, ChevronRight, Clock } from 'lucide-react';\nimport { cn } from \"@/lib/utils\";\nimport { toast } from \"sonner\";\n\nconst FunctionDisplay = ({ toolCall }) => {\n    const [expanded, setExpanded] = useState(false);\n    const name = toolCall?.name || 'Function';\n    const status = toolCall?.status || 'pending';\n    const results = toolCall?.results;\n    \n    const parsedResults = (() => {\n        if (!results) return null;\n        try {\n            return typeof results === 'string' ? JSON.parse(results) : results;\n        } catch {\n            return results;\n        }\n    })();\n    \n    const isError = results && (\n        (typeof results === 'string' && /error|failed/i.test(results)) ||\n        (parsedResults?.success === false)\n    );\n    \n    const statusConfig = {\n        pending: { icon: Clock, color: 'text-slate-400', text: 'Pending' },\n        running: { icon: Loader2, color: 'text-slate-500', text: 'Running...', spin: true },\n        in_progress: { icon: Loader2, color: 'text-slate-500', text: 'Running...', spin: true },\n        completed: isError ? \n            { icon: AlertCircle, color: 'text-red-500', text: 'Failed' } : \n            { icon: CheckCircle2, color: 'text-green-600', text: 'Success' },\n        success: { icon: CheckCircle2, color: 'text-green-600', text: 'Success' },\n        failed: { icon: AlertCircle, color: 'text-red-500', text: 'Failed' },\n        error: { icon: AlertCircle, color: 'text-red-500', text: 'Failed' }\n    }[status] || { icon: Zap, color: 'text-slate-500', text: '' };\n    \n    const Icon = statusConfig.icon;\n    const formattedName = name.split('.').reverse().join(' ').toLowerCase();\n    \n    return (\n        <div className=\"mt-2 text-xs\">\n            <button\n                onClick={() => setExpanded(!expanded)}\n                className={cn(\n                    \"flex items-center gap-2 px-3 py-1.5 rounded-lg border transition-all\",\n                    \"hover:bg-slate-50\",\n                    expanded ? \"bg-slate-50 border-slate-300\" : \"bg-white border-slate-200\"\n                )}\n            >\n                <Icon className={cn(\"h-3 w-3\", statusConfig.color, statusConfig.spin && \"animate-spin\")} />\n                <span className=\"text-slate-700\">{formattedName}</span>\n                {statusConfig.text && (\n                    <span className={cn(\"text-slate-500\", isError && \"text-red-600\")}>\n                        ΓÇó {statusConfig.text}\n                    </span>\n                )}\n                {!statusConfig.spin && (toolCall.arguments_string || results) && (\n                    <ChevronRight className={cn(\"h-3 w-3 text-slate-400 transition-transform ml-auto\", \n                        expanded && \"rotate-90\")} />\n                )}\n            </button>\n            \n            {expanded && !statusConfig.spin && (\n                <div className=\"mt-1.5 ml-3 pl-3 border-l-2 border-slate-200 space-y-2\">\n                    {toolCall.arguments_string && (\n                        <div>\n                            <div className=\"text-xs text-slate-500 mb-1\">Parameters:</div>\n                            <pre className=\"bg-slate-50 rounded-md p-2 text-xs text-slate-600 whitespace-pre-wrap\">\n                                {(() => {\n                                    try {\n                                        return JSON.stringify(JSON.parse(toolCall.arguments_string), null, 2);\n                                    } catch {\n                                        return toolCall.arguments_string;\n                                    }\n                                })()}\n                            </pre>\n                        </div>\n                    )}\n                    {parsedResults && (\n                        <div>\n                            <div className=\"text-xs text-slate-500 mb-1\">Result:</div>\n                            <pre className=\"bg-slate-50 rounded-md p-2 text-xs text-slate-600 whitespace-pre-wrap max-h-48 overflow-auto\">\n                                {typeof parsedResults === 'object' ? \n                                    JSON.stringify(parsedResults, null, 2) : parsedResults}\n                            </pre>\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default function MessageBubble({ message }) {\n    const isUser = message.role === 'user';\n    \n    return (\n        <div className={cn(\"flex gap-3\", isUser ? \"justify-end\" : \"justify-start\")}>\n            {!isUser && (\n                <div className=\"h-7 w-7 rounded-lg bg-slate-100 flex items-center justify-center mt-0.5\">\n                    <div className=\"h-1.5 w-1.5 rounded-full bg-slate-400\" />\n                </div>\n            )}\n            <div className={cn(\"max-w-[85%]\", isUser && \"flex flex-col items-end\")}>\n                {message.content && (\n                    <div className={cn(\n                        \"rounded-2xl px-4 py-2.5\",\n                        isUser ? \"bg-slate-800 text-white\" : \"bg-white border border-slate-200\"\n                    )}>\n                        {isUser ? (\n                            <p className=\"text-sm leading-relaxed\">{message.content}</p>\n                        ) : (\n                            <ReactMarkdown \n                                className=\"text-sm prose prose-sm prose-slate max-w-none [&>*:first-child]:mt-0 [&>*:last-child]:mb-0\"\n                                components={{\n                                    code: ({ inline, className, children, ...props }) => {\n                                        const match = /language-(\\w+)/.exec(className || '');\n                                        return !inline && match ? (\n                                            <div className=\"relative group/code\">\n                                                <pre className=\"bg-slate-900 text-slate-100 rounded-lg p-3 overflow-x-auto my-2\">\n                                                    <code className={className} {...props}>{children}</code>\n                                                </pre>\n                                                <Button\n                                                    size=\"icon\"\n                                                    variant=\"ghost\"\n                                                    className=\"absolute top-2 right-2 h-6 w-6 opacity-0 group-hover/code:opacity-100 bg-slate-800 hover:bg-slate-700\"\n                                                    onClick={() => {\n                                                        navigator.clipboard.writeText(String(children).replace(/\\n$/, ''));\n                                                        toast.success('Code copied');\n                                                    }}\n                                                >\n                                                    <Copy className=\"h-3 w-3 text-slate-400\" />\n                                                </Button>\n                                            </div>\n                                        ) : (\n                                            <code className=\"px-1 py-0.5 rounded bg-slate-100 text-slate-700 text-xs\">\n                                                {children}\n                                            </code>\n                                        );\n                                    },\n                                    a: ({ children, ...props }) => (\n                                        <a {...props} target=\"_blank\" rel=\"noopener noreferrer\">{children}</a>\n                                    ),\n                                    p: ({ children }) => <p className=\"my-1 leading-relaxed\">{children}</p>,\n                                    ul: ({ children }) => <ul className=\"my-1 ml-4 list-disc\">{children}</ul>,\n                                    ol: ({ children }) => <ol className=\"my-1 ml-4 list-decimal\">{children}</ol>,\n                                    li: ({ children }) => <li className=\"my-0.5\">{children}</li>,\n                                    h1: ({ children }) => <h1 className=\"text-lg font-semibold my-2\">{children}</h1>,\n                                    h2: ({ children }) => <h2 className=\"text-base font-semibold my-2\">{children}</h2>,\n                                    h3: ({ children }) => <h3 className=\"text-sm font-semibold my-2\">{children}</h3>,\n                                    blockquote: ({ children }) => (\n                                        <blockquote className=\"border-l-2 border-slate-300 pl-3 my-2 text-slate-600\">\n                                            {children}\n                                        </blockquote>\n                                    ),\n                                }}\n                            >\n                                {message.content}\n                            </ReactMarkdown>\n                        )}\n                    </div>\n                )}\n                \n                {message.tool_calls?.length > 0 && (\n                    <div className=\"space-y-1\">\n                        {message.tool_calls.map((toolCall, idx) => (\n                            <FunctionDisplay key={idx} toolCall={toolCall} />\n                        ))}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\MicButton.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'onResult' is defined but never used.","line":5,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"onResult"},"fix":{"range":[157,166],"text":""},"desc":"Remove unused variable 'onResult'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'onSilence' is defined but never used.","line":5,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"onSilence"},"fix":{"range":[165,176],"text":""},"desc":"Remove unused variable 'onSilence'."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":159,"column":35,"nodeType":"BlockStatement","messageId":"unexpected","endLine":159,"endColumn":37,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[5907,5907],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Mic, MicOff } from \"lucide-react\";\n\nexport default function MicButton({ onResult, onSilence, className = \"\" }) {\n  const [supported, setSupported] = React.useState(false);\n  const [listening, setListening] = React.useState(false);\n\n  const recognitionRef = React.useRef(null);\n  const keepAliveRef = React.useRef(false);\n  const isStartingRef = React.useRef(false);\n  const restartTimerRef = React.useRef(null);\n  const lastStartRef = React.useRef(0);\n  const silenceTimerRef = React.useRef(null);\n  const audioPlayingRef = React.useRef(false); // NEW: Track if audio is playing\n\n  const restartWithDelay = React.useCallback((delayMs = 1200) => {\n    clearTimeout(restartTimerRef.current);\n    const elapsed = performance.now() - (lastStartRef.current || 0);\n    const minGap = 1200;\n    const jitter = 100 + Math.floor(Math.random() * 200);\n    const wait = Math.max(delayMs, minGap - Math.max(0, elapsed)) + jitter;\n\n    restartTimerRef.current = setTimeout(() => {\n      if (!keepAliveRef.current || audioPlayingRef.current) return; // Don't restart if audio is playing\n      const recog = recognitionRef.current;\n      if (!recog || isStartingRef.current) return;\n      try {\n        isStartingRef.current = true;\n        recog.start();\n        console.log('[MicButton] Restarted recognition after delay');\n      } catch (err) {\n        console.warn('[MicButton] Restart failed:', err);\n        isStartingRef.current = false;\n        restartWithDelay(1400);\n      }\n    }, wait);\n  }, []);\n\n  const scheduleSilenceCheck = React.useCallback(() => {\n    clearTimeout(silenceTimerRef.current);\n  }, []);\n\n  React.useEffect(() => {\n    console.log('[MicButton] Initializing...');\n    const SR = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SR) {\n      console.warn('[MicButton] Speech Recognition not supported in this browser');\n      return;\n    }\n\n    console.log('[MicButton] Speech Recognition supported!');\n    setSupported(true);\n    const recog = new SR();\n    recog.lang = \"en-US\";\n    recog.continuous = true;\n    recog.interimResults = false;\n    recog.maxAlternatives = 1;\n\n    recog.onstart = () => {\n      console.log('[MicButton] Recognition started');\n      lastStartRef.current = performance.now();\n      setListening(true);\n      window.dispatchEvent(new CustomEvent(\"chat:mic-active\", { detail: { active: true } }));\n      isStartingRef.current = false;\n      scheduleSilenceCheck();\n    };\n\n    recog.onresult = (e) => {\n      // Ignore results while audio is playing\n      if (audioPlayingRef.current) {\n        console.log('[MicButton] Ignoring speech during audio playback');\n        return;\n      }\n      \n      console.log('[MicButton] Got speech result:', e);\n      const parts = [];\n      for (let i = e.resultIndex; i < e.results.length; i++) {\n        const r = e.results[i];\n        if (r.isFinal && r[0]?.transcript) parts.push(r[0].transcript);\n      }\n      const transcript = parts.join(\" \").trim();\n      console.log('[MicButton] Final transcript:', transcript);\n      if (transcript) {\n        window.dispatchEvent(new CustomEvent(\"chat:voice-result\", { detail: { transcript } }));\n      }\n      scheduleSilenceCheck();\n    };\n\n    recog.onspeechend = () => {\n      console.log('[MicButton] Speech ended');\n      scheduleSilenceCheck();\n    };\n\n    recog.onerror = (ev) => {\n      const error = (ev && ev.error) || \"\";\n      console.warn('[MicButton] Recognition error:', error);\n      const recoverable =\n        [\"no-speech\", \"aborted\", \"network\", \"audio-capture\", \"service-not-allowed\"].includes(error) ||\n        /busy|in use|invalid-state/i.test(error);\n      if (keepAliveRef.current && recoverable && !audioPlayingRef.current) {\n        console.log('[MicButton] Recoverable error, restarting...');\n        restartWithDelay(error === \"invalid-state\" ? 1500 : 1000);\n        return;\n      }\n      console.error('[MicButton] Unrecoverable error, stopping');\n      setListening(false);\n      window.dispatchEvent(new CustomEvent(\"chat:mic-active\", { detail: { active: false } }));\n    };\n\n    recog.onend = () => {\n      console.log('[MicButton] Recognition ended');\n      if (keepAliveRef.current && !audioPlayingRef.current) {\n        console.log('[MicButton] Keep-alive is true, restarting...');\n        restartWithDelay(1200);\n        return;\n      }\n      setListening(false);\n      window.dispatchEvent(new CustomEvent(\"chat:mic-active\", { detail: { active: false } }));\n    };\n\n    recognitionRef.current = recog;\n    console.log('[MicButton] Recognition object created');\n\n    // NEW: Listen for audio lock/unlock events\n    const handleLockOpen = () => {\n      console.log('[MicButton] Audio playback started - pausing recognition');\n      audioPlayingRef.current = true;\n      try {\n        if (recognitionRef.current) {\n          recognitionRef.current.stop();\n        }\n      } catch (e) {\n        console.warn('[MicButton] Failed to stop recognition during audio lock:', e);\n      }\n    };\n\n    const handleUnlockOpen = () => {\n      console.log('[MicButton] Audio playback ended - resuming recognition');\n      audioPlayingRef.current = false;\n      if (keepAliveRef.current) {\n        restartWithDelay(800); // Short delay before restarting\n      }\n    };\n\n    window.addEventListener('chat:lock-open', handleLockOpen);\n    window.addEventListener('chat:unlock-open', handleUnlockOpen);\n\n    const restartTimerId = restartTimerRef.current;\n    const silenceTimerId = silenceTimerRef.current;\n\n    return () => {\n      console.log('[MicButton] Cleaning up...');\n      keepAliveRef.current = false;\n      clearTimeout(restartTimerId);\n      clearTimeout(silenceTimerId);\n      window.removeEventListener('chat:lock-open', handleLockOpen);\n      window.removeEventListener('chat:unlock-open', handleUnlockOpen);\n      try { recog.stop(); } catch {}\n      recognitionRef.current = null;\n      isStartingRef.current = false;\n    };\n  }, [restartWithDelay, scheduleSilenceCheck]);\n\n  const start = () => {\n    console.log('[MicButton] Start button clicked');\n    const recog = recognitionRef.current;\n    if (!recog) {\n      console.error('[MicButton] No recognition object');\n      return;\n    }\n    if (isStartingRef.current) {\n      console.warn('[MicButton] Already starting');\n      return;\n    }\n    if (listening) {\n      console.warn('[MicButton] Already listening');\n      return;\n    }\n    \n    console.log('[MicButton] Starting recognition...');\n    keepAliveRef.current = true;\n    try {\n      isStartingRef.current = true;\n      recog.start();\n      console.log('[MicButton] Recognition.start() called');\n    } catch (err) {\n      console.error('[MicButton] Failed to start:', err);\n      isStartingRef.current = false;\n      restartWithDelay(1400);\n    }\n  };\n\n  const stop = () => {\n    console.log('[MicButton] Stop button clicked');\n    keepAliveRef.current = false;\n    audioPlayingRef.current = false;\n    clearTimeout(restartTimerRef.current);\n    clearTimeout(silenceTimerRef.current);\n    try { \n      recognitionRef.current?.stop();\n      console.log('[MicButton] Recognition stopped');\n    } catch (err) {\n      console.error('[MicButton] Error stopping:', err);\n    }\n  };\n\n  const toggle = () => {\n    console.log('[MicButton] Toggle clicked, current state:', { \n      supported, \n      listening, \n      keepAlive: keepAliveRef.current,\n      isStarting: isStartingRef.current,\n      audioPlaying: audioPlayingRef.current\n    });\n    \n    if (!supported || !recognitionRef.current) {\n      console.error('[MicButton] Cannot toggle - not supported or no recognition object');\n      return;\n    }\n    \n    if (keepAliveRef.current || listening || isStartingRef.current) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  console.log('[MicButton] Rendering, supported:', supported);\n\n  if (!supported) {\n    return (\n      <Button\n        variant=\"outline\"\n        size=\"icon\"\n        className={`bg-slate-700 border-slate-600 text-slate-300 ${className}`}\n        disabled\n        title=\"Speech recognition not supported in this browser\"\n      >\n        <MicOff className=\"w-4 h-4\" />\n      </Button>\n    );\n  }\n\n  return (\n    <Button\n      variant={listening ? \"default\" : \"outline\"}\n      size=\"icon\"\n      onClick={toggle}\n      className={listening ? \"bg-red-600 hover:bg-red-700\" : `bg-slate-700 border-slate-600 text-slate-300 ${className}`}\n      title={listening ? \"Stop listening\" : \"Start voice input\"}\n    >\n      {listening ? <MicOff className=\"w-4 h-4\" /> : <Mic className=\"w-4 h-4\" />}\n    </Button>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\QuickCreateContactDialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\QuickCreateLeadDialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\ResearchDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ReactMarkdown from \"react-markdown\";\nimport { ExternalLink } from \"lucide-react\";\n\nexport default function ResearchDialog({ open, onOpenChange, query, data }) {\n  const answer = data?.answer || data?.summary || \"\";\n  const bullets = Array.isArray(data?.bullets) ? data.bullets : [];\n  const sources = Array.isArray(data?.sources) ? data.sources : [];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl bg-slate-900 border border-slate-700 text-slate-200\">\n        <DialogHeader>\n          <DialogTitle className=\"text-slate-100\">Web Research</DialogTitle>\n          <DialogDescription className=\"text-slate-400\">\n            Results for: <span className=\"text-slate-200 font-medium\">{query || \"Your question\"}</span>\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {(answer || bullets.length > 0) && (\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardContent className=\"p-4\">\n                {answer && (\n                  <div className=\"prose prose-invert max-w-none\">\n                    <ReactMarkdown>{answer}</ReactMarkdown>\n                  </div>\n                )}\n                {bullets.length > 0 && (\n                  <ul className=\"list-disc pl-5 mt-3 space-y-1 text-slate-200\">\n                    {bullets.map((b, i) => (\n                      <li key={i}>{b}</li>\n                    ))}\n                  </ul>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          <div>\n            <div className=\"text-sm font-semibold text-slate-300 mb-2\">Sources</div>\n            {sources.length > 0 ? (\n              <div className=\"flex flex-wrap gap-2\">\n                {sources.slice(0, 8).map((src, i) => (\n                  <a\n                    key={i}\n                    href={src}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    className=\"inline-flex items-center gap-1\"\n                    title={src}\n                  >\n                    <Badge variant=\"outline\" className=\"bg-slate-800 border-slate-600 text-blue-300 hover:bg-slate-700\">\n                      Source {i + 1}\n                      <ExternalLink className=\"w-3 h-3 ml-1\" />\n                    </Badge>\n                  </a>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-slate-500 text-sm\">No explicit sources returned.</div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ai\\agentSdkGuard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\bizdev\\ArchiveIndexViewer.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Download' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Download"},"fix":{"range":[603,615],"text":""},"desc":"Remove unused variable 'Download'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadArchives'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadArchives, tenantId]","fix":{"range":[1456,1466],"text":"[loadArchives, tenantId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { ArchiveIndex } from \"@/api/entities\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Archive,\n  Search,\n  Download,\n  RotateCcw,\n  Loader2,\n  X,\n  AlertTriangle,\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { format } from \"date-fns\";\nimport { retrieveArchiveFromR2 } from \"@/api/functions\";\n\nexport default function ArchiveIndexViewer({ tenantId, onClose, onRetrieved }) {\n  const [archives, setArchives] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [retrieving, setRetrieving] = useState(false);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [selectedArchive, setSelectedArchive] = useState(null);\n  const [reactivateMode, setReactivateMode] = useState('all');\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [batchFilter, setBatchFilter] = useState(\"all\");\n  const [formatFilter, setFormatFilter] = useState(\"all\");\n\n  useEffect(() => {\n    loadArchives();\n  }, [tenantId]);\n\n  const loadArchives = async () => {\n    if (!tenantId) return;\n\n    setLoading(true);\n    try {\n      const filter = {\n        tenant_id: tenantId,\n        entity_type: \"BizDevSource\"\n      };\n      \n      const fetchedArchives = await ArchiveIndex.filter(filter, '-archived_at', 100);\n      setArchives(fetchedArchives || []);\n    } catch (error) {\n      console.error(\"Failed to load archives:\", error);\n      toast.error(\"Failed to load archive index\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRetrieveClick = (archive) => {\n    setSelectedArchive(archive);\n    setShowConfirmDialog(true);\n  };\n\n  const handleConfirmRetrieve = async () => {\n    if (!selectedArchive) return;\n\n    setRetrieving(true);\n    setShowConfirmDialog(false);\n\n    try {\n      const response = await retrieveArchiveFromR2({\n        archive_index_id: selectedArchive.id,\n        reactivate_mode: reactivateMode\n      });\n\n      if (response.status === 200) {\n        const result = response.data;\n        toast.success(\n          `Retrieved ${result.rehydrated_count} records from archive`,\n          {\n            description: result.skipped_count > 0 \n              ? `${result.skipped_count} records were skipped (already exist)`\n              : undefined\n          }\n        );\n        \n        // Callback to refresh the main page\n        if (onRetrieved) {\n          onRetrieved();\n        }\n      } else {\n        throw new Error(response.data?.error || 'Retrieval failed');\n      }\n    } catch (error) {\n      console.error(\"Archive retrieval failed:\", error);\n      toast.error(\"Failed to retrieve archive\", {\n        description: error.message || 'An error occurred'\n      });\n    } finally {\n      setRetrieving(false);\n      setSelectedArchive(null);\n    }\n  };\n\n  const filteredArchives = archives.filter((archive) => {\n    const matchesSearch = !searchTerm ||\n      archive.batch_id?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      archive.source_description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      archive.archive_path?.toLowerCase().includes(searchTerm.toLowerCase());\n\n    const matchesBatch = batchFilter === \"all\" || archive.batch_id === batchFilter;\n    const matchesFormat = formatFilter === \"all\" || archive.file_format === formatFilter;\n\n    return matchesSearch && matchesBatch && matchesFormat;\n  });\n\n  const uniqueBatches = [...new Set(archives.map(a => a.batch_id).filter(Boolean))];\n\n  const formatFileSize = (bytes) => {\n    if (!bytes) return \"N/A\";\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)} KB`;\n    return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n        <div className=\"bg-slate-800 rounded-lg p-8\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-blue-500 mx-auto\" />\n          <p className=\"text-slate-300 mt-4\">Loading archives...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-slate-800 rounded-lg max-w-6xl w-full max-h-[90vh] flex flex-col\">\n          <CardHeader className=\"border-b border-slate-700 flex-shrink-0\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <Archive className=\"w-5 h-5 text-blue-400\" />\n                Archive Index\n              </CardTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"text-slate-400 hover:text-slate-300\"\n                disabled={retrieving}\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"p-6 flex-1 overflow-auto\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400\" />\n                <Input\n                  placeholder=\"Search archives...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 bg-slate-700 border-slate-600 text-slate-100\"\n                />\n              </div>\n              <Select value={batchFilter} onValueChange={setBatchFilter}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-100\">\n                  <SelectValue placeholder=\"Filter by batch\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Batches</SelectItem>\n                  {uniqueBatches.map(batch => (\n                    <SelectItem key={batch} value={batch}>{batch}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select value={formatFilter} onValueChange={setFormatFilter}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-100\">\n                  <SelectValue placeholder=\"Filter by format\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Formats</SelectItem>\n                  <SelectItem value=\"json\">JSON</SelectItem>\n                  <SelectItem value=\"csv\">CSV</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {filteredArchives.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Archive className=\"w-16 h-16 text-slate-600 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-slate-300 mb-2\">\n                  No archives found\n                </h3>\n                <p className=\"text-slate-400\">\n                  {archives.length === 0\n                    ? \"No BizDev sources have been archived yet.\"\n                    : \"Try adjusting your filters or search term.\"}\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredArchives.map((archive) => (\n                  <Card key={archive.id} className=\"bg-slate-700 border-slate-600 hover:border-blue-500 transition-colors\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <h3 className=\"font-semibold text-slate-100\">\n                              {archive.source_description || \"BizDev Archive\"}\n                            </h3>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {archive.file_format?.toUpperCase()}\n                            </Badge>\n                            {archive.is_accessible ? (\n                              <Badge variant=\"outline\" className=\"text-xs text-green-400 border-green-600\">\n                                Accessible\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"outline\" className=\"text-xs text-red-400 border-red-600\">\n                                Unavailable\n                              </Badge>\n                            )}\n                          </div>\n                          \n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                            <div>\n                              <p className=\"text-slate-400\">Batch ID</p>\n                              <p className=\"text-slate-200 font-mono text-xs\">\n                                {archive.batch_id || 'N/A'}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-slate-400\">Records</p>\n                              <p className=\"text-slate-200 font-medium\">\n                                {archive.record_count}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-slate-400\">File Size</p>\n                              <p className=\"text-slate-200 font-medium\">\n                                {formatFileSize(archive.file_size_bytes)}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-slate-400\">Archived</p>\n                              <p className=\"text-slate-200\">\n                                {format(new Date(archive.archived_at), 'MMM d, yyyy')}\n                              </p>\n                            </div>\n                          </div>\n\n                          <div className=\"mt-2\">\n                            <p className=\"text-xs text-slate-400\">\n                              <span className=\"font-mono\">{archive.archive_path}</span>\n                            </p>\n                            <p className=\"text-xs text-slate-500 mt-1\">\n                              Archived by: {archive.archived_by}\n                            </p>\n                          </div>\n                        </div>\n\n                        <div className=\"flex gap-2 ml-4\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleRetrieveClick(archive)}\n                            disabled={!archive.is_accessible || retrieving}\n                            className=\"border-green-600 text-green-400 hover:bg-green-900/30\"\n                          >\n                            {retrieving && selectedArchive?.id === archive.id ? (\n                              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                            ) : (\n                              <RotateCcw className=\"w-4 h-4 mr-2\" />\n                            )}\n                            Retrieve\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n\n          <div className=\"border-t border-slate-700 p-4 flex-shrink-0\">\n            <div className=\"flex items-center justify-between text-sm text-slate-400\">\n              <span>Showing {filteredArchives.length} of {archives.length} archives</span>\n              <Button\n                variant=\"outline\"\n                onClick={loadArchives}\n                disabled={retrieving}\n                className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n              >\n                Refresh\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Confirmation Dialog */}\n      <Dialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700\">\n          <DialogHeader>\n            <DialogTitle className=\"text-slate-100 flex items-center gap-2\">\n              <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />\n              Confirm Archive Retrieval\n            </DialogTitle>\n            <DialogDescription className=\"text-slate-300\">\n              You are about to retrieve{\" \"}\n              <span className=\"font-semibold text-slate-100\">\n                {selectedArchive?.record_count} records\n              </span>{\" \"}\n              from archive:\n              <div className=\"mt-2 p-3 bg-slate-700 rounded-lg\">\n                <p className=\"text-sm font-medium text-slate-200\">\n                  {selectedArchive?.source_description}\n                </p>\n                <p className=\"text-xs text-slate-400 mt-1\">\n                  Batch: {selectedArchive?.batch_id}\n                </p>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-slate-300 mb-2 block\">\n                Reactivation Mode\n              </label>\n              <Select value={reactivateMode} onValueChange={setReactivateMode}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-100\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">\n                    Reactivate existing + Create new\n                  </SelectItem>\n                  <SelectItem value=\"new_only\">\n                    Only create new records (skip existing)\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-slate-400 mt-2\">\n                {reactivateMode === 'all' \n                  ? \"This will reactivate archived records and create any that don't exist.\"\n                  : \"This will only create records that don't already exist in the database.\"}\n              </p>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowConfirmDialog(false)}\n              className=\"border-slate-600 text-slate-300\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleConfirmRetrieve}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <RotateCcw className=\"w-4 h-4 mr-2\" />\n              Retrieve Archive\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\bizdev\\BizDevSourceCard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'onDelete' is defined but never used.","line":15,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":68,"suggestions":[{"messageId":"removeVar","data":{"varName":"onDelete"},"fix":{"range":[358,368],"text":""},"desc":"Remove unused variable 'onDelete'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'onViewDetails' is defined but never used.","line":15,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":83,"suggestions":[{"messageId":"removeVar","data":{"varName":"onViewDetails"},"fix":{"range":[368,383],"text":""},"desc":"Remove unused variable 'onViewDetails'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Building2,\n  Mail,\n  Phone,\n  MapPin,\n  Globe,\n  ExternalLink,\n  Pencil,\n} from \"lucide-react\";\n\nexport default function BizDevSourceCard({ source, onEdit, onDelete, onViewDetails, onClick, isSelected, onSelect }) {\n  const getStatusColor = (status) => {\n    switch (status) {\n      case \"Active\":\n        return \"bg-green-900/30 text-green-400 border-green-700\";\n      case \"Promoted\":\n        return \"bg-blue-900/30 text-blue-400 border-blue-700\";\n      case \"Archived\":\n        return \"bg-slate-700 text-slate-400 border-slate-600\";\n      default:\n        return \"bg-slate-700 text-slate-300 border-slate-600\";\n    }\n  };\n\n  const getLicenseStatusColor = (status) => {\n    switch (status) {\n      case \"Active\":\n        return \"bg-green-900/30 text-green-400 border-green-700\";\n      case \"Suspended\":\n      case \"Revoked\":\n        return \"bg-red-900/30 text-red-400 border-red-700\";\n      case \"Expired\":\n        return \"bg-yellow-900/30 text-yellow-400 border-yellow-700\";\n      case \"Unknown\":\n      case \"Not Required\":\n        return \"bg-slate-700 text-slate-400 border-slate-600\";\n      default:\n        return \"bg-slate-700 text-slate-300 border-slate-600\";\n    }\n  };\n\n  const linkedAccount = null;\n  const statusColorClass = getStatusColor(source.status || 'Active');\n\n  const handleCardClick = (e) => {\n    // Don't open detail panel if clicking checkbox, button, or link\n    if (\n      e.target.type === 'checkbox' || \n      e.target.closest('button') || \n      e.target.closest('a') ||\n      e.target.closest('input[type=\"checkbox\"]')\n    ) {\n      return;\n    }\n    \n    // Call the onClick handler to open detail panel\n    if (onClick) {\n      onClick(source);\n    }\n  };\n\n  return (\n    <Card\n      className={`hover:shadow-lg transition-all duration-200 cursor-pointer bg-slate-800 border-slate-700 ${\n        isSelected ? 'ring-2 ring-blue-500' : ''\n      }`}\n      onClick={handleCardClick}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-4\">\n          {onSelect && (\n            <div onClick={(e) => e.stopPropagation()} className=\"pt-1 pr-2\">\n              <input\n                type=\"checkbox\"\n                checked={isSelected}\n                onChange={(e) => {\n                  e.stopPropagation();\n                  onSelect(source.id);\n                }}\n                className=\"w-4 h-4 text-blue-600 bg-slate-700 border-slate-600 rounded focus:ring-blue-500\"\n              />\n            </div>\n          )}\n\n          <div className=\"flex-1 space-y-1\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-10 h-10 rounded-lg bg-blue-900/30 border border-blue-700/50 flex items-center justify-center flex-shrink-0\">\n                <Building2 className=\"w-5 h-5 text-blue-400\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"text-lg font-semibold text-slate-100\">{source.company_name}</h3>\n                {source.dba_name && (\n                  <p className=\"text-sm text-slate-400\">DBA: {source.dba_name}</p>\n                )}\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 flex-wrap ml-12\">\n              {source.license_status && source.license_status !== \"Not Required\" && (\n                <Badge variant=\"outline\" className={getLicenseStatusColor(source.license_status)}>\n                  {source.license_status}\n                </Badge>\n              )}\n              {source.batch_id && (\n                <span className=\"flex items-center gap-1 text-sm text-slate-400\">\n                  Batch: <span className=\"text-slate-300\">{source.batch_id}</span>\n                </span>\n              )}\n              {source.industry && (\n                <span className=\"flex items-center gap-1 text-sm text-slate-400\">\n                  Industry: <span className=\"text-slate-300\">{source.industry}</span>\n                </span>\n              )}\n            </div>\n          </div>\n          {onEdit && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onEdit(source);\n              }}\n              className=\"text-slate-400 hover:text-blue-400 hover:bg-slate-700\"\n            >\n              <Pencil className=\"w-4 h-4\" />\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"flex-grow space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n          {source.email && (\n            <div className=\"flex items-center gap-2 text-slate-300\">\n              <Mail className=\"w-4 h-4 text-slate-400 flex-shrink-0\" />\n              <a \n                href={`mailto:${source.email}`} \n                className=\"hover:text-blue-400 transition-colors truncate\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                {source.email}\n              </a>\n            </div>\n          )}\n          {source.phone_number && (\n            <div className=\"flex items-center gap-2 text-slate-300\">\n              <Phone className=\"w-4 h-4 text-slate-400 flex-shrink-0\" />\n              <a \n                href={`tel:${source.phone_number}`} \n                className=\"hover:text-blue-400 transition-colors\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                {source.phone_number}\n              </a>\n            </div>\n          )}\n          {source.city && source.state_province && (\n            <div className=\"flex items-center gap-2 text-slate-300\">\n              <MapPin className=\"w-4 h-4 text-slate-400 flex-shrink-0\" />\n              <span className=\"truncate\">{source.city}, {source.state_province}</span>\n            </div>\n          )}\n          {source.website && (\n            <div className=\"flex items-center gap-2 text-slate-300\">\n              <Globe className=\"w-4 h-4 text-slate-400 flex-shrink-0\" />\n              <a\n                href={source.website}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"hover:text-blue-400 transition-colors truncate flex items-center gap-1\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                {source.website.replace(/^https?:\\/\\/(www\\.)?/, \"\")}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            </div>\n          )}\n        </div>\n\n        {linkedAccount && (\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Badge variant=\"outline\" className=\"border-blue-600 text-blue-400\">\n              Linked to Account: {linkedAccount.name}\n            </Badge>\n          </div>\n        )}\n\n        <div className=\"flex justify-between items-center pt-2 border-t border-slate-700\">\n          <Badge variant=\"outline\" className={statusColorClass}>\n            {source.status || 'Active'}\n          </Badge>\n          <span className=\"text-xs text-slate-500\">{source.source}</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\bizdev\\BizDevSourceDetailPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle2' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle2"},"fix":{"range":[409,425],"text":""},"desc":"Remove unused variable 'CheckCircle2'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Clock"},"fix":{"range":[425,434],"text":""},"desc":"Remove unused variable 'Clock'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Plus"},"fix":{"range":[482,490],"text":""},"desc":"Remove unused variable 'Plus'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Calendar"},"fix":{"range":[490,502],"text":""},"desc":"Remove unused variable 'Calendar'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'accounts' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"accounts"},"fix":{"range":[975,988],"text":""},"desc":"Remove unused variable 'accounts'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'onDelete' is defined but never used.","line":44,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"onDelete"},"fix":{"range":[1011,1024],"text":""},"desc":"Remove unused variable 'onDelete'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'onArchive' is defined but never used.","line":45,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"onArchive"},"fix":{"range":[1024,1037],"text":""},"desc":"Remove unused variable 'onArchive'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'hasAccountLinked' is assigned a value but never used.","line":188,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":188,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"hasAccountLinked"},"fix":{"range":[5631,5690],"text":""},"desc":"Remove unused variable 'hasAccountLinked'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport {\n  X,\n  Building2,\n  Mail,\n  Phone,\n  Globe,\n  MapPin,\n  FileText,\n  TrendingUp,\n  AlertCircle,\n  CheckCircle2,\n  Clock,\n  Pencil,\n  Archive,\n  Loader2,\n  ExternalLink,\n  Plus,\n  Calendar,\n  Target,\n  Users,\n  CheckCircle,\n  Info\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { toast } from \"sonner\";\nimport { promoteBizDevSourceToAccount } from \"@/api/functions\";\nimport { createPageUrl } from \"@/utils\";\nimport { Link } from \"react-router-dom\";\nimport { Opportunity } from \"@/api/entities\";\nimport { Activity } from \"@/api/entities\";\nimport { Lead } from \"@/api/entities\";\n\nexport default function BizDevSourceDetailPanel({ \n  bizDevSource, \n  accounts, \n  onClose, \n  onEdit, \n  onDelete,\n  onArchive, \n  onPromote, \n  onUpdate, \n  onRefresh \n}) {\n  const [promoting, setPromoting] = useState(false);\n  const [showPromoteConfirm, setShowPromoteConfirm] = useState(false);\n  const [linkedLeads, setLinkedLeads] = useState([]);\n  const [creatingOpportunity, setCreatingOpportunity] = useState(false);\n  const [linkedOpportunities, setLinkedOpportunities] = useState([]);\n  const [currentSource, setCurrentSource] = useState(bizDevSource);\n\n  // Update currentSource when bizDevSource prop changes\n  useEffect(() => {\n    if (bizDevSource) {\n      setCurrentSource(bizDevSource);\n    }\n  }, [bizDevSource]);\n\n  // Load linked data (leads and opportunities)\n  useEffect(() => {\n    const loadLinkedData = async () => {\n      if (!currentSource?.id) return;\n\n      try {\n        // Load linked leads\n        if (currentSource.lead_ids && currentSource.lead_ids.length > 0) {\n          const leads = await Lead.list();\n          const filtered = leads.filter(l => currentSource.lead_ids.includes(l.id));\n          setLinkedLeads(filtered);\n        } else {\n          setLinkedLeads([]);\n        }\n\n        // Load linked opportunities (search by description containing source ID)\n        const opps = await Opportunity.list();\n        const linkedOpps = opps.filter(opp =>\n          opp.description && opp.description.includes(`[BizDevSource:${currentSource.id}]`)\n        );\n        setLinkedOpportunities(linkedOpps);\n      } catch (error) {\n        console.error(\"Failed to load linked data:\", error);\n        toast.error(\"Failed to load linked data.\");\n      }\n    };\n    loadLinkedData();\n  }, [currentSource?.id, currentSource?.lead_ids]);\n\n  if (!currentSource) return null;\n\n  const handlePromote = async () => {\n    if (!currentSource?.id) {\n      toast.error(\"Invalid BizDev Source\");\n      return;\n    }\n\n    setPromoting(true);\n    setShowPromoteConfirm(false);\n\n    try {\n      const { data, status } = await promoteBizDevSourceToAccount({\n        bizdev_source_id: currentSource.id\n      });\n\n      if (status === 200 && data.success) {\n        const updatedSource = {\n          ...currentSource,\n          status: 'Promoted',\n          account_id: data.account_id,\n          account_name: data.account_name\n        };\n\n        setCurrentSource(updatedSource);\n\n        if (onUpdate) onUpdate(updatedSource);\n        if (onPromote) onPromote(updatedSource);\n        if (onRefresh) onRefresh();\n\n        if (data.already_promoted) {\n          toast.info(data.message, {\n            description: \"This source is already linked to an account\"\n          });\n        } else {\n          toast.success(data.message, {\n            description: `Promoted to Account: ${data.account_name}`\n          });\n        }\n      } else {\n        toast.error(data.error || 'Failed to promote BizDev Source');\n      }\n    } catch (error) {\n      console.error('Promote error:', error);\n      \n      if (error.response?.status === 400) {\n        toast.error(\"Cannot promote this source\", {\n          description: error.response?.data?.error || \"This source may already be promoted\"\n        });\n      } else {\n        toast.error(error.message || 'Failed to promote BizDev Source');\n      }\n    } finally {\n      setPromoting(false);\n    }\n  };\n\n  const handleArchive = () => {\n    const updatedSource = {\n      ...currentSource,\n      status: 'Archived',\n      archived_at: new Date().toISOString()\n    };\n    \n    setCurrentSource(updatedSource);\n    if (onUpdate) onUpdate(updatedSource);\n    \n    toast.success(\"BizDev Source archived\");\n    onClose();\n  };\n\n  const getLicenseStatusColor = (status) => {\n    const colors = {\n      'Active': 'bg-green-100 text-green-800 border-green-300',\n      'Suspended': 'bg-yellow-100 text-yellow-800 border-yellow-300',\n      'Revoked': 'bg-red-100 text-red-800 border-red-300',\n      'Expired': 'bg-orange-100 text-orange-800 border-orange-300',\n      'Unknown': 'bg-gray-100 text-gray-800 border-gray-300',\n      'Not Required': 'bg-blue-100 text-blue-800 border-blue-300'\n    };\n    return colors[status] || 'bg-gray-100 text-gray-800 border-gray-300';\n  };\n\n  const getStatusColor = (status) => {\n    const colors = {\n      'Active': 'bg-blue-100 text-blue-800 border-blue-300',\n      'Promoted': 'bg-green-100 text-green-800 border-green-300',\n      'Archived': 'bg-gray-100 text-gray-800 border-gray-300'\n    };\n    return colors[status] || 'bg-gray-100 text-gray-800 border-gray-300';\n  };\n\n  const isPromoted = currentSource.status === 'Promoted';\n  const isArchived = currentSource.status === 'Archived';\n  const canPromote = !isPromoted && !isArchived;\n  const hasAccountLinked = Boolean(currentSource.account_id);\n\n\n  const handleCreateOpportunity = async () => {\n    if (!currentSource?.id) {\n      toast.error(\"Invalid BizDev Source\");\n      return;\n    }\n    \n    console.log('[BizDevSource] Creating opportunity from source:', currentSource.company_name);\n    \n    setCreatingOpportunity(true);\n    try {\n      const closeDate = new Date();\n      closeDate.setDate(closeDate.getDate() + 30);\n      const closeDateStr = closeDate.toISOString().split('T')[0];\n\n      const oppPayload = {\n        name: `${currentSource.company_name} - New Business Opportunity`,\n        amount: 0,\n        stage: \"prospecting\",\n        close_date: closeDateStr,\n        tenant_id: currentSource.tenant_id,\n        description: `Opportunity created from BizDev Source: ${currentSource.source || 'Unknown Source'}\\n` +\n                     `Batch: ${currentSource.batch_id || 'N/A'}\\n` +\n                     `Company: ${currentSource.company_name}\\n` +\n                     `Contact: ${currentSource.email || currentSource.phone_number || 'No contact info'}\\n` +\n                     `[BizDevSource:${currentSource.id}]`,\n        lead_source: \"other\",\n        type: \"new_business\",\n        probability: 10,\n        is_test_data: false,\n        // Don't set account_id yet - that happens after we win the business\n      };\n\n      console.log('[BizDevSource] Creating opportunity with payload:', oppPayload);\n\n      const newOpp = await Opportunity.create(oppPayload);\n\n      console.log('[BizDevSource] Opportunity created:', newOpp);\n\n      // Create initial follow-up activity\n      try {\n        const activityDueDate = new Date();\n        activityDueDate.setDate(activityDueDate.getDate() + 2);\n        const activityDueDateStr = activityDueDate.toISOString().split('T')[0];\n\n        await Activity.create({\n          type: \"call\",\n          subject: `Initial contact: ${currentSource.company_name}`,\n          description: `Follow up on opportunity for ${currentSource.company_name}\\n` +\n                       `Contact: ${currentSource.email || currentSource.phone_number || 'No contact info'}\\n` +\n                       `Source: ${currentSource.source}`,\n          status: \"scheduled\",\n          priority: \"high\",\n          related_to: \"opportunity\",\n          related_id: newOpp.id,\n          related_name: newOpp.name,\n          due_date: activityDueDateStr,\n          tenant_id: currentSource.tenant_id,\n          is_test_data: false,\n        });\n\n        toast.success(\"Opportunity and initial activity created!\");\n      } catch (actError) {\n        console.warn(\"Failed to create activity, but opportunity was created:\", actError);\n        toast.success(\"Opportunity created! (Activity creation failed)\");\n      }\n\n      setTimeout(() => {\n        window.location.href = createPageUrl(`Opportunities?id=${newOpp.id}`);\n      }, 500);\n    } catch (error) {\n      console.error(\"Failed to create opportunity:\", error);\n      toast.error(`Failed to create opportunity: ${error.message || 'Unknown error'}`);\n    } finally {\n      setCreatingOpportunity(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-y-0 right-0 w-full md:w-2/3 lg:w-1/2 bg-slate-800 shadow-2xl z-50 overflow-y-auto border-l border-slate-700\">\n      <CardHeader className=\"border-b border-slate-700 sticky top-0 bg-slate-800 z-10\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Building2 className=\"w-6 h-6 text-blue-400\" />\n            <div>\n              <CardTitle className=\"text-slate-100\">{currentSource.company_name}</CardTitle>\n              {currentSource.dba_name && (\n                <p className=\"text-sm text-slate-400 mt-1\">\n                  DBA: {currentSource.dba_name}\n                </p>\n              )}\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"text-slate-400 hover:text-slate-300 hover:bg-slate-700\"\n          >\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        <div className=\"flex flex-wrap gap-2 mt-4\">\n          <Badge className={`${getStatusColor(currentSource.status)} font-semibold`}>\n            {currentSource.status}\n          </Badge>\n          {currentSource.license_status && (\n            <Badge className={`${getLicenseStatusColor(currentSource.license_status)} font-semibold`}>\n              License: {currentSource.license_status}\n            </Badge>\n          )}\n          {currentSource.batch_id && (\n            <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n              Batch: {currentSource.batch_id}\n            </Badge>\n          )}\n          {currentSource.source && (\n            <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n              Source: {currentSource.source}\n            </Badge>\n          )}\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-wrap gap-2 mt-4\">\n          {/* Create Opportunity - Always available for Active sources */}\n          {!isArchived && (\n            <Button\n              onClick={handleCreateOpportunity}\n              disabled={creatingOpportunity}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              {creatingOpportunity ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Creating...\n                </>\n              ) : (\n                <>\n                  <Target className=\"w-4 h-4 mr-2\" />\n                  Create Opportunity\n                </>\n              )}\n            </Button>\n          )}\n\n          {/* Promote to Account - Only show after business is won */}\n          {canPromote && (\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowPromoteConfirm(true)}\n              disabled={promoting}\n              className=\"border-green-600 text-green-400 hover:bg-green-900/30\"\n              title=\"Promote to Account after winning business\"\n            >\n              {promoting ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Promoting...\n                </>\n              ) : (\n                <>\n                  <TrendingUp className=\"w-4 h-4 mr-2\" />\n                  Promote to Account\n                </>\n              )}\n            </Button>\n          )}\n          \n          {/* View Linked Account - Show if already promoted */}\n          {isPromoted && currentSource.account_id && (\n            <Link to={createPageUrl(`Accounts?id=${currentSource.account_id}`)}>\n              <Button variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                <ExternalLink className=\"w-4 h-4 mr-2\" />\n                View Linked Account\n              </Button>\n            </Link>\n          )}\n\n          {/* Edit and Archive */}\n          {!isArchived && (\n            <>\n              <Button\n                variant=\"outline\"\n                onClick={() => onEdit(currentSource)}\n                className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n              >\n                <Pencil className=\"w-4 h-4 mr-2\" />\n                Edit\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                onClick={handleArchive}\n                className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n              >\n                <Archive className=\"w-4 h-4 mr-2\" />\n                Archive\n              </Button>\n            </>\n          )}\n        </div>\n\n        {/* Workflow Info - LIGHTENED BACKGROUND */}\n        {/* Only show workflow hint if not archived, not promoted, and has linked leads */}\n        {!isArchived && !isPromoted && currentSource.lead_ids && currentSource.lead_ids.length > 0 && ( \n          <Alert className=\"mt-4 bg-blue-50 border-blue-200\">\n            <Info className=\"h-4 w-4 text-blue-700\" />\n            <AlertTitle className=\"text-blue-900 font-semibold\">Workflow</AlertTitle>\n            <AlertDescription className=\"text-blue-800\">\n              Create an opportunity to start pursuing this prospect. Promote to Account after winning business.\n            </AlertDescription>\n          </Alert>\n        )}\n      </CardHeader>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Security Info */}\n        <div className=\"flex items-center gap-2 text-xs text-slate-400\">\n          <Badge variant=\"outline\" className=\"text-xs border-slate-600 text-slate-300\">\n            ID: {currentSource.id?.slice(0, 12)}...\n          </Badge>\n          {currentSource.batch_id && (\n            <Badge variant=\"outline\" className=\"text-xs border-slate-600 text-slate-300\">\n              Batch: {currentSource.batch_id}\n            </Badge>\n          )}\n        </div>\n\n        {/* Promote Confirmation Alert - LIGHTENED BACKGROUND */}\n        {showPromoteConfirm && canPromote && ( \n          <Alert className=\"bg-green-50 border-green-200\">\n            <AlertCircle className=\"h-4 w-4 text-green-700\" />\n            <AlertTitle className=\"text-green-900 font-semibold\">Promote to Account?</AlertTitle>\n            <AlertDescription className=\"text-green-800\">\n              <p className=\"mb-3\">\n                This will create a permanent Account record for <strong>{currentSource.company_name}</strong>. \n                Use this when business is won and they become a customer.\n              </p>\n              <div className=\"mt-3 flex gap-2\">\n                <Button\n                  size=\"sm\"\n                  onClick={handlePromote}\n                  disabled={promoting}\n                  className=\"bg-green-600 hover:bg-green-700 text-white\"\n                >\n                  {promoting ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Promoting...\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle className=\"w-4 h-4 mr-2\" />\n                      Confirm Promotion\n                    </>\n                  )}\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => setShowPromoteConfirm(false)}\n                  className=\"border-green-300 text-green-700 hover:bg-green-50\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Already Promoted Alert - LIGHTENED BACKGROUND */}\n        {isPromoted && (\n          <Alert className=\"bg-blue-50 border-blue-200\">\n            <CheckCircle className=\"h-4 w-4 text-blue-700\" />\n            <AlertTitle className=\"text-blue-900 font-semibold\">Already Promoted</AlertTitle>\n            <AlertDescription className=\"text-blue-800\">\n              <p className=\"mt-1\">\n                This source has been promoted to Account: <strong>{currentSource.account_name}</strong>\n              </p>\n              {currentSource.account_id && (\n                <Link to={createPageUrl(`Accounts?id=${currentSource.account_id}`)}>\n                  <Button size=\"sm\" variant=\"outline\" className=\"mt-2 border-blue-300 text-blue-700 hover:bg-blue-50\">\n                    <ExternalLink className=\"w-4 h-4 mr-2\" />\n                    View Account\n                  </Button>\n                </Link>\n              )}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Linked Opportunities Section */}\n        {linkedOpportunities.length > 0 && (\n          <Card className=\"bg-slate-700/50 border-slate-600\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm text-slate-200 flex items-center gap-2\">\n                <Target className=\"w-4 h-4 text-blue-400\" />\n                Linked Opportunities ({linkedOpportunities.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <div className=\"space-y-2\">\n                {linkedOpportunities.map(opp => (\n                  <Link key={opp.id} to={createPageUrl(`Opportunities?id=${opp.id}`)}>\n                    <div className=\"p-3 bg-slate-800 border border-slate-600 rounded-lg hover:border-blue-500 transition-colors cursor-pointer\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium text-slate-200\">{opp.name}</p>\n                          <p className=\"text-xs text-slate-400 mt-1\">\n                            ${(opp.amount || 0).toLocaleString()} ΓÇó {opp.stage?.replace(/_/g, ' ')}\n                          </p>\n                        </div>\n                        <ExternalLink className=\"w-4 h-4 text-slate-400\" />\n                      </div>\n                    </div>\n                  </Link>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Linked Leads Section */}\n        {linkedLeads.length > 0 && (\n          <Card className=\"bg-slate-700/50 border-slate-600\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm text-slate-200 flex items-center gap-2\">\n                <Users className=\"w-4 h-4 text-yellow-400\" />\n                Linked Leads ({linkedLeads.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <div className=\"space-y-2\">\n                {linkedLeads.map(lead => (\n                  <Link key={lead.id} to={createPageUrl(`Leads?id=${lead.id}`)}>\n                    <div className=\"p-3 bg-slate-800 border border-slate-600 rounded-lg hover:border-yellow-500 transition-colors cursor-pointer\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium text-slate-200\">\n                            {lead.first_name} {lead.last_name}\n                          </p>\n                          <p className=\"text-xs text-slate-400 mt-1\">\n                            {lead.job_title || lead.email || 'No title'}\n                          </p>\n                        </div>\n                        <ExternalLink className=\"w-4 h-4 text-slate-400\" />\n                      </div>\n                    </div>\n                  </Link>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Company Information */}\n        <Card className=\"bg-slate-700/50 border-slate-600\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-200\">Company Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {currentSource.industry && (\n              <div className=\"flex items-start gap-3\">\n                <Building2 className=\"w-4 h-4 text-slate-400 mt-0.5\" />\n                <div>\n                  <p className=\"text-xs text-slate-400\">Industry</p>\n                  <p className=\"text-sm text-slate-200\">{currentSource.industry}</p>\n                </div>\n              </div>\n            )}\n            \n            {currentSource.website && (\n              <div className=\"flex items-start gap-3\">\n                <Globe className=\"w-4 h-4 text-slate-400 mt-0.5\" />\n                <div>\n                  <p className=\"text-xs text-slate-400\">Website</p>\n                  <a \n                    href={currentSource.website.startsWith('http') ? currentSource.website : `https://${currentSource.website}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-sm text-blue-400 hover:underline\"\n                  >\n                    {currentSource.website}\n                  </a>\n                </div>\n              </div>\n            )}\n            \n            {currentSource.email && (\n              <div className=\"flex items-start gap-3\">\n                <Mail className=\"w-4 h-4 text-slate-400 mt-0.5\" />\n                <div>\n                  <p className=\"text-xs text-slate-400\">Email</p>\n                  <a href={`mailto:${currentSource.email}`} className=\"text-sm text-blue-400 hover:underline\">\n                    {currentSource.email}\n                  </a>\n                </div>\n              </div>\n            )}\n            \n            {currentSource.phone_number && (\n              <div className=\"flex items-start gap-3\">\n                <Phone className=\"w-4 h-4 text-slate-400 mt-0.5\" />\n                <div>\n                  <p className=\"text-xs text-slate-400\">Phone</p>\n                  <a href={`tel:${currentSource.phone_number}`} className=\"text-sm text-blue-400 hover:underline\">\n                    {currentSource.phone_number}\n                  </a>\n                </div>\n              </div>\n            )}\n            \n            {(currentSource.address_line_1 || currentSource.city || currentSource.state_province) && (\n              <div className=\"flex items-start gap-3\">\n                <MapPin className=\"w-4 h-4 text-slate-400 mt-0.5\" />\n                <div>\n                  <p className=\"text-xs text-slate-400\">Address</p>\n                  <p className=\"text-sm text-slate-200\">\n                    {currentSource.address_line_1 && <>{currentSource.address_line_1}<br /></>}\n                    {currentSource.address_line_2 && <>{currentSource.address_line_2}<br /></>}\n                    {currentSource.city && `${currentSource.city}, `}\n                    {currentSource.state_province} {currentSource.postal_code}\n                    {currentSource.country && <><br />{currentSource.country}</>}\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {currentSource.industry_license && (\n              <div className=\"flex items-start gap-3\">\n                <FileText className=\"w-4 h-4 text-slate-400 mt-0.5\" />\n                <div>\n                  <p className=\"text-xs text-slate-400\">License Number</p>\n                  <p className=\"text-sm text-slate-200\">{currentSource.industry_license}</p>\n                  {currentSource.license_expiry_date && (\n                    <p className=\"text-xs text-slate-400 mt-1\">\n                      Expires: {format(new Date(currentSource.license_expiry_date), 'MMM d, yyyy')}\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Notes Section */}\n        {currentSource.notes && (\n          <Card className=\"bg-slate-700/50 border-slate-600\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-200\">Notes</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-slate-300 whitespace-pre-wrap\">{currentSource.notes}</p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Metadata */}\n        <Card className=\"bg-slate-700/50 border-slate-600\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-200 text-sm\">Record Metadata</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-xs text-slate-400\">\n            <div className=\"flex justify-between\">\n              <span>Created:</span>\n              <span>{currentSource.created_date ? format(new Date(currentSource.created_date), 'MMM d, yyyy h:mm a') : 'N/A'}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Updated:</span>\n              <span>{currentSource.updated_date ? format(new Date(currentSource.updated_date), 'MMM d, yyyy h:mm a') : 'N/A'}</span>\n            </div>\n            {currentSource.archived_at && (\n              <div className=\"flex justify-between\">\n                <span>Archived:</span>\n                <span>{format(new Date(currentSource.archived_at), 'MMM d, yyyy h:mm a')}</span>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\bizdev\\BizDevSourceForm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\bizdev\\BulkArchiveDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle2' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle2"},"fix":{"range":[508,524],"text":""},"desc":"Remove unused variable 'CheckCircle2'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":106,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3635,3800],"text":"\n                Records will be serialized and uploaded to Cloudflare R2 cloud storage.\n                They will be marked as &quot;Archived\" in the CRM.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3635,3800],"text":"\n                Records will be serialized and uploaded to Cloudflare R2 cloud storage.\n                They will be marked as &ldquo;Archived\" in the CRM.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3635,3800],"text":"\n                Records will be serialized and uploaded to Cloudflare R2 cloud storage.\n                They will be marked as &#34;Archived\" in the CRM.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3635,3800],"text":"\n                Records will be serialized and uploaded to Cloudflare R2 cloud storage.\n                They will be marked as &rdquo;Archived\" in the CRM.\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":106,"column":49,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3635,3800],"text":"\n                Records will be serialized and uploaded to Cloudflare R2 cloud storage.\n                They will be marked as \"Archived&quot; in the CRM.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3635,3800],"text":"\n                Records will be serialized and uploaded to Cloudflare R2 cloud storage.\n                They will be marked as \"Archived&ldquo; in the CRM.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3635,3800],"text":"\n                Records will be serialized and uploaded to Cloudflare R2 cloud storage.\n                They will be marked as \"Archived&#34; in the CRM.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3635,3800],"text":"\n                Records will be serialized and uploaded to Cloudflare R2 cloud storage.\n                They will be marked as \"Archived&rdquo; in the CRM.\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Archive,\n  X,\n  AlertTriangle,\n  Loader2,\n  CheckCircle2,\n  Database,\n  FileJson,\n  FileSpreadsheet\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { archiveBizDevSourcesToR2 } from \"@/api/functions\";\n\nexport default function BulkArchiveDialog({ sources, onClose, onComplete }) {\n  const [archiving, setArchiving] = useState(false);\n  const [format, setFormat] = useState('json');\n  const [compress, setCompress] = useState(true);\n  const [removeAfterArchive, setRemoveAfterArchive] = useState(false);\n\n  if (!sources || sources.length === 0) return null;\n\n  const handleArchive = async () => {\n    setArchiving(true);\n\n    try {\n      const { data, status } = await archiveBizDevSourcesToR2({\n        bizdev_source_ids: sources.map(s => s.id),\n        format: format,\n        compress: compress,\n        remove_after_archive: removeAfterArchive\n      });\n\n      if (status === 200 && data.success) {\n        toast.success(\n          `Successfully archived ${data.archived_count} BizDev Source(s) to R2`\n        );\n        \n        if (onComplete) {\n          onComplete(data);\n        }\n        \n        onClose();\n      } else {\n        toast.error(data.error || 'Failed to archive BizDev Sources');\n      }\n    } catch (error) {\n      console.error('Archive error:', error);\n      toast.error(error.message || 'Failed to archive BizDev Sources');\n    } finally {\n      setArchiving(false);\n    }\n  };\n\n  // Group by batch for display\n  const batches = sources.reduce((acc, source) => {\n    const batchId = source.batch_id || 'No Batch';\n    if (!acc[batchId]) {\n      acc[batchId] = [];\n    }\n    acc[batchId].push(source);\n    return acc;\n  }, {});\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto bg-slate-800 border-slate-700\">\n        <CardHeader className=\"border-b border-slate-700\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Archive className=\"w-6 h-6 text-blue-400\" />\n              <div>\n                <CardTitle className=\"text-slate-100\">Archive to Cloudflare R2</CardTitle>\n                <p className=\"text-sm text-slate-400 mt-1\">\n                  Archive {sources.length} BizDev Source{sources.length > 1 ? 's' : ''} to cloud storage\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              disabled={archiving}\n              className=\"text-slate-400 hover:text-slate-300 hover:bg-slate-700\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"p-6 space-y-6\">\n          {/* Warning Alert */}\n          <Alert className=\"bg-yellow-900/30 border-yellow-700\">\n            <AlertTriangle className=\"h-4 w-4 text-yellow-400\" />\n            <AlertDescription className=\"text-yellow-300\">\n              <p className=\"font-semibold mb-1\">Archive Action</p>\n              <p className=\"text-sm\">\n                Records will be serialized and uploaded to Cloudflare R2 cloud storage.\n                They will be marked as \"Archived\" in the CRM.\n              </p>\n            </AlertDescription>\n          </Alert>\n\n          {/* Batch Summary */}\n          <div>\n            <h3 className=\"text-sm font-semibold text-slate-300 mb-3\">Records to Archive</h3>\n            <div className=\"space-y-2\">\n              {Object.entries(batches).map(([batchId, batchSources]) => (\n                <div key={batchId} className=\"flex items-center justify-between p-3 bg-slate-700 rounded-lg\">\n                  <div>\n                    <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300 mb-1\">\n                      {batchId}\n                    </Badge>\n                    <p className=\"text-xs text-slate-400\">\n                      {batchSources[0].source}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-semibold text-slate-200\">\n                      {batchSources.length} record{batchSources.length > 1 ? 's' : ''}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Format Selection */}\n          <div>\n            <Label className=\"text-slate-300 mb-3 block\">Archive Format</Label>\n            <RadioGroup value={format} onValueChange={setFormat} className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2 p-3 bg-slate-700 rounded-lg hover:bg-slate-600 cursor-pointer\">\n                <RadioGroupItem value=\"json\" id=\"format-json\" />\n                <Label htmlFor=\"format-json\" className=\"flex items-center gap-2 cursor-pointer flex-1\">\n                  <FileJson className=\"w-4 h-4 text-blue-400\" />\n                  <div>\n                    <p className=\"text-slate-200 font-medium\">JSON</p>\n                    <p className=\"text-xs text-slate-400\">Structured data with metadata</p>\n                  </div>\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2 p-3 bg-slate-700 rounded-lg hover:bg-slate-600 cursor-pointer\">\n                <RadioGroupItem value=\"csv\" id=\"format-csv\" />\n                <Label htmlFor=\"format-csv\" className=\"flex items-center gap-2 cursor-pointer flex-1\">\n                  <FileSpreadsheet className=\"w-4 h-4 text-green-400\" />\n                  <div>\n                    <p className=\"text-slate-200 font-medium\">CSV</p>\n                    <p className=\"text-xs text-slate-400\">Spreadsheet-compatible format</p>\n                  </div>\n                </Label>\n              </div>\n            </RadioGroup>\n          </div>\n\n          {/* Compression Option */}\n          <div className=\"p-4 bg-slate-700 rounded-lg\">\n            <div className=\"flex items-start gap-3\">\n              <Checkbox\n                id=\"compress\"\n                checked={compress}\n                onCheckedChange={setCompress}\n                disabled={archiving}\n              />\n              <div className=\"flex-1\">\n                <Label \n                  htmlFor=\"compress\" \n                  className=\"text-slate-200 cursor-pointer font-medium\"\n                >\n                  Compress archive files (.gz)\n                </Label>\n                <p className=\"text-xs text-slate-400 mt-1\">\n                  Reduces storage space by 60-80%. Files will be saved as .{format}.gz\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Cleanup Option */}\n          <div className=\"p-4 bg-slate-700 rounded-lg\">\n            <div className=\"flex items-start gap-3\">\n              <Checkbox\n                id=\"remove-after\"\n                checked={removeAfterArchive}\n                onCheckedChange={setRemoveAfterArchive}\n                disabled={archiving}\n              />\n              <div className=\"flex-1\">\n                <Label \n                  htmlFor=\"remove-after\" \n                  className=\"text-slate-200 cursor-pointer font-medium\"\n                >\n                  Minimize archived records\n                </Label>\n                <p className=\"text-xs text-slate-400 mt-1\">\n                  Clear large text fields after archiving to reduce database size. \n                  Essential identifiers will be preserved for reference.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Storage Path Info */}\n          <div className=\"p-4 bg-blue-900/20 border border-blue-700 rounded-lg\">\n            <div className=\"flex items-start gap-2\">\n              <Database className=\"w-4 h-4 text-blue-400 mt-0.5\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-blue-300 mb-1\">Storage Location</p>\n                <p className=\"text-xs text-blue-400 font-mono\">\n                  tenant-ID/archives/bizdev-sources/batch-ID/timestamp.{format}{compress ? '.gz' : ''}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 pt-4 border-t border-slate-700\">\n            <Button\n              onClick={onClose}\n              variant=\"outline\"\n              disabled={archiving}\n              className=\"flex-1 border-slate-600 text-slate-300 hover:bg-slate-700\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleArchive}\n              disabled={archiving}\n              className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n            >\n              {archiving ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Archiving...\n                </>\n              ) : (\n                <>\n                  <Archive className=\"w-4 h-4 mr-2\" />\n                  Archive to R2\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\bizdev\\BulkDeleteDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":105,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3498,3710],"text":"\n                This action cannot be undone. All selected records will be permanently deleted from the database.\n                Consider using &quot;Archive\" instead if you want to preserve the data.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3498,3710],"text":"\n                This action cannot be undone. All selected records will be permanently deleted from the database.\n                Consider using &ldquo;Archive\" instead if you want to preserve the data.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3498,3710],"text":"\n                This action cannot be undone. All selected records will be permanently deleted from the database.\n                Consider using &#34;Archive\" instead if you want to preserve the data.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3498,3710],"text":"\n                This action cannot be undone. All selected records will be permanently deleted from the database.\n                Consider using &rdquo;Archive\" instead if you want to preserve the data.\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":105,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3498,3710],"text":"\n                This action cannot be undone. All selected records will be permanently deleted from the database.\n                Consider using \"Archive&quot; instead if you want to preserve the data.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3498,3710],"text":"\n                This action cannot be undone. All selected records will be permanently deleted from the database.\n                Consider using \"Archive&ldquo; instead if you want to preserve the data.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3498,3710],"text":"\n                This action cannot be undone. All selected records will be permanently deleted from the database.\n                Consider using \"Archive&#34; instead if you want to preserve the data.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3498,3710],"text":"\n                This action cannot be undone. All selected records will be permanently deleted from the database.\n                Consider using \"Archive&rdquo; instead if you want to preserve the data.\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Trash2,\n  X,\n  AlertTriangle,\n  Loader2,\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { bulkDeleteBizDevSources } from \"@/api/functions\";\n\nexport default function BulkDeleteDialog({ sources, onClose, onComplete }) {\n  const [deleting, setDeleting] = useState(false);\n\n  if (!sources || sources.length === 0) return null;\n\n  const handleDelete = async () => {\n    if (!confirm(`Are you sure you want to permanently delete ${sources.length} BizDev Source(s)? This action cannot be undone.`)) {\n      return;\n    }\n\n    setDeleting(true);\n\n    try {\n      const { data, status } = await bulkDeleteBizDevSources({\n        bizdev_source_ids: sources.map(s => s.id)\n      });\n\n      if (status === 200 && data.status === 'success') {\n        toast.success(data.message);\n        \n        if (onComplete) {\n          onComplete(data.results);\n        }\n        \n        onClose();\n      } else if (status === 200 && data.status === 'partial') {\n        toast.warning(data.message, {\n          description: `${data.results.failed} record(s) failed to delete`\n        });\n        \n        if (onComplete) {\n          onComplete(data.results);\n        }\n        \n        onClose();\n      } else {\n        toast.error(data.message || 'Failed to delete BizDev Sources');\n      }\n    } catch (error) {\n      console.error('Delete error:', error);\n      toast.error(error.message || 'Failed to delete BizDev Sources');\n    } finally {\n      setDeleting(false);\n    }\n  };\n\n  // Group by batch for display\n  const batches = sources.reduce((acc, source) => {\n    const batchId = source.batch_id || 'No Batch';\n    if (!acc[batchId]) {\n      acc[batchId] = [];\n    }\n    acc[batchId].push(source);\n    return acc;\n  }, {});\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto bg-slate-800 border-slate-700\">\n        <CardHeader className=\"border-b border-slate-700\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Trash2 className=\"w-6 h-6 text-red-400\" />\n              <div>\n                <CardTitle className=\"text-slate-100\">Delete BizDev Sources</CardTitle>\n                <p className=\"text-sm text-slate-400 mt-1\">\n                  Permanently delete {sources.length} BizDev Source{sources.length > 1 ? 's' : ''}\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              disabled={deleting}\n              className=\"text-slate-400 hover:text-slate-300 hover:bg-slate-700\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"p-6 space-y-6\">\n          {/* Warning Alert */}\n          <Alert className=\"bg-red-900/30 border-red-700\">\n            <AlertTriangle className=\"h-4 w-4 text-red-400\" />\n            <AlertDescription className=\"text-red-300\">\n              <p className=\"font-semibold mb-1\">Permanent Deletion</p>\n              <p className=\"text-sm\">\n                This action cannot be undone. All selected records will be permanently deleted from the database.\n                Consider using \"Archive\" instead if you want to preserve the data.\n              </p>\n            </AlertDescription>\n          </Alert>\n\n          {/* Batch Summary */}\n          <div>\n            <h3 className=\"text-sm font-semibold text-slate-300 mb-3\">Records to Delete</h3>\n            <div className=\"space-y-2\">\n              {Object.entries(batches).map(([batchId, batchSources]) => (\n                <div key={batchId} className=\"flex items-center justify-between p-3 bg-slate-700 rounded-lg\">\n                  <div>\n                    <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300 mb-1\">\n                      {batchId}\n                    </Badge>\n                    <p className=\"text-xs text-slate-400\">\n                      {batchSources[0].source}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-semibold text-slate-200\">\n                      {batchSources.length} record{batchSources.length > 1 ? 's' : ''}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 pt-4 border-t border-slate-700\">\n            <Button\n              onClick={onClose}\n              variant=\"outline\"\n              disabled={deleting}\n              className=\"flex-1 border-slate-600 text-slate-300 hover:bg-slate-700\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleDelete}\n              disabled={deleting}\n              className=\"flex-1 bg-red-600 hover:bg-red-700\"\n            >\n              {deleting ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Deleting...\n                </>\n              ) : (\n                <>\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Delete Permanently\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\calendar\\CalendarQuickActions.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\calendar\\CalendarToolbar.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ChevronLeft, ChevronRight, Calendar as CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function CalendarToolbar({ currentDate, onPrev, onNext, onToday, view, onViewChange }) {\n  return (\n    <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-3\">\n      <div className=\"flex items-center gap-2\">\n        <Button variant=\"outline\" onClick={onPrev} className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\">\n          <ChevronLeft className=\"w-4 h-4\" />\n        </Button>\n        <Button variant=\"outline\" onClick={onNext} className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\">\n          <ChevronRight className=\"w-4 h-4\" />\n        </Button>\n        <Button variant=\"outline\" onClick={onToday} className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\">\n          Today\n        </Button>\n        <div className=\"flex items-center gap-2 ml-2\">\n          <CalendarIcon className=\"w-5 h-5 text-slate-400\" />\n          <h2 className=\"text-xl font-semibold text-slate-100\">{format(currentDate, \"MMMM yyyy\")}</h2>\n        </div>\n      </div>\n\n      <Tabs value={view} onValueChange={onViewChange}>\n        <TabsList className=\"bg-slate-800 border border-slate-700 rounded-full p-1\">\n          <TabsTrigger value=\"month\" className=\"text-xs px-3 py-1.5 text-slate-300 data-[state=active]:text-white data-[state=active]:bg-slate-700 rounded-full\">Month</TabsTrigger>\n          <TabsTrigger value=\"week\" className=\"text-xs px-3 py-1.5 text-slate-300 data-[state=active]:text-white data-[state=active]:bg-slate-700 rounded-full\">Week</TabsTrigger>\n          <TabsTrigger value=\"day\" className=\"text-xs px-3 py-1.5 text-slate-300 data-[state=active]:text-white data-[state=active]:bg-slate-700 rounded-full\">Day</TabsTrigger>\n        </TabsList>\n      </Tabs>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\calendar\\DayView.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,19],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { format } from \"date-fns\";\nimport { Clock } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Matching the stat card colors - semi-transparent backgrounds\nconst statusColors = {\n  scheduled: \"bg-blue-900/20 text-blue-300 border-blue-700\",\n  in_progress: \"bg-yellow-900/20 text-yellow-300 border-yellow-700\",\n  overdue: \"bg-red-900/20 text-red-300 border-red-700\",\n  completed: \"bg-emerald-900/20 text-emerald-300 border-emerald-700\",\n  cancelled: \"bg-slate-900/20 text-slate-300 border-slate-700\"\n};\n\nexport default function DayView({ currentDate, activities, onActivityClick }) {\n  const key = format(currentDate, \"yyyy-MM-dd\");\n  const items = activities\n    .filter(a => a._dateKey === key)\n    .sort((a, b) => (a.due_time || \"\").localeCompare(b.due_time || \"\"));\n\n  return (\n    <div className=\"rounded-lg overflow-hidden border border-slate-800\">\n      <div className=\"bg-slate-800 text-slate-300 text-xs uppercase tracking-wide font-semibold p-2 border-b border-slate-800\">\n        {format(currentDate, \"EEEE, MMMM d, yyyy\")}\n      </div>\n      <div className=\"p-3 space-y-2 bg-slate-900 min-h-[240px]\">\n        {items.length === 0 && <div className=\"text-slate-500 text-sm italic\">No activities scheduled.</div>}\n        {items.map(a => (\n          <button\n            key={a.id}\n            onClick={() => onActivityClick(a)}\n            className=\"w-full text-left rounded-md px-3 py-2 bg-slate-800 hover:bg-slate-700 border border-slate-400\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-slate-200 font-medium\">{a.subject}</div>\n              {a.due_time && (\n                <div className=\"flex items-center gap-1 text-slate-400 text-sm\">\n                  <Clock className=\"w-3 h-3\" />\n                  {a.due_time}\n                </div>\n              )}\n            </div>\n            <div className=\"mt-1 flex gap-2\">\n              <Badge variant=\"outline\" className=\"text-xs border-slate-600\">\n                {a.type}\n              </Badge>\n              {a.status && (\n                <Badge className={`text-xs border ${statusColors[a.status] || 'border-slate-600'}`}>\n                  {a.status}\n                </Badge>\n              )}\n            </div>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\calendar\\MonthGrid.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,19],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { format, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays, isSameMonth, isToday } from \"date-fns\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Matching the stat card colors - semi-transparent backgrounds\nconst statusColors = {\n  scheduled: \"bg-blue-900/20 text-blue-300 border-blue-700\",\n  in_progress: \"bg-yellow-900/20 text-yellow-300 border-yellow-700\",\n  overdue: \"bg-red-900/20 text-red-300 border-red-700\",\n  completed: \"bg-emerald-900/20 text-emerald-300 border-emerald-700\",\n  cancelled: \"bg-slate-900/20 text-slate-300 border-slate-700\"\n};\n\nfunction DayCell({ date, inCurrentMonth, activitiesForDay, onActivityClick }) {\n  return (\n    <div className={`border border-slate-800 min-h-[120px] p-2 ${inCurrentMonth ? \"bg-slate-900 calendar-cell-in\" : \"bg-slate-900/70 calendar-cell-out\"}`}>\n      <div className=\"flex items-center justify-between mb-1\">\n        <span className={`text-xs font-semibold ${isToday(date) ? \"text-accent\" : \"text-slate-400\"}`}>\n          {format(date, \"d\")}\n        </span>\n        {isToday(date) && <span className=\"bg-amber-200 text-sky-600 px-1.5 py-0.5 rounded-full\">Today</span>}\n      </div>\n      <div className=\"space-y-1\">\n        {activitiesForDay.slice(0, 4).map((a) =>\n        <button\n          key={a.id}\n          onClick={() => onActivityClick(a)}\n          className=\"w-full text-left rounded-md px-2 py-1 bg-slate-800 hover:bg-slate-700 border border-slate-400\"\n          title={a.subject}>\n\n            <div className=\"text-[11px] text-slate-300 truncate\">{a.subject}</div>\n            {a.due_time && <div className=\"text-[10px] text-slate-500\">{a.due_time}</div>}\n            <div className=\"mt-1 flex flex-wrap gap-1\">\n              <Badge variant=\"outline\" className=\"text-[10px] border-slate-600\">{a.type}</Badge>\n              {a.status &&\n            <Badge\n              className={`text-[10px] border ${statusColors[a.status] || 'border-slate-600'}`}>\n\n                  {a.status}\n                </Badge>\n            }\n            </div>\n          </button>\n        )}\n        {activitiesForDay.length > 4 &&\n        <div className=\"text-[11px] text-slate-500\">+{activitiesForDay.length - 4} more</div>\n        }\n      </div>\n    </div>);\n\n}\n\nexport default function MonthGrid({ currentDate, activities, onActivityClick }) {\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(monthStart);\n  const gridStart = startOfWeek(monthStart, { weekStartsOn: 0 });\n  const gridEnd = endOfWeek(monthEnd, { weekStartsOn: 0 });\n\n  const rows = [];\n  let day = gridStart;\n  while (day <= gridEnd) {\n    const days = [];\n    for (let i = 0; i < 7; i++) {\n      const dateStr = format(day, \"yyyy-MM-dd\");\n      const acts = activities.filter((a) => a._dateKey === dateStr);\n      days.push(\n        <DayCell\n          key={day.toISOString()}\n          date={day}\n          inCurrentMonth={isSameMonth(day, monthStart)}\n          activitiesForDay={acts}\n          onActivityClick={onActivityClick} />\n\n      );\n      day = addDays(day, 1);\n    }\n    rows.push(\n      <div key={day.toISOString()} className=\"grid grid-cols-7 gap-px\">\n        {days}\n      </div>\n    );\n  }\n\n  const weekdays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  return (\n    <div className=\"rounded-lg overflow-hidden border border-slate-800\">\n      <div className=\"grid grid-cols-7\">\n        {weekdays.map((d) =>\n        <div key={d} className=\"bg-slate-800 text-slate-300 text-xs uppercase tracking-wide font-semibold p-2 text-center border-b border-slate-800\">\n            {d}\n          </div>\n        )}\n      </div>\n      <div className=\"divide-y divide-slate-800\">\n        {rows}\n      </div>\n    </div>);\n\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\calendar\\WeekView.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,19],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { format, startOfWeek, addDays, isToday } from \"date-fns\";\n\n// Matching the stat card colors - semi-transparent backgrounds\nconst statusColors = {\n  scheduled: \"bg-blue-900/20 text-blue-300 border-blue-700\",\n  in_progress: \"bg-yellow-900/20 text-yellow-300 border-yellow-700\",\n  overdue: \"bg-red-900/20 text-red-300 border-red-700\",\n  completed: \"bg-emerald-900/20 text-emerald-300 border-emerald-700\",\n  cancelled: \"bg-slate-900/20 text-slate-300 border-slate-700\"\n};\n\nexport default function WeekView({ currentDate, activities, onActivityClick }) {\n  const start = startOfWeek(currentDate, { weekStartsOn: 0 });\n  const days = Array.from({ length: 7 }).map((_, i) => addDays(start, i));\n\n  const getActs = (date) => {\n    const key = format(date, \"yyyy-MM-dd\");\n    return activities.filter(a => a._dateKey === key);\n  };\n\n  return (\n    <div className=\"rounded-lg overflow-hidden border border-slate-800\">\n      <div className=\"grid grid-cols-7\">\n        {days.map(d => (\n          <div key={d.toISOString()} className={`text-xs uppercase tracking-wide font-semibold p-2 text-center border-b border-slate-800 ${isToday(d) ? 'bg-indigo-600 text-white' : 'bg-slate-800 text-slate-300'}`}>\n            <span>{format(d, \"EEE dd\")}</span>\n          </div>\n        ))}\n      </div>\n      <div className=\"grid grid-cols-7 gap-px\">\n        {days.map(d => (\n          <div key={d.toISOString()} className={`min-h-[220px] p-2 border border-slate-800 ${isToday(d) ? 'bg-slate-800/50' : 'bg-slate-900'}`}>\n            <div className=\"space-y-2\">\n              {getActs(d).map(a => (\n                <button\n                  key={a.id}\n                  onClick={() => onActivityClick(a)}\n                  className=\"w-full text-left rounded-md px-2 py-1 bg-slate-800 hover:bg-slate-700 border border-slate-400\"\n                  title={a.subject}\n                >\n                  <div className=\"text-[11px] text-slate-300 truncate\">{a.subject}</div>\n                  {a.due_time && <div className=\"text-[10px] text-slate-500\">{a.due_time}</div>}\n                  <div className=\"mt-1 flex flex-wrap gap-1\">\n                    {a.type && <span className=\"text-[10px] text-slate-400 border border-slate-600 rounded px-1\">{a.type}</span>}\n                    {a.status && (\n                      <span className={`text-[10px] rounded px-1 border ${statusColors[a.status] || 'border-slate-600'}`}>\n                        {a.status}\n                      </span>\n                    )}\n                  </div>\n                </button>\n              ))}\n              {getActs(d).length === 0 && <div className=\"text-[12px] text-slate-500 italic\">No activities</div>}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\campaigns\\AICampaignDetailPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[25,36],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Phone' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Phone"},"fix":{"range":[508,517],"text":""},"desc":"Remove unused variable 'Phone'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1069,1077],"text":""},"desc":"Remove unused variable 'user'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Edit,\n  Trash2,\n  Play,\n  Pause,\n  Bot,\n  Users,\n  Phone,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Calendar,\n  Target,\n  BarChart3,\n  MessageSquare\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nconst statusColors = {\n  draft: \"bg-gray-500 text-gray-100\",\n  scheduled: \"bg-blue-500 text-blue-100\",\n  running: \"bg-green-500 text-green-100\",\n  paused: \"bg-yellow-500 text-yellow-100\",\n  completed: \"bg-purple-500 text-purple-100\",\n  cancelled: \"bg-red-500 text-red-100\"\n};\n\nexport default function AICampaignDetailPanel({ \n  campaign, \n  open, \n  onOpenChange, \n  onEdit, \n  onDelete, \n  onStatusChange,\n  user \n}) {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  if (!campaign) return null;\n\n  const getProgressPercentage = () => {\n    const totalContacts = campaign.target_contacts?.length || 0;\n    if (totalContacts === 0) return 0;\n    \n    const completedContacts = campaign.target_contacts?.filter(\n      c => ['completed', 'failed', 'skipped'].includes(c.status)\n    ).length || 0;\n    \n    return Math.round((completedContacts / totalContacts) * 100);\n  };\n\n  const getStatusCounts = () => {\n    if (!campaign.target_contacts) return { pending: 0, completed: 0, failed: 0, scheduled: 0 };\n    \n    return campaign.target_contacts.reduce((counts, contact) => {\n      counts[contact.status] = (counts[contact.status] || 0) + 1;\n      return counts;\n    }, { pending: 0, completed: 0, failed: 0, scheduled: 0 });\n  };\n\n  const statusCounts = getStatusCounts();\n\n  return (\n    <Sheet open={open} onOpenChange={onOpenChange}>\n      <SheetContent className=\"w-[800px] sm:max-w-[800px] overflow-y-auto bg-slate-900 border-slate-800 text-slate-300\">\n        <SheetHeader className=\"pb-6\">\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <SheetTitle className=\"flex items-center gap-3 text-xl text-slate-100\">\n                <div className=\"w-10 h-10 bg-slate-800 border border-slate-700 rounded-full flex items-center justify-center\">\n                  <Bot className=\"w-5 h-5 text-blue-400\" />\n                </div>\n                {campaign.name}\n              </SheetTitle>\n              <div className=\"flex items-center gap-3 mt-2\">\n                <Badge className={`${statusColors[campaign.status]} border-none capitalize`}>\n                  {campaign.status}\n                </Badge>\n                <Badge variant=\"outline\" className=\"capitalize border-slate-600 text-slate-300\">\n                  {campaign.call_objective?.replace('_', ' ')}\n                </Badge>\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => onEdit(campaign)} className=\"bg-slate-800 border-slate-700 hover:bg-slate-700\">\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Edit\n              </Button>\n              {campaign.status === 'running' ? (\n                <Button variant=\"outline\" size=\"sm\" onClick={() => onStatusChange(campaign, 'paused')} className=\"bg-slate-800 border-slate-700 hover:bg-slate-700\">\n                  <Pause className=\"w-4 h-4 mr-2\" />\n                  Pause\n                </Button>\n              ) : campaign.status === 'paused' ? (\n                <Button variant=\"outline\" size=\"sm\" onClick={() => onStatusChange(campaign, 'running')} className=\"bg-slate-800 border-slate-700 hover:bg-slate-700\">\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  Resume\n                </Button>\n              ) : campaign.status === 'draft' || campaign.status === 'scheduled' ? (\n                <Button variant=\"outline\" size=\"sm\" onClick={() => onStatusChange(campaign, 'running')} className=\"bg-slate-800 border-slate-700 hover:bg-slate-700\">\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  Start\n                </Button>\n              ) : null}\n            </div>\n          </div>\n        </SheetHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-slate-800 border-slate-700 p-1 h-auto\">\n            <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-slate-700 data-[state=active]:text-slate-100 text-slate-400\">Overview</TabsTrigger>\n            <TabsTrigger value=\"contacts\" className=\"data-[state=active]:bg-slate-700 data-[state=active]:text-slate-100 text-slate-400\">Contacts</TabsTrigger>\n            <TabsTrigger value=\"performance\" className=\"data-[state=active]:bg-slate-700 data-[state=active]:text-slate-100 text-slate-400\">Performance</TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"data-[state=active]:bg-slate-700 data-[state=active]:text-slate-100 text-slate-400\">Settings</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            {/* Campaign Description */}\n            {campaign.description && (\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg text-slate-100\">Description</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-slate-300\">{campaign.description}</p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Progress Overview */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2 text-slate-100\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  Campaign Progress\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-4\">\n                  <Progress value={getProgressPercentage()} className=\"flex-1 bg-slate-700\" />\n                  <span className=\"text-sm font-medium text-slate-200\">{getProgressPercentage()}%</span>\n                </div>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-slate-100\">{statusCounts.pending || 0}</div>\n                    <div className=\"text-xs text-slate-400\">Pending</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-400\">{statusCounts.scheduled || 0}</div>\n                    <div className=\"text-xs text-slate-400\">Scheduled</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-400\">{statusCounts.completed || 0}</div>\n                    <div className=\"text-xs text-slate-400\">Completed</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-red-400\">{statusCounts.failed || 0}</div>\n                    <div className=\"text-xs text-slate-400\">Failed</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AI Prompt */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2 text-slate-100\">\n                  <MessageSquare className=\"w-5 h-5\" />\n                  AI Prompt Template\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-slate-900/50 rounded-lg p-4 font-mono text-sm border border-slate-700 text-slate-300\">\n                  {campaign.ai_prompt_template}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"contacts\" className=\"space-y-4\">\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2 text-slate-100\">\n                  <Users className=\"w-5 h-5\" />\n                  Target Contacts ({campaign.target_contacts?.length || 0})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!campaign.target_contacts || campaign.target_contacts.length === 0 ? (\n                  <div className=\"text-center py-8 text-slate-500\">\n                    <Users className=\"w-12 h-12 mx-auto mb-4 text-slate-600\" />\n                    <p>No contacts configured for this campaign</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {campaign.target_contacts.map((contact, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 border border-slate-700 rounded-lg bg-slate-800/50\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"flex items-center gap-2\">\n                            {contact.status === 'completed' && <CheckCircle className=\"w-4 h-4 text-green-400\" />}\n                            {contact.status === 'failed' && <XCircle className=\"w-4 h-4 text-red-400\" />}\n                            {contact.status === 'scheduled' && <Clock className=\"w-4 h-4 text-blue-400\" />}\n                            {contact.status === 'pending' && <Clock className=\"w-4 h-4 text-slate-500\" />}\n                          </div>\n                          <div>\n                            <div className=\"font-medium text-slate-200\">{contact.contact_name}</div>\n                            <div className=\"text-sm text-slate-400\">{contact.phone}</div>\n                            {contact.company && (\n                              <div className=\"text-sm text-slate-400\">{contact.company}</div>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"text-right text-sm\">\n                          <Badge variant=\"outline\" className=\"capitalize border-slate-600 text-slate-300\">\n                            {contact.status}\n                          </Badge>\n                          {contact.scheduled_date && (\n                            <div className=\"text-xs text-slate-500 mt-1\">\n                              {format(new Date(contact.scheduled_date), 'MMM d')} at {contact.scheduled_time}\n                            </div>\n                          )}\n                          {contact.outcome && (\n                            <div className=\"text-xs text-slate-400 mt-1 max-w-48 truncate\">\n                              {contact.outcome}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"performance\" className=\"space-y-4\">\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2 text-slate-100\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  Performance Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-slate-100\">\n                      {campaign.performance_metrics?.total_calls || 0}\n                    </div>\n                    <div className=\"text-sm text-slate-400\">Total Calls</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-green-400\">\n                      {campaign.performance_metrics?.successful_calls || 0}\n                    </div>\n                    <div className=\"text-sm text-slate-400\">Successful</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-red-400\">\n                      {campaign.performance_metrics?.failed_calls || 0}\n                    </div>\n                    <div className=\"text-sm text-slate-400\">Failed</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-blue-400\">\n                      {campaign.performance_metrics?.appointments_set || 0}\n                    </div>\n                    <div className=\"text-sm text-slate-400\">Appointments</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-purple-400\">\n                      {campaign.performance_metrics?.leads_qualified || 0}\n                    </div>\n                    <div className=\"text-sm text-slate-400\">Qualified</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-orange-400\">\n                      {campaign.performance_metrics?.average_duration || 0}s\n                    </div>\n                    <div className=\"text-sm text-slate-400\">Avg Duration</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"space-y-4\">\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2 text-slate-100\">\n                  <Target className=\"w-5 h-5\" />\n                  Call Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"text-sm font-medium text-slate-400\">Max Duration</div>\n                    <div className=\"text-lg font-semibold text-slate-200\">{campaign.call_settings?.max_duration || 300}s</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-slate-400\">Retry Attempts</div>\n                    <div className=\"text-lg font-semibold text-slate-200\">{campaign.call_settings?.retry_attempts || 2}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-slate-400\">Business Hours Only</div>\n                    <div className=\"text-lg font-semibold text-slate-200\">\n                      {campaign.call_settings?.business_hours_only ? 'Yes' : 'No'}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-slate-400\">Delay Between Calls</div>\n                    <div className=\"text-lg font-semibold text-slate-200\">{campaign.call_settings?.delay_between_calls || 60}s</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2 text-slate-100\">\n                  <Calendar className=\"w-5 h-5\" />\n                  Schedule Configuration\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"text-sm font-medium text-slate-400\">Start Date</div>\n                    <div className=\"text-lg font-semibold text-slate-200\">\n                      {campaign.schedule_config?.start_date ? \n                        format(new Date(campaign.schedule_config.start_date), 'MMM d, yyyy') : \n                        'Not set'\n                      }\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-slate-400\">End Date</div>\n                    <div className=\"text-lg font-semibold text-slate-200\">\n                      {campaign.schedule_config?.end_date ? \n                        format(new Date(campaign.schedule_config.end_date), 'MMM d, yyyy') : \n                        'Not set'\n                      }\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-slate-400\">Preferred Hours</div>\n                    <div className=\"text-lg font-semibold text-slate-200\">\n                      {campaign.schedule_config?.preferred_hours?.start} - {campaign.schedule_config?.preferred_hours?.end}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-slate-400\">Excluded Days</div>\n                    <div className=\"text-lg font-semibold text-slate-200 capitalize\">\n                      {campaign.schedule_config?.excluded_days?.join(', ') || 'None'}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Danger Zone */}\n            <Card className=\"border-red-700/50 bg-red-900/20\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-red-400\">Danger Zone</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Button \n                  variant=\"destructive\" \n                  onClick={() => onDelete(campaign.id)}\n                  className=\"w-full\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Delete Campaign\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\campaigns\\AICampaignForm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\cashflow\\CashFlowChart.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { format, startOfMonth, endOfMonth, eachMonthOfInterval, subMonths } from \"date-fns\";\n\nfunction ensurePlain(obj) {\n  if (obj && typeof obj === \"object\" && typeof obj['hasOwnProperty'] !== \"function\") {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  return obj;\n}\n\nexport default function CashFlowChart({ transactions }) {\n  transactions = Array['isArray'](transactions) ? transactions.map(ensurePlain) : [];\n  \n  const chartData = useMemo(() => {\n    if (!transactions || !Array['isArray'](transactions)) {\n      return [];\n    }\n\n    const now = new Date();\n    const last6Months = eachMonthOfInterval({\n      start: subMonths(startOfMonth(now), 5),\n      end: endOfMonth(now)\n    });\n\n    return last6Months.map(month => {\n      const monthStart = startOfMonth(month);\n      const monthEnd = endOfMonth(month);\n      const monthLabel = format(month, \"MMM yyyy\");\n\n      let income = 0;\n      let expenses = 0;\n\n      transactions.forEach(txn => {\n        const plainTxn = ensurePlain(txn);\n        const txnDate = new Date(plainTxn['transaction_date']);\n        if (txnDate >= monthStart && txnDate <= monthEnd) {\n          const amount = Number(plainTxn['amount']) || 0;\n          if (plainTxn['transaction_type'] === \"income\") {\n            income += amount;\n          } else if (plainTxn['transaction_type'] === \"expense\") {\n            expenses += amount;\n          }\n        }\n      });\n\n      return {\n        month: monthLabel,\n        income: Math.round(income * 100) / 100,\n        expenses: Math.round(expenses * 100) / 100\n      };\n    });\n  }, [transactions]);\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700 shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"text-slate-100\">Cash Flow Trend</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n            <XAxis dataKey=\"month\" stroke=\"#94a3b8\" />\n            <YAxis stroke=\"#94a3b8\" />\n            <Tooltip \n              contentStyle={{ \n                backgroundColor: '#1e293b', \n                border: '1px solid #475569',\n                borderRadius: '8px',\n                color: '#e2e8f0'\n              }}\n              formatter={(value) => `$${value.toLocaleString()}`}\n            />\n            <Legend />\n            <Bar dataKey=\"income\" fill=\"#22c55e\" name=\"Income\" />\n            <Bar dataKey=\"expenses\" fill=\"#ef4444\" name=\"Expenses\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\cashflow\\CashFlowForm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\cashflow\\CashFlowSummary.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { DollarSign, TrendingUp, TrendingDown, BarChart3 } from \"lucide-react\";\n\nexport default function CashFlowSummary({ summary }) {\n  // Use bracket notation ONLY - never dot notation\n  const totalIncome = (summary && summary['totalIncome']) || 0;\n  const totalExpenses = (summary && summary['totalExpenses']) || 0;\n  const netCashFlow = (summary && summary['netCashFlow']) || 0;\n  const projectedIncome = (summary && summary['projectedIncome']) || 0;\n\n  const summaryItems = [\n    {\n      title: \"Total Income\",\n      value: `$${totalIncome.toLocaleString()}`,\n      icon: TrendingUp,\n      color: \"text-green-400\",\n      bgColor: \"bg-green-900/30\"\n    },\n    {\n      title: \"Total Expenses\", \n      value: `$${totalExpenses.toLocaleString()}`,\n      icon: TrendingDown,\n      color: \"text-red-400\",\n      bgColor: \"bg-red-900/30\"\n    },\n    {\n      title: \"Net Cash Flow\",\n      value: `$${netCashFlow.toLocaleString()}`,\n      icon: DollarSign,\n      color: netCashFlow >= 0 ? \"text-green-400\" : \"text-red-400\",\n      bgColor: netCashFlow >= 0 ? \"bg-green-900/30\" : \"bg-red-900/30\"\n    },\n    {\n      title: \"Projected Income\",\n      value: `$${projectedIncome.toLocaleString()}`,\n      icon: BarChart3,\n      color: \"text-blue-400\",\n      bgColor: \"bg-blue-900/30\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {summaryItems.map((item, index) => {\n        const Icon = item.icon;\n        return (\n          <Card key={index} className=\"bg-slate-800 border-slate-700 shadow-lg\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-400\">\n                {item.title}\n              </CardTitle>\n              <div className={`p-2 rounded-lg ${item.bgColor}`}>\n                <Icon className={`w-5 h-5 ${item.color}`} />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className={`text-2xl font-bold ${item.color}`}>\n                {item.value}\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\cashflow\\ReceiptProcessor.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Select' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[530,537],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectContent' is defined but never used.","line":12,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectContent"},"fix":{"range":[536,551],"text":""},"desc":"Remove unused variable 'SelectContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectItem' is defined but never used.","line":12,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectItem"},"fix":{"range":[551,563],"text":""},"desc":"Remove unused variable 'SelectItem'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectTrigger' is defined but never used.","line":12,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":58,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectTrigger"},"fix":{"range":[563,578],"text":""},"desc":"Remove unused variable 'SelectTrigger'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectValue' is defined but never used.","line":12,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":71,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectValue"},"fix":{"range":[578,591],"text":""},"desc":"Remove unused variable 'SelectValue'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":224,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8323,8340],"text":" Categorized as &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8323,8340],"text":" Categorized as &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8323,8340],"text":" Categorized as &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8323,8340],"text":" Categorized as &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":224,"column":108,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8385,8407],"text":"&quot; \n              with "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8385,8407],"text":"&ldquo; \n              with "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8385,8407],"text":"&#34; \n              with "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8385,8407],"text":"&rdquo; \n              with "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Upload, Camera, FileImage, Loader2, CheckCircle, AlertCircle, \n  DollarSign, Calendar, Building, Tag, Wand2 \n} from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { UploadFile } from \"@/api/integrations\";\nimport { ExtractDataFromUploadedFile } from \"@/api/integrations\";\n\nexport default function ReceiptProcessor({ onTransactionExtracted, onCancel }) {\n  const [step, setStep] = useState('upload'); // upload, processing, review, complete\n  const [file, setFile] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [extractedData, setExtractedData] = useState(null);\n  const [error, setError] = useState(null);\n  const [aiSuggestions, setAiSuggestions] = useState(null);\n\n  // Receipt extraction schema\n  const receiptSchema = {\n    type: \"object\",\n    properties: {\n      merchant_name: { type: \"string\", description: \"Name of the business/merchant\" },\n      total_amount: { type: \"number\", description: \"Total amount paid\" },\n      transaction_date: { type: \"string\", description: \"Date of transaction (YYYY-MM-DD format)\" },\n      description: { type: \"string\", description: \"Description of purchase/service\" },\n      items: { \n        type: \"array\", \n        items: { \n          type: \"object\", \n          properties: {\n            name: { type: \"string\" },\n            quantity: { type: \"number\" },\n            price: { type: \"number\" }\n          }\n        },\n        description: \"Individual items purchased\" \n      },\n      payment_method: { type: \"string\", description: \"Method of payment (cash, card, etc.)\" },\n      tax_amount: { type: \"number\", description: \"Tax amount if visible\" },\n      category_hints: { \n        type: \"array\", \n        items: { type: \"string\" },\n        description: \"Keywords that might help categorize this expense\" \n      }\n    }\n  };\n\n  const handleFileChange = (e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile) {\n      // Validate file type\n      if (!selectedFile.type.startsWith('image/')) {\n        setError('Please select an image file (JPG, PNG, etc.)');\n        return;\n      }\n      \n      // Validate file size (max 10MB)\n      if (selectedFile.size > 10 * 1024 * 1024) {\n        setError('File size must be less than 10MB');\n        return;\n      }\n\n      setFile(selectedFile);\n      setError(null);\n    }\n  };\n\n  const processReceipt = async () => {\n    if (!file) return;\n\n    setProcessing(true);\n    setStep('processing');\n    setError(null);\n\n    try {\n      // Upload the file\n      const uploadResult = await UploadFile({ file });\n      \n      if (!uploadResult.file_url) {\n        throw new Error('Failed to upload file');\n      }\n\n      // Extract data using AI\n      const extractResult = await ExtractDataFromUploadedFile({\n        file_url: uploadResult.file_url,\n        json_schema: receiptSchema\n      });\n\n      if (extractResult.status !== 'success') {\n        throw new Error(extractResult.details || 'Failed to extract data from receipt');\n      }\n\n      const extracted = extractResult.output;\n      \n      // Generate AI suggestions for categorization\n      const suggestions = await generateCategorySuggestions(extracted);\n      \n      setExtractedData(extracted);\n      setAiSuggestions(suggestions);\n      setStep('review');\n\n    } catch (error) {\n      console.error('Error processing receipt:', error);\n      setError(error.message);\n      setStep('upload');\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const generateCategorySuggestions = async (data) => {\n    try {\n      // Create a context string for AI categorization\n      const context = [\n        data.merchant_name,\n        data.description,\n        ...(data.items?.map(item => item.name) || []),\n        ...(data.category_hints || [])\n      ].filter(Boolean).join(' ').toLowerCase();\n\n      // Simple rule-based categorization (can be enhanced with AI later)\n      const categoryRules = {\n        supplies: ['office', 'depot', 'staples', 'supplies', 'paper', 'pen'],\n        utilities: ['electric', 'gas', 'water', 'internet', 'phone', 'utility'],\n        marketing: ['advertising', 'facebook', 'google', 'marketing', 'promotion'],\n        travel: ['airline', 'hotel', 'uber', 'taxi', 'gas station', 'rental'],\n        meals: ['restaurant', 'food', 'coffee', 'lunch', 'dinner', 'cafe'],\n        equipment: ['computer', 'laptop', 'software', 'hardware', 'tech'],\n        rent: ['rent', 'lease', 'property', 'real estate'],\n        payroll: ['payroll', 'salary', 'wages', 'employment']\n      };\n\n      let suggestedCategory = 'operating_expense'; // default\n      let confidence = 0.3;\n\n      // Check each category for matches\n      for (const [category, keywords] of Object.entries(categoryRules)) {\n        const matches = keywords.filter(keyword => context.includes(keyword));\n        const categoryConfidence = matches.length / keywords.length;\n        \n        if (categoryConfidence > confidence) {\n          confidence = categoryConfidence;\n          suggestedCategory = category;\n        }\n      }\n\n      return {\n        category: suggestedCategory,\n        confidence: Math.min(confidence * 100, 95), // Cap at 95%\n        reasoning: `Based on merchant \"${data.merchant_name}\" and transaction details`\n      };\n\n    } catch (error) {\n      console.error('Error generating suggestions:', error);\n      return {\n        category: 'operating_expense',\n        confidence: 30,\n        reasoning: 'Default categorization'\n      };\n    }\n  };\n\n  const handleConfirmTransaction = () => {\n    if (!extractedData || !aiSuggestions) return;\n\n    // Format the transaction data for CashFlow\n    const transactionData = {\n      transaction_type: 'expense', // Receipts are typically expenses\n      category: aiSuggestions.category,\n      amount: extractedData.total_amount || 0,\n      transaction_date: extractedData.transaction_date || new Date().toISOString().split('T')[0],\n      description: extractedData.description || `Purchase from ${extractedData.merchant_name}`,\n      vendor_client: extractedData.merchant_name || '',\n      payment_method: extractedData.payment_method?.toLowerCase() || '',\n      notes: `Extracted from receipt. Items: ${extractedData.items?.map(i => i.name).join(', ') || 'N/A'}`,\n      entry_method: 'document_extracted',\n      processed_by_ai: true,\n      tax_category: extractedData.tax_amount ? 'deductible' : 'unknown'\n    };\n\n    onTransactionExtracted(transactionData);\n    setStep('complete');\n  };\n\n  if (step === 'processing') {\n    return (\n      <Card className=\"w-full max-w-2xl mx-auto\">\n        <CardContent className=\"p-12 text-center\">\n          <Loader2 className=\"w-16 h-16 animate-spin mx-auto mb-6 text-blue-600\" />\n          <h3 className=\"text-xl font-semibold mb-2\">Processing Receipt</h3>\n          <p className=\"text-slate-600 mb-4\">AI is extracting transaction data from your receipt...</p>\n          <div className=\"space-y-2 text-sm text-slate-500\">\n            <p>Γ£à Image uploaded successfully</p>\n            <p>≡ƒöì Analyzing receipt content...</p>\n            <p>≡ƒºá Extracting key information...</p>\n            <p>≡ƒÄ» Suggesting categorization...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (step === 'review' && extractedData) {\n    return (\n      <Card className=\"w-full max-w-3xl mx-auto\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CheckCircle className=\"w-6 h-6 text-green-600\" />\n            Review Extracted Data\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* AI Suggestion Alert */}\n          <Alert className=\"bg-blue-50 border-blue-200\">\n            <Wand2 className=\"w-4 h-4 text-blue-600\" />\n            <AlertDescription className=\"text-blue-800\">\n              <strong>AI Suggestion:</strong> Categorized as \"{aiSuggestions?.category?.replace(/_/g, ' ')}\" \n              with {Math.round(aiSuggestions?.confidence || 0)}% confidence. {aiSuggestions?.reasoning}\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Left Column - Basic Info */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"flex items-center gap-2\">\n                  <Building className=\"w-4 h-4\" />\n                  Merchant\n                </Label>\n                <Input \n                  value={extractedData.merchant_name || ''} \n                  readOnly \n                  className=\"bg-slate-50\"\n                />\n              </div>\n\n              <div>\n                <Label className=\"flex items-center gap-2\">\n                  <DollarSign className=\"w-4 h-4\" />\n                  Amount\n                </Label>\n                <Input \n                  value={`$${extractedData.total_amount?.toFixed(2) || '0.00'}`} \n                  readOnly \n                  className=\"bg-slate-50\"\n                />\n              </div>\n\n              <div>\n                <Label className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-4 h-4\" />\n                  Date\n                </Label>\n                <Input \n                  value={extractedData.transaction_date || ''} \n                  readOnly \n                  className=\"bg-slate-50\"\n                />\n              </div>\n\n              <div>\n                <Label className=\"flex items-center gap-2\">\n                  <Tag className=\"w-4 h-4\" />\n                  Suggested Category\n                </Label>\n                <Badge className=\"bg-blue-100 text-blue-800 text-sm px-3 py-1\">\n                  {aiSuggestions?.category?.replace(/_/g, ' ') || 'Operating Expense'}\n                </Badge>\n              </div>\n            </div>\n\n            {/* Right Column - Details */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Description</Label>\n                <Textarea \n                  value={extractedData.description || ''} \n                  readOnly \n                  className=\"bg-slate-50 h-20\"\n                />\n              </div>\n\n              {extractedData.items && extractedData.items.length > 0 && (\n                <div>\n                  <Label>Items</Label>\n                  <div className=\"bg-slate-50 rounded-md p-3 max-h-32 overflow-y-auto\">\n                    {extractedData.items.map((item, index) => (\n                      <div key={index} className=\"text-sm flex justify-between\">\n                        <span>{item.name}</span>\n                        <span>${item.price?.toFixed(2)}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {extractedData.payment_method && (\n                <div>\n                  <Label>Payment Method</Label>\n                  <Input \n                    value={extractedData.payment_method} \n                    readOnly \n                    className=\"bg-slate-50\"\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-between pt-6 border-t\">\n            <Button variant=\"outline\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\" onClick={() => setStep('upload')}>\n                Try Different Image\n              </Button>\n              <Button onClick={handleConfirmTransaction} className=\"bg-green-600 hover:bg-green-700\">\n                <CheckCircle className=\"w-4 h-4 mr-2\" />\n                Create Transaction\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (step === 'complete') {\n    return (\n      <Card className=\"w-full max-w-2xl mx-auto\">\n        <CardContent className=\"p-12 text-center\">\n          <CheckCircle className=\"w-16 h-16 mx-auto mb-6 text-green-600\" />\n          <h3 className=\"text-xl font-semibold mb-2 text-green-800\">Transaction Created!</h3>\n          <p className=\"text-slate-600 mb-6\">Your receipt has been processed and added to your cash flow.</p>\n          <Button onClick={onCancel} className=\"bg-green-600 hover:bg-green-700\">\n            Done\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Upload step\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Camera className=\"w-6 h-6 text-blue-600\" />\n          Upload Receipt or Invoice\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <Alert>\n          <FileImage className=\"w-4 h-4\" />\n          <AlertDescription>\n            Upload a clear photo of your receipt or invoice. AI will automatically extract the amount, \n            merchant, date, and suggest the best category for your cash flow tracking.\n          </AlertDescription>\n        </Alert>\n\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"w-4 h-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"border-2 border-dashed border-slate-300 rounded-lg p-8 text-center\">\n          {file ? (\n            <div className=\"space-y-4\">\n              <FileImage className=\"w-16 h-16 mx-auto text-green-600\" />\n              <div>\n                <p className=\"font-medium\">{file.name}</p>\n                <p className=\"text-sm text-slate-500\">\n                  {(file.size / 1024 / 1024).toFixed(1)} MB\n                </p>\n              </div>\n              <Button onClick={processReceipt} disabled={processing} className=\"w-full\">\n                {processing ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    <Wand2 className=\"w-4 h-4 mr-2\" />\n                    Extract Data with AI\n                  </>\n                )}\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <Upload className=\"w-16 h-16 mx-auto text-slate-400\" />\n              <div>\n                <p className=\"text-lg font-medium\">Choose receipt or invoice image</p>\n                <p className=\"text-slate-500\">PNG, JPG up to 10MB</p>\n              </div>\n              <Input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileChange}\n                className=\"w-full\"\n              />\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-between\">\n          <Button variant=\"outline\" onClick={onCancel}>\n            Cancel\n          </Button>\n          {file && (\n            <Button variant=\"outline\" onClick={() => setFile(null)}>\n              Choose Different File\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\cashflow\\ReceiptSelector.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\contacts\\BulkActionsMenu.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ChevronDown, UserCheck, Tag, Trash2 } from \"lucide-react\";\nimport LazyEmployeeSelector from \"../shared/LazyEmployeeSelector\";\n\nexport default function BulkActionsMenu({ \n  selectedCount, \n  onBulkStatusChange, \n  onBulkAssign,\n  onBulkDelete,\n  selectAllMode = false,\n  totalCount = 0\n}) {\n  const [showStatusDialog, setShowStatusDialog] = useState(false);\n  const [showAssignDialog, setShowAssignDialog] = useState(false);\n  const [newStatus, setNewStatus] = useState(\"\");\n  const [newAssignee, setNewAssignee] = useState(\"\");\n\n  const displayCount = selectAllMode ? totalCount : selectedCount;\n  const countLabel = selectAllMode ? `All ${displayCount}` : displayCount;\n\n  const handleStatusChange = () => {\n    if (newStatus) {\n      onBulkStatusChange(newStatus);\n      setShowStatusDialog(false);\n      setNewStatus(\"\");\n    }\n  };\n\n  const handleAssign = () => {\n    onBulkAssign(newAssignee);\n    setShowAssignDialog(false);\n    setNewAssignee(\"\");\n  };\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n            Bulk Actions ({countLabel})\n            <ChevronDown className=\"w-4 h-4 ml-2\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"bg-slate-800 border-slate-700\">\n          <DropdownMenuLabel className=\"text-slate-200\">\n            Actions for {selectAllMode ? `all ${displayCount}` : displayCount} contact(s)\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator className=\"bg-slate-700\" />\n          <DropdownMenuItem \n            onClick={() => setShowStatusDialog(true)}\n            className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n          >\n            <Tag className=\"w-4 h-4 mr-2\" />\n            Change Status\n          </DropdownMenuItem>\n          <DropdownMenuItem \n            onClick={() => setShowAssignDialog(true)}\n            className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n          >\n            <UserCheck className=\"w-4 h-4 mr-2\" />\n            Assign To\n          </DropdownMenuItem>\n          <DropdownMenuSeparator className=\"bg-slate-700\" />\n          <DropdownMenuItem \n            onClick={onBulkDelete}\n            className=\"text-red-400 hover:bg-red-900/20 cursor-pointer\"\n          >\n            <Trash2 className=\"w-4 h-4 mr-2\" />\n            Delete Selected\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Status Change Dialog */}\n      <Dialog open={showStatusDialog} onOpenChange={setShowStatusDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle>Change Status for {countLabel} Contact(s)</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Select a new status to apply to {selectAllMode ? 'all selected' : 'the selected'} contacts.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"status\" className=\"text-slate-200\">New Status</Label>\n              <Select value={newStatus} onValueChange={setNewStatus}>\n                <SelectTrigger className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"Select status...\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"active\" className=\"text-slate-200 hover:bg-slate-700\">Active</SelectItem>\n                  <SelectItem value=\"inactive\" className=\"text-slate-200 hover:bg-slate-700\">Inactive</SelectItem>\n                  <SelectItem value=\"prospect\" className=\"text-slate-200 hover:bg-slate-700\">Prospect</SelectItem>\n                  <SelectItem value=\"customer\" className=\"text-slate-200 hover:bg-slate-700\">Customer</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowStatusDialog(false)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button onClick={handleStatusChange} disabled={!newStatus} className=\"bg-blue-600 hover:bg-blue-700\">\n              Update Status\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Assignment Dialog */}\n      <Dialog open={showAssignDialog} onOpenChange={setShowAssignDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle>Assign {countLabel} Contact(s)</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Select an employee to assign {selectAllMode ? 'all selected' : 'the selected'} contacts to.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"assignee\" className=\"text-slate-200\">Assign To</Label>\n              <LazyEmployeeSelector\n                value={newAssignee}\n                onValueChange={setNewAssignee}\n                placeholder=\"Select employee...\"\n                className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\"\n                contentClassName=\"bg-slate-800 border-slate-700\"\n                itemClassName=\"text-slate-200 hover:bg-slate-700\"\n                allowUnassigned={true}\n                showLoadingState={true}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAssignDialog(false)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button onClick={handleAssign} className=\"bg-blue-600 hover:bg-blue-700\">\n              Assign Contacts\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\contacts\\ContactCard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Mail, Phone, Building2, Edit, Trash2, MapPin, Briefcase, Eye } from \"lucide-react\";\nimport PhoneDisplay from \"../shared/PhoneDisplay\";\nimport StatusHelper from \"../shared/StatusHelper\";\n\n// Matching the stat card colors - semi-transparent backgrounds\nconst statusColors = {\n  active: 'bg-green-900/20 text-green-300 border-green-700',\n  prospect: 'bg-cyan-900/20 text-cyan-300 border-cyan-700',\n  customer: 'bg-purple-900/20 text-purple-300 border-purple-700',\n  inactive: 'bg-slate-900/20 text-slate-300 border-slate-700'\n};\n\nexport default function ContactCard({ contact, accountId, accountName, assignedUserName, onEdit, onDelete, onViewDetails, onViewAccount, onClick, isSelected, onSelect, user }) {\n  return (\n    <TooltipProvider>\n      <Card \n        className={`hover:shadow-lg transition-all duration-200 cursor-pointer bg-slate-800 border-slate-700 ${\n          isSelected ? 'ring-2 ring-blue-500' : ''\n        }`}\n        onClick={onClick}\n      >\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center gap-3 flex-1\">\n              <Checkbox\n                checked={isSelected}\n                onCheckedChange={onSelect}\n                onClick={(e) => e.stopPropagation()}\n                className=\"border-slate-600 data-[state=checked]:bg-blue-600\"\n              />\n              <div className=\"flex-1\">\n                <CardTitle className=\"text-lg font-bold text-slate-100\">\n                  {contact.first_name} {contact.last_name}\n                </CardTitle>\n                {contact.job_title && (\n                  <p className=\"text-sm text-slate-400 flex items-center gap-1 mt-1\">\n                    <Briefcase className=\"w-3 h-3\" />\n                    {contact.job_title}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"flex-grow space-y-4\">\n          {accountName && (\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\"flex items-center gap-2 text-slate-300 text-sm cursor-pointer\">\n                  <Building2 className=\"w-4 h-4 text-slate-500\" />\n                  {accountId ? (\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        if (onViewAccount) onViewAccount(accountId, accountName);\n                      }}\n                      className=\"hover:text-blue-400 hover:underline truncate text-left\"\n                    >\n                      {accountName}\n                    </button>\n                  ) : (\n                    <span className=\"truncate\">{accountName}</span>\n                  )}\n                </div>\n              </TooltipTrigger>\n              <TooltipContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                <p>{accountId ? 'Click to view account' : 'Associated Account'}</p>\n              </TooltipContent>\n            </Tooltip>\n          )}\n\n          <div className=\"space-y-2 text-sm\">\n            {contact.email && (\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <div className=\"flex items-center gap-2 text-slate-300\">\n                    <Mail className=\"w-4 h-4 text-slate-500\" />\n                    <a href={`mailto:${contact.email}`} className=\"hover:text-blue-400 truncate\" onClick={(e) => e.stopPropagation()}>\n                      {contact.email}\n                    </a>\n                  </div>\n                </TooltipTrigger>\n                <TooltipContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                  <p>Email Contact</p>\n                </TooltipContent>\n              </Tooltip>\n            )}\n            {contact.phone && (\n              <div className=\"flex items-center gap-2 text-slate-300\">\n                <Phone className=\"w-4 h-4 text-slate-500\" />\n                <PhoneDisplay\n                  user={user}\n                  phone={contact.phone}\n                  contactName={`${contact.first_name} ${contact.last_name}`}\n                  enableCalling={true}\n                  className=\"text-slate-300 hover:text-blue-400\"\n                />\n              </div>\n            )}\n            {contact.city && (\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <div className=\"flex items-center gap-2 text-slate-300 cursor-help\">\n                    <MapPin className=\"w-4 h-4 text-slate-500\" />\n                    <span className=\"truncate\">{contact.city}{contact.state && `, ${contact.state}`}</span>\n                  </div>\n                </TooltipTrigger>\n                <TooltipContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                  <p>Location</p>\n                </TooltipContent>\n              </Tooltip>\n            )}\n          </div>\n\n          <div className=\"flex justify-between items-center pt-2 border-t border-slate-700\">\n            <div className=\"flex items-center gap-1\">\n              <Badge variant=\"outline\" className={`${statusColors[contact.status]} border capitalize`}>\n                {contact.status}\n              </Badge>\n              <StatusHelper statusKey={`contact_${contact.status}`} />\n            </div>\n            {assignedUserName && (\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <span className=\"text-xs text-slate-500 cursor-help truncate max-w-[120px]\">\n                    {assignedUserName}\n                  </span>\n                </TooltipTrigger>\n                <TooltipContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                  <p>Assigned To</p>\n                </TooltipContent>\n              </Tooltip>\n            )}\n          </div>\n        </CardContent>\n\n        <CardFooter className=\"flex justify-between items-center pt-4 border-t border-slate-700\">\n          <div className=\"flex gap-2 flex-wrap\">\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={(e) => { e.stopPropagation(); onEdit(contact); }}\n                  className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n                >\n                  <Edit className=\"w-3 h-3 mr-1\" />\n                  Edit\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                <p>Edit Contact</p>\n              </TooltipContent>\n            </Tooltip>\n\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={(e) => { e.stopPropagation(); onViewDetails(contact); }}\n                  className=\"bg-slate-700 border-slate-600 text-slate-400 hover:bg-slate-600 hover:text-slate-300\"\n                >\n                  <Eye className=\"w-3 h-3 mr-1\" />\n                  View\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                <p>View Details</p>\n              </TooltipContent>\n            </Tooltip>\n          </div>\n\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={(e) => { e.stopPropagation(); onDelete(contact.id); }}\n                className=\"text-red-400 hover:text-red-300 hover:bg-slate-700\"\n              >\n                <Trash2 className=\"w-4 h-4\" />\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n              <p>Delete Contact</p>\n            </TooltipContent>\n          </Tooltip>\n        </CardFooter>\n      </Card>\n    </TooltipProvider>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\contacts\\ContactDetailPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'phone' is assigned a value but never used.","line":43,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport UniversalDetailPanel from \"../shared/UniversalDetailPanel\";\nimport { Star, Phone, Mail } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { universalAICall } from \"@/api/functions\";\nimport { generateAIEmailDraft } from \"@/api/functions\";\nimport { sendAIEmail } from \"@/api/functions\";\nimport { toast } from \"sonner\";\n\nexport default function ContactDetailPanel({\n  contact,\n  accountId,\n  accountName,\n  assignedUserName,\n  open,\n  onOpenChange,\n  onEdit,\n  onDelete,\n  user\n}) {\n  const [showCallDialog, setShowCallDialog] = useState(false);\n  const [showEmailDialog, setShowEmailDialog] = useState(false);\n  const [callPrompt, setCallPrompt] = useState(\"\");\n  const [emailPrompt, setEmailPrompt] = useState(\"\");\n  const [emailDraft, setEmailDraft] = useState(\"\");\n  const [isGeneratingEmail, setIsGeneratingEmail] = useState(false);\n  const [isSendingEmail, setIsSendingEmail] = useState(false);\n  const [isCalling, setIsCalling] = useState(false);\n\n  if (!contact) {\n    return null;\n  }\n\n  const handleMakeCall = () => {\n    if (!contact.phone && !contact.mobile) {\n      toast.error(\"No phone number available for this contact\");\n      return;\n    }\n    const phone = contact.phone || contact.mobile;\n    setCallPrompt(`Call ${contact.first_name} ${contact.last_name} from ${accountName || contact.account_name || 'their company'} for a follow-up conversation.`);\n    setShowCallDialog(true);\n  };\n\n  const handleInitiateCall = async () => {\n    if (!callPrompt.trim()) {\n      toast.error(\"Please provide a call objective\");\n      return;\n    }\n\n    const phone = contact.phone || contact.mobile;\n    setIsCalling(true);\n    try {\n      await universalAICall({\n        contactPhone: phone,\n        contactName: `${contact.first_name} ${contact.last_name}`,\n        prompt: callPrompt,\n        callObjective: \"follow_up\"\n      });\n      toast.success(\"AI call initiated successfully\");\n      setShowCallDialog(false);\n    } catch (error) {\n      console.error(\"Error initiating call:\", error);\n      toast.error(`Failed to initiate call: ${error.message || \"Unknown error\"}`);\n    } finally {\n      setIsCalling(false);\n    }\n  };\n\n  const handleComposeEmail = () => {\n    if (!contact.email) {\n      toast.error(\"No email address available for this contact\");\n      return;\n    }\n    setEmailPrompt(`Write a professional follow-up email to ${contact.first_name} ${contact.last_name} from ${accountName || contact.account_name || 'their company'}.`);\n    setEmailDraft(\"\");\n    setShowEmailDialog(true);\n  };\n\n  const handleGenerateEmail = async () => {\n    if (!emailPrompt.trim()) {\n      toast.error(\"Please provide email instructions\");\n      return;\n    }\n\n    setIsGeneratingEmail(true);\n    try {\n      const response = await generateAIEmailDraft({\n        recipientEmail: contact.email,\n        recipientName: `${contact.first_name} ${contact.last_name}`,\n        context: `Contact from ${accountName || contact.account_name || 'company'}, current status: ${contact.status}`,\n        prompt: emailPrompt\n      });\n\n      if (response.data && response.data.draft) {\n        setEmailDraft(response.data.draft);\n        toast.success(\"Email draft generated successfully\");\n      } else {\n        throw new Error(\"Failed to generate email draft\");\n      }\n    } catch (error) {\n      console.error(\"Error generating email:\", error);\n      toast.error(`Failed to generate email: ${error.message || \"Unknown error\"}`);\n    } finally {\n      setIsGeneratingEmail(false);\n    }\n  };\n\n  const handleSendEmail = async () => {\n    if (!emailDraft.trim()) {\n      toast.error(\"Please generate an email draft first\");\n      return;\n    }\n\n    setIsSendingEmail(true);\n    try {\n      await sendAIEmail({\n        entityType: \"contact\",\n        entityId: contact.id,\n        to: contact.email,\n        subject: `Follow-up: ${contact.first_name} ${contact.last_name}`,\n        body: emailDraft\n      });\n      toast.success(\"Email sent successfully\");\n      setShowEmailDialog(false);\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      toast.error(`Failed to send email: ${error.message || \"Unknown error\"}`);\n    } finally {\n      setIsSendingEmail(false);\n    }\n  };\n\n  const handleViewAccount = (e) => {\n    if (e) e.preventDefault();\n    if (!accountId) {\n      console.log(\"No accountId provided\");\n      return;\n    }\n    \n    // Navigate to Accounts page with accountId query parameter\n    // The Accounts page will automatically open the AccountDetailPanel\n    window.location.href = `/Accounts?accountId=${accountId}`;\n  };\n\n  const customActions = [];\n\n  if (contact.phone || contact.mobile) {\n    customActions.push({\n      label: \"Make AI Call\",\n      icon: <Phone className=\"w-4 h-4\" />,\n      onClick: handleMakeCall\n    });\n  }\n\n  if (contact.email) {\n    customActions.push({\n      label: \"Compose AI Email\",\n      icon: <Mail className=\"w-4 h-4\" />,\n      onClick: handleComposeEmail\n    });\n  }\n\n  customActions.push({\n    label: \"Convert to Lead\",\n    icon: <Star className=\"w-4 h-4\" />,\n    onClick: (contact) => {\n      console.log(\"Convert to lead:\", contact);\n    }\n  });\n\n  return (\n    <>\n      <UniversalDetailPanel\n        entity={contact}\n        entityType=\"contact\"\n        open={open}\n        onOpenChange={onOpenChange}\n        onEdit={onEdit}\n        onDelete={onDelete}\n        user={user}\n        displayData={{\n          \"Account Name\": accountId ? (\n            <button\n              onClick={handleViewAccount}\n              className=\"text-blue-400 hover:text-blue-300 hover:underline text-left mt-1 cursor-pointer\"\n            >\n              {accountName || contact.account_name || 'Unknown Account'}\n            </button>\n          ) : accountName || contact.account_name ? (\n            <p className=\"text-slate-200 font-medium mt-1\">\n              {accountName || contact.account_name}\n            </p>\n          ) : (\n            <p className=\"text-slate-500 italic mt-1\">No account linked</p>\n          ),\n          \"Assigned To\": (\n            <p className=\"text-slate-200 font-medium mt-1\">\n              {assignedUserName || contact.assigned_to_name || contact.assigned_to || 'Unassigned'}\n            </p>\n          )\n        }}\n        customActions={customActions}\n        showNotes={true}\n      />\n\n      <Dialog open={showCallDialog} onOpenChange={setShowCallDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle className=\"text-slate-100\">Make AI Call</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-slate-300\">Calling: {contact.first_name} {contact.last_name}</Label>\n              <p className=\"text-sm text-slate-400 mt-1\">Phone: {contact.phone || contact.mobile}</p>\n            </div>\n            <div>\n              <Label htmlFor=\"callPrompt\" className=\"text-slate-300\">Call Objective</Label>\n              <Textarea\n                id=\"callPrompt\"\n                value={callPrompt}\n                onChange={(e) => setCallPrompt(e.target.value)}\n                placeholder=\"Describe what you want to accomplish in this call...\"\n                className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\"\n                rows={4}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowCallDialog(false)} className=\"bg-slate-700 border-slate-600 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button onClick={handleInitiateCall} disabled={isCalling || !callPrompt.trim()} className=\"bg-blue-600 hover:bg-blue-700\">\n              {isCalling ? \"Initiating...\" : \"Make Call\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={showEmailDialog} onOpenChange={setShowEmailDialog}>\n        <DialogContent className=\"max-w-2xl bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle className=\"text-slate-100\">Compose AI Email</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-slate-300\">To: {contact.first_name} {contact.last_name}</Label>\n              <p className=\"text-sm text-slate-400 mt-1\">{contact.email}</p>\n            </div>\n            <div>\n              <Label htmlFor=\"emailPrompt\" className=\"text-slate-300\">Email Instructions</Label>\n              <Textarea\n                id=\"emailPrompt\"\n                value={emailPrompt}\n                onChange={(e) => setEmailPrompt(e.target.value)}\n                placeholder=\"Describe what you want to say in this email...\"\n                className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\"\n                rows={3}\n              />\n              <Button \n                onClick={handleGenerateEmail} \n                disabled={isGeneratingEmail || !emailPrompt.trim()}\n                className=\"mt-2 bg-green-600 hover:bg-green-700\"\n                size=\"sm\"\n              >\n                {isGeneratingEmail ? \"Generating...\" : \"Generate Draft\"}\n              </Button>\n            </div>\n            {emailDraft && (\n              <div>\n                <Label htmlFor=\"emailDraft\" className=\"text-slate-300\">Email Draft</Label>\n                <Textarea\n                  id=\"emailDraft\"\n                  value={emailDraft}\n                  onChange={(e) => setEmailDraft(e.target.value)}\n                  className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\"\n                  rows={8}\n                />\n              </div>\n            )}\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowEmailDialog(false)} className=\"bg-slate-700 border-slate-600 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSendEmail} \n              disabled={isSendingEmail || !emailDraft.trim()}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              {isSendingEmail ? \"Sending...\" : \"Send Email\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\contacts\\ContactForm.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'motion' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"motion"},"fix":{"range":[439,478],"text":""},"desc":"Remove unused variable 'motion'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used.","line":128,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"loading"},"fix":{"range":[5371,5378],"text":""},"desc":"Remove unused variable 'loading'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setLoading' is assigned a value but never used.","line":128,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"setLoading"},"fix":{"range":[5378,5390],"text":""},"desc":"Remove unused variable 'setLoading'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { X, Save, AlertCircle, AlertTriangle, Loader2 } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport PhoneInput from \"../shared/PhoneInput\";\nimport AddressFields from \"../shared/AddressFields\";\nimport { User, Contact, Lead } from \"@/api/entities\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useTenant } from \"../shared/tenantContext\";\nimport { generateUniqueId } from \"@/api/functions\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { createAuditLog } from \"@/api/functions\";\nimport TagInput from \"../shared/TagInput\";\nimport LazyAccountSelector from \"../shared/LazyAccountSelector\";\nimport CreateAccountDialog from \"../accounts/CreateAccountDialog\";\n\n// New imports for duplicate detection\nimport { checkDuplicateBeforeCreate } from \"@/api/functions\";\nimport { useApiManager } from \"../shared/ApiManager\";\nimport LazyEmployeeSelector from \"../shared/LazyEmployeeSelector\";\nimport { DenormalizationHelper } from \"../shared/DenormalizationHelper\";\n\n// New imports for error logging\nimport { useErrorLog, handleApiError, createError } from \"../shared/ErrorLogger\";\n\nconst leadSourceOptions = [\n  { value: \"website\", label: \"Website\" },\n  { value: \"referral\", label: \"Referral\" },\n  { value: \"cold_call\", label: \"Cold Call\" },\n  { value: \"email\", label: \"Email Campaign\" },\n  { value: \"social_media\", label: \"Social Media\" },\n  { value: \"trade_show\", label: \"Trade Show\" },\n  { value: \"advertising\", label: \"Advertising\" },\n  { value: \"other\", label: \"Other\" }\n];\n\nconst statusOptions = [\n  { value: \"prospect\", label: \"Prospect\" },\n  { value: \"customer\", label: \"Customer\" },\n  { value: \"active\", label: \"Active\" },\n  { value: \"inactive\", label: \"Inactive\" },\n];\n\nexport default function ContactForm({ contact, onSuccess, onCancel, user: userProp }) {\n  console.log('[ContactForm] === COMPONENT MOUNT ===');\n  console.log('[ContactForm] contact:', contact?.id, contact?.first_name, contact?.last_name);\n  console.log('[ContactForm] userProp:', userProp?.email, userProp?.role);\n  \n  // CRITICAL FIX: Load our own user if parent doesn't provide one\n  const [internalUser, setInternalUser] = useState(null);\n  const [userLoading, setUserLoading] = useState(!userProp); // Start loading if no user prop provided\n  \n  // Use either the prop user or our internally loaded user\n  const user = userProp || internalUser;\n  \n  const { toast } = useToast();\n\n  // Load user if not provided via props\n  useEffect(() => {\n    if (!userProp) {\n      console.log('[ContactForm] No user prop provided, loading user ourselves...');\n      const loadUser = async () => {\n        setUserLoading(true);\n        try {\n          const currentUser = await User.me();\n          console.log('[ContactForm] Successfully loaded user:', currentUser?.email);\n          setInternalUser(currentUser);\n        } catch (error) {\n          console.error('[ContactForm] Failed to load user:', error);\n          if (error.response && error.response.status === 401) {\n            // User not logged in, or session expired, handle accordingly\n            toast({\n              title: \"Authentication Error\",\n              description: \"Your session has expired or you are not logged in. Please log in again.\",\n              variant: \"destructive\",\n            });\n            // Optionally redirect to login\n            // window.location.href = '/login'; \n          } else {\n            toast({\n              title: \"Error\",\n              description: \"Failed to load user information. Please refresh the page.\",\n              variant: \"destructive\",\n            });\n          }\n        } finally {\n          setUserLoading(false);\n        }\n      };\n      loadUser();\n    } else {\n      console.log('[ContactForm] User provided via props, using it');\n      setInternalUser(userProp); // Ensure internalUser is set if userProp exists for consistency, though 'user' var handles it\n      setUserLoading(false); // If prop is provided, no loading needed\n    }\n  }, [userProp, toast]);\n\n  const [formData, setFormData] = useState({\n    first_name: contact?.first_name || \"\",\n    last_name: contact?.last_name || \"\",\n    email: contact?.email || \"\",\n    phone: contact?.phone || \"\",\n    mobile: contact?.mobile || \"\",\n    job_title: contact?.job_title || \"\",\n    department: contact?.department || \"\",\n    account_id: contact?.account_id || \"\",\n    assigned_to: contact?.assigned_to || user?.email || \"\",\n    lead_source: contact?.lead_source || \"website\",\n    status: contact?.status || \"prospect\",\n    address_1: contact?.address_1 || \"\",\n    address_2: contact?.address_2 || \"\",\n    city: contact?.city || \"\",\n    state: contact?.state || \"\",\n    zip: contact?.zip || \"\",\n    country: contact?.country || \"\",\n    is_test_data: contact?.is_test_data || false,\n    tags: contact?.tags || [],\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitError, setSubmitError] = useState(null);\n  const [submitProgress, setSubmitProgress] = useState(\"\");\n  const [loading, setLoading] = useState(false); // This seems unused, consider removing\n  const { selectedTenantId } = useTenant();\n  const [allTags, setAllTags] = useState([]);\n  const [showCreateAccount, setShowCreateAccount] = useState(false);\n  const [newAccountName, setNewAccountName] = useState(\"\");\n\n  const [duplicateWarning, setDuplicateWarning] = useState(null);\n  const [checkingDuplicates, setCheckingDuplicates] = useState(false);\n\n  const { cachedRequest, clearCache } = useApiManager();\n  const { logError } = useErrorLog();\n\n  const isAdmin = user?.role === 'admin' || user?.role === 'superadmin';\n\n  console.log('[ContactForm] Initial state set, isAdmin:', isAdmin);\n  console.log('[ContactForm] Current user state:', user?.email, 'Loading:', userLoading);\n\n  const checkForDuplicates = useCallback(async (data) => {\n    console.log('[ContactForm] checkForDuplicates called');\n    if (contact) {\n      console.log('[ContactForm] Editing existing contact, skipping duplicate check');\n      return;\n    }\n\n    if (!data.email && !data.phone) {\n      console.log('[ContactForm] No email or phone, skipping duplicate check');\n      setDuplicateWarning(null);\n      return;\n    }\n\n    if (!user) { // Ensure user is loaded before checking duplicates\n      console.log('[ContactForm] User not available yet, cannot perform duplicate check.');\n      return;\n    }\n\n    console.log('[ContactForm] Starting duplicate check...');\n    setCheckingDuplicates(true);\n    try {\n      const tenantId = user.role === 'superadmin' && selectedTenantId ? selectedTenantId : user.tenant_id;\n      if (!tenantId) {\n        console.log('[ContactForm] No tenant ID, skipping duplicate check');\n        setCheckingDuplicates(false);\n        return;\n      }\n\n      const checkData = {\n        entity_type: 'Contact',\n        data: {\n          email: data.email || null,\n          phone: data.phone || null\n        },\n        tenant_id: tenantId\n      };\n\n      console.log('[ContactForm] Calling checkDuplicateBeforeCreate...', checkData);\n      const response = await cachedRequest(\n        'Contact',\n        'checkDuplicate',\n        checkData,\n        () => checkDuplicateBeforeCreate(checkData)\n      );\n\n      console.log('[ContactForm] Duplicate check response:', response);\n      if (response.data?.has_duplicates) {\n        console.log('[ContactForm] Duplicates found:', response.data.duplicates.length);\n        setDuplicateWarning(response.data.duplicates);\n      } else {\n        console.log('[ContactForm] No duplicates found');\n        setDuplicateWarning(null);\n      }\n    } catch (error) {\n      console.error('[ContactForm] Duplicate check failed:', error);\n      if (logError) {\n        logError(handleApiError('Contact Form - Duplicate Check', error));\n      }\n      setDuplicateWarning(null);\n    } finally {\n      console.log('[ContactForm] Duplicate check complete');\n      setCheckingDuplicates(false);\n    }\n  }, [contact, user, selectedTenantId, cachedRequest, logError]);\n\n  useEffect(() => {\n    console.log('[ContactForm] === useEffect: loadInitialFormData ===');\n    const loadInitialFormData = () => {\n      if (contact) {\n        console.log('[ContactForm] Loading existing contact data into form');\n        setFormData({\n          first_name: contact.first_name || \"\",\n          last_name: contact.last_name || \"\",\n          email: contact.email || \"\",\n          phone: contact.phone || \"\",\n          mobile: contact.mobile || \"\",\n          job_title: contact.job_title || \"\",\n          department: contact.department || \"\",\n          account_id: contact.account_id || \"\",\n          lead_source: contact.lead_source || \"website\",\n          status: contact.status || \"prospect\",\n          address_1: contact.address_1 || \"\",\n          address_2: contact.address_2 || \"\",\n          city: contact.city || \"\",\n          state: contact.state || \"\",\n          zip: contact.zip || \"\",\n          country: contact.country || \"United States\",\n          tags: contact.tags || [],\n          assigned_to: contact.assigned_to || user?.email || \"\",\n          is_test_data: contact.is_test_data || false,\n        });\n        console.log('[ContactForm] Form data loaded for existing contact');\n      } else {\n        console.log('[ContactForm] Creating new contact form');\n        const urlParams = new URLSearchParams(window.location.search);\n        const accountId = urlParams.get('accountId');\n        console.log('[ContactForm] URL accountId:', accountId);\n\n        const newContactInitialState = {\n          first_name: \"\",\n          last_name: \"\",\n          email: \"\",\n          phone: \"\",\n          mobile: \"\",\n          job_title: \"\",\n          department: \"\",\n          account_id: accountId || \"\",\n          assigned_to: user?.email || \"\",\n          lead_source: \"website\",\n          status: \"prospect\",\n          address_1: \"\",\n          address_2: \"\",\n          city: \"\",\n          state: \"\",\n          zip: \"\",\n          country: \"United States\",\n          is_test_data: false,\n          tags: [],\n        };\n        setFormData(newContactInitialState);\n        console.log('[ContactForm] New contact form initialized');\n        \n        // Only check for duplicates if we have email or phone and user is available\n        if (user && (newContactInitialState.email || newContactInitialState.phone)) {\n          console.log('[ContactForm] Checking for duplicates on new contact');\n          checkForDuplicates(newContactInitialState);\n        }\n      }\n    };\n\n    if (user) {\n      console.log('[ContactForm] User available, loading form data');\n      loadInitialFormData();\n    } else {\n      console.log('[ContactForm] Waiting for user to load form data...');\n    }\n  }, [contact, user, selectedTenantId, checkForDuplicates]);\n\n  // Separate effect for loading tags\n  useEffect(() => {\n    console.log('[ContactForm] === useEffect: loadExistingTags ===');\n    const loadExistingTags = async () => {\n      console.log('[ContactForm] Starting to load tags...');\n      try {\n        console.log('[ContactForm] Fetching contacts and leads for tags...');\n        const [contactsData, leadsData] = await Promise.all([\n          cachedRequest('Contact', 'list', { limit: 100 }, () => Contact.list()),\n          cachedRequest('Lead', 'list', { limit: 100 }, () => Lead?.list() || []),\n        ]);\n\n        console.log('[ContactForm] Contacts fetched:', contactsData?.length);\n        console.log('[ContactForm] Leads fetched:', leadsData?.length);\n\n        const tagCounts = {};\n        [...contactsData, ...leadsData].forEach(item => {\n          if (item.tags && Array.isArray(item.tags)) {\n            item.tags.forEach(tag => {\n              if (tag && typeof tag === 'string') {\n                tagCounts[tag.toLowerCase()] = (tagCounts[tag.toLowerCase()] || 0) + 1;\n              }\n            });\n          }\n        });\n\n        const tagList = Object.entries(tagCounts)\n          .map(([name, count]) => ({ name, count }))\n          .sort((a, b) => b.count - a.count);\n\n        console.log('[ContactForm] Tags loaded:', tagList.length);\n        setAllTags(tagList);\n      } catch (error) {\n        console.error(\"[ContactForm] Failed to load existing tags:\", error);\n        if (logError) {\n          logError(handleApiError('Contact Form - Load Tags', error));\n        }\n        setAllTags([]);\n      }\n    };\n\n    if (user) { // Ensure user is loaded before loading tags\n      console.log('[ContactForm] User available, loading tags');\n      loadExistingTags();\n    } else {\n      console.log('[ContactForm] Waiting for user to load tags...');\n    }\n  }, [user, cachedRequest, logError]);\n\n  const handleChange = (field, value) => {\n    console.log('[ContactForm] Field changed:', field, value);\n    setFormData(prev => {\n      const updated = { ...prev, [field]: value };\n\n      if (!contact && user && (field === 'email' || field === 'phone')) {\n        console.log('[ContactForm] Email/phone changed, checking for duplicates...');\n        checkForDuplicates(updated);\n      }\n\n      return updated;\n    });\n  };\n\n  const handleCreateAccountSuccess = (newAccount) => {\n    console.log('[ContactForm] New account created:', newAccount.id);\n    setFormData(prev => ({ ...prev, account_id: newAccount.id }));\n    setShowCreateAccount(false);\n    toast({\n      title: \"Success\",\n      description: \"Account created successfully\",\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log('[ContactForm] === FORM SUBMIT ===');\n    setSubmitError(null);\n    setSubmitProgress(\"\");\n\n    if (!formData.first_name || !formData.last_name) {\n      console.log('[ContactForm] ERROR: Missing required fields (first_name, last_name)');\n      toast({\n        title: \"Missing Information\",\n        description: \"First name and last name are required.\",\n        variant: \"destructive\",\n      });\n      setSubmitError(\"First name and last name are required.\");\n      return;\n    }\n\n    if (!user?.tenant_id) {\n      console.log('[ContactForm] ERROR: User tenant_id is missing');\n      if (logError) {\n        logError(createError('Contact Form', 'Tenant not configured', {\n          severity: 'critical',\n          actionable: 'User account missing tenant assignment. Contact system administrator.'\n        }));\n      }\n      toast({\n        title: \"Tenant Not Configured\",\n        description: \"Cannot save contact: No client assigned to your account. Please contact an administrator.\",\n        variant: \"destructive\",\n      });\n      setSubmitError(\"Cannot save contact: No client assigned to your account. Please contact an administrator.\");\n      return;\n    }\n\n    if (!contact && duplicateWarning && duplicateWarning.length > 0) {\n      console.log('[ContactForm] Duplicate warning present, prompting user...');\n      const proceed = confirm(\n        `Warning: ${duplicateWarning.length} potential duplicate(s) found. Do you want to proceed anyway?`\n      );\n      if (!proceed) {\n        console.log('[ContactForm] User cancelled submission due to duplicates');\n        return;\n      }\n    }\n\n    console.log('[ContactForm] Starting submission...');\n    setIsSubmitting(true);\n    setSubmitProgress(\"Preparing contact data...\");\n\n    try {\n      let submissionData = { ...formData };\n\n      Object.keys(submissionData).forEach(key => {\n        if (submissionData[key] === '' && key !== 'is_test_data' && key !== 'tags') {\n          submissionData[key] = null;\n        } else if (key === 'tags' && submissionData[key] && submissionData[key].length === 0) {\n          submissionData[key] = null;\n        }\n      });\n      \n      console.log('[ContactForm] Enriching contact data...');\n      setSubmitProgress(\"Enriching contact data...\");\n      const enrichedData = await DenormalizationHelper.enrichContact(\n        submissionData,\n        user.tenant_id\n      );\n      console.log('[ContactForm] Data enriched successfully');\n      \n      let result;\n      if (contact) {\n        console.log('[ContactForm] Updating existing contact with ID:', contact.id);\n        setSubmitProgress(\"Updating contact...\");\n        result = await Contact.update(contact.id, enrichedData);\n        console.log('[ContactForm] Contact updated successfully, result:', result?.id);\n\n        try {\n          console.log('[ContactForm] Creating audit log for update...');\n          setSubmitProgress(\"Creating audit log...\");\n          const auditLogData = {\n            action_type: 'update',\n            entity_type: 'Contact',\n            entity_id: contact.id,\n            description: `Contact updated: ${formData.first_name} ${formData.last_name}`,\n            old_values: {\n              first_name: contact.first_name, last_name: contact.last_name, email: contact.email,\n              phone: contact.phone, mobile: contact.mobile, job_title: contact.job_title,\n              department: contact.department, account_id: contact.account_id, assigned_to: contact.assigned_to,\n              lead_source: contact.lead_source, status: contact.status, is_test_data: contact.is_test_data,\n              address_1: contact.address_1, address_2: contact.address_2, city: contact.city, state: contact.state, zip: contact.zip, country: contact.country,\n              tags: contact.tags,\n            },\n            new_values: {\n              first_name: enrichedData.first_name, last_name: enrichedData.last_name, email: enrichedData.email,\n              phone: enrichedData.phone, mobile: enrichedData.mobile, job_title: enrichedData.job_title,\n              department: enrichedData.department, account_id: enrichedData.account_id, assigned_to: enrichedData.assigned_to,\n              lead_source: enrichedData.lead_source, status: enrichedData.status, is_test_data: enrichedData.is_test_data,\n              address_1: enrichedData.address_1, address_2: enrichedData.address_2, city: enrichedData.city, state: enrichedData.state, zip: enrichedData.zip, country: enrichedData.country,\n              tags: enrichedData.tags,\n            }\n          };\n          await cachedRequest('Utility', 'createAuditLog', auditLogData, () => createAuditLog(auditLogData));\n          console.log('[ContactForm] Audit log created for update');\n        } catch (auditError) {\n          console.warn('[ContactForm] Audit log creation failed (non-critical) during update:', auditError.message);\n          if (logError) {\n            logError(handleApiError('Contact Form - Update Audit Log', auditError));\n          }\n        }\n      } else {\n        const tenantIdForNewContact = user.role === 'superadmin' && selectedTenantId ? selectedTenantId : user.tenant_id;\n        console.log('[ContactForm] Creating new contact with target tenant:', tenantIdForNewContact);\n        \n        if (!tenantIdForNewContact) {\n          console.log('[ContactForm] ERROR: No tenant ID for new contact creation');\n          toast({\n            title: \"Tenant Not Configured\",\n            description: \"Cannot save contact: No client assigned. Please contact an administrator.\",\n            variant: \"destructive\",\n          });\n          setSubmitError(\"Cannot save contact: No client assigned. Please contact an administrator.\");\n          setIsSubmitting(false);\n          setSubmitProgress(\"\");\n          if (logError) {\n            logError(createError('Contact Form - New', 'Tenant not configured for new contact', {\n              severity: 'critical',\n              actionable: 'User account missing tenant assignment or selected tenant ID is null. Contact system administrator.'\n            }));\n          }\n          return;\n        }\n\n        if (!enrichedData.unique_id) {\n          try {\n            console.log('[ContactForm] Generating unique ID for new contact...');\n            setSubmitProgress(\"Generating unique ID...\");\n            const idResponse = await cachedRequest(\n              'Utility',\n              'generateUniqueId',\n              { entity_type: 'Contact', tenant_id: tenantIdForNewContact },\n              () => generateUniqueId({ entity_type: 'Contact', tenant_id: tenantIdForNewContact })\n            );\n            if (idResponse.data?.unique_id) {\n              enrichedData.unique_id = idResponse.data.unique_id;\n              console.log('[ContactForm] Unique ID generated:', enrichedData.unique_id);\n            }\n          } catch (error) {\n            console.warn('[ContactForm] Failed to generate unique ID (non-critical) for new contact:', error.message);\n            if (logError) {\n              logError(handleApiError('Contact Form - Generate Unique ID', error, {\n                severity: 'warning',\n                description: 'Failed to generate unique ID for new contact.'\n              }));\n            }\n          }\n        }\n\n        console.log('[ContactForm] Attempting to create contact...');\n        setSubmitProgress(\"Creating contact...\");\n        result = await Contact.create({\n          ...enrichedData,\n          tenant_id: tenantIdForNewContact,\n        });\n        console.log('[ContactForm] Contact created successfully, result:', result?.id);\n\n        try {\n          console.log('[ContactForm] Creating audit log for create...');\n          setSubmitProgress(\"Creating audit log...\");\n          const auditLogData = {\n            action_type: 'create',\n            entity_type: 'Contact',\n            entity_id: result?.id || 'unknown',\n            description: `Contact created: ${formData.first_name} ${formData.last_name}`,\n            new_values: enrichedData\n          };\n          await cachedRequest('Utility', 'createAuditLog', auditLogData, () => createAuditLog(auditLogData));\n          console.log('[ContactForm] Audit log created for create');\n        } catch (auditError) {\n          console.warn('[ContactForm] Audit log creation failed (non-critical) during create:', auditError.message);\n          if (logError) {\n            logError(handleApiError('Contact Form - Create Audit Log', auditError));\n          }\n        }\n      }\n\n      console.log('[ContactForm] Finalizing submission...');\n      setSubmitProgress(\"Finalizing...\");\n      clearCache();\n      window.dispatchEvent(new CustomEvent('entity-modified', { detail: { entity: 'Contact' } }));\n\n      console.log('[ContactForm] === SUBMIT SUCCESS ===');\n      toast({\n        title: \"Success!\",\n        description: contact ? \"Contact updated successfully!\" : \"Contact created successfully!\",\n        variant: \"default\",\n      });\n\n      if (onSuccess) {\n        onSuccess(result);\n      }\n    } catch (error) {\n      console.error('[ContactForm] === SUBMIT ERROR ===', error);\n      if (logError) {\n        logError(handleApiError('Contact Form - Submit', error));\n      }\n      \n      toast({\n        title: \"Error Saving Contact\",\n        description: \"Failed to save contact. Please try again or contact support if the issue persists.\",\n        variant: \"destructive\",\n      });\n      setSubmitError(error.message || \"An unexpected error occurred while saving the contact.\");\n    } finally {\n      console.log('[ContactForm] Submit complete, cleaning up submission state');\n      setIsSubmitting(false);\n      setSubmitProgress(\"\");\n    }\n  };\n\n  console.log('[ContactForm] Rendering component, user available:', !!user, 'userLoading:', userLoading);\n\n  if (userLoading || !user) {\n    console.log('[ContactForm] Showing loader (userLoading:', userLoading, ', user:', !!user, ')');\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n        <span className=\"ml-3 text-slate-400\">Loading form...</span>\n      </div>\n    );\n  }\n\n  console.log('[ContactForm] User data available, rendering full form.');\n\n  return (\n    <>\n      <div className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-bold text-slate-100\">\n            {contact ? \"Edit Contact\" : \"New Contact\"}\n          </h2>\n          <Button variant=\"ghost\" size=\"icon\" onClick={onCancel} className=\"text-slate-400 hover:text-slate-200\">\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {!user?.tenant_id && user?.role !== 'superadmin' && (\n          <Alert variant=\"destructive\" className=\"mb-6 bg-red-900/20 border-red-700/50 text-red-300\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Your account is not configured with a client. You cannot save records. Please contact your administrator.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {isSubmitting && submitProgress && (\n          <Alert className=\"mb-6 bg-blue-900/20 border-blue-700/50\">\n            <Loader2 className=\"h-4 w-4 animate-spin text-blue-400\" />\n            <AlertDescription className=\"text-blue-300\">\n              {submitProgress}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {submitError && (\n          <Alert variant=\"destructive\" className=\"mb-6 bg-red-900/20 border-red-700/50 text-red-300\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              {submitError}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {!contact && duplicateWarning && duplicateWarning.length > 0 && (\n          <Alert className=\"mb-6 bg-orange-900/20 border-orange-700/50 text-orange-300\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <div className=\"font-semibold mb-2\">\n                {duplicateWarning.length} potential duplicate{duplicateWarning.length !== 1 ? 's' : ''} found:\n              </div>\n              <div className=\"space-y-2\">\n                {duplicateWarning.slice(0, 3).map((dup, idx) => (\n                  <div key={idx} className=\"text-sm flex items-center justify-between bg-slate-800/50 p-2 rounded\">\n                    <div>\n                      <div className=\"font-medium\">{dup.first_name} {dup.last_name}</div>\n                      <div className=\"text-xs text-slate-400\">\n                        {dup.email && `${dup.email}`}\n                        {dup.email && dup.phone && ` ΓÇó `}\n                        {dup.phone && `${dup.phone}`}\n                        {(dup.email || dup.phone) && dup.reason && ` ΓÇó `}\n                        {dup.reason && `${dup.reason}`}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {duplicateWarning.length > 3 && (\n                  <div className=\"text-xs text-slate-400\">\n                    ...and {duplicateWarning.length - 3} more\n                  </div>\n                )}\n              </div>\n              <div className=\"mt-2 text-sm\">\n                Review duplicates on the <strong>Duplicate Contacts</strong> page before proceeding.\n              </div>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {!contact && checkingDuplicates && (\n            <div className=\"mb-6 flex items-center gap-2 text-sm text-slate-400\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-slate-500\"></div>\n                Checking for duplicates...\n            </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <h3 className=\"text-lg font-semibold text-slate-200 mb-3\">Basic Information</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"first_name\" className=\"text-slate-200\">First Name *</Label>\n              <Input\n                id=\"first_name\"\n                value={formData.first_name}\n                onChange={(e) => handleChange('first_name', e.target.value)}\n                required\n                className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"last_name\" className=\"text-slate-200\">Last Name *</Label>\n              <Input\n                id=\"last_name\"\n                value={formData.last_name}\n                onChange={(e) => handleChange('last_name', e.target.value)}\n                required\n                className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"email\" className=\"text-slate-200\">Email (Optional)</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => handleChange('email', e.target.value)}\n                className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                placeholder=\"Leave blank if no email available\"\n              />\n              <p className=\"text-xs text-slate-500 mt-1\">Email is optional - unique ID will be generated for tracking</p>\n            </div>\n            <PhoneInput\n              id=\"phone\"\n              label=\"Phone\"\n              value={formData.phone}\n              onChange={(value) => handleChange('phone', value)}\n              placeholder=\"(555) 123-4567\"\n              className=\"bg-slate-700 border-slate-600 text-slate-200\"\n              labelClassName=\"text-slate-200\"\n              darkMode={true}\n              showPrefixPicker={true}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <PhoneInput\n              id=\"mobile\"\n              label=\"Mobile (Optional)\"\n              value={formData.mobile}\n              onChange={(value) => handleChange('mobile', value)}\n              placeholder=\"Mobile number\"\n              className=\"bg-slate-700 border-slate-600 text-slate-200\"\n              labelClassName=\"text-slate-200\"\n              darkMode={true}\n              showPrefixPicker={true}\n            />\n            <div>\n              <Label htmlFor=\"job_title\" className=\"text-slate-200\">Job Title</Label>\n              <Input\n                id=\"job_title\"\n                value={formData.job_title}\n                onChange={(e) => handleChange('job_title', e.target.value)}\n                className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              />\n            </div>\n          </div>\n\n          <div className=\"border-t pt-6 border-slate-600\">\n            <h3 className=\"text-lg font-semibold text-slate-200 mb-3\">Company Information</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"account_id\" className=\"text-slate-200\">Associated Account</Label>\n                <LazyAccountSelector\n                  value={formData.account_id}\n                  onValueChange={(value) => handleChange('account_id', value)}\n                  onCreateNew={(name) => {\n                    setNewAccountName(name);\n                    setShowCreateAccount(true);\n                  }}\n                  placeholder=\"Link to an existing account...\"\n                  className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200\"\n                  contentClassName=\"bg-slate-800 border-slate-700\"\n                  itemClassName=\"text-slate-200 hover:bg-slate-700\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"department\" className=\"text-slate-200\">Department</Label>\n                <Input\n                  id=\"department\"\n                  value={formData.department}\n                  onChange={(e) => handleChange('department', e.target.value)}\n                  className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t pt-6 border-slate-600\">\n            <h3 className=\"text-lg font-semibold text-slate-200 mb-3\">Lead & Assignment</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"lead_source\" className=\"text-slate-200\">Lead Source</Label>\n                <Select value={formData.lead_source} onValueChange={(value) => handleChange('lead_source', value)}>\n                  <SelectTrigger className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200\">\n                    <SelectValue placeholder=\"Select source...\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-slate-700\">\n                    {leadSourceOptions.map(option => (\n                      <SelectItem key={option.value} value={option.value} className=\"text-slate-200 hover:bg-slate-700\">\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"assigned_to\" className=\"text-slate-200\">Assigned To</Label>\n                <LazyEmployeeSelector\n                  value={formData.assigned_to}\n                  onValueChange={(value) => handleChange('assigned_to', value)}\n                  placeholder=\"Assign to sales person...\"\n                  className=\"w-full mt-1 bg-slate-700 border-slate-600 text-slate-200\"\n                  contentClassName=\"bg-slate-800 border-slate-700\"\n                  itemClassName=\"text-slate-200 hover:bg-slate-700\"\n                  allowUnassigned={true}\n                  showLoadingState={true}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t pt-6 border-slate-600\">\n            <h3 className=\"text-lg font-semibold text-slate-200 mb-3\">Status</h3>\n            <div>\n              <Label htmlFor=\"status\" className=\"text-slate-200\">Status</Label>\n              <Select value={formData.status} onValueChange={(value) => handleChange('status', value)}>\n                <SelectTrigger className=\"mt-1 bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"Select status...\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  {statusOptions.map(option => (\n                    <SelectItem key={option.value} value={option.value} className=\"text-slate-200 hover:bg-slate-700\">\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"border-t pt-6 border-slate-600\">\n            <h4 className=\"text-lg font-semibold text-slate-100 mb-4\">Address Information</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <AddressFields formData={formData} handleChange={handleChange} darkMode={true} />\n            </div>\n          </div>\n\n          <div className=\"border-t pt-6 border-slate-600\">\n            <h3 className=\"text-lg font-semibold text-slate-200 mb-3\">Tags</h3>\n            <div>\n              <Label className=\"text-slate-200 block mb-2\">Tags</Label>\n              <TagInput\n                selectedTags={formData.tags}\n                onTagsChange={(newTags) => handleChange('tags', newTags)}\n                allTags={allTags}\n                placeholder=\"Add or search for tags...\"\n                darkMode={true}\n              />\n            </div>\n          </div>\n\n          {isAdmin && (\n            <div className=\"flex items-center space-x-2 p-4 bg-amber-900/20 border border-amber-700/50 rounded-lg\">\n              <Switch\n                id=\"is_test_data\"\n                checked={formData.is_test_data || false}\n                onCheckedChange={(checked) => handleChange('is_test_data', checked)}\n                className=\"data-[state=checked]:bg-amber-600\"\n              />\n              <Label htmlFor=\"is_test_data\" className=\"text-amber-300 font-medium\">\n                Mark as Test Data\n              </Label>\n              <span className=\"text-xs text-amber-400 ml-2\">\n                (For admin cleanup purposes)\n              </span>\n            </div>\n          )}\n\n          <div className=\"flex justify-end gap-3 pt-6 border-t border-slate-700\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onCancel}\n              disabled={isSubmitting}\n              className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting || (!user?.tenant_id && !selectedTenantId && user?.role !== 'superadmin') || checkingDuplicates}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  {contact ? \"Updating...\" : \"Creating...\"}\n                </>\n              ) : (\n                <>\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {contact ? 'Update Contact' : 'Create Contact'}\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </div>\n\n      {showCreateAccount && (\n        <CreateAccountDialog\n          open={showCreateAccount}\n          onOpenChange={setShowCreateAccount}\n          onSuccess={handleCreateAccountSuccess}\n          initialName={newAccountName}\n        />\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\contacts\\ContactStats.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Users"},"fix":{"range":[94,100],"text":""},"desc":"Remove unused variable 'Users'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'UserCheck' is defined but never used.","line":3,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"UserCheck"},"fix":{"range":[99,110],"text":""},"desc":"Remove unused variable 'UserCheck'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'UserX' is defined but never used.","line":3,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"UserX"},"fix":{"range":[110,117],"text":""},"desc":"Remove unused variable 'UserX'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":3,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[117,129],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, UserCheck, UserX, TrendingUp } from \"lucide-react\";\nimport StatusHelper from \"../shared/StatusHelper\";\n\nexport default function ContactStats({ stats }) {\n  return (\n    <div className=\"grid grid-cols-2 sm:grid-cols-5 gap-4\">\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-5\">\n          <div className=\"flex items-start justify-between mb-3\">\n            <span className=\"text-sm font-medium text-slate-300\">Total Contacts</span>\n            <StatusHelper statusKey=\"total_all\" />\n          </div>\n          <p className=\"text-4xl font-bold text-slate-100\">{stats.total.toLocaleString('en-US')}</p>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-5\">\n          <div className=\"flex items-start justify-between mb-3\">\n            <span className=\"text-sm font-medium text-slate-300\">Active</span>\n            <StatusHelper statusKey=\"contact_active\" />\n          </div>\n          <p className=\"text-4xl font-bold text-slate-100\">{stats.active.toLocaleString('en-US')}</p>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-5\">\n          <div className=\"flex items-start justify-between mb-3\">\n            <span className=\"text-sm font-medium text-slate-300\">Prospects</span>\n            <StatusHelper statusKey=\"contact_prospect\" />\n          </div>\n          <p className=\"text-4xl font-bold text-slate-100\">{stats.prospect.toLocaleString('en-US')}</p>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-5\">\n          <div className=\"flex items-start justify-between mb-3\">\n            <span className=\"text-sm font-medium text-slate-300\">Customers</span>\n            <StatusHelper statusKey=\"contact_customer\" />\n          </div>\n          <p className=\"text-4xl font-bold text-slate-100\">{stats.customer.toLocaleString('en-US')}</p>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-5\">\n          <div className=\"flex items-start justify-between mb-3\">\n            <span className=\"text-sm font-medium text-slate-300\">Inactive</span>\n            <StatusHelper statusKey=\"contact_inactive\" />\n          </div>\n          <p className=\"text-4xl font-bold text-slate-100\">{stats.inactive.toLocaleString('en-US')}</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\contacts\\ContactToLeadDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Lead } from \"@/api/entities\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, Star, ArrowRight } from \"lucide-react\";\n\nexport default function ContactToLeadDialog({ contact, account, onConvert, onClose }) {\n  const [isConverting, setIsConverting] = useState(false);\n  const [reason, setReason] = useState(\"\");\n  const [leadStatus, setLeadStatus] = useState(\"new\");\n  const [leadSource, setLeadSource] = useState(\"referral\");\n\n  const handleConvert = async () => {\n    setIsConverting(true);\n    try {\n      const newLead = await Lead.create({\n        tenant_id: contact.tenant_id,\n        first_name: contact.first_name,\n        last_name: contact.last_name,\n        email: contact.email,\n        phone: contact.phone,\n        company: account?.name || \"\",\n        job_title: contact.job_title,\n        source: leadSource,\n        status: leadStatus,\n        address_1: contact.address_1,\n        address_2: contact.address_2,\n        city: contact.city,\n        state: contact.state,\n        zip: contact.zip,\n        country: contact.country,\n        notes: `Converted from Contact (${contact.id}). Reason: ${reason}`,\n        tags: contact.tags,\n        score: contact.score,\n        score_reason: contact.score_reason,\n        assigned_to: contact.assigned_to,\n      });\n\n      await onConvert({\n        lead: newLead,\n        contactId: contact.id\n      });\n      \n    } catch (error) {\n      console.error(\"Error converting contact to lead:\", error);\n      alert(\"Failed to convert contact to lead. Please try again.\");\n    } finally {\n      setIsConverting(false);\n    }\n  };\n\n  return (\n    <Dialog open={!!contact} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Star className=\"w-5 h-5 text-orange-600\" />\n            Convert to Lead: {contact?.first_name} {contact?.last_name}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          <div className=\"p-4 bg-orange-50 rounded-lg\">\n            <h3 className=\"font-semibold text-orange-900 mb-2\">Conversion Summary</h3>\n            <div className=\"flex items-center gap-4 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <Badge variant=\"outline\" className=\"bg-green-100 text-green-800\">Contact</Badge>\n                <ArrowRight className=\"w-4 h-4\" />\n                <Badge variant=\"outline\" className=\"bg-orange-100 text-orange-800\">Lead</Badge>\n              </div>\n            </div>\n            <p className=\"text-sm text-orange-700 mt-2\">\n              This will create a new lead record for re-qualification purposes.\n            </p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Reason for Re-qualification</Label>\n              <Textarea\n                value={reason}\n                onChange={(e) => setReason(e.target.value)}\n                placeholder=\"Why is this contact being converted back to a lead?\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Lead Status</Label>\n                <Select value={leadStatus} onValueChange={setLeadStatus}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"new\">New</SelectItem>\n                    <SelectItem value=\"contacted\">Contacted</SelectItem>\n                    <SelectItem value=\"qualified\">Qualified</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label>Lead Source</Label>\n                <Select value={leadSource} onValueChange={setLeadSource}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"referral\">Referral</SelectItem>\n                    <SelectItem value=\"website\">Website</SelectItem>\n                    <SelectItem value=\"cold_call\">Cold Call</SelectItem>\n                    <SelectItem value=\"email\">Email</SelectItem>\n                    <SelectItem value=\"social_media\">Social Media</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose} disabled={isConverting}>\n            Cancel\n          </Button>\n          <Button onClick={handleConvert} disabled={isConverting || !reason.trim()}>\n            {isConverting ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Converting...\n              </>\n            ) : (\n              <>\n                <Star className=\"w-4 h-4 mr-2\" />\n                Convert to Lead\n              </>\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\dashboard\\DashboardHeader.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\dashboard\\EmployeeFilter.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { User as UserIcon, Users } from \"lucide-react\";\nimport { Employee } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function EmployeeFilter({ value, onChange, className = \"\" }) {\n  const [employees, setEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n      try {\n        const user = await User.me();\n        setCurrentUser(user);\n\n        // Only show filter for managers and admins\n        if (user.role === 'admin' || user.role === 'superadmin' || user.employee_role === 'manager') {\n          const tenantFilter = user.tenant_id ? { tenant_id: user.tenant_id } : {};\n          const empList = await Employee.filter(tenantFilter, \"first_name\");\n          setEmployees(empList || []);\n        }\n      } catch (error) {\n        console.error(\"Failed to load employees:\", error);\n        setEmployees([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadData();\n  }, []);\n\n  // Don't show filter for regular employees (they only see their own data)\n  if (!currentUser || (currentUser.employee_role === 'employee' && currentUser.role !== 'admin' && currentUser.role !== 'superadmin')) {\n    return null;\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center gap-2\">\n        <div className=\"h-10 w-48 animate-pulse bg-slate-700 rounded-md\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`flex flex-col gap-2 ${className}`}>\n      <Label className=\"text-sm text-slate-300 flex items-center gap-2\">\n        <Users className=\"w-4 h-4\" />\n        Filter by Employee\n      </Label>\n      <Select value={value || \"all\"} onValueChange={onChange}>\n        <SelectTrigger className=\"w-full sm:w-64 bg-slate-700 border-slate-600 text-slate-200\">\n          <SelectValue placeholder=\"All Employees\" />\n        </SelectTrigger>\n        <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\" style={{ zIndex: 2147483647 }}>\n          <SelectItem value=\"all\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"w-4 h-4\" />\n              <span>All Employees</span>\n            </div>\n          </SelectItem>\n          {employees\n            .filter(emp => emp.email || emp.user_email)\n            .map((employee) => (\n              <SelectItem \n                key={employee.id} \n                value={employee.email || employee.user_email} \n                className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\"\n              >\n                <div className=\"flex items-center gap-2\">\n                  <UserIcon className=\"w-4 h-4\" />\n                  <span>{employee.first_name} {employee.last_name}</span>\n                </div>\n              </SelectItem>\n            ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\dashboard\\LazyWidgetLoader.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { Loader2 } from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\n\n/**\n * LazyWidgetLoader - Progressively loads dashboard widgets with intersection observer\n * @param {React.Component} component - The widget component to load\n * @param {number} delay - Delay before loading (ms)\n * @param {object} props - Props to pass to the widget\n */\nexport default function LazyWidgetLoader({ component: Component, delay = 0, ...props }) {\n  const [shouldLoad, setShouldLoad] = useState(delay === 0);\n  const [isVisible, setIsVisible] = useState(false);\n  const ref = useRef(null);\n\n  // Delay-based loading\n  useEffect(() => {\n    if (delay > 0) {\n      const timer = setTimeout(() => setShouldLoad(true), delay);\n      return () => clearTimeout(timer);\n    }\n  }, [delay]);\n\n  // Intersection observer for viewport visibility\n  useEffect(() => {\n    if (!shouldLoad) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n          observer.disconnect();\n        }\n      },\n      { rootMargin: '100px' } // Start loading 100px before entering viewport\n    );\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => observer.disconnect();\n  }, [shouldLoad]);\n\n  if (!shouldLoad || !isVisible) {\n    return (\n      <div ref={ref} className=\"min-h-[200px]\">\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"flex items-center justify-center h-[200px]\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-slate-600\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return <Component {...props} />;\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\dashboard\\LeadAgeReport.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used.","line":5,"column":64,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":76,"suggestions":[{"messageId":"removeVar","data":{"varName":"CalendarIcon"},"fix":{"range":[278,304],"text":""},"desc":"Remove unused variable 'CalendarIcon'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","line":108,"column":6,"nodeType":"ArrayExpression","endLine":108,"endColumn":82,"suggestions":[{"desc":"Update the dependencies array to be: [props.tenantFilter, props.leadsData, props.employeesData, cachedRequest, props]","fix":{"range":[4525,4601],"text":"[props.tenantFilter, props.leadsData, props.employeesData, cachedRequest, props]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, TrendingDown, AlertTriangle, User, Calendar as CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Link } from \"react-router-dom\";\nimport { createPageUrl } from \"@/utils\";\nimport { Lead } from \"@/api/entities\";\nimport { Employee } from \"@/api/entities\";\nimport { useApiManager } from \"../shared/ApiManager\";\n\nconst AGE_BUCKETS = [\n  { label: '0-7 days', min: 0, max: 7, color: 'bg-green-100 text-green-800 border-green-200' },\n  { label: '8-14 days', min: 8, max: 14, color: 'bg-yellow-100 text-yellow-800 border-yellow-200' },\n  { label: '15-21 days', min: 15, max: 21, color: 'bg-orange-100 text-orange-800 border-orange-200' },\n  { label: '22-30 days', min: 22, max: 30, color: 'bg-red-100 text-red-800 border-red-200' },\n  { label: '30+ days', min: 31, max: 999, color: 'bg-purple-100 text-purple-800 border-purple-200' },\n];\n\nexport default function LeadAgeReport(props) {\n  const [leads, setLeads] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [ageBuckets, setAgeBuckets] = useState([]);\n  const [selectedBucket, setSelectedBucket] = useState(null);\n  const { cachedRequest } = useApiManager();\n\n  useEffect(() => {\n    let mounted = true;\n    const load = async () => {\n      setLoading(true);\n      try {\n        const tenantFilter = props && props.tenantFilter ? props.tenantFilter : {};\n        \n        console.log('LeadAgeReport: Using tenant filter from Dashboard:', tenantFilter);\n\n        // If prefetched leads are provided, use them and skip fetching\n        if (Array.isArray(props?.leadsData)) {\n          const filtered = props.leadsData.filter(l => {\n            const statusOk = !['converted', 'lost'].includes(l.status);\n            const tenantOk = !tenantFilter?.tenant_id || l.tenant_id === tenantFilter.tenant_id;\n            const testOk = tenantFilter?.is_test_data?.$ne === true ? !l.is_test_data : true;\n            return statusOk && tenantOk && testOk;\n          });\n          \n          const leadsWithAge = filtered.map(lead => {\n            const createdDate = new Date(lead.created_date);\n            const today = new Date();\n            const ageInDays = Math.floor((today - createdDate) / (1000 * 60 * 60 * 24));\n            return { ...lead, ageInDays };\n          });\n\n          setLeads(leadsWithAge);\n          \n          if (Array.isArray(props?.employeesData)) {\n            setEmployees(props.employeesData);\n          } else {\n            const employeesData = await cachedRequest('Employee', 'list', {}, function () { return Employee.list(); });\n            setEmployees(employeesData);\n          }\n          setLoading(false);\n          return;\n        }\n\n        // Base filter for active leads (not converted or lost)\n        let effectiveFilter = { \n          ...tenantFilter, \n          status: { $nin: ['converted', 'lost'] } \n        };\n        \n        console.log('LeadAgeReport: Using effective filter:', effectiveFilter);\n        \n        const [activeLeads, employeesData] = await Promise.all([\n          cachedRequest('Lead', 'filter', { filter: effectiveFilter }, function () { return Lead.filter(effectiveFilter); }),\n          Array.isArray(props?.employeesData)\n            ? Promise.resolve(props.employeesData)\n            : cachedRequest('Employee', 'list', {}, function () { return Employee.list(); })\n        ]);\n        \n        console.log('LeadAgeReport: Found active leads:', (activeLeads || []).length);\n\n        const leadsWithAge = (activeLeads || []).map(lead => {\n          const createdDate = new Date(lead.created_date);\n          const today = new Date();\n          const ageInDays = Math.floor((today - createdDate) / (1000 * 60 * 60 * 24));\n          \n          return {\n            ...lead,\n            ageInDays\n          };\n        });\n\n        setLeads(leadsWithAge);\n        setEmployees(employeesData || []);\n      } catch (e) {\n        console.warn('LeadAgeReport: failed to fetch data:', e);\n        setLeads([]);\n        setEmployees(Array.isArray(props?.employeesData) ? props.employeesData : []);\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    };\n\n    load();\n    return () => { mounted = false; };\n  }, [props?.tenantFilter, props?.leadsData, props?.employeesData, cachedRequest]);\n\n  // Calculate age distribution\n  useEffect(() => {\n    const buckets = AGE_BUCKETS.map(bucket => {\n      const leadsInBucket = leads.filter(l => \n        l.ageInDays >= bucket.min && l.ageInDays <= bucket.max\n      );\n      return {\n        ...bucket,\n        count: leadsInBucket.length,\n        leads: leadsInBucket.sort((a, b) => b.ageInDays - a.ageInDays)\n      };\n    });\n    setAgeBuckets(buckets);\n  }, [leads]);\n\n  const getAssignedPersonName = (assignedTo) => {\n    if (!assignedTo) return 'N/A';\n    \n    const employee = employees.find(emp => emp.email === assignedTo || emp.id === assignedTo);\n    if (employee) {\n      return `${employee.first_name} ${employee.last_name}`;\n    }\n    \n    if (assignedTo.includes('@')) {\n      return assignedTo.split('@')[0];\n    }\n    \n    return assignedTo;\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"shadow-lg border-0 bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Clock className=\"w-5 h-5 text-yellow-400\" />\n            Lead Age Report\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Array(5).fill(0).map((_, i) => (\n              <Skeleton key={i} className=\"h-16 w-full bg-slate-700\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-lg border-0 bg-slate-800 border-slate-700\">\n      <CardHeader className=\"pb-4 border-b border-slate-700\">\n        <CardTitle className=\"flex items-center justify-between text-slate-100\">\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"w-5 h-5 text-yellow-400\" />\n            Lead Age Distribution\n          </div>\n          <div className=\"flex items-center gap-1 text-sm font-normal text-slate-500\">\n            <TrendingDown className=\"w-4 h-4\" />\n            Active Leads: {leads.length}\n          </div>\n        </CardTitle>\n        <p className=\"text-sm text-slate-400\">\n          Age distribution of leads in pipeline (excluding converted & lost)\n        </p>\n      </CardHeader>\n      <CardContent>\n        {leads.length === 0 ? (\n          <div className=\"flex items-center justify-center min-h-[320px] md:min-h-[380px]\">\n            <div className=\"text-center\">\n              <Clock className=\"w-12 h-12 mx-auto mb-4 text-slate-500\" />\n              <p className=\"text-slate-300\">No active leads in pipeline</p>\n              <p className=\"text-sm text-slate-500\">New leads will appear here</p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Age Buckets */}\n            <div className=\"space-y-3\">\n              {ageBuckets.map((bucket, index) => (\n                <div key={index}>\n                  <button\n                    onClick={() => setSelectedBucket(selectedBucket === index ? null : index)}\n                    className=\"w-full flex items-center justify-between p-4 rounded-lg hover:bg-slate-700/50 transition-colors border border-slate-700/50 text-left\"\n                  >\n                    <div className=\"flex items-center gap-3 flex-1\">\n                      <div className={`px-3 py-1 rounded-md ${bucket.color} font-medium text-sm border`}>\n                        {bucket.label}\n                      </div>\n                      <div className=\"flex-1 bg-slate-700 rounded-full h-2 overflow-hidden\">\n                        <div \n                          className={`h-full ${bucket.color.split(' ')[0]} transition-all duration-500`}\n                          style={{ width: `${leads.length > 0 ? (bucket.count / leads.length) * 100 : 0}%` }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-2xl font-bold text-slate-200\">{bucket.count}</span>\n                      {bucket.count > 0 && bucket.min >= 15 && (\n                        <AlertTriangle className=\"w-5 h-5 text-orange-400\" />\n                      )}\n                    </div>\n                  </button>\n\n                  {/* Expanded view showing leads in this bucket */}\n                  {selectedBucket === index && bucket.leads.length > 0 && (\n                    <div className=\"mt-2 ml-4 space-y-2 border-l-2 border-slate-600 pl-4\">\n                      {bucket.leads.slice(0, 5).map((lead) => (\n                        <div key={lead.id} className=\"flex items-center justify-between p-2 rounded bg-slate-700/30\">\n                          <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n                            <User className=\"w-4 h-4 text-slate-400 flex-shrink-0\" />\n                            <div className=\"min-w-0\">\n                              <p className=\"text-sm font-medium text-slate-200 truncate\">\n                                {lead.first_name} {lead.last_name}\n                              </p>\n                              {lead.company && (\n                                <p className=\"text-xs text-slate-500 truncate\">{lead.company}</p>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-3 flex-shrink-0\">\n                            <Badge variant=\"outline\" className=\"text-xs border-slate-600 text-slate-400\">\n                              {getAssignedPersonName(lead.assigned_to)}\n                            </Badge>\n                            <div className=\"text-right\">\n                              <p className=\"text-sm font-semibold text-slate-300\">{lead.ageInDays}d</p>\n                              <p className=\"text-xs text-slate-500\">\n                                {format(new Date(lead.created_date), 'MMM d')}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                      {bucket.leads.length > 5 && (\n                        <p className=\"text-xs text-slate-500 text-center pt-2\">\n                          +{bucket.leads.length - 5} more leads\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"text-center pt-4 border-t border-slate-700\">\n              <Button variant=\"outline\" size=\"sm\" asChild className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n                <Link to={createPageUrl(\"Leads\")}>\n                  View All Active Leads\n                </Link>\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\dashboard\\LeadSourceChart.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":159,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[6971,6978],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\nimport { Lead } from \"@/api/entities\"; // ensure correct SDK import\nimport { PieChart as PieChartIcon, TrendingUp, Loader2 } from 'lucide-react';\nimport { useApiManager } from \"@/components/shared/ApiManager\"; // Updated import path for useApiManager\n\n// Define colors for the chart slices\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#ff4d4d'];\n\nexport default function LeadSourceChart(props) { // Changed to receive `props`\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const { cachedRequest } = useApiManager();\n\n  // Helper: compute chart data from a leads array\n  const computeFromLeads = (leadsArr) => {\n    const allSources = {\n      website: 0, referral: 0, cold_call: 0, email: 0, social_media: 0,\n      trade_show: 0, advertising: 0, other: 0\n    };\n    (Array.isArray(leadsArr) ? leadsArr : []).forEach(lead => {\n      const source = lead?.source || 'other';\n      if (Object.prototype.hasOwnProperty.call(allSources, source)) {\n        allSources[source]++;\n      } else {\n        allSources.other++;\n      }\n    });\n    const formattedData = Object.entries(allSources).map(([key, value]) => ({\n      name: key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\n      value,\n      originalKey: key\n    }));\n    setData(formattedData);\n  };\n\n  useEffect(() => {\n    let mounted = true;\n\n    const run = async () => {\n      setLoading(true);\n      try {\n        const tenantFilter = props?.tenantFilter || {};\n        const showTestData = props?.showTestData;\n\n        const effectiveFilter = showTestData\n          ? { ...tenantFilter }\n          : Object.assign({}, tenantFilter, { is_test_data: { $ne: true } });\n\n        // If prefetched leads are provided (from dashboard bundle), use them\n        // `props.leadsData.length >= 0` is used to ensure it's an array and not null/undefined\n        if (mounted && Array.isArray(props?.leadsData) && props.leadsData.length >= 0) {\n          // Filter the provided leads by effectiveFilter (tenant/test-data)\n          const filtered = props.leadsData.filter(l => {\n            const tenantOk = !effectiveFilter.tenant_id || l.tenant_id === effectiveFilter.tenant_id;\n            // Test data filtering: if effectiveFilter has { is_test_data: { $ne: true } },\n            // then we exclude leads where l.is_test_data is true.\n            // If effectiveFilter doesn't have it (showTestData is true), this condition is always true.\n            const testOk = !(effectiveFilter.is_test_data && effectiveFilter.is_test_data.$ne === true && l.is_test_data === true);\n            return tenantOk && testOk;\n          });\n          computeFromLeads(filtered);\n          setLoading(false); // Crucial to set loading to false when using prefetched data\n          return; // Exit early as we've processed prefetched data\n        }\n\n        // Otherwise, fetch via API (cached)\n        const leads = await cachedRequest(\n          'Lead',\n          'filter',\n          { filter: effectiveFilter },\n          () => Lead.filter(effectiveFilter)\n        );\n\n        if (mounted) {\n          computeFromLeads(leads);\n        }\n      } catch (error) {\n        console.error(\"LeadSourceChart: Failed to fetch or compute lead sources:\", error);\n        if (mounted) setData([]);\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    };\n\n    run();\n    return () => { mounted = false; };\n    // Depend on filter, test toggle, cachedRequest, and leadsData from parent\n  }, [props.tenantFilter, props.showTestData, props.leadsData, cachedRequest]);\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700 h-full\">\n      <CardHeader className=\"border-b border-slate-700\">\n        <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n          <TrendingUp className=\"w-5 h-5 text-green-400\" />\n          Lead Sources\n        </CardTitle>\n        <p className=\"text-slate-400 text-sm\">Where your leads come from</p>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {loading ? (\n          <div className=\"flex items-center justify-center h-64\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n            <span className=\"ml-3 text-slate-400\">Loading source data...</span>\n          </div>\n        ) : (\n          data.every(item => item.value === 0) ? ( // Check if all values are zero\n            <div className=\"text-center py-8 text-slate-500 h-[300px] flex flex-col justify-center items-center\">\n              <PieChartIcon className=\"w-12 h-12 mx-auto mb-4 text-slate-600\" />\n              <p className=\"text-slate-400\">No lead data available</p>\n              <p className=\"text-sm text-slate-500\">Lead sources will appear here</p>\n            </div>\n          ) : (\n            // Reserve extra height so the legend is always visible\n            <div className=\"h-[18rem] md:h-[20rem]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart margin={{ top: 8, right: 8, bottom: 48, left: 8 }}>\n                  <Pie\n                    data={data.filter(item => item.value > 0)} // Only show slices with data in the pie\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, percent }) => {\n                      // Only show labels for slices that are 5% or larger to avoid overlap\n                      if (percent >= 0.05) {\n                        return `${name} ${(percent * 100).toFixed(0)}%`;\n                      }\n                      return '';\n                    }}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                  >\n                    {data.filter(item => item.value > 0).map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: '#1e293b',\n                      border: '1px solid #475569',\n                      borderRadius: '8px',\n                      color: '#f1f5f9'\n                    }}\n                  />\n                  <Legend\n                    height={36} /* reserve space for legend */\n                    align=\"center\"\n                    verticalAlign=\"bottom\"\n                    layout=\"horizontal\"\n                    iconType=\"circle\"\n                    wrapperStyle={{\n                      paddingTop: '6px',\n                      fontSize: '12px'\n                    }}\n                    // Explicitly define payload to include all categories, even those with 0 value\n                    payload={data.map((item, index) => {\n                      // Find the actual index for coloring for items with value > 0\n                      const visibleItems = data.filter(d => d.value > 0);\n                      const itemInVisibleIndex = visibleItems.findIndex(d => d.name === item.name);\n\n                      return {\n                        value: item.name,\n                        type: 'circle',\n                        color: item.value > 0 ? COLORS[itemInVisibleIndex % COLORS.length] : '#64748b', // Grey for zero values\n                        payload: item\n                      };\n                    })}\n                    formatter={(value, entry) => {\n                      const item = entry.payload; // The full data item from our custom payload\n                      const totalWithData = data.reduce((sum, currentItem) => sum + (currentItem.value > 0 ? currentItem.value : 0), 0);\n                      const percent = totalWithData > 0 && item.value > 0 ? ((item.value / totalWithData) * 100).toFixed(0) : 0;\n                      return (\n                        <span style={{\n                          color: entry.color, // match the slice color; grey when 0\n                          fontStyle: item.value === 0 ? 'italic' : 'normal'\n                        }}>\n                          {value} ({item.value > 0 ? `${percent}%` : '0'})\n                        </span>\n                      );\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          )\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\dashboard\\RecentActivities.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'tenantFilterProp'. Either exclude it or remove the dependency array.","line":124,"column":6,"nodeType":"ArrayExpression","endLine":124,"endColumn":104,"suggestions":[{"desc":"Update the dependencies array to be: [memoTenantFilter, memoShowTestData, cachedRequest, props.prefetchedActivities]","fix":{"range":[4627,4725],"text":"[memoTenantFilter, memoShowTestData, cachedRequest, props.prefetchedActivities]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has unnecessary dependencies: 'timeframeDays' and 'timeframeWeeks'. Either exclude them or remove the dependency array.","line":163,"column":6,"nodeType":"ArrayExpression","endLine":163,"endColumn":65,"suggestions":[{"desc":"Update the dependencies array to be: [scopedActivities, cutoffMs]","fix":{"range":[5792,5851],"text":"[scopedActivities, cutoffMs]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { RefreshCw, Phone, Mail, Calendar, Activity as ActivityIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart as RBarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip as RTooltip, ResponsiveContainer, LabelList, Cell } from \"recharts\";\n\nimport { Activity } from \"@/api/entities\";\nimport { useApiManager } from \"../shared/ApiManager\";\nimport { useEmployeeScope } from \"../shared/EmployeeScopeContext\";\n\nimport { Link } from \"react-router-dom\";\nimport { createPageUrl } from \"@/utils\";\n\nconst activityIcons = {\n  call: Phone,\n  email: Mail,\n  meeting: Calendar,\n  task: ActivityIcon,\n  note: ActivityIcon,\n  demo: ActivityIcon,\n  proposal: ActivityIcon,\n  scheduled_ai_call: Phone\n};\n\nconst activityColors = {\n  call: \"bg-blue-100 text-blue-700 border-blue-200\",\n  email: \"bg-purple-100 text-purple-700 border-purple-200\",\n  meeting: \"bg-emerald-100 text-emerald-700 border-emerald-200\",\n  task: \"bg-orange-100 text-orange-700 border-orange-200\",\n  note: \"bg-slate-100 text-slate-700 border-slate-200\",\n  demo: \"bg-pink-100 text-pink-700 border-pink-200\",\n  proposal: \"bg-amber-100 text-amber-700 border-amber-200\",\n  scheduled_ai_call: \"bg-cyan-100 text-cyan-700 border-cyan-200\"\n};\n\nconst priorityColors = {\n  low: \"bg-blue-100 text-blue-800 border-blue-200\",\n  normal: \"bg-emerald-100 text-emerald-800 border-emerald-200\",\n  high: \"bg-orange-100 text-orange-800 border-orange-200\",\n  urgent: \"bg-red-100 text-red-800 border-red-200\"\n};\n\nexport default function RecentActivities(props) {\n  const { tenantFilter: tenantFilterProp, showTestData: showTestDataProp } = props || {};\n  const memoTenantFilter = useMemo(() => (tenantFilterProp ? tenantFilterProp : {}), [tenantFilterProp]);\n  const memoShowTestData = useMemo(\n    () => (typeof showTestDataProp !== \"undefined\" ? showTestDataProp : false),\n    [showTestDataProp]\n  );\n\n  const [activities, setActivities] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState(Date.now());\n\n  const [viewMode, setViewMode] = useState(\"summary\");\n  const [timeframeWeeks, setTimeframeWeeks] = useState(\"4\");\n\n  const { cachedRequest } = useApiManager();\n  const { selectedEmail } = useEmployeeScope();\n  const flipAttemptedRef = useRef(false);\n\n  const fetchActivities = useCallback(async () => {\n    setLoading(true);\n    try {\n      if (Array.isArray(props?.prefetchedActivities)) {\n        const pref = props.prefetchedActivities || [];\n        setActivities(pref.map(a => ({ ...a })));\n        setLastUpdated(Date.now());\n        setLoading(false);\n        return;\n      }\n\n      const effectiveFilter = memoShowTestData\n        ? { ...memoTenantFilter }\n        : { ...memoTenantFilter, is_test_data: { $ne: true } };\n      \n      const recentActivities = await cachedRequest(\n        \"Activity\",\n        \"filter\",\n        {\n          filter: effectiveFilter,\n          sort: \"-created_date\",\n          limit: 200\n        },\n        () => Activity.filter(effectiveFilter, \"-created_date\", 200)\n      );\n\n      const now = new Date();\n      const toDueDate = (a) => {\n        if (!a?.due_date) return null;\n        const datePart = String(a.due_date).split(\"T\")[0];\n        const hhmm = a.due_time && /^\\d{2}:\\d{2}$/.test(a.due_time) ? a.due_time : \"23:59\";\n        const dt = new Date(`${datePart}T${hhmm}:00.000Z`);\n        return isNaN(dt.getTime()) ? null : dt;\n      };\n      \n      const mutableActivities = (recentActivities || []).map(a => ({ ...a }));\n\n      if (!flipAttemptedRef.current) {\n        const flipCandidates = mutableActivities.filter(a => a.status === \"scheduled\" && toDueDate(a) && toDueDate(a) < now);\n        const limited = flipCandidates.slice(0, 5);\n        if (limited.length > 0) {\n          for (const a of limited) {\n            await Activity.update(a.id, { status: \"overdue\" });\n            a.status = \"overdue\";\n          }\n        }\n        flipAttemptedRef.current = true;\n      }\n\n      setActivities(mutableActivities);\n      setLastUpdated(Date.now());\n    } catch (error) {\n      console.error(\"RecentActivities: fetch failed:\", error);\n      setActivities([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [memoTenantFilter, memoShowTestData, cachedRequest, props?.prefetchedActivities, tenantFilterProp]);\n\n  useEffect(() => {\n    fetchActivities();\n  }, [fetchActivities]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchActivities();\n    }, 180000);\n    return () => clearInterval(interval);\n  }, [fetchActivities]);\n\n  const timeframeDays = parseInt(timeframeWeeks, 10) * 7;\n  const cutoffMs = Date.now() - timeframeDays * 24 * 60 * 60 * 1000;\n\n  const scopedActivities = React.useMemo(() => {\n    if (!selectedEmail || selectedEmail === 'all') {\n      return activities;\n    }\n    \n    const filtered = (activities || []).filter(a => {\n      const matches = a.assigned_to === selectedEmail;\n      return matches;\n    });\n    \n    return filtered;\n  }, [activities, selectedEmail]);\n\n  const activitiesInWindow = React.useMemo(() => {\n    const filtered = (scopedActivities || []).filter(a => {\n      const createdDate = new Date(a.created_date);\n      const t = createdDate.getTime();\n      const isValid = !Number.isNaN(t);\n      const isInWindow = t >= cutoffMs;\n      return isValid && isInWindow;\n    });\n    \n    return filtered;\n  }, [scopedActivities, cutoffMs, timeframeWeeks, timeframeDays]);\n\n  const summaryData = React.useMemo(() => {\n    const order = [\"scheduled\", \"overdue\", \"in-progress\", \"completed\", \"cancelled\", \"failed\"];\n    const label = {\n      scheduled: \"Scheduled\",\n      overdue: \"Overdue\",\n      \"in-progress\": \"In Progress\",\n      completed: \"Completed\",\n      cancelled: \"Cancelled\",\n      failed: \"Failed\"\n    };\n    const counts = activitiesInWindow.reduce((acc, a) => {\n      const k = a.status || \"scheduled\";\n      acc[k] = (acc[k] || 0) + 1;\n      return acc;\n    }, {});\n    return order.map(k => ({ status: label[k], key: k, value: counts[k] || 0 }));\n  }, [activitiesInWindow]);\n\n  const barColors = {\n    scheduled: '#3B82F6',\n    overdue: '#F97316',\n    'in-progress': '#06B6D4',\n    completed: '#10B981',\n    cancelled: '#94A3B8',\n    failed: '#EF4444'\n  };\n\n  const descriptionText =\n    memoTenantFilter && memoTenantFilter.tenant_id\n      ? `Showing recent activities for Client ID: ${memoTenantFilter.tenant_id}`\n      : \"Showing recent activities for all clients\";\n\n  const handleRefresh = () => {\n    fetchActivities();\n  };\n\n  if (loading && activities.length === 0) {\n    return (\n      <Card className=\"shadow-lg border-0 bg-slate-800 border-slate-700\">\n        <CardHeader className=\"border-b border-slate-700\">\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <ActivityIcon className=\"w-5 h-5 text-indigo-400\" />\n            Recent Activities\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">Loading recent activities...</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <div key={i} className=\"flex items-center gap-3\">\n              <Skeleton className=\"w-10 h-10 rounded-full bg-slate-700\" />\n              <div className=\"flex-1\">\n                <Skeleton className=\"h-4 w-full mb-1 bg-slate-700\" />\n                <Skeleton className=\"h-3 w-20 bg-slate-700\" />\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-lg border-0 bg-slate-800 border-slate-700\">\n      <CardHeader className=\"border-b border-slate-700\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-3\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n              <ActivityIcon className=\"w-5 h-5 text-indigo-400\" />\n              Recent Activities\n            </CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              {descriptionText} ΓÇó Last {timeframeWeeks} week{timeframeWeeks === \"1\" ? \"\" : \"s\"}\n            </CardDescription>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Select value={timeframeWeeks} onValueChange={setTimeframeWeeks}>\n              <SelectTrigger className=\"w-32 bg-slate-700 border-slate-600 text-slate-200\">\n                <SelectValue placeholder=\"Timeframe\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                <SelectItem value=\"1\">Last 1 week</SelectItem>\n                <SelectItem value=\"2\">Last 2 weeks</SelectItem>\n                <SelectItem value=\"3\">Last 3 weeks</SelectItem>\n                <SelectItem value=\"4\">Last 4 weeks</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <div className=\"flex rounded-md overflow-hidden border border-slate-700\">\n              <Button\n                variant={viewMode === \"summary\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                className={viewMode === \"summary\" ? \"bg-indigo-600 hover:bg-indigo-700\" : \"text-slate-300 hover:bg-slate-700\"}\n                onClick={() => setViewMode(\"summary\")}\n              >\n                Summary\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                className={viewMode === \"list\" ? \"bg-indigo-600 hover:bg-indigo-700\" : \"text-slate-300 hover:bg-slate-700\"}\n                onClick={() => setViewMode(\"list\")}\n              >\n                List\n              </Button>\n            </div>\n\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleRefresh}\n              className=\"text-slate-400 hover:text-slate-200 hover:bg-slate-700\"\n              disabled={loading}\n            >\n              <RefreshCw className={`w-4 h-4 ${loading ? \"animate-spin\" : \"\"}`} />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {viewMode === \"summary\" ? (\n          activitiesInWindow.length === 0 ? (\n            <div className=\"text-center py-8 text-slate-500\">\n              <ActivityIcon className=\"w-12 h-12 mx-auto mb-4 text-slate-600\" />\n              <p className=\"text-slate-400\">No activity in the selected timeframe</p>\n              <p className=\"text-sm text-slate-500\">Try expanding the timeframe</p>\n            </div>\n          ) : (\n            <>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <RBarChart data={summaryData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                    <XAxis dataKey=\"status\" tick={{ fontSize: 12, fill: '#94a3b8' }} stroke=\"#475569\" />\n                    <YAxis allowDecimals={false} tick={{ fontSize: 12, fill: '#94a3b8' }} stroke=\"#475569\" />\n                    <RTooltip\n                      contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #475569', borderRadius: '8px', color: '#f1f5f9' }}\n                      formatter={(value) => [`${value}`, 'Count']}\n                    />\n                    <Bar dataKey=\"value\" radius={[4, 4, 0, 0]}>\n                      {summaryData.map((d, i) => (\n                        <Cell key={`cell-${d.key}-${i}`} fill={barColors[d.key] || '#6366f1'} />\n                      ))}\n                      <LabelList dataKey=\"value\" position=\"top\" style={{ fill: '#cbd5e1', fontSize: '12px' }} />\n                    </Bar>\n                  </RBarChart>\n                </ResponsiveContainer>\n              </div>\n              <div className=\"text-center pt-4 border-t border-slate-700 mt-4\">\n                <Button variant=\"outline\" size=\"sm\" asChild className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n                  <Link to={createPageUrl(\"Activities\")}>\n                    View All Activities\n                  </Link>\n                </Button>\n              </div>\n            </>\n          )\n        ) : (\n          <>\n            {activitiesInWindow.length === 0 ? (\n              <div className=\"text-center py-8 text-slate-500\">\n                <ActivityIcon className=\"w-12 h-12 mx-auto mb-4 text-slate-600\" />\n                <p className=\"text-slate-400\">No recent activities</p>\n                <p className=\"text-sm text-slate-500\">Activities will appear here as you work</p>\n              </div>\n            ) : (\n              <>\n                <div className=\"space-y-4\">\n                  {activitiesInWindow.slice(0, 10).map((activity) => {\n                    const Icon = activityIcons[activity.type] || ActivityIcon;\n                    const colorClass = activityColors[activity.type] || activityColors.note;\n\n                    return (\n                      <div\n                        key={activity.id}\n                        className=\"flex items-start gap-3 p-3 rounded-lg hover:bg-slate-700/50 transition-colors border border-slate-700/50\"\n                      >\n                        <div className={`p-2 rounded-full ${colorClass} border border-slate-600`}>\n                          <Icon className=\"w-4 h-4\" />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"font-medium text-slate-200 truncate\">{activity.subject}</p>\n                          {activity.description && (\n                            <p className=\"text-sm text-slate-400 mt-1 line-clamp-2\">{activity.description}</p>\n                          )}\n                          <div className=\"flex items-center gap-2 mt-2 flex-wrap\">\n                            <Badge variant=\"outline\" className={`${activityColors[activity.type] || activityColors.note} border-slate-600`}>\n                              {String(activity.type || \"\").replace(/_/g, \" \")}\n                            </Badge>\n                            {activity.priority && activity.priority !== \"normal\" && (\n                              <Badge variant=\"outline\" className={`${priorityColors[activity.priority] || priorityColors.normal} border-slate-600`}>\n                                {activity.priority}\n                              </Badge>\n                            )}\n                            <span className=\"text-xs text-slate-500\">\n                              {format(new Date(activity.created_date), \"MMM d, h:mm a\")}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                  <div className=\"text-center pt-2\">\n                    <p className=\"text-xs text-slate-500\">Last updated: {format(new Date(lastUpdated), \"h:mm:ss a\")}</p>\n                  </div>\n                </div>\n                <div className=\"text-center pt-4 border-t border-slate-700 mt-4\">\n                  <Button variant=\"outline\" size=\"sm\" asChild className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n                    <Link to={createPageUrl(\"Activities\")}>\n                      View All Activities\n                    </Link>\n                  </Button>\n                </div>\n              </>\n            )}\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\dashboard\\SalesPipeline.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[25,36],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used.","line":3,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardDescription"},"fix":{"range":[102,119],"text":""},"desc":"Remove unused variable 'CardDescription'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":4,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[166,178],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"Skeleton"},"fix":{"range":[338,390],"text":""},"desc":"Remove unused variable 'Skeleton'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Target, TrendingUp, AlertTriangle, Loader2 } from \"lucide-react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LabelList } from \"recharts\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useApiManager } from \"@/components/shared/ApiManager\";\nimport { Opportunity } from \"@/api/entities\";\nimport { Link } from \"react-router-dom\"; // Added import\nimport { createPageUrl } from \"@/utils\"; // Added import\nimport { Button } from \"@/components/ui/button\"; // Added import for Button component\n\nexport default function SalesPipeline(props) {\n  const [pipelineData, setPipelineData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const { cachedRequest } = useApiManager();\n\n  React.useEffect(() => {\n    let mounted = true; // Flag to prevent state updates on unmounted component\n\n    // Helper function to compute pipeline data from a list of opportunities\n    const computeFromOpps = (opps) => {\n      const stages = {\n        prospecting: { name: \"Prospecting\", count: 0, value: 0 },\n        qualification: { name: \"Qualification\", count: 0, value: 0 },\n        proposal: { name: \"Proposal\", count: 0, value: 0 },\n        negotiation: { name: \"Negotiation\", count: 0, value: 0 },\n        closed_won: { name: \"Closed Won\", count: 0, value: 0 },\n        closed_lost: { name: \"Closed Lost\", count: 0, value: 0 }\n      };\n\n      (opps || []).forEach(opp => { // Ensure opps is an array\n        if (stages[opp.stage]) {\n          stages[opp.stage].count++;\n          stages[opp.stage].value += opp.amount || 0;\n        }\n      });\n\n      // Renamed 'name' to 'stage' to match the dataKey in the BarChart\n      const processedData = Object.values(stages).map(stage => ({\n        stage: stage.name, // Use 'stage' as dataKey for XAxis\n        value: stage.value // Use the raw value\n      }));\n      return processedData;\n    };\n\n    const load = async () => {\n      setLoading(true); // Start loading\n      setErrorMessage(null); // Clear any previous errors\n\n      try {\n        // If preloaded (scoped) opportunities provided, use them directly\n        if (Array.isArray(props?.prefetchedOpportunities)) {\n          if (mounted) {\n            setPipelineData(computeFromOpps(props.prefetchedOpportunities));\n            setLoading(false);\n          }\n          return; // Exit if preloaded data is used\n        }\n\n        const tenantFilter = props?.tenantFilter || {};\n        const showTestData = props?.showTestData; // Access showTestData from props\n\n        // Re-introduce the effectiveFilter logic from original code, now using props.showTestData\n        const effectiveFilter = showTestData\n          ? { ...tenantFilter }\n          : { ...tenantFilter, is_test_data: { $ne: true } };\n        \n        // Determine if we need to call filter or list based on effectiveFilter\n        const hasFilter = Object.keys(effectiveFilter).length > 0;\n        const methodName = hasFilter ? \"filter\" : \"list\";\n        const methodParams = hasFilter ? { filter: effectiveFilter } : {};\n        const dataFetcher = () => hasFilter ? Opportunity.filter(effectiveFilter) : Opportunity.list();\n\n        // Use shared cache/queue to avoid 429s\n        const opps = await cachedRequest(\n          \"Opportunity\",\n          methodName,\n          methodParams,\n          dataFetcher\n        );\n\n        if (mounted) { // Only update state if component is still mounted\n          setPipelineData(computeFromOpps(opps)); // Use the new helper function\n          setLoading(false); // End loading\n        }\n      } catch (error) {\n        if (mounted) { // Only set error if component is still mounted\n          console.warn(\"SalesPipeline: failed to load via cachedRequest:\", error); // Use console.warn as in outline\n          setErrorMessage(\"Failed to load pipeline data\"); // Keep user-friendly error message\n          setLoading(false); // End loading even on error\n        }\n      }\n    };\n\n    load(); // Execute the async load function\n    return () => { mounted = false; }; // Cleanup function for unmounting\n     \n  }, [props?.tenantFilter, props?.showTestData, props?.prefetchedOpportunities, cachedRequest]); // Include all relevant props and cachedRequest in dependencies\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700 h-full\">\n      <CardHeader className=\"border-b border-slate-700\">\n        <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n          <Target className=\"w-5 h-5 text-blue-400\" />\n          Sales Pipeline\n        </CardTitle>\n        <p className=\"text-slate-400 text-sm\">Opportunities by stage</p>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {loading ? (\n          <div className=\"flex items-center justify-center h-64\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n            <span className=\"ml-3 text-slate-400\">Loading pipeline data...</span>\n          </div>\n        ) : errorMessage ? (\n          <div className=\"h-64 flex flex-col items-center justify-center text-red-400 bg-red-900/20 border border-red-800 rounded-lg p-4\">\n            <AlertTriangle className=\"w-12 h-12 mb-4\" />\n            <p className=\"font-medium\">Failed to load sales pipeline.</p>\n            <p className=\"text-sm text-center\">{errorMessage}</p>\n          </div>\n        ) : pipelineData.every(stage => stage.value === 0) ? (\n          <div className=\"h-64 flex flex-col items-center justify-center text-slate-400 bg-slate-700/20 border border-slate-600 rounded-lg p-4\">\n            <Target className=\"w-12 h-12 text-slate-500 mb-4\" />\n            <p className=\"font-medium\">No opportunity data to display.</p>\n            <p className=\"text-sm\">Create some opportunities to see the pipeline.</p>\n          </div>\n        ) : (\n          <>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={pipelineData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                  <XAxis \n                    dataKey=\"stage\" \n                    tick={{ fontSize: 12, fill: '#94a3b8' }}\n                    stroke=\"#475569\"\n                  />\n                  <YAxis \n                    tick={{ fontSize: 12, fill: '#94a3b8' }}\n                    stroke=\"#475569\"\n                  />\n                  <Tooltip \n                    contentStyle={{ \n                      backgroundColor: '#1e293b', \n                      border: '1px solid #475569',\n                      borderRadius: '8px',\n                      color: '#f1f5f9'\n                    }}\n                    formatter={(value) => `$${value.toLocaleString()}`}\n                    labelFormatter={(label) => `Stage: ${label}`}\n                  />\n                  <Bar dataKey=\"value\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]}>\n                    <LabelList \n                      dataKey=\"value\" \n                      position=\"top\" \n                      style={{ fill: '#94a3b8', fontSize: '12px' }}\n                      formatter={(value) => `$${value.toLocaleString()}`}\n                    />\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n            \n            <div className=\"text-center pt-4 border-t border-slate-700 mt-4\">\n              <Button variant=\"outline\" size=\"sm\" asChild className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n                <Link to={createPageUrl(\"Opportunities\")}>\n                  View All Opportunities\n                </Link>\n              </Button>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\dashboard\\StatsGrid.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[36,41],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[40,53],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Building2' is defined but never used.","line":3,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"Building2"},"fix":{"range":[107,118],"text":""},"desc":"Remove unused variable 'Building2'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Icon' is assigned a value but never used.","line":58,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"Icon"},"fix":{"range":[1802,1825],"text":""},"desc":"Remove unused variable 'Icon'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, Target, Building2, TrendingUp, DollarSign, Calendar, HelpCircle } from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nexport default function StatsGrid({ stats }) {\n  const statCards = [\n    {\n      title: \"Total Contacts\",\n      value: stats?.totalContacts || 0,\n      icon: Users,\n      color: \"blue\",\n      ringColor: \"ring-blue-500\",\n      textColor: \"text-blue-400\",\n      description: \"All contacts in your CRM\"\n    },\n    {\n      title: \"New Leads\",\n      value: stats?.newLeads || 0,\n      icon: Target,\n      color: \"green\",\n      ringColor: \"ring-green-500\",\n      textColor: \"text-green-400\",\n      description: \"New leads in last 30 days\"\n    },\n    {\n      title: \"Active Opportunities\",\n      value: stats?.activeOpportunities || 0,\n      icon: TrendingUp,\n      color: \"orange\",\n      ringColor: \"ring-orange-500\",\n      textColor: \"text-orange-400\",\n      description: \"Active sales opportunities\"\n    },\n    {\n      title: \"Pipeline Value\",\n      value: stats?.pipelineValue ? `$${(stats.pipelineValue / 1000).toFixed(0)}K` : \"$0\",\n      icon: DollarSign,\n      color: \"emerald\",\n      ringColor: \"ring-emerald-500\",\n      textColor: \"text-emerald-400\",\n      description: \"Total value of open opportunities\"\n    },\n    {\n      title: \"Activities Logged\",\n      value: stats?.activitiesLogged || 0,\n      icon: Calendar,\n      color: \"cyan\",\n      ringColor: \"ring-cyan-500\",\n      textColor: \"text-cyan-400\",\n      description: \"Activities completed in last 30 days\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4\">\n      {statCards.map((stat, index) => {\n        const Icon = stat.icon;\n        return (\n          <div\n            key={index}\n            className={`relative bg-slate-900/50 backdrop-blur-sm rounded-xl p-4 transition-all hover:bg-slate-800/50 ring-1 ${stat.ringColor}`}\n          >\n            <div className=\"flex items-start justify-between mb-3\">\n              <span className=\"text-sm font-medium text-slate-400\">{stat.title}</span>\n              <TooltipProvider>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <HelpCircle className=\"w-4 h-4 text-slate-500 hover:text-slate-400 transition-colors cursor-help\" />\n                  </TooltipTrigger>\n                  <TooltipContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                    <p>{stat.description}</p>\n                  </TooltipContent>\n                </Tooltip>\n              </TooltipProvider>\n            </div>\n            <p className={`text-3xl font-bold ${stat.textColor}`}>{stat.value}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\dashboard\\TopAccounts.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":3,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[126,138],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Building2, TrendingUp, DollarSign } from \"lucide-react\";\nimport { createPageUrl } from \"@/utils\";\n\nexport default function TopAccounts({ tenantFilter, showTestData }) {\n  const [accounts, setAccounts] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    const loadTopAccounts = async () => {\n      try {\n        const { Account } = await import(\"@/api/entities\");\n        \n        let filter = { ...tenantFilter };\n        if (!showTestData) {\n          filter.is_test_data = { $ne: true };\n        }\n        \n        const accountsData = await Account.filter(filter);\n        \n        const sortedAccounts = (accountsData || [])\n          .filter(a => a.annual_revenue)\n          .sort((a, b) => (b.annual_revenue || 0) - (a.annual_revenue || 0))\n          .slice(0, 5);\n        \n        setAccounts(sortedAccounts);\n      } catch (error) {\n        console.error(\"Failed to load top accounts:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadTopAccounts();\n  }, [tenantFilter, showTestData]);\n\n  const formatCurrency = (amount) => {\n    if (!amount) return \"$0\";\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n          <Building2 className=\"w-5 h-5 text-blue-400\" />\n          Top Accounts by Revenue\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {loading ? (\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-slate-700/50 rounded animate-pulse\" />\n            ))}\n          </div>\n        ) : accounts.length > 0 ? (\n          <div className=\"space-y-4\">\n            {accounts.map((account, index) => (\n              <a\n                key={account.id}\n                href={createPageUrl(\"Accounts\") + `?accountId=${account.id}`}\n                className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg hover:bg-slate-700/50 transition-colors group\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-8 h-8 rounded-full bg-blue-500/20 flex items-center justify-center\">\n                    <span className=\"text-blue-400 font-semibold text-sm\">{index + 1}</span>\n                  </div>\n                  <div>\n                    <p className=\"text-slate-200 font-medium group-hover:text-blue-400 transition-colors\">\n                      {account.name}\n                    </p>\n                    {account.industry && (\n                      <p className=\"text-slate-500 text-xs\">{account.industry}</p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <DollarSign className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-slate-300 font-semibold\">\n                    {formatCurrency(account.annual_revenue)}\n                  </span>\n                </div>\n              </a>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8 text-slate-500\">\n            <Building2 className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n            <p>No accounts with revenue data</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\dashboard\\UserPerformanceCard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'BarChart' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"BarChart"},"fix":{"range":[382,391],"text":""},"desc":"Remove unused variable 'BarChart'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Bar' is defined but never used.","line":16,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"Bar"},"fix":{"range":[390,395],"text":""},"desc":"Remove unused variable 'Bar'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'XAxis' is defined but never used.","line":16,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"XAxis"},"fix":{"range":[395,402],"text":""},"desc":"Remove unused variable 'XAxis'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'YAxis' is defined but never used.","line":16,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"YAxis"},"fix":{"range":[402,409],"text":""},"desc":"Remove unused variable 'YAxis'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used.","line":16,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[409,418],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ResponsiveContainer' is defined but never used.","line":16,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"ResponsiveContainer"},"fix":{"range":[418,439],"text":""},"desc":"Remove unused variable 'ResponsiveContainer'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Legend' is defined but never used.","line":16,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":75,"suggestions":[{"messageId":"removeVar","data":{"varName":"Legend"},"fix":{"range":[439,447],"text":""},"desc":"Remove unused variable 'Legend'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Users, \n  TrendingUp, \n  Target, \n  DollarSign, \n  Trophy,\n  Medal,\n  Award\n} from \"lucide-react\";\n// New imports from outline\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, Legend } from 'recharts'; // Added as per outline, even if not directly used in the card's visual output.\nimport { User } from '@/api/entities'; // Assuming User entity exists at this path\nimport { Opportunity } from '@/api/entities'; // Assuming Opportunity entity exists at this path\n\n\nexport default function UserPerformanceCard({ currentUser, tenantFilter }) {\n  // State to hold the performance data for the current user\n  const [userPerformance, setUserPerformance] = useState(null);\n  // State for the calculated rank of the current user\n  const [rank, setRank] = useState(0);\n  // Loading state for data fetching\n  const [isLoading, setIsLoading] = useState(true);\n  // Error state for data fetching\n  const [error, setError] = useState(null);\n\n  // Extract dateRange from tenantFilter for the badge, default to 'period' if not specified\n  const dateRange = tenantFilter?.dateRange || 'period';\n\n  useEffect(() => {\n    const fetchPerformanceData = async () => {\n      // If no currentUser is provided, stop loading and return\n      if (!currentUser) {\n        setIsLoading(false);\n        setUserPerformance(null);\n        setRank(0);\n        return;\n      }\n\n      setIsLoading(true);\n      setError(null);\n      setUserPerformance(null); // Clear previous data\n      setRank(0); // Reset rank\n\n      try {\n        // Fetch all users based on the tenant filter\n        // Assuming User.filter can take a tenantFilter object and returns an array of User objects\n        const users = await User.filter(tenantFilter);\n        \n        // Fetch closed-won opportunities based on the tenant filter\n        // Assuming Opportunity.filter can take a filter object and returns an array of Opportunity objects\n        const opportunities = await Opportunity.filter({ ...tenantFilter, stage: 'closed_won' });\n        \n        // Group opportunities by their owner_id (user ID)\n        const opportunitiesByUser = opportunities.reduce((acc, opp) => {\n          const ownerId = opp.owner_id; // Assuming Opportunity has an 'owner_id' property\n          if (ownerId) { // Ensure owner_id exists\n            if (!acc[ownerId]) {\n              acc[ownerId] = {\n                opportunities: 0,\n                closed_deals: 0,\n                revenue: 0,\n              };\n            }\n            acc[ownerId].opportunities++;\n            acc[ownerId].closed_deals++; // All fetched are closed_won, so count as closed deals\n            acc[ownerId].revenue += opp.amount || 0; // Assuming 'amount' property on Opportunity\n          }\n          return acc;\n        }, {});\n\n        // Calculate performance for each user\n        const calculatedPerformances = users.map(user => {\n          const userOpps = opportunitiesByUser[user.id] || { opportunities: 0, closed_deals: 0, revenue: 0 };\n          \n          // For 'contacts' and 'leads', assuming they are properties directly on the User entity\n          // or can be derived. If not available, placeholders are used.\n          // In a real application, these would likely be fetched from a dedicated 'Contact' or 'Lead' entity\n          // or aggregated from other related data.\n          const userContacts = user.contacts_count || (user.id * 10 % 100) + 10; // Placeholder value\n          const userLeads = user.leads_count || (user.id * 5 % 50) + 5; // Placeholder value\n\n          // Calculate a temporary performance score for ranking purposes\n          const performanceScoreForRank = Math.min(100, Math.round(\n            (userContacts * 2) + \n            (userLeads * 3) + \n            (userOpps.opportunities * 5) + \n            (userOpps.closed_deals * 10) + \n            (userOpps.revenue / 1000)\n          ));\n\n          return {\n            user,\n            contacts: userContacts,\n            leads: userLeads,\n            opportunities: userOpps.opportunities,\n            revenue: userOpps.revenue,\n            closed_deals: userOpps.closed_deals,\n            score: performanceScoreForRank, // Include score for sorting\n          };\n        });\n\n        // Sort performances by score in descending order to determine ranks\n        calculatedPerformances.sort((a, b) => b.score - a.score);\n\n        // Find the current user's performance and their rank\n        const foundUserPerformance = calculatedPerformances.find(p => p.user.id === currentUser.id);\n        const currentUserCalculatedRank = foundUserPerformance ? calculatedPerformances.findIndex(p => p.user.id === currentUser.id) + 1 : 0;\n        \n        setUserPerformance(foundUserPerformance);\n        setRank(currentUserCalculatedRank);\n\n      } catch (err) {\n        console.error(\"Failed to fetch performance data:\", err);\n        setError(\"Failed to load performance data. Please try again.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchPerformanceData();\n  }, [currentUser, tenantFilter]); // Dependencies: re-run when currentUser or tenantFilter changes\n\n  // Helper functions (kept from original code)\n  const getRankIcon = (currentRank) => {\n    switch (currentRank) {\n      case 1:\n        return <Trophy className=\"w-4 h-4 text-yellow-600\" />;\n      case 2:\n        return <Medal className=\"w-4 h-4 text-gray-500\" />;\n      case 3:\n        return <Award className=\"w-4 h-4 text-amber-600\" />;\n      default:\n        return <span className=\"text-sm font-bold text-slate-600\">#{currentRank}</span>;\n    }\n  };\n\n  const getRankColor = (currentRank) => {\n    switch (currentRank) {\n      case 1:\n        return \"from-yellow-50 to-amber-50 border-yellow-200\";\n      case 2:\n        return \"from-gray-50 to-slate-50 border-gray-200\";\n      case 3:\n        return \"from-amber-50 to-orange-50 border-amber-200\";\n      default:\n        return \"from-blue-50 to-indigo-50 border-blue-200\";\n    }\n  };\n\n  // Render loading state\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-lg border-2 bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-base text-slate-700\">Loading performance...</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-full bg-slate-200\"></div>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"h-4 bg-slate-200 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-slate-200 rounded w-1/2\"></div>\n              </div>\n            </div>\n            <div className=\"h-2 bg-slate-200 rounded w-full\"></div>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"h-16 bg-slate-200 rounded\"></div>\n              <div className=\"h-16 bg-slate-200 rounded\"></div>\n              <div className=\"h-16 bg-slate-200 rounded\"></div>\n              <div className=\"h-16 bg-slate-200 rounded\"></div>\n            </div>\n            <div className=\"h-6 bg-slate-200 rounded w-1/2 ml-auto\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <Card className=\"shadow-lg border-2 bg-gradient-to-br from-red-50 to-orange-50 border-red-200\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-base text-red-700\">Error Loading Data</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-red-600\">{error}</p>\n          <p className=\"text-xs text-red-500 mt-2\">Please check your network connection or try again later.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Render no data state\n  if (!userPerformance) {\n    return (\n      <Card className=\"shadow-lg border-2 bg-gradient-to-br from-gray-50 to-slate-50 border-gray-200\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-base text-slate-700\">No Data Available</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-slate-600\">No performance data found for the selected user in this period.</p>\n          <p className=\"text-xs text-slate-500 mt-2\">Ensure the user exists and has associated data.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Destructure performance data for rendering\n  const { user, contacts, leads, opportunities, revenue, closed_deals } = userPerformance;\n  \n  // Calculate performance score (weighted)\n  const performanceScore = Math.min(100, Math.round(\n    (contacts * 2) + \n    (leads * 3) + \n    (opportunities * 5) + \n    (closed_deals * 10) + \n    (revenue / 1000)\n  ));\n\n  return (\n    <Card className={`shadow-lg border-2 bg-gradient-to-br ${getRankColor(rank)} hover:shadow-xl transition-all duration-300`}>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center justify-between text-base\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center text-white font-bold\">\n              {user.full_name?.charAt(0).toUpperCase() || '?'}\n            </div>\n            <div>\n              <p className=\"font-semibold text-slate-900\">{user.full_name}</p>\n              <p className=\"text-xs text-slate-500 capitalize\">\n                {user.role === 'power-user' ? 'Power User' : user.role}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {getRankIcon(rank)}\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Performance Score */}\n        <div>\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-slate-700\">Performance Score</span>\n            <span className=\"text-sm font-bold text-slate-900\">{performanceScore}/100</span>\n          </div>\n          <Progress value={performanceScore} className=\"h-2\" />\n        </div>\n\n        {/* Metrics Grid */}\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div className=\"text-center p-2 bg-white/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <Users className=\"w-4 h-4 text-blue-600\" />\n            </div>\n            <p className=\"text-sm font-bold text-slate-900\">{contacts}</p>\n            <p className=\"text-xs text-slate-600\">Contacts</p>\n          </div>\n          \n          <div className=\"text-center p-2 bg-white/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <TrendingUp className=\"w-4 h-4 text-purple-600\" />\n            </div>\n            <p className=\"text-sm font-bold text-slate-900\">{leads}</p>\n            <p className=\"text-xs text-slate-600\">Leads</p>\n          </div>\n          \n          <div className=\"text-center p-2 bg-white/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <Target className=\"w-4 h-4 text-orange-600\" />\n            </div>\n            <p className=\"text-sm font-bold text-slate-900\">{opportunities}</p>\n            <p className=\"text-xs text-slate-600\">Opportunities</p>\n          </div>\n          \n          <div className=\"text-center p-2 bg-white/50 rounded-lg\">\n            <div className=\"flex items-center justify-center mb-1\">\n              <DollarSign className=\"w-4 h-4 text-green-600\" />\n            </div>\n            <p className=\"text-sm font-bold text-slate-900\">{closed_deals}</p>\n            <p className=\"text-xs text-slate-600\">Closed</p>\n          </div>\n        </div>\n\n        {/* Revenue */}\n        <div className=\"pt-3 border-t border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-slate-700\">Revenue Generated</span>\n            <span className=\"text-lg font-bold text-green-700\">\n              ${(revenue / 1000).toFixed(0)}K\n            </span>\n          </div>\n        </div>\n\n        {/* Period Badge */}\n        <div className=\"flex justify-center pt-2\">\n          <Badge variant=\"outline\" className=\"text-xs\">\n            This {dateRange}\n          </Badge>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\dashboard\\WidgetPickerModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\n\nexport default function WidgetPickerModal({ open, onOpenChange, availableWidgets, currentPreferences, onSave }) {\n  const [internalPreferences, setInternalPreferences] = useState({});\n\n  useEffect(() => {\n    // Sync internal state when the modal opens or preferences change\n    if (open) {\n      setInternalPreferences(currentPreferences || {});\n    }\n  }, [open, currentPreferences]);\n\n  const handleToggle = (widgetId, isChecked) => {\n    setInternalPreferences(prev => ({\n      ...prev,\n      [widgetId]: isChecked\n    }));\n  };\n\n  const handleSave = () => {\n    onSave(internalPreferences);\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-100\">\n        <DialogHeader>\n          <DialogTitle>Customize Dashboard</DialogTitle>\n          <DialogDescription className=\"text-slate-400\">\n            Choose which widgets to display on your dashboard.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"py-4 space-y-4 max-h-[60vh] overflow-y-auto\">\n          {availableWidgets.map(widget => (\n            <div key={widget.id} className=\"flex items-center justify-between p-3 rounded-lg bg-slate-700/50\">\n              <Label htmlFor={`widget-toggle-${widget.id}`} className=\"font-medium\">\n                {widget.name}\n              </Label>\n              <Switch\n                id={`widget-toggle-${widget.id}`}\n                checked={internalPreferences[widget.id] ?? false}\n                onCheckedChange={(isChecked) => handleToggle(widget.id, isChecked)}\n                className=\"data-[state=checked]:bg-blue-500\"\n              />\n            </div>\n          ))}\n        </div>\n        <DialogFooter>\n          <Button variant=\"ghost\" onClick={() => onOpenChange(false)} className=\"text-slate-300 hover:bg-slate-700\">Cancel</Button>\n          <Button onClick={handleSave} className=\"bg-blue-600 hover:bg-blue-700\">Save Preferences</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\documentation\\GuideRequestAccessSection.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Link } from \"react-router-dom\";\nimport { createPageUrl } from \"@/utils\";\nimport { Users, ClipboardList, Send, CheckCircle2, Info, AlertTriangle } from \"lucide-react\";\n\nexport default function GuideRequestAccessSection() {\n  const copyEmailTemplate = () => {\n    const subject = encodeURIComponent(\"New User Access Request\");\n    const body = encodeURIComponent([\n      \"Please review and approve a new user CRM access request.\",\n      \"\",\n      \"Requested User\",\n      \"- Full Name: \",\n      \"- Email: \",\n      \"- Role: user\",\n      \"- Tier: Tier1\",\n      \"\",\n      \"Requested Access Details\",\n      \"- Can use softphone: No\",\n      \"- Intended role: user\",\n      \"- Navigation: Dashboard, Contacts, Leads, Opportunities, Activities\",\n      \"\",\n      \"Requested by\",\n      \"- Name: \",\n      \"- Email: \",\n      \"- Tier: Tier3 or Tier4\",\n      \"\",\n      \"Notes:\",\n      \"- Add any extra context here (team, manager, timeline).\"\n    ].join(\"\\n\"));\n    window.location.href = `mailto:?subject=${subject}&body=${body}`;\n  };\n\n  const iconAccent = { color: \"var(--accent-color)\" };\n  const iconPrimary = { color: \"var(--primary-color)\" };\n\n  return (\n    <section id=\"requesting-access\" className=\"mt-8\">\n      <div className=\"mb-4\">\n        <h2 className=\"text-xl lg:text-2xl font-bold text-slate-100 flex items-center gap-3\">\n          <div className=\"w-10 h-10 flex items-center justify-center rounded-full bg-slate-700/50 border border-slate-600/50\">\n            <Users className=\"w-5 h-5\" style={iconAccent} />\n          </div>\n          Requesting Access for New Users (Tier 3 & Tier 4)\n        </h2>\n        <p className=\"text-slate-400 mt-1 text-sm lg:text-base\">\n          Tier 3 and Tier 4 users can request CRM access for teammates directly from the Employees page. These requests include your\n          authorization (your role and tier) and originate from your current tenant.\n        </p>\n      </div>\n\n      <Alert className=\"bg-slate-800 border-slate-700 mb-6\">\n        <AlertDescription className=\"text-slate-300\">\n          Settings access is not required. Use the Employees page to submit the request. Only employees marked ΓÇ£has CRM accessΓÇ¥ and not yet linked will show the Request/Invite option.\n        </AlertDescription>\n      </Alert>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader className=\"border-b border-slate-700\">\n          <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n            <ClipboardList className=\"w-5 h-5\" style={iconPrimary} />\n            Step-by-step: Submit a request via Employees\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-slate-300 space-y-3\">\n          <ol className=\"list-decimal pl-5 space-y-2\">\n            <li>\n              Open the Employees page.\n              <div className=\"mt-2\">\n                <Link to={createPageUrl(\"Employees\")}>\n                  <Button variant=\"outline\" className=\"filter-trigger bg-transparent\">\n                    Go to Employees\n                  </Button>\n                </Link>\n              </div>\n            </li>\n            <li>Find the employee who needs CRM access and ensure ΓÇ£has CRM accessΓÇ¥ is enabled on their record.</li>\n            <li>In the row actions menu, choose ΓÇ£Request InviteΓÇ¥ (Tier 3) or ΓÇ£Invite to CRMΓÇ¥ (Tier 4/Admin).</li>\n            <li>Confirm the email and name. Submit the request.</li>\n          </ol>\n\n          <div className=\"pt-3\">\n            <h4 className=\"font-semibold text-slate-100 mb-2 flex items-center gap-2\">\n              <Send className=\"w-4 h-4\" style={iconAccent} />\n              What gets sent\n            </h4>\n            <ul className=\"list-disc pl-5 space-y-2\">\n              <li>A structured email to admins including requested user details (name, email, requested tier/role).</li>\n              <li>Your authorization context: your name, email, role, and tier (Tier 3 or Tier 4).</li>\n              <li>Implicit tenant context: the request originates from your current tenant (no separate selection needed).</li>\n              <li>Optional requested access flags (e.g., softphone), when provided.</li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader className=\"border-b border-slate-700\">\n            <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n              <Info className=\"w-5 h-5\" style={iconPrimary} />\n              Tier quick guide\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-slate-300 space-y-2\">\n            <ul className=\"list-disc pl-5 space-y-1\">\n              <li><strong>Tier 3 ΓÇö Team Lead:</strong> Aggregated dashboards, broader team visibility, request CRM access for team.</li>\n              <li><strong>Tier 4 ΓÇö Power User:</strong> Broad data visibility, can directly invite (if permitted) or request on behalf of team.</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader className=\"border-b border-slate-700\">\n            <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n              <AlertTriangle className=\"w-5 h-5\" style={iconAccent} />\n              Troubleshooting and fallback\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-slate-300 space-y-2\">\n            <ul className=\"list-disc pl-5 space-y-1\">\n              <li>If the ΓÇ£Request/InviteΓÇ¥ action isnΓÇÖt visible, ensure the employee record has ΓÇ£has CRM accessΓÇ¥ enabled and a valid email.</li>\n              <li>If Employees page is unavailable, use the email template below to notify admins manually.</li>\n            </ul>\n            <div className=\"pt-2\">\n              <Button variant=\"outline\" onClick={copyEmailTemplate} className=\"filter-trigger bg-transparent\">\n                Use email template\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card className=\"bg-slate-800 border-slate-700 mt-6\">\n        <CardHeader className=\"border-b border-slate-700\">\n          <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n            <CheckCircle2 className=\"w-5 h-5\" style={iconPrimary} />\n            Best practices\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-slate-300 space-y-2\">\n          <ul className=\"list-disc pl-5 space-y-1\">\n            <li>Confirm the employeeΓÇÖs email is correct before submitting.</li>\n            <li>Include the desired Tier (usually Tier1 for standard users) and any special permissions like softphone.</li>\n            <li>Follow up with admins if the user needs time-sensitive access.</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\documentation\\WorkflowGuide.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'UserCheck' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"UserCheck"},"fix":{"range":[331,344],"text":""},"desc":"Remove unused variable 'UserCheck'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":426,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19662,19796],"text":" BizDev Sources ΓåÆ Leads ΓåÆ Contacts ΓåÆ Opportunities. \n                  Follow this flow and you won&apos;t lose prospects.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19662,19796],"text":" BizDev Sources ΓåÆ Leads ΓåÆ Contacts ΓåÆ Opportunities. \n                  Follow this flow and you won&lsquo;t lose prospects.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19662,19796],"text":" BizDev Sources ΓåÆ Leads ΓåÆ Contacts ΓåÆ Opportunities. \n                  Follow this flow and you won&#39;t lose prospects.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19662,19796],"text":" BizDev Sources ΓåÆ Leads ΓåÆ Contacts ΓåÆ Opportunities. \n                  Follow this flow and you won&rsquo;t lose prospects.\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":432,"column":98,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[20069,20206],"text":" Use &apos;All Leads' view and bulk actions. \n                  A good manager can 3x team performance with proper CRM usage.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[20069,20206],"text":" Use &lsquo;All Leads' view and bulk actions. \n                  A good manager can 3x team performance with proper CRM usage.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[20069,20206],"text":" Use &#39;All Leads' view and bulk actions. \n                  A good manager can 3x team performance with proper CRM usage.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[20069,20206],"text":" Use &rsquo;All Leads' view and bulk actions. \n                  A good manager can 3x team performance with proper CRM usage.\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":432,"column":108,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[20069,20206],"text":" Use 'All Leads&apos; view and bulk actions. \n                  A good manager can 3x team performance with proper CRM usage.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[20069,20206],"text":" Use 'All Leads&lsquo; view and bulk actions. \n                  A good manager can 3x team performance with proper CRM usage.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[20069,20206],"text":" Use 'All Leads&#39; view and bulk actions. \n                  A good manager can 3x team performance with proper CRM usage.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[20069,20206],"text":" Use 'All Leads&rsquo; view and bulk actions. \n                  A good manager can 3x team performance with proper CRM usage.\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertCircle' is not defined.","line":504,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":504,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  Users,\n  UserCheck,\n  TrendingUp,\n  Target,\n  Calendar,\n  CheckCircle,\n  ArrowRight,\n  Lightbulb,\n  Award,\n  Building2,\n  Phone,\n  Mail,\n  FileText,\n  Star\n} from \"lucide-react\";\n\nexport default function WorkflowGuide() {\n  const [activeRole, setActiveRole] = useState(\"employee\");\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-gradient-to-r from-blue-900/20 to-purple-900/20 border border-blue-700/30 rounded-lg p-6\">\n        <h2 className=\"text-2xl font-bold text-slate-100 mb-2 flex items-center gap-2\">\n          <Users className=\"w-7 h-7 text-blue-400\" />\n          CRM Workflow Guide\n        </h2>\n        <p className=\"text-slate-300\">\n          Master your CRM workflow with role-specific guides and real-world case studies\n        </p>\n      </div>\n\n      <Tabs value={activeRole} onValueChange={setActiveRole} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 bg-slate-800 border border-slate-700\">\n          <TabsTrigger value=\"employee\" className=\"data-[state=active]:bg-blue-600\">\n            <Users className=\"w-4 h-4 mr-2\" />\n            Employee\n          </TabsTrigger>\n          <TabsTrigger value=\"manager\" className=\"data-[state=active]:bg-purple-600\">\n            <Award className=\"w-4 h-4 mr-2\" />\n            Manager\n          </TabsTrigger>\n          <TabsTrigger value=\"cases\" className=\"data-[state=active]:bg-green-600\">\n            <Lightbulb className=\"w-4 h-4 mr-2\" />\n            Case Studies\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Employee Workflow */}\n        <TabsContent value=\"employee\" className=\"space-y-6 mt-6\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <Star className=\"w-5 h-5 text-blue-400\" />\n                Employee Daily Workflow\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Morning Routine */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-slate-200 flex items-center gap-2\">\n                  <Badge className=\"bg-blue-600\">Morning</Badge>\n                  Start Your Day (8:00 AM - 9:00 AM)\n                </h3>\n                <div className=\"ml-4 space-y-3\">\n                  <WorkflowStep\n                    number=\"1\"\n                    title=\"Review Dashboard\"\n                    description=\"Check your dashboard for overnight updates, new assignments, and key metrics\"\n                    icon={<TrendingUp className=\"w-4 h-4\" />}\n                  />\n                  <WorkflowStep\n                    number=\"2\"\n                    title=\"Check Activities\"\n                    description=\"Review today's scheduled calls, meetings, and tasks. Prioritize overdue items\"\n                    icon={<Calendar className=\"w-4 h-4\" />}\n                  />\n                  <WorkflowStep\n                    number=\"3\"\n                    title=\"Review New Leads\"\n                    description=\"Check 'My Leads' for new assignments. Contact new leads within 24 hours\"\n                    icon={<Star className=\"w-4 h-4\" />}\n                  />\n                </div>\n              </div>\n\n              {/* Mid-Morning */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-slate-200 flex items-center gap-2\">\n                  <Badge className=\"bg-purple-600\">Mid-Morning</Badge>\n                  Lead Outreach (9:00 AM - 12:00 PM)\n                </h3>\n                <div className=\"ml-4 space-y-3\">\n                  <WorkflowStep\n                    number=\"4\"\n                    title=\"Call New Leads\"\n                    description=\"Make initial contact with 'New' leads. Use AI calling if available\"\n                    icon={<Phone className=\"w-4 h-4\" />}\n                    bestPractice=\"Script: 'Hi [Name], this is [Your Name] from [Company]. I saw you were interested in [service]. Do you have 2 minutes?'\"\n                  />\n                  <WorkflowStep\n                    number=\"5\"\n                    title=\"Update Lead Status\"\n                    description=\"Mark leads as 'Contacted' after reaching them. Add notes about the conversation\"\n                    icon={<FileText className=\"w-4 h-4\" />}\n                  />\n                  <WorkflowStep\n                    number=\"6\"\n                    title=\"Qualify Leads\"\n                    description=\"Ask BANT questions: Budget, Authority, Need, Timeline. Mark as 'Qualified' or 'Unqualified'\"\n                    icon={<CheckCircle className=\"w-4 h-4\" />}\n                    bestPractice=\"If qualified, immediately convert to Contact and create an Opportunity\"\n                  />\n                </div>\n              </div>\n\n              {/* Afternoon */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-slate-200 flex items-center gap-2\">\n                  <Badge className=\"bg-green-600\">Afternoon</Badge>\n                  Follow-ups & Pipeline (1:00 PM - 5:00 PM)\n                </h3>\n                <div className=\"ml-4 space-y-3\">\n                  <WorkflowStep\n                    number=\"7\"\n                    title=\"Work Opportunities\"\n                    description=\"Review your opportunities. Move deals forward through stages\"\n                    icon={<Target className=\"w-4 h-4\" />}\n                  />\n                  <WorkflowStep\n                    number=\"8\"\n                    title=\"Send Follow-up Emails\"\n                    description=\"Use AI Email Composer for personalized follow-ups to qualified leads\"\n                    icon={<Mail className=\"w-4 h-4\" />}\n                  />\n                  <WorkflowStep\n                    number=\"9\"\n                    title=\"Update Activities\"\n                    description=\"Mark completed activities as done. Schedule next steps for each opportunity\"\n                    icon={<Calendar className=\"w-4 h-4\" />}\n                  />\n                </div>\n              </div>\n\n              {/* End of Day */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-slate-200 flex items-center gap-2\">\n                  <Badge className=\"bg-slate-600\">End of Day</Badge>\n                  Wrap-up (5:00 PM - 5:30 PM)\n                </h3>\n                <div className=\"ml-4 space-y-3\">\n                  <WorkflowStep\n                    number=\"10\"\n                    title=\"Plan Tomorrow\"\n                    description=\"Schedule activities for tomorrow. Prioritize high-value opportunities\"\n                    icon={<Calendar className=\"w-4 h-4\" />}\n                  />\n                  <WorkflowStep\n                    number=\"11\"\n                    title=\"Update Records\"\n                    description=\"Ensure all contacts, leads, and opportunities are up-to-date\"\n                    icon={<FileText className=\"w-4 h-4\" />}\n                  />\n                </div>\n              </div>\n\n              <Alert className=\"bg-blue-900/20 border-blue-700/50 text-blue-300\">\n                <Lightbulb className=\"w-4 h-4\" />\n                <AlertDescription>\n                  <strong>Success Tip:</strong> Aim for 50+ calls/day and convert 10-15% of new leads to qualified status. \n                  Quality conversations beat quantity!\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n\n          {/* Employee Tools Guide */}\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100\">Employee Tools & Features</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <ToolCard\n                title=\"AI Calling\"\n                description=\"Automate initial outreach and qualification calls. Review transcripts and outcomes.\"\n                icon={<Phone className=\"w-5 h-5 text-green-400\" />}\n              />\n              <ToolCard\n                title=\"AI Email Composer\"\n                description=\"Generate personalized follow-up emails based on lead data and conversation history.\"\n                icon={<Mail className=\"w-5 h-5 text-blue-400\" />}\n              />\n              <ToolCard\n                title=\"Lead Scoring\"\n                description=\"Focus on high-scoring leads (70+) first. Low scores may need nurturing.\"\n                icon={<Star className=\"w-5 h-5 text-yellow-400\" />}\n              />\n              <ToolCard\n                title=\"Activities Calendar\"\n                description=\"Visual view of all your scheduled tasks. Never miss a follow-up.\"\n                icon={<Calendar className=\"w-5 h-5 text-purple-400\" />}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Manager Workflow */}\n        <TabsContent value=\"manager\" className=\"space-y-6 mt-6\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <Award className=\"w-5 h-5 text-purple-400\" />\n                Manager Strategic Workflow\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Daily Management */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-slate-200 flex items-center gap-2\">\n                  <Badge className=\"bg-purple-600\">Daily</Badge>\n                  Team Management\n                </h3>\n                <div className=\"ml-4 space-y-3\">\n                  <WorkflowStep\n                    number=\"1\"\n                    title=\"Review Team Dashboard\"\n                    description=\"Check team performance metrics. Switch to 'All Leads' view to see entire pipeline\"\n                    icon={<TrendingUp className=\"w-4 h-4\" />}\n                    bestPractice=\"Look for: stalled deals, overdue activities, conversion rates by rep\"\n                  />\n                  <WorkflowStep\n                    number=\"2\"\n                    title=\"Monitor Lead Distribution\"\n                    description=\"Ensure leads are evenly distributed. Reassign if needed for optimal performance\"\n                    icon={<Users className=\"w-4 h-4\" />}\n                  />\n                  <WorkflowStep\n                    number=\"3\"\n                    title=\"Coach Your Team\"\n                    description=\"Review call recordings, emails, and outcomes. Provide feedback\"\n                    icon={<Award className=\"w-4 h-4\" />}\n                  />\n                </div>\n              </div>\n\n              {/* Weekly Strategy */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-slate-200 flex items-center gap-2\">\n                  <Badge className=\"bg-blue-600\">Weekly</Badge>\n                  Pipeline Review\n                </h3>\n                <div className=\"ml-4 space-y-3\">\n                  <WorkflowStep\n                    number=\"4\"\n                    title=\"Pipeline Health Check\"\n                    description=\"Review opportunities by stage. Identify bottlenecks and stuck deals\"\n                    icon={<Target className=\"w-4 h-4\" />}\n                    bestPractice=\"Healthy pipeline: 3-5x your quota in qualified opportunities\"\n                  />\n                  <WorkflowStep\n                    number=\"5\"\n                    title=\"Win/Loss Analysis\"\n                    description=\"Review closed_won and closed_lost deals. What patterns emerge?\"\n                    icon={<TrendingUp className=\"w-4 h-4\" />}\n                  />\n                  <WorkflowStep\n                    number=\"6\"\n                    title=\"Forecast Next Month\"\n                    description=\"Project revenue based on pipeline and historical close rates\"\n                    icon={<Calendar className=\"w-4 h-4\" />}\n                  />\n                </div>\n              </div>\n\n              {/* Monthly Planning */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-slate-200 flex items-center gap-2\">\n                  <Badge className=\"bg-green-600\">Monthly</Badge>\n                  Strategic Planning\n                </h3>\n                <div className=\"ml-4 space-y-3\">\n                  <WorkflowStep\n                    number=\"7\"\n                    title=\"Review Reports\"\n                    description=\"Analyze Monthly Performance report. Compare to goals\"\n                    icon={<FileText className=\"w-4 h-4\" />}\n                  />\n                  <WorkflowStep\n                    number=\"8\"\n                    title=\"Adjust Strategies\"\n                    description=\"Based on data, adjust lead sources, team structure, or processes\"\n                    icon={<TrendingUp className=\"w-4 h-4\" />}\n                  />\n                  <WorkflowStep\n                    number=\"9\"\n                    title=\"Set Next Month Goals\"\n                    description=\"Set team and individual targets. Communicate clearly\"\n                    icon={<Target className=\"w-4 h-4\" />}\n                  />\n                </div>\n              </div>\n\n              <Alert className=\"bg-purple-900/20 border-purple-700/50 text-purple-300\">\n                <Award className=\"w-4 h-4\" />\n                <AlertDescription>\n                  <strong>Manager Best Practice:</strong> Use bulk actions to reassign leads, update stages, and manage large datasets efficiently. \n                  Regularly coach your team using actual call/email data from the CRM.\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n\n          {/* Manager Tools */}\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100\">Manager-Specific Tools</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <ToolCard\n                title=\"All Leads View\"\n                description=\"See entire team's pipeline. Filter and sort to find issues quickly.\"\n                icon={<Users className=\"w-5 h-5 text-purple-400\" />}\n              />\n              <ToolCard\n                title=\"Bulk Actions\"\n                description=\"Update multiple records at once. Reassign leads, change stages, export data.\"\n                icon={<CheckCircle className=\"w-5 h-5 text-green-400\" />}\n              />\n              <ToolCard\n                title=\"Reports Dashboard\"\n                description=\"Deep analytics: conversion rates, sales cycle length, team performance.\"\n                icon={<TrendingUp className=\"w-5 h-5 text-blue-400\" />}\n              />\n              <ToolCard\n                title=\"AI Campaigns\"\n                description=\"Launch automated outreach campaigns across your lead database.\"\n                icon={<Target className=\"w-5 h-5 text-yellow-400\" />}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Case Studies */}\n        <TabsContent value=\"cases\" className=\"space-y-6 mt-6\">\n          <CaseStudy\n            title=\"Solar Installation Company: From 20 to 100 Deals/Month\"\n            industry=\"Green Energy & Solar\"\n            challenge=\"Small team overwhelmed by manual lead follow-up. Losing qualified leads to competitors.\"\n            solution=\"Implemented AI calling for initial outreach + structured BizDev Sources workflow\"\n            results={[\n              \"300% increase in contacted leads (from 50/week to 200/week)\",\n              \"Lead-to-opportunity conversion improved from 8% to 22%\",\n              \"Sales cycle reduced from 45 days to 28 days\",\n              \"5x ROI within first quarter\"\n            ]}\n            workflow={[\n              \"Import BizDev Sources from trade shows and directories\",\n              \"AI calls all new sources within 48 hours\",\n              \"Qualified leads promoted to Accounts and Opportunities\",\n              \"Employees focus on closing deals, not cold calling\"\n            ]}\n          />\n\n          <CaseStudy\n            title=\"Commercial Roofing: Streamlined Large Project Management\"\n            industry=\"Construction & Roofing\"\n            challenge=\"Losing track of large opportunities ($50K+). Poor handoff between sales and ops.\"\n            solution=\"Implemented Opportunity stages with Activities tracking + Manager oversight\"\n            results={[\n              \"Won 12 major contracts (avg $75K) in 6 months\",\n              \"No more missed follow-ups or forgotten quotes\",\n              \"Client satisfaction up 40% due to organized communication\",\n              \"Manager visibility into entire pipeline\"\n            ]}\n            workflow={[\n              \"Manager creates Opportunities from qualified BizDev sources\",\n              \"Each opportunity gets detailed Activities: site visit, quote, follow-ups\",\n              \"Weekly pipeline review with team using Kanban board\",\n              \"Close-won opportunities automatically create Account + initial follow-up activity\"\n            ]}\n          />\n\n          <CaseStudy\n            title=\"HVAC Service: Seasonal Campaign Success\"\n            industry=\"HVAC & Maintenance\"\n            challenge=\"Slow season (winter) = idle sales team. Need proactive outreach.\"\n            solution=\"Launched AI Campaign targeting 500 past customers for spring maintenance\"\n            results={[\n              \"45% response rate to AI calls\",\n              \"120 appointments booked automatically\",\n              \"$180K in pre-season revenue secured\",\n              \"Sales team focused on closing, not calling\"\n            ]}\n            workflow={[\n              \"Filter Contacts: customers with last service > 1 year ago\",\n              \"Create AI Campaign: 'Spring Maintenance Special'\",\n              \"AI calls contacts, qualifies interest, books appointments\",\n              \"Sales team follows up with quotes and closes deals\"\n            ]}\n          />\n\n          <Card className=\"bg-gradient-to-r from-green-900/20 to-blue-900/20 border-green-700/30\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <Lightbulb className=\"w-5 h-5 text-yellow-400\" />\n                Key Takeaways from Case Studies\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 text-slate-300\">\n              <div className=\"flex gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-400 flex-shrink-0 mt-0.5\" />\n                <div>\n                  <strong className=\"text-slate-200\">Automate the Grunt Work:</strong> Use AI for initial outreach and qualification. \n                  Your team should focus on building relationships and closing deals.\n                </div>\n              </div>\n              <div className=\"flex gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-400 flex-shrink-0 mt-0.5\" />\n                <div>\n                  <strong className=\"text-slate-200\">Structured Workflow Wins:</strong> BizDev Sources ΓåÆ Leads ΓåÆ Contacts ΓåÆ Opportunities. \n                  Follow this flow and you won't lose prospects.\n                </div>\n              </div>\n              <div className=\"flex gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-400 flex-shrink-0 mt-0.5\" />\n                <div>\n                  <strong className=\"text-slate-200\">Manager Oversight is Critical:</strong> Use 'All Leads' view and bulk actions. \n                  A good manager can 3x team performance with proper CRM usage.\n                </div>\n              </div>\n              <div className=\"flex gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-400 flex-shrink-0 mt-0.5\" />\n                <div>\n                  <strong className=\"text-slate-200\">Track Everything:</strong> Activities, notes, call recordings. \n                  Data-driven decisions beat gut feelings.\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n// Helper Components\nfunction WorkflowStep({ number, title, description, icon, bestPractice }) {\n  return (\n    <div className=\"flex gap-4 p-4 bg-slate-700/30 rounded-lg border border-slate-600/50\">\n      <div className=\"flex-shrink-0\">\n        <div className=\"w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center text-white font-bold text-sm\">\n          {number}\n        </div>\n      </div>\n      <div className=\"flex-1\">\n        <div className=\"flex items-center gap-2 mb-1\">\n          {icon}\n          <h4 className=\"font-semibold text-slate-200\">{title}</h4>\n        </div>\n        <p className=\"text-sm text-slate-300 mb-2\">{description}</p>\n        {bestPractice && (\n          <div className=\"flex gap-2 mt-2 p-2 bg-yellow-900/20 border border-yellow-700/30 rounded\">\n            <Lightbulb className=\"w-4 h-4 text-yellow-400 flex-shrink-0 mt-0.5\" />\n            <p className=\"text-xs text-yellow-200\">{bestPractice}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction ToolCard({ title, description, icon }) {\n  return (\n    <div className=\"flex gap-3 p-3 bg-slate-700/30 rounded-lg border border-slate-600/50\">\n      <div className=\"flex-shrink-0 mt-1\">{icon}</div>\n      <div>\n        <h4 className=\"font-semibold text-slate-200 mb-1\">{title}</h4>\n        <p className=\"text-sm text-slate-300\">{description}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction CaseStudy({ title, industry, challenge, solution, results, workflow }) {\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <CardTitle className=\"text-slate-100 mb-2\">{title}</CardTitle>\n            <Badge className=\"bg-blue-600\">{industry}</Badge>\n          </div>\n          <Building2 className=\"w-8 h-8 text-blue-400\" />\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <h4 className=\"font-semibold text-red-300 mb-2 flex items-center gap-2\">\n            <AlertCircle className=\"w-4 h-4\" />\n            The Challenge\n          </h4>\n          <p className=\"text-sm text-slate-300\">{challenge}</p>\n        </div>\n\n        <div>\n          <h4 className=\"font-semibold text-blue-300 mb-2 flex items-center gap-2\">\n            <Lightbulb className=\"w-4 h-4\" />\n            The Solution\n          </h4>\n          <p className=\"text-sm text-slate-300\">{solution}</p>\n        </div>\n\n        <div>\n          <h4 className=\"font-semibold text-green-300 mb-2 flex items-center gap-2\">\n            <TrendingUp className=\"w-4 h-4\" />\n            The Results\n          </h4>\n          <ul className=\"space-y-2\">\n            {results.map((result, idx) => (\n              <li key={idx} className=\"flex gap-2 text-sm text-slate-300\">\n                <CheckCircle className=\"w-4 h-4 text-green-400 flex-shrink-0 mt-0.5\" />\n                {result}\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div>\n          <h4 className=\"font-semibold text-purple-300 mb-2 flex items-center gap-2\">\n            <ArrowRight className=\"w-4 h-4\" />\n            Their Workflow\n          </h4>\n          <ol className=\"space-y-2\">\n            {workflow.map((step, idx) => (\n              <li key={idx} className=\"flex gap-2 text-sm text-slate-300\">\n                <span className=\"font-bold text-purple-400\">{idx + 1}.</span>\n                {step}\n              </li>\n            ))}\n          </ol>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\documents\\BusinessCardProcessor.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Loader2, UploadCloud, AlertCircle, CheckCircle, CreditCard, X } from 'lucide-react'; // Changed Contact to CreditCard, added X\nimport { UploadFile, ExtractDataFromUploadedFile } from '@/api/integrations';\nimport { Contact as ContactEntity } from '@/api/entities';\nimport { useTenant } from '../shared/tenantContext';\n\nconst contactSchema = {\n  type: 'object',\n  properties: {\n    first_name: { type: 'string' },\n    last_name: { type: 'string' },\n    job_title: { type: 'string' },\n    company: { type: 'string' },\n    phone: { type: 'string' },\n    mobile: { type: 'string' },\n    email: { type: 'string', format: 'email' },\n    website: { type: 'string' },\n    address_1: { type: 'string' },\n    city: { type: 'string' },\n    state: { type: 'string' },\n    zip: { type: 'string' },\n    country: { type: 'string' }\n  },\n  required: ['first_name', 'last_name']\n};\n\nexport default function BusinessCardProcessor({ user, onCancel, onProcessingChange }) { // Added onCancel, onProcessingChange\n  const [file, setFile] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const { selectedTenantId } = useTenant();\n\n  // Effect to notify parent about processing status changes\n  useEffect(() => {\n    if (onProcessingChange) {\n      onProcessingChange(isProcessing);\n    }\n  }, [isProcessing, onProcessingChange]);\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n    setResult(null);\n    setError(null);\n  };\n\n  const handleProcess = async () => {\n    if (!file) {\n      setError('Please select a file first.');\n      return;\n    }\n    \n    if (!user) {\n      setError(\"User not loaded. Cannot process.\");\n      return;\n    }\n\n    const tenantId = user.role === 'superadmin' ? selectedTenantId : user.tenant_id;\n    if (!tenantId) {\n      setError(\"Cannot determine tenant. Please ensure a tenant is selected or assigned.\");\n      return;\n    }\n\n    setIsProcessing(true);\n    setError(null);\n    setResult(null);\n\n    try {\n      const { file_url } = await UploadFile({ file });\n      \n      const extractionResult = await ExtractDataFromUploadedFile({\n        file_url,\n        json_schema: contactSchema,\n      });\n\n      if (extractionResult.status === 'success' && extractionResult.output) {\n        const extractedData = { \n            ...extractionResult.output,\n            tenant_id: tenantId,\n            assigned_to: user.email,\n            processed_by_ai_doc: true,\n            ai_doc_source_type: 'business_card'\n        };\n        const newContact = await ContactEntity.create(extractedData);\n        setResult({\n          message: 'Successfully created contact!',\n          contact: newContact\n        });\n      } else {\n        throw new Error(extractionResult.details || 'Failed to extract data from the business card.');\n      }\n    } catch (e) {\n      setError(e.message || 'An unknown error occurred during processing.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <Card className=\"shadow-lg border-0 bg-slate-800 border-slate-700 text-slate-300\">\n      <CardHeader className=\"border-b border-slate-700\">\n        <CardTitle className=\"flex items-center justify-between text-slate-100\">\n          <span className=\"flex items-center gap-2\">\n            <CreditCard className=\"w-6 h-6 text-blue-400\" />\n            Business Card Scanner\n          </span>\n          {onCancel && (\n            <Button variant=\"ghost\" onClick={onCancel} className=\"text-slate-400 hover:text-slate-200\">\n              <X className=\"w-5 h-5\" />\n            </Button>\n          )}\n        </CardTitle>\n        <CardDescription className=\"text-slate-400\">\n          Upload a business card image and extract contact information automatically.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"p-6\"> {/* Added p-6 padding */}\n        <div className=\"space-y-2\">\n          <label htmlFor=\"business-card-file\" className=\"text-sm font-medium text-slate-200\">Business Card Image</label>\n          <Input\n            id=\"business-card-file\"\n            type=\"file\"\n            accept=\"image/png, image/jpeg, image/jpg\"\n            onChange={handleFileChange}\n            disabled={isProcessing}\n            className=\"bg-slate-700 border-slate-600 text-slate-200 file:bg-slate-600 file:text-slate-200 file:border-slate-500\"\n          />\n        </div>\n\n        {error && (\n          <div className=\"flex items-center gap-2 p-3 bg-red-900/30 border border-red-700/50 rounded-lg\">\n            <AlertCircle className=\"w-5 h-5 text-red-400\" />\n            <p className=\"text-sm text-red-300\">{error}</p>\n          </div>\n        )}\n\n        {result && (\n          <div className=\"flex items-start gap-3 p-3 bg-green-900/30 border border-green-700/50 rounded-lg\">\n            <CheckCircle className=\"w-5 h-5 text-green-400 mt-1\" />\n            <div>\n              <p className=\"font-semibold text-green-300\">{result.message}</p>\n              <div className=\"text-sm text-slate-300 mt-1\">\n                <p><strong>Name:</strong> {result.contact.first_name} {result.contact.last_name}</p>\n                <p><strong>Company:</strong> {result.contact.company}</p>\n                <p><strong>Email:</strong> {result.contact.email}</p>\n                <p><strong>Phone:</strong> {result.contact.phone}</p>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n      <CardFooter className=\"flex justify-end gap-2\"> {/* Added flex utilities for button alignment */}\n        {onCancel && (\n          <Button variant=\"ghost\" onClick={onCancel} disabled={isProcessing} className=\"text-slate-400 hover:text-slate-200\">\n            Cancel\n          </Button>\n        )}\n        <Button onClick={handleProcess} disabled={isProcessing || !file} className=\"bg-blue-600 hover:bg-blue-700\">\n          {isProcessing ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Processing...\n            </>\n          ) : (\n            <>\n              <UploadCloud className=\"mr-2 h-4 w-4\" />\n              Process Card\n            </>\n          )}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\documents\\CashFlowExtractor.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Upload' is defined but never used.","line":10,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"Upload"},"fix":{"range":[624,632],"text":""},"desc":"Remove unused variable 'Upload'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ArrowRightLeft' is defined but never used.","line":10,"column":77,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":91,"suggestions":[{"messageId":"removeVar","data":{"varName":"ArrowRightLeft"},"fix":{"range":[682,698],"text":""},"desc":"Remove unused variable 'ArrowRightLeft'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'file' is assigned a value but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"file"},"fix":{"range":[1898,1902],"text":""},"desc":"Remove unused variable 'file'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { UploadFile, ExtractDataFromUploadedFile } from '@/api/integrations';\nimport { CashFlow } from '@/api/entities';\nimport { toast } from 'sonner';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Loader2, Upload, FileUp, CheckCircle, AlertTriangle, Save, Trash2, ArrowRightLeft } from 'lucide-react';\nimport { useTenant } from '../shared/tenantContext';\n\nconst cashFlowExtractionSchema = {\n  type: \"object\",\n  properties: {\n    transactions: {\n      type: \"array\",\n      items: {\n        type: \"object\",\n        properties: {\n          transaction_date: { type: \"string\", format: \"date\", description: \"The date of the transaction in YYYY-MM-DD format.\" },\n          description: { type: \"string\", description: \"A detailed description of the transaction.\" },\n          amount: { type: \"number\", description: \"The transaction amount. Always a positive number.\" },\n          transaction_type: { type: \"string\", enum: [\"income\", \"expense\"], description: \"The type of transaction (income or expense).\" }\n        },\n        required: [\"transaction_date\", \"description\", \"amount\", \"transaction_type\"]\n      }\n    }\n  },\n  required: [\"transactions\"]\n};\n\nconst cashFlowCategories = [\n    \"sales_revenue\", \"recurring_revenue\", \"refund\", \"operating_expense\", \"marketing\", \n    \"equipment\", \"supplies\", \"utilities\", \"rent\", \"payroll\", \n    \"professional_services\", \"travel\", \"meals\", \"other\"\n];\n\nexport default function CashFlowExtractor({ onCancel, onProcessingChange, user }) {\n  const [file, setFile] = useState(null);\n  const [status, setStatus] = useState('idle'); // idle, uploading, extracting, review, saving, success\n  const [extractedData, setExtractedData] = useState([]);\n  const [error, setError] = useState(null);\n  const { selectedTenantId } = useTenant();\n\n  // Handle file processing\n  const handleProcessFile = useCallback(async (fileToProcess) => {\n    if (!user) {\n      setError(\"User information is not available.\");\n      setStatus('error');\n      return;\n    }\n    \n    onProcessingChange(true);\n    setStatus('uploading');\n    setError(null);\n    try {\n      const { file_url } = await UploadFile({ file: fileToProcess });\n      \n      setStatus('extracting');\n      const extractionResult = await ExtractDataFromUploadedFile({ file_url, json_schema: cashFlowExtractionSchema });\n\n      if (extractionResult.status === 'success' && extractionResult.output?.transactions) {\n        setExtractedData(extractionResult.output.transactions.map(t => ({...t, category: 'other'})));\n        setStatus('review');\n      } else {\n        throw new Error(extractionResult.details || \"Failed to extract structured data from the document.\");\n      }\n    } catch (err) {\n      setError(err.message);\n      setStatus('error');\n    } finally {\n      onProcessingChange(false);\n    }\n  }, [user, onProcessingChange]);\n\n  // Handle file selection\n  const handleFileChange = useCallback((event) => {\n    const selectedFile = event.target.files[0];\n    if (selectedFile) {\n      setFile(selectedFile);\n      handleProcessFile(selectedFile);\n    }\n  }, [handleProcessFile]);\n\n  const handleSaveTransactions = async () => {\n    if (!user) {\n      toast.error(\"Cannot save transactions. User not found.\");\n      return;\n    }\n    const tenantId = selectedTenantId || user.tenant_id;\n    if (!tenantId) {\n      toast.error(\"Cannot save transactions. Tenant not identified.\");\n      return;\n    }\n\n    onProcessingChange(true);\n    setStatus('saving');\n    try {\n      const recordsToCreate = extractedData.map(item => ({\n        ...item,\n        tenant_id: tenantId,\n        entry_method: 'document_extracted',\n        is_editable: true,\n      }));\n\n      await CashFlow.bulkCreate(recordsToCreate);\n      setStatus('success');\n      toast.success(`${recordsToCreate.length} transactions saved successfully!`);\n    } catch (err) {\n      setError(err.message);\n      setStatus('error');\n    } finally {\n      onProcessingChange(false);\n    }\n  };\n  \n  const handleRowChange = (index, field, value) => {\n    const updatedData = [...extractedData];\n    updatedData[index][field] = value;\n    setExtractedData(updatedData);\n  };\n  \n  const handleRemoveRow = (index) => {\n    setExtractedData(extractedData.filter((_, i) => i !== index));\n  };\n\n  if (status === 'success') {\n    return (\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-8 text-center space-y-4\">\n          <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto\" />\n          <h3 className=\"text-2xl font-bold text-slate-100\">Success!</h3>\n          <p className=\"text-slate-300\">{extractedData.length} transactions have been added to your Cash Flow module.</p>\n          <Button onClick={onCancel} className=\"bg-blue-600 hover:bg-blue-700\">Process Another Document</Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (status === 'review') {\n    return (\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Review Extracted Transactions</CardTitle>\n          <CardDescription className=\"text-slate-400\">Verify the data extracted from your document before saving it to your Cash Flow.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"border-slate-700\">\n                  <TableHead className=\"text-slate-300\">Date</TableHead>\n                  <TableHead className=\"text-slate-300\">Description</TableHead>\n                  <TableHead className=\"text-slate-300\">Amount</TableHead>\n                  <TableHead className=\"text-slate-300\">Type</TableHead>\n                  <TableHead className=\"text-slate-300\">Category</TableHead>\n                  <TableHead></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {extractedData.map((item, index) => (\n                  <TableRow key={index} className=\"border-slate-700\">\n                    <TableCell><Input type=\"date\" value={item.transaction_date} onChange={(e) => handleRowChange(index, 'transaction_date', e.target.value)} className=\"bg-slate-700 border-slate-600 text-slate-200\" /></TableCell>\n                    <TableCell><Input value={item.description} onChange={(e) => handleRowChange(index, 'description', e.target.value)} className=\"bg-slate-700 border-slate-600 text-slate-200\" /></TableCell>\n                    <TableCell><Input type=\"number\" value={item.amount} onChange={(e) => handleRowChange(index, 'amount', parseFloat(e.target.value))} className=\"bg-slate-700 border-slate-600 text-slate-200\" /></TableCell>\n                    <TableCell>\n                      <Select value={item.transaction_type} onValueChange={(val) => handleRowChange(index, 'transaction_type', val)}>\n                        <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\"><SelectValue /></SelectTrigger>\n                        <SelectContent className=\"bg-slate-800 border-slate-700\">\n                          <SelectItem value=\"income\" className=\"text-slate-200\">Income</SelectItem>\n                          <SelectItem value=\"expense\" className=\"text-slate-200\">Expense</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </TableCell>\n                    <TableCell>\n                      <Select value={item.category} onValueChange={(val) => handleRowChange(index, 'category', val)}>\n                        <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\"><SelectValue /></SelectTrigger>\n                        <SelectContent className=\"bg-slate-800 border-slate-700\">\n                          {cashFlowCategories.map(cat => <SelectItem key={cat} value={cat} className=\"text-slate-200 capitalize\">{cat.replace(/_/g, ' ')}</SelectItem>)}\n                        </SelectContent>\n                      </Select>\n                    </TableCell>\n                    <TableCell><Button variant=\"ghost\" size=\"icon\" onClick={() => handleRemoveRow(index)}><Trash2 className=\"w-4 h-4 text-red-500\" /></Button></TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          <div className=\"flex justify-end mt-6\">\n            <Button onClick={handleSaveTransactions} disabled={status === 'saving'} className=\"bg-green-600 hover:bg-green-700\">\n              {status === 'saving' ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : <Save className=\"w-4 h-4 mr-2\" />}\n              Save Transactions\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"text-slate-100\">Upload Financial Document</CardTitle>\n        <CardDescription className=\"text-slate-400\">Upload a spreadsheet (XLSX, CSV), PDF, or Word document containing income and expense transactions.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {status === 'idle' && (\n          <div className=\"p-10 border-2 border-dashed rounded-lg text-center transition-colors border-slate-600 hover:border-slate-500 hover:bg-slate-700/50\">\n            <input\n              type=\"file\"\n              accept=\".xlsx,.csv,.pdf,.docx,.xls\"\n              onChange={handleFileChange}\n              className=\"hidden\"\n              id=\"financial-file-input\"\n            />\n            <label htmlFor=\"financial-file-input\" className=\"cursor-pointer\">\n              <div className=\"flex flex-col items-center justify-center gap-2 text-slate-400\">\n                <FileUp className=\"w-8 h-8\" />\n                <p>Click to select your financial document.</p>\n                <p className=\"text-xs\">(XLSX, CSV, PDF, DOCX supported)</p>\n              </div>\n            </label>\n          </div>\n        )}\n        \n        {['uploading', 'extracting'].includes(status) && (\n          <div className=\"text-center p-10\">\n            <Loader2 className=\"w-12 h-12 text-blue-500 animate-spin mx-auto\" />\n            <p className=\"mt-4 text-slate-300 text-lg font-semibold capitalize\">{status}...</p>\n            <p className=\"text-slate-400\">Please wait while we process your document.</p>\n          </div>\n        )}\n\n        {status === 'error' && (\n          <div className=\"p-4 bg-red-900/20 border border-red-700/50 rounded-lg text-center\">\n            <AlertTriangle className=\"w-8 h-8 text-red-400 mx-auto mb-2\" />\n            <p className=\"text-red-300 font-semibold\">An Error Occurred</p>\n            <p className=\"text-red-400 text-sm mb-4\">{error}</p>\n            <Button onClick={onCancel}>Try Again</Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\documents\\DocumentExtractor.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Loader2, UploadCloud, AlertCircle, FileJson, FileText, X } from 'lucide-react'; // Added X icon\nimport { UploadFile, ExtractDataFromUploadedFile } from '@/api/integrations';\n\nconst entitySchemas = {\n  Contact: {\n    type: 'object',\n    properties: {\n      first_name: { type: 'string' },\n      last_name: { type: 'string' },\n      email: { type: 'string', format: 'email' },\n      phone: { type: 'string' },\n      company: { type: 'string' }\n    }\n  },\n  Lead: {\n    type: 'object',\n    properties: {\n      first_name: { type: 'string' },\n      last_name: { type: 'string' },\n      email: { type: 'string', format: 'email' },\n      phone: { type: 'string' },\n      company: { type: 'string' },\n      source: { type: 'string' }\n    }\n  },\n};\n\nexport default function DocumentExtractor({ onCancel, onProcessingChange }) {\n  const [file, setFile] = useState(null);\n  const [entityType, setEntityType] = useState('Contact');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (onProcessingChange) {\n      onProcessingChange(isProcessing);\n    }\n  }, [isProcessing, onProcessingChange]);\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n    setResult(null);\n    setError(null);\n  };\n\n  const handleProcess = async () => {\n    if (!file) {\n      setError('Please select a file first.');\n      return;\n    }\n    setIsProcessing(true);\n    setError(null);\n    setResult(null);\n\n    try {\n      const { file_url } = await UploadFile({ file });\n      \n      const extractionResult = await ExtractDataFromUploadedFile({\n        file_url,\n        json_schema: entitySchemas[entityType],\n      });\n\n      if (extractionResult.status === 'success') {\n        setResult(extractionResult.output);\n      } else {\n        throw new Error(extractionResult.details || 'Failed to extract data.');\n      }\n    } catch (e) {\n      setError(e.message || 'An unknown error occurred.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700 text-slate-300 shadow-lg border-0\">\n      <CardHeader className=\"border-b border-slate-700\">\n        <CardTitle className=\"flex items-center justify-between text-slate-100\">\n          <span className=\"flex items-center gap-2\">\n            <FileText className=\"w-6 h-6 text-emerald-400\" />\n            Document Extractor\n          </span>\n          <Button variant=\"ghost\" onClick={onCancel} className=\"text-slate-400 hover:text-slate-200\">\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </CardTitle>\n        <CardDescription className=\"text-slate-400\">\n          Upload documents like receipts, invoices, or contracts to extract structured data.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4 p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n                <label htmlFor=\"document-file\" className=\"text-sm font-medium text-slate-200\">Document File</label>\n                <Input\n                id=\"document-file\"\n                type=\"file\"\n                accept=\".pdf,.txt,.docx,.md\"\n                onChange={handleFileChange}\n                disabled={isProcessing}\n                className=\"bg-slate-700 border-slate-600 text-slate-200 file:bg-slate-600 file:text-slate-200 file:border-slate-500\"\n                />\n            </div>\n            <div className=\"space-y-2\">\n                <label htmlFor=\"entity-type\" className=\"text-sm font-medium text-slate-200\">Target Entity</label>\n                <Select value={entityType} onValueChange={setEntityType} disabled={isProcessing}>\n                <SelectTrigger id=\"entity-type\" className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                    <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                    <SelectItem value=\"Contact\" className=\"focus:bg-slate-700\">Contact</SelectItem>\n                    <SelectItem value=\"Lead\" className=\"focus:bg-slate-700\">Lead</SelectItem>\n                </SelectContent>\n                </Select>\n            </div>\n        </div>\n\n        {error && (\n          <div className=\"flex items-center gap-2 p-3 bg-red-900/30 border border-red-700/50 rounded-lg\">\n            <AlertCircle className=\"w-5 h-5 text-red-400\" />\n            <p className=\"text-sm text-red-300\">{error}</p>\n          </div>\n        )}\n\n        {result && (\n          <div className=\"space-y-2\">\n            <h3 className=\"text-md font-semibold flex items-center gap-2 text-slate-100\">\n              <FileJson className=\"w-5 h-5 text-green-400\" />\n              Extracted Data\n            </h3>\n            <Textarea\n              readOnly\n              value={JSON.stringify(result, null, 2)}\n              className=\"font-mono text-xs h-48 bg-slate-900 border-slate-700 text-slate-300\"\n            />\n          </div>\n        )}\n      </CardContent>\n      <CardFooter className=\"flex justify-end gap-2\"> {/* Changed to flex and gap for buttons */}\n        <Button \n          variant=\"outline\" \n          onClick={onCancel} \n          disabled={isProcessing} \n          className=\"bg-slate-700 text-slate-200 border-slate-600 hover:bg-slate-600\"\n        >\n          Cancel\n        </Button>\n        <Button onClick={handleProcess} disabled={isProcessing || !file} className=\"bg-purple-600 hover:bg-purple-700\">\n          {isProcessing ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Extracting...\n            </>\n          ) : (\n            <>\n              <UploadCloud className=\"mr-2 h-4 w-4\" />\n              Extract Data\n            </>\n          )}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\documents\\ProcessingHistory.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\employees\\EmployeeDetailPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Phone' is defined but never used.","line":9,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"Phone"},"fix":{"range":[399,406],"text":""},"desc":"Remove unused variable 'Phone'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Building2' is defined but never used.","line":9,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"Building2"},"fix":{"range":[406,417],"text":""},"desc":"Remove unused variable 'Building2'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":9,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"Calendar"},"fix":{"range":[428,438],"text":""},"desc":"Remove unused variable 'Calendar'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":83,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":17},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":83,"column":19,"nodeType":"BlockStatement","messageId":"unexpected","endLine":83,"endColumn":21,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2958,2958],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":112,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":17},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":112,"column":19,"nodeType":"BlockStatement","messageId":"unexpected","endLine":112,"endColumn":21,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[3907,3907],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetDescription } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  User, Mail, Phone, Building2, Briefcase, Calendar,\n  MapPin, Shield, Clock, Edit, Trash2, Users, Link2, Loader2, RefreshCw\n} from \"lucide-react\";\nimport PhoneDisplay from \"../shared/PhoneDisplay\";\nimport EmployeePermissionsDialog from \"./EmployeePermissionsDialog\";\nimport { User as UserEntity } from \"@/api/entities\";\nimport { linkEmployeeToCRMUser } from \"@/api/functions\";\nimport { syncEmployeeUserPermissions } from \"@/api/functions\";\nimport { toast } from \"sonner\";\n\nexport default function EmployeeDetailPanel({\n  employee,\n  open,\n  onOpenChange,\n  onEdit,\n  onDelete,\n  user,\n  onManagePermissions\n}) {\n  // Ensure hooks are always called (moved above any early return)\n  const [__showAccessDialog, __setShowAccessDialog] = React.useState(false);\n  const [__currentUser, __setCurrentUser] = React.useState(null);\n  const [linking, setLinking] = React.useState(false);\n  const [isSyncing, setIsSyncing] = useState(false); // New state as per outline\n\n  React.useEffect(() => {\n    let mounted = true;\n    (async () => {\n      try {\n        const me = await UserEntity.me();\n        if (mounted) __setCurrentUser(me);\n      } catch (error) {\n        console.error(\"Failed to fetch current user for EmployeeDetailPanel:\", error);\n        if (mounted) __setCurrentUser(null);\n      }\n    })();\n    return () => { mounted = false; };\n  }, []);\n\n  const __canManageEmployeeAccess = React.useMemo(() => {\n    if (!__currentUser) return false;\n    if (__currentUser.role === \"admin\" || __currentUser.role === \"superadmin\") return true;\n    return __currentUser.tier === \"Tier3\" || __currentUser.tier === \"Tier4\";\n  }, [__currentUser]);\n\n  const handleLinkCRMUser = async () => {\n    if (!employee?.email) {\n      toast.error(\"Employee must have an email address to link to a CRM user\");\n      return;\n    }\n\n    setLinking(true);\n    try {\n      const response = await linkEmployeeToCRMUser({\n        employee_id: employee.id,\n        employee_email: employee.email\n      });\n\n      if (response.status === 200 && response.data?.success) {\n        toast.success(response.data.message || `Successfully linked to CRM user: ${employee.email}`);\n        \n        // Refresh the page to show updated data\n        setTimeout(() => {\n          window.location.reload();\n        }, 1000);\n      } else {\n        const errorMsg = response.data?.error || 'Failed to link to CRM user';\n        toast.error(errorMsg);\n      }\n      \n    } catch (error) {\n      let msg = \"Failed to link to CRM user\";\n      try {\n        if (error?.message) msg = error.message;\n      } catch (e) {}\n      console.error(\"Link error:\", msg);\n      toast.error(msg);\n    } finally {\n      setLinking(false);\n    }\n  };\n\n  // New function as per outline\n  const handleSyncPermissions = async () => {\n    if (!employee?.user_email) {\n      toast.error(\"This employee is not linked to a CRM user\");\n      return;\n    }\n\n    setIsSyncing(true);\n    try {\n      const response = await syncEmployeeUserPermissions({ employee_id: employee.id });\n      if (response.status === 200 && response.data?.success) {\n        toast.success(\"Permissions synced successfully\");\n        // Trigger refresh to show updated data, as employee prop might not reflect changes immediately\n        window.location.reload(); \n      } else {\n        throw new Error(response.data?.error || \"Failed to sync permissions\");\n      }\n    } catch (error) {\n      let msg = \"Failed to sync permissions\";\n      try {\n        if (error?.message) msg = error.message;\n      } catch (e) {}\n      console.error(\"Sync error:\", msg);\n      toast.error(msg);\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  const statusColors = {\n    active: \"bg-green-100 text-green-700 border-green-200\",\n    inactive: \"bg-gray-100 text-gray-700 border-gray-200\",\n    terminated: \"bg-red-100 text-red-700 border-red-200\",\n    on_leave: \"bg-yellow-100 text-yellow-700 border-yellow-200\"\n  };\n\n  const employmentTypeColors = {\n    full_time: \"bg-blue-100 text-blue-700 border-blue-200\",\n    part_time: \"bg-purple-100 text-purple-700 border-purple-200\",\n    contractor: \"bg-orange-100 text-orange-700 border-orange-200\",\n    seasonal: \"bg-teal-100 text-teal-700 border-teal-200\"\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return \"N/A\";\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const formatDepartment = (dept) => {\n    if (!dept) return \"N/A\";\n    return dept.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const canManage = React.useMemo(() => {\n    if (!user) return false;\n    if (user.role === \"superadmin\" || user.role === \"admin\") return !!employee?.user_email;\n    return (user.tier === \"Tier3\" || user.tier === \"Tier4\") && !!employee?.user_email;\n  }, [user, employee]);\n\n  // After hooks are set up, we can safely early-return\n  if (!employee) return null;\n\n  return (\n    <Sheet open={open} onOpenChange={onOpenChange}>\n      <SheetContent className=\"w-full sm:max-w-lg overflow-y-auto bg-slate-900 border-slate-700 text-slate-100\">\n        <SheetHeader className=\"space-y-3\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-slate-700 rounded-full flex items-center justify-center\">\n                <User className=\"w-6 h-6 text-slate-300\" />\n              </div>\n              <div>\n                <SheetTitle className=\"text-xl font-bold text-slate-100\">\n                  {employee.first_name} {employee.last_name}\n                </SheetTitle>\n                <SheetDescription className=\"text-slate-400\">\n                  {employee.job_title} ΓÇó {formatDepartment(employee.department)}\n                </SheetDescription>\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              {canManage && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onManagePermissions && onManagePermissions(employee)}\n                  className=\"bg-slate-800 border-slate-600 text-indigo-300 hover:bg-slate-700\"\n                  title=\"Manage Permissions\"\n                >\n                  <Shield className=\"w-4 h-4\" />\n                </Button>\n              )}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onEdit(employee)}\n                className=\"bg-slate-800 border-slate-600 text-slate-200 hover:bg-slate-700\"\n              >\n                <Edit className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onDelete(employee.id)}\n                className=\"bg-slate-800 border-slate-600 text-red-400 hover:bg-slate-700\"\n              >\n                <Trash2 className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n          <div className=\"flex gap-2 flex-wrap\">\n            <Badge className={statusColors[employee.employment_status] || statusColors.active}>\n              {employee.employment_status?.replace(/_/g, ' ')}\n            </Badge>\n            <Badge className={employmentTypeColors[employee.employment_type] || employmentTypeColors.full_time}>\n              {employee.employment_type?.replace(/_/g, ' ')}\n            </Badge>\n          </div>\n        </SheetHeader>\n\n        {/* Link CRM User button - show if has email but no user_email */}\n        {employee.email && !employee.user_email && __canManageEmployeeAccess && (\n          <div className=\"mt-3 mb-6\">\n            <Button\n              variant=\"outline\"\n              className=\"w-full bg-blue-900/30 border-blue-700 text-blue-300 hover:bg-blue-900/50 hover:text-blue-200\"\n              onClick={handleLinkCRMUser}\n              disabled={linking}\n            >\n              {linking ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Linking...\n                </>\n              ) : (\n                <>\n                  <Link2 className=\"w-4 h-4 mr-2\" />\n                  Link to CRM User\n                </>\n              )}\n            </Button>\n            <p className=\"text-xs text-slate-400 mt-2\">\n              This will link this employee to an existing CRM user account with email: {employee.email}\n            </p>\n          </div>\n        )}\n\n        {/* Manage Access and Sync Permissions buttons (visible to Admin/Superadmin or Tier3/4) */}\n        {__canManageEmployeeAccess && (\n          <div className=\"mt-3 mb-6 flex flex-wrap gap-2\"> {/* Added flex gap for buttons */}\n            <Button\n              variant=\"outline\"\n              className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600 hover:text-white\"\n              onClick={() => __setShowAccessDialog(true)}\n            >\n              <Shield className=\"w-4 h-4 mr-2\" />\n              Manage Access\n            </Button>\n\n            {/* Sync Permissions button - show if employee has CRM access */}\n            {employee?.has_crm_access && employee?.user_email && (\n              <Button\n                variant=\"outline\"\n                className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600 hover:text-white\"\n                onClick={handleSyncPermissions}\n                disabled={isSyncing}\n              >\n                {isSyncing ? (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Syncing...\n                  </>\n                ) : (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Sync Permissions\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n        )}\n\n        <Separator className=\"my-6 bg-slate-700\" />\n\n        <div className=\"space-y-6\">\n          {/* Contact Information */}\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base font-semibold text-slate-200 flex items-center gap-2\">\n                <Mail className=\"w-4 h-4 text-blue-400\" />\n                Contact Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-3 gap-2 items-center\">\n                <span className=\"text-sm text-slate-400\">Email:</span>\n                <span className=\"col-span-2 text-sm text-slate-200\">{employee.email || \"N/A\"}</span>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2 items-center\">\n                <span className=\"text-sm text-slate-400\">Phone:</span>\n                <div className=\"col-span-2\">\n                  {employee.phone ? (\n                    <PhoneDisplay user={user} phone={employee.phone} contactName={`${employee.first_name} ${employee.last_name}`} />\n                  ) : (\n                    <span className=\"text-sm text-slate-500 italic\">No phone</span>\n                  )}\n                </div>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2 items-center\">\n                <span className=\"text-sm text-slate-400\">Mobile:</span>\n                <div className=\"col-span-2\">\n                  {employee.mobile ? (\n                    <PhoneDisplay user={user} phone={employee.mobile} contactName={`${employee.first_name} ${employee.last_name}`} />\n                  ) : (\n                    <span className=\"text-sm text-slate-500 italic\">No mobile</span>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Employment Details */}\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base font-semibold text-slate-200 flex items-center gap-2\">\n                <Briefcase className=\"w-4 h-4 text-green-400\" />\n                Employment Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-3 gap-2 items-center\">\n                <span className=\"text-sm text-slate-400\">Employee ID:</span>\n                <span className=\"col-span-2 text-sm text-slate-200\">{employee.employee_number || \"N/A\"}</span>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2 items-center\">\n                <span className=\"text-sm text-slate-400\">Hire Date:</span>\n                <span className=\"col-span-2 text-sm text-slate-200\">{formatDate(employee.hire_date)}</span>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2 items-center\">\n                <span className=\"text-sm text-slate-400\">Hourly Rate:</span>\n                <span className=\"col-span-2 text-sm text-slate-200\">{employee.hourly_rate ? `$${employee.hourly_rate}/hr` : \"N/A\"}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* CRM Access & Role Level */}\n          {employee.has_crm_access && employee.user_email && (\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base font-semibold text-slate-200 flex items-center gap-2\">\n                  <Shield className=\"w-4 h-4 text-indigo-400\" />\n                  CRM Access & Permissions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-3 gap-2 items-center\">\n                  <span className=\"text-sm text-slate-400\">CRM User:</span>\n                  <span className=\"col-span-2 text-sm text-slate-200\">{employee.user_email}</span>\n                </div>\n                <div className=\"grid grid-cols-3 gap-2 items-center\">\n                  <span className=\"text-sm text-slate-400\">Role Level:</span>\n                  <span className=\"col-span-2\">\n                    {employee.crm_user_employee_role === 'manager' ? (\n                      <Badge className=\"bg-purple-900/30 text-purple-300 border-purple-700\">\n                        Manager\n                      </Badge>\n                    ) : employee.crm_user_employee_role === 'employee' ? (\n                      <Badge className=\"bg-blue-900/30 text-blue-300 border-blue-700\">\n                        Employee\n                      </Badge>\n                    ) : (\n                      <span className=\"text-sm text-slate-500 italic\">Not Set</span>\n                    )}\n                  </span>\n                </div>\n                <div className=\"grid grid-cols-3 gap-2 items-center\">\n                  <span className=\"text-sm text-slate-400\">Access Level:</span>\n                  <span className=\"col-span-2\">\n                    {employee.crm_user_access_level === 'read_write' ? (\n                      <Badge className=\"bg-green-900/30 text-green-300 border-green-700\">\n                        Read/Write\n                      </Badge>\n                    ) : employee.crm_user_access_level === 'read' ? (\n                      <Badge className=\"bg-yellow-900/30 text-yellow-300 border-yellow-700\">\n                        Read Only\n                      </Badge>\n                    ) : (\n                      <span className=\"text-sm text-slate-500 italic\">Not Set</span>\n                    )}\n                  </span>\n                </div>\n                <div className=\"grid grid-cols-3 gap-2 items-center\">\n                  <span className=\"text-sm text-slate-400\">Description:</span>\n                  <span className=\"col-span-2 text-xs text-slate-400\">\n                    {employee.crm_user_employee_role === 'manager'\n                      ? 'Can view and manage all team records'\n                      : 'Can only view and manage their own records'}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Address Information */}\n          {(employee.address_1 || employee.city || employee.state) && (\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base font-semibold text-slate-200 flex items-center gap-2\">\n                  <MapPin className=\"w-4 h-4 text-purple-400\" />\n                  Address\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"text-sm text-slate-200\">\n                  {employee.address_1 && <div>{employee.address_1}</div>}\n                  {employee.address_2 && <div>{employee.address_2}</div>}\n                  {(employee.city || employee.state || employee.zip) && (\n                    <div>\n                      {employee.city && employee.city}\n                      {employee.city && employee.state && \", \"}\n                      {employee.state && employee.state}\n                      {employee.zip && ` ${employee.zip}`}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Emergency Contact */}\n          {(employee.emergency_contact_name || employee.emergency_contact_phone) && (\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base font-semibold text-slate-200 flex items-center gap-2\">\n                  <Shield className=\"w-4 h-4 text-red-400\" />\n                  Emergency Contact\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-3 gap-2 items-center\">\n                  <span className=\"text-sm text-slate-400\">Name:</span>\n                  <span className=\"col-span-2 text-sm text-slate-200\">{employee.emergency_contact_name || \"N/A\"}</span>\n                </div>\n                <div className=\"grid grid-cols-3 gap-2 items-center\">\n                  <span className=\"text-sm text-slate-400\">Phone:</span>\n                  <div className=\"col-span-2\">\n                    {employee.emergency_contact_phone ? (\n                      <PhoneDisplay user={user} phone={employee.emergency_contact_phone} contactName={employee.emergency_contact_name} />\n                    ) : (\n                      <span className=\"text-sm text-slate-500 italic\">No phone</span>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Skills & Notes */}\n          {(employee.skills?.length > 0 || employee.notes) && (\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base font-semibold text-slate-200 flex items-center gap-2\">\n                  <Users className=\"w-4 h-4 text-orange-400\" />\n                  Additional Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {employee.skills?.length > 0 && (\n                  <div>\n                    <span className=\"text-sm text-slate-400 block mb-2\">Skills:</span>\n                    <div className=\"flex gap-2 flex-wrap\">\n                      {employee.skills.map((skill, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"bg-slate-700 border-slate-600 text-slate-300 text-xs\">\n                          {skill}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                {employee.notes && (\n                  <div>\n                    <span className=\"text-sm text-slate-400 block mb-2\">Notes:</span>\n                    <p className=\"text-sm text-slate-200 bg-slate-700/50 p-3 rounded border border-slate-600\">\n                      {employee.notes}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Metadata */}\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base font-semibold text-slate-200 flex items-center gap-2\">\n                <Clock className=\"w-4 h-4 text-slate-400\" />\n                Record Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-3 gap-2 items-center\">\n                <span className=\"text-sm text-slate-400\">Created:</span>\n                <span className=\"col-span-2 text-sm text-slate-200\">{formatDate(employee.created_date)}</span>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2 items-center\">\n                <span className=\"text-sm text-slate-400\">Updated:</span>\n                <span className=\"col-span-2 text-sm text-slate-200\">{formatDate(employee.updated_date)}</span>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2 items-center\">\n                <span className=\"text-sm text-slate-400\">Created By:</span>\n                <span className=\"col-span-2 text-sm text-slate-200\">{employee.created_by || \"System\"}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Access dialog mounted with current employee record */}\n        <EmployeePermissionsDialog\n          open={__showAccessDialog}\n          onOpenChange={__setShowAccessDialog}\n          employee={employee}\n          editorUser={__currentUser}\n          onSuccess={() => {\n            __setShowAccessDialog(false);\n          }}\n        />\n      </SheetContent>\n    </Sheet>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\employees\\EmployeeForm.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"User"},"fix":{"range":[42,80],"text":""},"desc":"Remove unused variable 'User'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle2' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle2"},"fix":{"range":[598,611],"text":""},"desc":"Remove unused variable 'CheckCircle2'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Send' is defined but never used.","line":12,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"Send"},"fix":{"range":[610,616],"text":""},"desc":"Remove unused variable 'Send'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'requestUserInvite' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"requestUserInvite"},"fix":{"range":[693,745],"text":""},"desc":"Remove unused variable 'requestUserInvite'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'inviteUser' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"inviteUser"},"fix":{"range":[746,791],"text":""},"desc":"Remove unused variable 'inviteUser'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'selectedTenantId' is assigned a value but never used.","line":23,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedTenantId"},"fix":{"range":[1162,1203],"text":""},"desc":"Remove unused variable 'selectedTenantId'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'skillInput' is assigned a value but never used.","line":60,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"skillInput"},"fix":{"range":[2880,2890],"text":""},"desc":"Remove unused variable 'skillInput'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setSkillInput' is assigned a value but never used.","line":60,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSkillInput"},"fix":{"range":[2890,2905],"text":""},"desc":"Remove unused variable 'setSkillInput'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'tagInput' is assigned a value but never used.","line":61,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"tagInput"},"fix":{"range":[2954,2962],"text":""},"desc":"Remove unused variable 'tagInput'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setTagInput' is assigned a value but never used.","line":61,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"setTagInput"},"fix":{"range":[2962,2975],"text":""},"desc":"Remove unused variable 'setTagInput'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport { User } from \"@/api/entities\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n// Removed: Switch component is replaced by native checkbox\nimport { Card, CardContent } from \"@/components/ui/card\";\n// Removed Alert and AlertDescription as messages are now handled by toast\n// import { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { CheckCircle2, Send } from \"lucide-react\";\nimport { useTenant } from \"../shared/tenantContext\";\nimport { requestUserInvite } from \"@/api/functions\";\nimport { inviteUser } from \"@/api/functions\";\nimport { saveEmployee } from \"@/api/functions\";\nimport { toast } from \"sonner\";\n// Removed: ResendInviteButton is removed from this form's outline\n// import ResendInviteButton from \"./ResendInviteButton\"; // This import is no longer needed\n\nexport default function EmployeeForm({ employee, onSave, onCancel, tenantId }) {\n  const isEdit = !!(employee && employee.id);\n  const { selectedTenantId } = useTenant(); // Kept for potential future use or context check\n\n  const [formData, setFormData] = useState(() => ({\n    first_name: employee?.first_name || '',\n    last_name: employee?.last_name || '',\n    email: employee?.email || '',\n    phone: employee?.phone || '',\n    mobile: employee?.mobile || '',\n    department: employee?.department || 'sales', // Default \"sales\" if not provided\n    job_title: employee?.job_title || '',\n    manager_employee_id: employee?.manager_employee_id || null,\n    hire_date: employee?.hire_date || '',\n    employment_status: employee?.employment_status || 'active',\n    employment_type: employee?.employment_type || 'full_time',\n    hourly_rate: employee?.hourly_rate || '',\n    skills: employee?.skills || [],\n    address_1: employee?.address_1 || '',\n    address_2: employee?.address_2 || '',\n    city: employee?.city || '',\n    state: employee?.state || '',\n    zip: employee?.zip || '',\n    emergency_contact_name: employee?.emergency_contact_name || '',\n    emergency_contact_phone: employee?.emergency_contact_phone || '',\n    notes: employee?.notes || '',\n    tags: employee?.tags || [],\n    is_active: employee?.is_active !== false, // Default to true unless explicitly false\n\n    // Retained CRM-related fields from original as UI exists and functionality should be preserved\n    has_crm_access: employee?.has_crm_access || false,\n    crm_access_tier: employee?.crm_access_tier || \"Tier3\",\n    crm_user_employee_role: employee?.crm_user_employee_role || \"employee\",\n  }));\n\n  const [saving, setSaving] = useState(false);\n  // Removed message state as toast is used for notifications\n  // const [message, setMessage] = useState(null);\n\n  const [skillInput, setSkillInput] = useState(''); // New state variable\n  const [tagInput, setTagInput] = useState(''); // New state variable\n\n  const onChange = (key, value) => setFormData((f) => ({ ...f, [key]: value }));\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    // Removed setMessage(null) as message state is removed\n\n    // Validation\n    if (!formData.first_name?.trim()) {\n      toast.error('First name is required');\n      return;\n    }\n    if (!formData.last_name?.trim()) {\n      toast.error('Last name is required');\n      return;\n    }\n    if (!formData.department) {\n      toast.error('Department is required');\n      return;\n    }\n    if (!formData.job_title?.trim()) {\n      toast.error('Job title is required');\n      return;\n    }\n\n    // Existing validation for CRM access email\n    if (formData.has_crm_access && !formData.email) {\n      toast.error(\"Email is required for CRM access requests.\");\n      return;\n    }\n    if (!tenantId && !isEdit) {\n      toast.error(\"Cannot save employee. Tenant information is missing.\");\n      return;\n    }\n\n    setSaving(true);\n\n    try {\n      const payload = {\n        employeeId: employee?.id || null, // Pass employee ID if editing, otherwise null for new\n        employeeData: {\n          first_name: formData.first_name,\n          last_name: formData.last_name,\n          email: formData.email || null,\n          phone: formData.phone || null,\n          mobile: formData.mobile || null,\n          department: formData.department,\n          job_title: formData.job_title,\n          manager_employee_id: formData.manager_employee_id,\n          hire_date: formData.hire_date || null,\n          employment_status: formData.employment_status,\n          employment_type: formData.employment_type,\n          // Ensure numeric fields are numbers or null\n          hourly_rate: formData.hourly_rate ? Number(formData.hourly_rate) : null,\n          skills: formData.skills,\n          address_1: formData.address_1 || null,\n          address_2: formData.address_2 || null,\n          city: formData.city || null,\n          state: formData.state || null,\n          zip: formData.zip || null,\n          emergency_contact_name: formData.emergency_contact_name || null,\n          emergency_contact_phone: formData.emergency_contact_phone || null,\n          notes: formData.notes || null,\n          tags: formData.tags,\n          is_active: formData.is_active,\n          // CRM fields are included conditionally, matching original logic\n          has_crm_access: formData.has_crm_access,\n          crm_access_tier: formData.has_crm_access ? formData.crm_access_tier : null,\n          crm_user_employee_role: formData.has_crm_access ? formData.crm_user_employee_role : null,\n        },\n        tenantId: tenantId\n      };\n\n      console.log('[EmployeeForm] Submitting payload:', payload);\n\n      const response = await saveEmployee(payload);\n\n      console.log('[EmployeeForm] Save response:', response);\n\n      if (response?.data?.success) {\n        toast.success(employee?.id ? 'Employee updated successfully' : 'Employee created successfully');\n        setTimeout(() => {\n          if (onSave) {\n            onSave(); // Call onSave without argument as per outline\n          }\n        }, 1500); // Retained setTimeout for UX\n      } else {\n        const errorMsg = response?.data?.error || 'Failed to save employee';\n        console.error('[EmployeeForm] Save failed:', errorMsg);\n        toast.error(errorMsg);\n      }\n    } catch (error) {\n      console.error('[EmployeeForm] Save error:', error);\n      // More robust error message extraction\n      const errorMsg = error?.response?.data?.error || error?.message || 'Failed to save employee';\n      toast.error(errorMsg);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Removed Alert component as message state and its display are removed */}\n      {/* {message && (\n        <Alert className=\"bg-slate-800 border-slate-700\">\n          <AlertDescription className=\"text-slate-200\">{message}</AlertDescription>\n        </Alert>\n      )} */}\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4\">\n          <div>\n            <Label className=\"text-slate-200\">First name</Label>\n            <Input\n              value={formData.first_name}\n              onChange={(e) => onChange(\"first_name\", e.target.value)}\n              className=\"bg-slate-900 border-slate-700 text-slate-100\"\n              placeholder=\"First name\"\n            />\n          </div>\n          <div>\n            <Label className=\"text-slate-200\">Last name</Label>\n            <Input\n              value={formData.last_name}\n              onChange={(e) => onChange(\"last_name\", e.target.value)}\n              className=\"bg-slate-900 border-slate-700 text-slate-100\"\n              placeholder=\"Last name\"\n            />\n          </div>\n          <div>\n            <Label className=\"text-slate-200\">Email</Label>\n            <Input\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => onChange(\"email\", e.target.value)}\n              className=\"bg-slate-900 border-slate-700 text-slate-100\"\n              placeholder=\"work@example.com\"\n            />\n          </div>\n          <div>\n            <Label className=\"text-slate-200\">Phone</Label>\n            <Input\n              value={formData.phone}\n              onChange={(e) => onChange(\"phone\", e.target.value)}\n              className=\"bg-slate-900 border-slate-700 text-slate-100\"\n              placeholder=\"(555) 123-4567\"\n            />\n          </div>\n          <div>\n            <Label className=\"text-slate-200\">Department</Label>\n            <Select value={formData.department} onValueChange={(v) => onChange(\"department\", v)}>\n              <SelectTrigger className=\"bg-slate-900 border-slate-700 text-slate-100\">\n                <SelectValue placeholder=\"Select department\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-900 border-slate-700 text-slate-100\">\n                <SelectItem value=\"sales\">Sales</SelectItem>\n                <SelectItem value=\"marketing\">Marketing</SelectItem>\n                <SelectItem value=\"operations\">Operations</SelectItem>\n                <SelectItem value=\"field_services\">Field Services</SelectItem>\n                <SelectItem value=\"construction\">Construction</SelectItem>\n                <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                <SelectItem value=\"administration\">Administration</SelectItem>\n                <SelectItem value=\"management\">Management</SelectItem>\n                <SelectItem value=\"technical\">Technical</SelectItem>\n                <SelectItem value=\"customer_service\">Customer Service</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <Label className=\"text-slate-200\">Job title</Label>\n            <Input\n              value={formData.job_title}\n              onChange={(e) => onChange(\"job_title\", e.target.value)}\n              className=\"bg-slate-900 border-slate-700 text-slate-100\"\n              placeholder=\"Role / Title\"\n            />\n          </div>\n          {/* Note: Additional fields like mobile, hire_date, employment_status, employment_type, hourly_rate, address_1, address_2, city, state, zip, emergency_contact_name, emergency_contact_phone, notes, manager_employee_id, skills, tags, is_active are now part of formData but their corresponding UI elements are not explicitly requested in the outline. They will be saved if available in formData. */}\n        </CardContent>\n      </Card>\n\n      {/* CRM Access Section */}\n      <div className=\"border-t border-slate-700 pt-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-lg font-medium text-slate-100\">CRM Access</h3>\n            <p className=\"text-sm text-slate-400\">\n              Grant this employee access to the CRM system\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <label htmlFor=\"has-crm-access\" className=\"text-sm text-slate-300\">Enable CRM access</label>\n            <input\n              id=\"has-crm-access\"\n              type=\"checkbox\"\n              checked={formData.has_crm_access}\n              onChange={(e) => onChange(\"has_crm_access\", e.target.checked)}\n              className=\"rounded border-slate-600 bg-slate-700\"\n            />\n          </div>\n        </div>\n\n        {formData.has_crm_access && (\n          <div className=\"space-y-4 pl-4 border-l-2 border-slate-700\">\n            <p className=\"text-sm text-slate-400 mb-4\">\n              Only Tier 3 or Tier 4 are allowed to request access.\n            </p>\n\n            <div>\n              <Label className=\"text-slate-300\">Access Tier</Label>\n              <Select\n                value={formData.crm_access_tier || \"Tier3\"}\n                onValueChange={(value) => onChange(\"crm_access_tier\", value)}\n              >\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"Tier3\" className=\"text-slate-200\">Tier 3 (Team Lead)</SelectItem>\n                  <SelectItem value=\"Tier4\" className=\"text-slate-200\">Tier 4 (Manager/Admin)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-slate-300\">Employee Role</Label>\n              <Select\n                value={formData.crm_user_employee_role || \"employee\"}\n                onValueChange={(value) => onChange(\"crm_user_employee_role\", value)}\n              >\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"employee\" className=\"text-slate-200\">Employee (Own records only)</SelectItem>\n                  <SelectItem value=\"manager\" className=\"text-slate-200\">Manager (All tenant records)</SelectItem>\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-slate-400 mt-1\">\n                {formData.crm_user_employee_role === 'manager' ?\n                  'Γ£ô Can view all records in their tenant' :\n                  'Γ£ô Can only view records assigned to them'}\n              </p>\n            </div>\n\n            {employee && employee.crm_invite_status && (\n              <div className=\"text-sm text-slate-400\">\n                <span className=\"font-medium\">Status:</span> {employee.crm_invite_status.replace(/_/g, \" \")}\n                {employee.crm_invite_last_sent && (\n                  <span className=\"ml-2\">\n                    (Last sent: {new Date(employee.crm_invite_last_sent).toLocaleDateString()})\n                  </span>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex justify-end gap-3 pt-4\">\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel} disabled={saving} className=\"bg-slate-700 border-slate-600 text-slate-200\">\n          Cancel\n        </Button>\n        <Button type=\"submit\" disabled={saving} className=\"bg-blue-600 hover:bg-blue-700\">\n          {saving ? \"Saving...\" : isEdit ? \"Update Employee\" : \"Create Employee\"}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\employees\\EmployeeInviteDialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\employees\\EmployeePermissionsDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":8,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":60,"suggestions":[{"messageId":"removeVar","data":{"varName":"ExternalLink"},"fix":{"range":[474,488],"text":""},"desc":"Remove unused variable 'ExternalLink'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":154,"column":30,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6537,6563],"text":"Enable &quot;CRM Access\" toggle"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6537,6563],"text":"Enable &ldquo;CRM Access\" toggle"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6537,6563],"text":"Enable &#34;CRM Access\" toggle"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6537,6563],"text":"Enable &rdquo;CRM Access\" toggle"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":154,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6537,6563],"text":"Enable \"CRM Access&quot; toggle"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6537,6563],"text":"Enable \"CRM Access&ldquo; toggle"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6537,6563],"text":"Enable \"CRM Access&#34; toggle"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6537,6563],"text":"Enable \"CRM Access&rdquo; toggle"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":155,"column":31,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6591,6621],"text":"Set the &quot;CRM User Email\" field"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6591,6621],"text":"Set the &ldquo;CRM User Email\" field"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6591,6621],"text":"Set the &#34;CRM User Email\" field"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6591,6621],"text":"Set the &rdquo;CRM User Email\" field"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":155,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6591,6621],"text":"Set the \"CRM User Email&quot; field"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6591,6621],"text":"Set the \"CRM User Email&ldquo; field"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6591,6621],"text":"Set the \"CRM User Email&#34; field"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6591,6621],"text":"Set the \"CRM User Email&rdquo; field"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Loader2, Info, Shield, AlertTriangle, ExternalLink } from \"lucide-react\";\nimport { updateEmployeeUserAccess } from \"@/api/functions\";\n// import { updateEmployeeDetails } from \"@/api/functions/updateEmployeeDetails\"; // TODO: Create this function\nconst updateEmployeeDetails = async () => { throw new Error(\"updateEmployeeDetails not implemented\"); }; // Temporary stub\nimport { toast } from \"react-hot-toast\"; // Assuming react-hot-toast is used for notifications\nimport EmployeeInviteDialog from \"./EmployeeInviteDialog\";\n\nexport default function EmployeePermissionsDialog({ open, onOpenChange, employee, editorUser, onSave }) {\n  const [formData, setFormData] = React.useState({\n    access_level: \"read_write\",\n    employee_role: \"employee\",\n  });\n  const [saving, setSaving] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const [showInvite, setShowInvite] = React.useState(false);\n\n  const linkedEmail = employee?.user_email || null;\n  const hasCrmAccess = employee?.has_crm_access === true && !!linkedEmail;\n\n  const canInviteDirect = !!editorUser && (editorUser.role === \"admin\" || editorUser.role === \"superadmin\" || editorUser.employee_role === \"manager\");\n\n  React.useEffect(() => {\n    if (open) {\n      setError(null);\n      setShowInvite(false);\n      \n      setFormData({\n        access_level: employee?.crm_user_access_level || \"read_write\",\n        employee_role: employee?.crm_user_employee_role || \"employee\",\n      });\n    }\n  }, [open, employee]);\n\n  const handleSave = async () => {\n    setError(null);\n    if (!hasCrmAccess) {\n      const msg = \"This employee is not linked to a CRM user. Please enable CRM Access and set the CRM User Email in the employee form first.\";\n      setError(msg);\n      toast.error(msg);\n      return;\n    }\n\n    setSaving(true);\n    try {\n      // 1. Update the User entity (this already works via updateEmployeeUserAccess)\n      const userResp = await updateEmployeeUserAccess({\n        user_email: linkedEmail,\n        access_level: formData.access_level,\n        employee_role: formData.employee_role\n      });\n\n      const userStatus = userResp?.status ?? 500;\n      const userData = userResp?.data ?? {};\n\n      if (userStatus !== 200 || userData?.success !== true) {\n        const msg = userData?.error || `Failed to update user permissions (status ${userStatus})`;\n        if (userStatus === 404 || /not\\s*found/i.test(msg)) {\n          setError(\"Linked CRM user not found. You can invite or request an invite below.\");\n          setShowInvite(true);\n          toast.error(\"Linked CRM user not found. Please invite or request an invite.\");\n          return;\n        }\n        if (userStatus === 401 || userStatus === 403 || /unauthorized|forbidden/i.test(msg)) {\n          setError(\"You don't have permission to change user access. Please contact an admin.\");\n          toast.error(\"Permission denied to update user access.\");\n          return;\n        }\n        setError(msg);\n        toast.error(msg);\n        return;\n      }\n\n      // 2. NEW: Also update the Employee entity to keep it in sync\n      await updateEmployeeDetails(employee.id, {\n        crm_user_employee_role: formData.employee_role,\n        crm_user_access_level: formData.access_level,\n        crm_access_tier: formData.employee_role === 'manager' ? 'Tier4' : (employee.crm_access_tier || 'Tier1')\n      });\n\n      toast.success(\"Permissions updated successfully!\");\n      \n      if (onSave) {\n        onSave();\n      }\n      \n      onOpenChange(false); // Changed from onOpenChange?.(false) as per outline\n      \n      // Force page refresh to apply new permissions\n      setTimeout(() => {\n        window.location.reload();\n      }, 500);\n      \n    } catch (e) {\n      const errMsg = e?.response?.data?.error || e?.message || \"Failed to save permissions.\";\n      if (/not\\s*found/i.test(errMsg)) {\n        setError(\"Linked CRM user not found. You can invite or request an invite below.\");\n        setShowInvite(true);\n        toast.error(\"Linked CRM user not found. Please invite or request an invite.\");\n      } else if (/unauthorized|forbidden/i.test(errMsg)) {\n        setError(\"You don't have permission to change access. Please contact an admin.\");\n        toast.error(\"Permission denied to save permissions.\");\n      } else {\n        setError(errMsg);\n        toast.error(`Failed to update permissions: ${errMsg}`);\n      }\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleClose = () => {\n    setError(null);\n    setShowInvite(false);\n    setSaving(false);\n    onOpenChange?.(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto bg-slate-800 border-slate-700\">\n        <DialogHeader>\n          <DialogTitle className=\"text-slate-100\">\n            Manage Permissions: {employee?.first_name} {employee?.last_name}\n          </DialogTitle>\n          <DialogDescription className=\"text-slate-400\">\n            Configure access level and permissions for this employee\n          </DialogDescription>\n        </DialogHeader>\n\n        {error && (\n          <Alert variant=\"destructive\" className=\"bg-red-900/30 border-red-700/50\">\n            <AlertDescription className=\"text-red-400\">{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {!hasCrmAccess && (\n          <Alert className=\"bg-amber-900/20 border-amber-700/30\">\n            <AlertTriangle className=\"h-4 w-4 text-amber-400\" />\n            <AlertTitle className=\"text-amber-300\">CRM Access Not Enabled</AlertTitle>\n            <AlertDescription className=\"text-amber-200 space-y-3\">\n              <p>This employee needs to be linked to a CRM user account before you can manage their permissions.</p>\n              <div className=\"text-sm space-y-1\">\n                <p className=\"font-semibold\">To enable permissions management:</p>\n                <ol className=\"list-decimal list-inside space-y-1 ml-2\">\n                  <li>Close this dialog</li>\n                  <li>Click the Edit button (pencil icon) for this employee</li>\n                  <li>Enable \"CRM Access\" toggle</li>\n                  <li>Set the \"CRM User Email\" field</li>\n                  <li>Choose the appropriate Tier and Role</li>\n                  <li>Optionally send an invite</li>\n                  <li>Save the employee</li>\n                  <li>Return here to manage detailed permissions</li>\n                </ol>\n              </div>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"space-y-6\">\n          <Alert className=\"bg-blue-900/20 border-blue-700/30\">\n            <Info className=\"h-4 w-4 text-blue-400\" />\n            <AlertDescription className=\"text-blue-300 text-sm\">\n              <strong>Linked CRM User:</strong> {linkedEmail || \"None\"}\n              {!linkedEmail && \" - CRM user email must be set to manage permissions\"}\n            </AlertDescription>\n          </Alert>\n\n          {/* Employee Role Section */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-sm font-semibold text-slate-200 flex items-center gap-2\">\n              <Shield className=\"w-4 h-4\" />\n              Employee Role\n            </h3>\n            \n            <div>\n              <Label className=\"text-slate-300\">Role Level</Label>\n              <Select \n                value={formData.employee_role || 'employee'} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, employee_role: value }))}\n                disabled={!hasCrmAccess}\n              >\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"employee\" className=\"text-slate-200\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">Employee</span>\n                      <span className=\"text-xs text-slate-400\">Can only view and manage their own records</span>\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"manager\" className=\"text-slate-200\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">Manager</span>\n                      <span className=\"text-xs text-slate-400\">Can view and manage all team records</span>\n                    </div>\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Access Level Section */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-sm font-semibold text-slate-200 flex items-center gap-2\">\n              <Shield className=\"w-4 h-4\" />\n              Access Level\n            </h3>\n            <div>\n              <Label className=\"text-slate-300\">CRM Data Access</Label>\n              <Select \n                value={formData.access_level || 'read_write'} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, access_level: value }))} \n                disabled={!hasCrmAccess}\n              >\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                  <SelectItem value=\"read\">Read Only</SelectItem>\n                  <SelectItem value=\"read_write\">Read/Write</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n\n        {showInvite && canInviteDirect && employee && (\n          <EmployeeInviteDialog\n            open={showInvite}\n            onOpenChange={setShowInvite}\n            employee={employee}\n            currentUser={editorUser}\n            onDone={() => {\n              setShowInvite(false);\n              if (onSave) { onSave(); } // Changed from onSuccess?.()\n            }}\n          />\n        )}\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={handleClose} className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\">\n            {hasCrmAccess ? 'Cancel' : 'Close'}\n          </Button>\n          {hasCrmAccess && (\n            <Button onClick={handleSave} disabled={saving} className=\"bg-blue-600 hover:bg-blue-700\">\n              {saving ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Saving...\n                </>\n              ) : (\n                \"Save\"\n              )}\n            </Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\employees\\ResendInviteButton.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\leads\\BulkActionsMenu.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ChevronDown, UserCheck, Tag, Trash2 } from \"lucide-react\";\nimport LazyEmployeeSelector from \"../shared/LazyEmployeeSelector\";\n\nexport default function BulkActionsMenu({ \n  selectedCount, \n  onBulkStatusChange, \n  onBulkAssign,\n  onBulkDelete,\n  selectAllMode = false,\n  totalCount = 0\n}) {\n  const [showStatusDialog, setShowStatusDialog] = useState(false);\n  const [showAssignDialog, setShowAssignDialog] = useState(false);\n  const [newStatus, setNewStatus] = useState(\"\");\n  const [newAssignee, setNewAssignee] = useState(\"\");\n\n  const displayCount = selectAllMode ? totalCount : selectedCount;\n  const countLabel = selectAllMode ? `All ${displayCount}` : displayCount;\n\n  const handleStatusChange = () => {\n    if (newStatus) {\n      onBulkStatusChange(newStatus);\n      setShowStatusDialog(false);\n      setNewStatus(\"\");\n    }\n  };\n\n  const handleAssign = () => {\n    onBulkAssign(newAssignee);\n    setShowAssignDialog(false);\n    setNewAssignee(\"\");\n  };\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n            Bulk Actions ({countLabel})\n            <ChevronDown className=\"w-4 h-4 ml-2\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"bg-slate-800 border-slate-700\">\n          <DropdownMenuLabel className=\"text-slate-200\">\n            Actions for {selectAllMode ? `all ${displayCount}` : displayCount} lead(s)\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator className=\"bg-slate-700\" />\n          <DropdownMenuItem \n            onClick={() => setShowStatusDialog(true)}\n            className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n          >\n            <Tag className=\"w-4 h-4 mr-2\" />\n            Change Status\n          </DropdownMenuItem>\n          <DropdownMenuItem \n            onClick={() => setShowAssignDialog(true)}\n            className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n          >\n            <UserCheck className=\"w-4 h-4 mr-2\" />\n            Assign To\n          </DropdownMenuItem>\n          <DropdownMenuSeparator className=\"bg-slate-700\" />\n          <DropdownMenuItem \n            onClick={onBulkDelete}\n            className=\"text-red-400 hover:bg-red-900/20 cursor-pointer\"\n          >\n            <Trash2 className=\"w-4 h-4 mr-2\" />\n            Delete Selected\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Status Change Dialog */}\n      <Dialog open={showStatusDialog} onOpenChange={setShowStatusDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle>Change Status for {countLabel} Lead(s)</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Select a new status to apply to {selectAllMode ? 'all selected' : 'the selected'} leads.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"status\" className=\"text-slate-200\">New Status</Label>\n              <Select value={newStatus} onValueChange={setNewStatus}>\n                <SelectTrigger className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"Select status...\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"new\" className=\"text-slate-200 hover:bg-slate-700\">New</SelectItem>\n                  <SelectItem value=\"contacted\" className=\"text-slate-200 hover:bg-slate-700\">Contacted</SelectItem>\n                  <SelectItem value=\"qualified\" className=\"text-slate-200 hover:bg-slate-700\">Qualified</SelectItem>\n                  <SelectItem value=\"unqualified\" className=\"text-slate-200 hover:bg-slate-700\">Unqualified</SelectItem>\n                  <SelectItem value=\"converted\" className=\"text-slate-200 hover:bg-slate-700\">Converted</SelectItem>\n                  <SelectItem value=\"lost\" className=\"text-slate-200 hover:bg-slate-700\">Lost</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowStatusDialog(false)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button onClick={handleStatusChange} disabled={!newStatus} className=\"bg-blue-600 hover:bg-blue-700\">\n              Update Status\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Assignment Dialog */}\n      <Dialog open={showAssignDialog} onOpenChange={setShowAssignDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle>Assign {countLabel} Lead(s)</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Select an employee to assign {selectAllMode ? 'all selected' : 'the selected'} leads to.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"assignee\" className=\"text-slate-200\">Assign To</Label>\n              <LazyEmployeeSelector\n                value={newAssignee}\n                onValueChange={setNewAssignee}\n                placeholder=\"Select employee...\"\n                className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\"\n                contentClassName=\"bg-slate-800 border-slate-700\"\n                itemClassName=\"text-slate-200 hover:bg-slate-700\"\n                allowUnassigned={true}\n                showLoadingState={true}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAssignDialog(false)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button onClick={handleAssign} className=\"bg-blue-600 hover:bg-blue-700\">\n              Assign Leads\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\leads\\LeadCard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Mail, Phone, Building2, Edit, Trash2, MoreHorizontal, Eye, UserCheck, TrendingUp } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport PhoneDisplay from \"../shared/PhoneDisplay\";\nimport StatusHelper from \"../shared/StatusHelper\";\n\n// Matching the stat card colors - semi-transparent backgrounds\nconst statusColors = {\n  new: 'bg-blue-900/20 text-blue-300 border-blue-700',\n  contacted: 'bg-indigo-900/20 text-indigo-300 border-indigo-700',\n  qualified: 'bg-emerald-900/20 text-emerald-300 border-emerald-700',\n  unqualified: 'bg-yellow-900/20 text-yellow-300 border-yellow-700',\n  converted: 'bg-green-900/20 text-green-300 border-green-700',\n  lost: 'bg-red-900/20 text-red-300 border-red-700'\n};\n\nexport default function LeadCard({ lead, onEdit, onDelete, onViewDetails, onClick, isSelected, onSelect, onConvert, user }) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      transition={{ duration: 0.2 }}\n    >\n      <Card \n        className={`hover:shadow-lg transition-all duration-200 cursor-pointer bg-slate-800 border-slate-700 ${\n          isSelected ? 'ring-2 ring-blue-500' : ''\n        }`}\n        onClick={onClick}\n      >\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex justify-between items-start\">\n            <div className=\"flex items-center gap-3 flex-1\">\n              <Checkbox\n                checked={isSelected}\n                onCheckedChange={onSelect}\n                onClick={(e) => e.stopPropagation()}\n                className=\"border-slate-600 data-[state=checked]:bg-blue-600\"\n              />\n              <div className=\"flex-1\">\n                <h3 className=\"font-semibold text-lg text-slate-100\">\n                  {lead.first_name} {lead.last_name}\n                </h3>\n                {lead.company && (\n                  <p className=\"text-sm text-slate-400 flex items-center gap-1 mt-1\">\n                    <Building2 className=\"w-3 h-3\" />\n                    {lead.company}\n                  </p>\n                )}\n              </div>\n            </div>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-slate-400 hover:text-slate-200\" onClick={(e) => e.stopPropagation()}>\n                  <MoreHorizontal className=\"w-4 h-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                <DropdownMenuItem onClick={(e) => { e.stopPropagation(); onEdit(lead); }} className=\"hover:bg-slate-700\">\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={(e) => { e.stopPropagation(); onViewDetails(lead); }} className=\"hover:bg-slate-700\">\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  View Details\n                </DropdownMenuItem>\n                {onConvert && lead.status !== 'converted' && (\n                  <DropdownMenuItem onClick={(e) => { e.stopPropagation(); onConvert(lead); }} className=\"hover:bg-slate-700\">\n                    <UserCheck className=\"w-4 h-4 mr-2\" />\n                    Convert to Contact\n                  </DropdownMenuItem>\n                )}\n                <DropdownMenuItem onClick={(e) => { e.stopPropagation(); onDelete(lead.id); }} className=\"text-red-400 hover:bg-slate-700 focus:text-red-400\">\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"flex-grow space-y-4\">\n          <div className=\"space-y-2 text-sm\">\n            {lead.email && (\n              <div className=\"flex items-center gap-2 text-slate-300\">\n                <Mail className=\"w-4 h-4 text-slate-500\" />\n                <a href={`mailto:${lead.email}`} className=\"hover:text-blue-400\" onClick={(e) => e.stopPropagation()}>\n                  {lead.email}\n                </a>\n              </div>\n            )}\n            {lead.phone && (\n              <div className=\"flex items-center gap-2 text-slate-300\">\n                <Phone className=\"w-4 h-4 text-slate-500\" />\n                <div className=\"flex items-center gap-2 flex-wrap\">\n                  <PhoneDisplay\n                    user={user}\n                    phone={lead.phone}\n                    contactName={`${lead.first_name} ${lead.last_name}`}\n                    enableCalling={true}\n                    className=\"text-slate-300 hover:text-blue-400\"\n                  />\n                  {lead.do_not_call && (\n                    <Badge className=\"bg-red-900/30 text-red-400 border-red-700 text-xs px-1.5 py-0\">\n                      DNC\n                    </Badge>\n                  )}\n                  {lead.do_not_text && (\n                    <Badge className=\"bg-red-900/30 text-red-400 border-red-700 text-xs px-1.5 py-0\">\n                      DNT\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {lead.score !== null && lead.score !== undefined && (\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-4 h-4 text-slate-500\" />\n              <div className=\"flex-1\">\n                <div className=\"flex items-center justify-between mb-1\">\n                  <span className=\"text-xs text-slate-400\">Lead Score</span>\n                  <span className=\"text-xs font-semibold text-slate-200\">{lead.score}/100</span>\n                </div>\n                <div className=\"w-full bg-slate-700 rounded-full h-2\">\n                  <div\n                    className={`h-2 rounded-full transition-all ${\n                      lead.score >= 70 ? 'bg-green-600' :\n                      lead.score >= 40 ? 'bg-yellow-600' :\n                      'bg-red-600'\n                    }`}\n                    style={{ width: `${lead.score}%` }}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-between items-center pt-2 border-t border-slate-700\">\n            <div className=\"flex items-center gap-1\">\n              <Badge className={`${statusColors[lead.status]} capitalize text-xs font-semibold border`}>\n                {lead.status}\n              </Badge>\n              <StatusHelper statusKey={`lead_${lead.status}`} />\n            </div>\n            {lead.source && (\n              <span className=\"text-xs text-slate-500 capitalize\">{lead.source}</span>\n            )}\n          </div>\n        </CardContent>\n\n        <CardFooter className=\"flex justify-between items-center pt-4 border-t border-slate-700\">\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={(e) => { e.stopPropagation(); onEdit(lead); }}\n              className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n            >\n              <Edit className=\"w-3 h-3 mr-1\" />\n              Edit\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={(e) => { e.stopPropagation(); onViewDetails(lead); }}\n              className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n            >\n              <Eye className=\"w-3 h-3 mr-1\" />\n              View\n            </Button>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={(e) => { e.stopPropagation(); onDelete(lead.id); }}\n            className=\"text-red-400 hover:text-red-300 hover:bg-red-900/20\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </Button>\n        </CardFooter>\n      </Card>\n    </motion.div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\leads\\LeadConversionDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Badge"},"fix":{"range":[534,580],"text":""},"desc":"Remove unused variable 'Badge'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":335,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12891,12919],"text":"No Account / Don&apos;t associate"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12891,12919],"text":"No Account / Don&lsquo;t associate"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12891,12919],"text":"No Account / Don&#39;t associate"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12891,12919],"text":"No Account / Don&rsquo;t associate"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport { Contact, Account, Opportunity, Lead, User } from \"@/api/entities\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, UserPlus, Building2, Target, ArrowRight } from \"lucide-react\";\nimport { generateUniqueId } from \"@/api/functions\";\nimport { useApiManager } from \"../shared/ApiManager\";\n\nexport default function LeadConversionDialog({ lead, accounts, open, onConvert, onClose }) {\n  const [isConverting, setIsConverting] = useState(false);\n  const [createAccount, setCreateAccount] = useState(true);\n  const [selectedAccountId, setSelectedAccountId] = useState(\"\");\n  const [createOpportunity, setCreateOpportunity] = useState(false);\n  const [accountName, setAccountName] = useState(\"\");\n  const [opportunityName, setOpportunityName] = useState(\"\");\n  const [opportunityAmount, setOpportunityAmount] = useState(\"\");\n  const [currentUser, setCurrentUser] = useState(null);\n\n  const { cachedRequest } = useApiManager();\n\n  // Update state when lead data becomes available\n  React.useEffect(() => {\n    if (lead) {\n      // Set account name from lead company\n      setAccountName(lead.company || \"\");\n      \n      // Set opportunity name with proper null checking\n      const firstName = lead.first_name || \"\";\n      const lastName = lead.last_name || \"\";\n      const fullName = `${firstName} ${lastName}`.trim();\n      setOpportunityName(fullName ? `${fullName} - Opportunity` : \"New Opportunity\");\n      \n      // Set opportunity amount from lead estimated value\n      setOpportunityAmount(lead.estimated_value || \"\");\n    }\n  }, [lead]);\n\n  React.useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const user = await User.me();\n        setCurrentUser(user);\n      } catch (error) {\n        console.error(\"Failed to load current user:\", error);\n      }\n    };\n    loadUser();\n  }, []);\n\n  const handleConvert = async () => {\n    if (!currentUser?.tenant_id) {\n      alert(\"Cannot convert lead: Your account is not configured with a tenant.\");\n      return;\n    }\n\n    setIsConverting(true);\n    try {\n      let accountId = selectedAccountId;\n      \n      // Create or use existing account\n      if (createAccount && accountName.trim()) {\n        console.log(\"Creating new account:\", accountName);\n\n        const newAccountData = {\n          name: accountName,\n          tenant_id: currentUser.tenant_id,\n          type: \"prospect\",\n          phone: lead.phone || null,\n          address_1: lead.address_1 || null,\n          address_2: lead.address_2 || null,\n          city: lead.city || null,\n          state: lead.state || null,\n          zip: lead.zip || null,\n          country: lead.country || null,\n          assigned_to: lead.assigned_to || currentUser.email,\n        };\n\n        try {\n          const idResponse = await generateUniqueId({ entity_type: 'Account', tenant_id: currentUser.tenant_id });\n          if (idResponse.data?.unique_id) {\n            newAccountData.unique_id = idResponse.data.unique_id;\n            console.log(\"Generated unique_id for new account during conversion:\", newAccountData.unique_id);\n          }\n        } catch (error) {\n          console.warn(\"Failed to generate unique_id for account during conversion\", error);\n        }\n\n        const newAccount = await cachedRequest(\n          'Account',\n          'create',\n          { data: newAccountData },\n          () => Account.create(newAccountData)\n        );\n        accountId = newAccount.id;\n      } else if (!createAccount && selectedAccountId) {\n        accountId = selectedAccountId;\n        console.log(\"Using existing account:\", accountId);\n      } else if (createAccount && !accountName.trim()) {\n        throw new Error(\"Account name is required to create a new account.\");\n      }\n\n      // Create contact from lead\n      console.log(\"Creating contact from lead\");\n      const newContact = await cachedRequest(\n        'Contact',\n        'create',\n        {\n          data: {\n            tenant_id: currentUser.tenant_id,\n            first_name: lead.first_name,\n            last_name: lead.last_name,\n            email: lead.email,\n            phone: lead.phone || null,\n            job_title: lead.job_title || null,\n            account_id: accountId || null,\n            lead_source: lead.source || \"other\",\n            status: \"prospect\",\n            address_1: lead.address_1 || null,\n            address_2: lead.address_2 || null,\n            city: lead.city || null,\n            state: lead.state || null,\n            zip: lead.zip || null,\n            country: lead.country || null,\n            notes: lead.notes || null,\n            score: lead.score || 50,\n            score_reason: lead.score_reason || \"Converted from lead\",\n            ai_action: \"follow_up\",\n            last_contacted: new Date().toISOString().split('T')[0],\n            next_action: \"Initial contact as converted lead\",\n            assigned_to: lead.assigned_to || currentUser.email,\n          }\n        },\n        () => Contact.create({\n          tenant_id: currentUser.tenant_id,\n          first_name: lead.first_name,\n          last_name: lead.last_name,\n          email: lead.email,\n          phone: lead.phone || null,\n          job_title: lead.job_title || null,\n          account_id: accountId || null,\n          lead_source: lead.source || \"other\",\n          status: \"prospect\",\n          address_1: lead.address_1 || null,\n          address_2: lead.address_2 || null,\n          city: lead.city || null,\n          state: lead.state || null,\n          zip: lead.zip || null,\n          country: lead.country || null,\n          notes: lead.notes || null,\n          score: lead.score || 50,\n          score_reason: lead.score_reason || \"Converted from lead\",\n          ai_action: \"follow_up\",\n          last_contacted: new Date().toISOString().split('T')[0],\n          next_action: \"Initial contact as converted lead\",\n          assigned_to: lead.assigned_to || currentUser.email,\n        })\n      );\n\n      // Create opportunity if requested\n      let opportunityId = null;\n      if (createOpportunity && opportunityName.trim()) {\n        console.log(\"Creating opportunity\");\n        const newOpportunity = await cachedRequest(\n          'Opportunity',\n          'create',\n          {\n            data: {\n              tenant_id: currentUser.tenant_id,\n              name: opportunityName,\n              account_id: accountId || null,\n              contact_id: newContact.id,\n              stage: \"prospecting\",\n              amount: parseFloat(opportunityAmount) || 0,\n              probability: 25,\n              lead_source: lead.source || \"other\",\n              assigned_to: lead.assigned_to || currentUser.email,\n              close_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days from now\n              type: \"new_business\",\n            }\n          },\n          () => Opportunity.create({\n            tenant_id: currentUser.tenant_id,\n            name: opportunityName,\n            account_id: accountId || null,\n            contact_id: newContact.id,\n            stage: \"prospecting\",\n            amount: parseFloat(opportunityAmount) || 0,\n            probability: 25,\n            lead_source: lead.source || \"other\",\n            assigned_to: lead.assigned_to || currentUser.email,\n            close_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n            type: \"new_business\",\n          })\n        );\n        opportunityId = newOpportunity.id;\n      }\n\n      // Update lead as converted\n      console.log(\"Updating lead status to converted\");\n      await cachedRequest(\n        'Lead',\n        'update',\n        { id: lead.id, data: { status: \"converted\", converted_contact_id: newContact.id, converted_account_id: accountId } },\n        () => Lead.update(lead.id, { status: \"converted\", converted_contact_id: newContact.id, converted_account_id: accountId })\n      );\n\n      console.log(\"Lead conversion completed successfully\");\n      \n      if (cachedRequest.invalidate) {\n        cachedRequest.invalidate('Lead', 'filter');\n        cachedRequest.invalidate('Lead', 'get');\n        cachedRequest.invalidate('Contact', 'filter');\n        cachedRequest.invalidate('Account', 'filter');\n        cachedRequest.invalidate('Opportunity', 'filter');\n      }\n\n      // Call the parent's onConvert callback\n      await onConvert({\n        leadId: lead.id,\n        contact: newContact,\n        accountId,\n        opportunityId,\n      });\n      \n      onClose();\n      \n    } catch (error) {\n      console.error(\"Detailed conversion error:\", error);\n      alert(`Failed to convert lead: ${error.message || \"Unknown error\"}. Please try again.`);\n    } finally {\n      setIsConverting(false);\n    }\n  };\n\n  if (!lead) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <UserPlus className=\"w-5 h-5 text-green-600\" />\n            Convert Lead: {lead.first_name || \"\"} {lead.last_name || \"\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          <div className=\"p-4 bg-blue-50 rounded-lg\">\n            <h3 className=\"font-semibold text-blue-900 mb-2\">Conversion Summary</h3>\n            <div className=\"flex items-center gap-4 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <UserPlus className=\"w-4 h-4 text-green-600\" />\n                <span>Lead ΓåÆ Contact</span>\n              </div>\n              <ArrowRight className=\"w-4 h-4 text-slate-400\" />\n              {(createAccount || selectedAccountId) ? ( // Account will be created or selected\n                <>\n                  <div className=\"flex items-center gap-2\">\n                    <Building2 className=\"w-4 h-4 text-blue-600\" />\n                    <span>{createAccount ? \"New Account\" : \"Existing Account\"}</span>\n                  </div>\n                  <ArrowRight className=\"w-4 h-4 text-slate-400\" />\n                </>\n              ) : null}\n              {createOpportunity && (\n                <div className=\"flex items-center gap-2\">\n                  <Target className=\"w-4 h-4 text-purple-600\" />\n                  <span>New Opportunity</span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Account Creation Section */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"createAccount\"\n                checked={createAccount}\n                onCheckedChange={(checked) => {\n                  setCreateAccount(checked);\n                  // Reset selected account ID if switching to create new\n                  if (checked) setSelectedAccountId(\"\");\n                  // If switching to use existing, clear account name\n                  else setAccountName(\"\");\n                }}\n              />\n              <Label htmlFor=\"createAccount\" className=\"text-sm font-medium\">\n                Create new Account\n              </Label>\n            </div>\n\n            {createAccount ? (\n              <div>\n                <Label htmlFor=\"accountName\">Account Name *</Label>\n                <Input\n                  id=\"accountName\"\n                  value={accountName}\n                  onChange={(e) => setAccountName(e.target.value)}\n                  placeholder=\"Company name\"\n                  required\n                />\n              </div>\n            ) : (\n              <div>\n                <Label htmlFor=\"existingAccount\">Select Existing Account</Label>\n                <Select value={selectedAccountId} onValueChange={setSelectedAccountId}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select an account...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {accounts.length > 0 ? (\n                      accounts.map((account) => (\n                        <SelectItem key={account.id} value={account.id}>\n                          {account.name}\n                        </SelectItem>\n                      ))\n                    ) : (\n                      <SelectItem value={null} disabled>\n                        No accounts available\n                      </SelectItem>\n                    )}\n                    <SelectItem value={null}>No Account / Don't associate</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n\n          {/* Opportunity Creation Section */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"createOpportunity\"\n                checked={createOpportunity}\n                onCheckedChange={setCreateOpportunity}\n              />\n              <Label htmlFor=\"createOpportunity\" className=\"text-sm font-medium\">\n                Create Opportunity\n              </Label>\n            </div>\n\n            {createOpportunity && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"opportunityName\">Opportunity Name *</Label>\n                  <Input\n                    id=\"opportunityName\"\n                    value={opportunityName}\n                    onChange={(e) => setOpportunityName(e.target.value)}\n                    placeholder=\"Opportunity title\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"opportunityAmount\">Estimated Value ($)</Label>\n                  <Input\n                    id=\"opportunityAmount\"\n                    type=\"number\"\n                    value={opportunityAmount}\n                    onChange={(e) => setOpportunityAmount(e.target.value)}\n                    placeholder=\"0\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose} disabled={isConverting}>\n            Cancel\n          </Button>\n          <Button \n            onClick={handleConvert} \n            disabled={isConverting || (createAccount && !accountName.trim()) || (!createAccount && !selectedAccountId && createOpportunity)}\n            className=\"bg-green-600 hover:bg-green-700\"\n          >\n            {isConverting ? (\n              <>\n                <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n                Converting...\n              </>\n            ) : (\n              <>\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                Convert Lead\n              </>\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\leads\\LeadDetailPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport UniversalDetailPanel from \"../shared/UniversalDetailPanel\";\nimport { Button } from \"@/components/ui/button\";\nimport { UserCheck } from \"lucide-react\";\n\nexport default function LeadDetailPanel({\n  lead,\n  assignedUserName,\n  open,\n  onOpenChange,\n  onEdit,\n  onDelete,\n  onConvert,\n  user\n}) {\n  if (!lead) {\n    return null;\n  }\n\n  const customActions = lead.status !== 'converted' ? [\n    <Button\n      key=\"convert\"\n      onClick={() => onConvert(lead)}\n      className=\"bg-green-600 hover:bg-green-700 text-white\"\n    >\n      <UserCheck className=\"w-4 h-4 mr-2\" />\n      Convert to Contact\n    </Button>\n  ] : [];\n\n  return (\n    <UniversalDetailPanel\n      entity={lead}\n      entityType=\"lead\"\n      open={open}\n      onOpenChange={onOpenChange}\n      onEdit={onEdit}\n      onDelete={onDelete}\n      user={user}\n      displayData={{\n        \"Assigned To\": (\n          <p className=\"text-slate-200 font-medium mt-1\">\n            {assignedUserName || 'Unassigned'}\n          </p>\n        )\n      }}\n      customActions={customActions}\n      showNotes={true}\n    />\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\leads\\LeadForm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\notifications\\NotificationPanel.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\opportunities\\BulkActionsMenu.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ChevronDown, UserCheck, Tag, Trash2 } from \"lucide-react\";\nimport LazyEmployeeSelector from \"../shared/LazyEmployeeSelector\";\n\nexport default function BulkActionsMenu({ \n  selectedCount, \n  onBulkStageChange, \n  onBulkAssign,\n  onBulkDelete,\n  selectAllMode = false,\n  totalCount = 0\n}) {\n  const [showStageDialog, setShowStageDialog] = useState(false);\n  const [showAssignDialog, setShowAssignDialog] = useState(false);\n  const [newStage, setNewStage] = useState(\"\");\n  const [newAssignee, setNewAssignee] = useState(\"\");\n\n  const displayCount = selectAllMode ? totalCount : selectedCount;\n  const countLabel = selectAllMode ? `All ${displayCount}` : displayCount;\n\n  const handleStageChange = () => {\n    if (newStage) {\n      onBulkStageChange(newStage);\n      setShowStageDialog(false);\n      setNewStage(\"\");\n    }\n  };\n\n  const handleAssign = () => {\n    onBulkAssign(newAssignee);\n    setShowAssignDialog(false);\n    setNewAssignee(\"\");\n  };\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n            Bulk Actions ({countLabel})\n            <ChevronDown className=\"w-4 h-4 ml-2\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"bg-slate-800 border-slate-700\">\n          <DropdownMenuLabel className=\"text-slate-200\">\n            Actions for {selectAllMode ? `all ${displayCount}` : displayCount} opportunity/opportunities\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator className=\"bg-slate-700\" />\n          <DropdownMenuItem \n            onClick={() => setShowStageDialog(true)}\n            className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n          >\n            <Tag className=\"w-4 h-4 mr-2\" />\n            Change Stage\n          </DropdownMenuItem>\n          <DropdownMenuItem \n            onClick={() => setShowAssignDialog(true)}\n            className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n          >\n            <UserCheck className=\"w-4 h-4 mr-2\" />\n            Assign To\n          </DropdownMenuItem>\n          <DropdownMenuSeparator className=\"bg-slate-700\" />\n          <DropdownMenuItem \n            onClick={onBulkDelete}\n            className=\"text-red-400 hover:bg-red-900/20 cursor-pointer\"\n          >\n            <Trash2 className=\"w-4 h-4 mr-2\" />\n            Delete Selected\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Stage Change Dialog */}\n      <Dialog open={showStageDialog} onOpenChange={setShowStageDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle>Change Stage for {countLabel} Opportunity/Opportunities</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Select a new stage to apply to {selectAllMode ? 'all selected' : 'the selected'} opportunities.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"stage\" className=\"text-slate-200\">New Stage</Label>\n              <Select value={newStage} onValueChange={setNewStage}>\n                <SelectTrigger className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"Select stage...\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"prospecting\" className=\"text-slate-200 hover:bg-slate-700\">Prospecting</SelectItem>\n                  <SelectItem value=\"qualification\" className=\"text-slate-200 hover:bg-slate-700\">Qualification</SelectItem>\n                  <SelectItem value=\"proposal\" className=\"text-slate-200 hover:bg-slate-700\">Proposal</SelectItem>\n                  <SelectItem value=\"negotiation\" className=\"text-slate-200 hover:bg-slate-700\">Negotiation</SelectItem>\n                  <SelectItem value=\"closed_won\" className=\"text-slate-200 hover:bg-slate-700\">Closed Won</SelectItem>\n                  <SelectItem value=\"closed_lost\" className=\"text-slate-200 hover:bg-slate-700\">Closed Lost</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowStageDialog(false)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button onClick={handleStageChange} disabled={!newStage} className=\"bg-blue-600 hover:bg-blue-700\">\n              Update Stage\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Assignment Dialog */}\n      <Dialog open={showAssignDialog} onOpenChange={setShowAssignDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle>Assign {countLabel} Opportunity/Opportunities</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Select an employee to assign {selectAllMode ? 'all selected' : 'the selected'} opportunities to.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"assignee\" className=\"text-slate-200\">Assign To</Label>\n              <LazyEmployeeSelector\n                value={newAssignee}\n                onValueChange={setNewAssignee}\n                placeholder=\"Select employee...\"\n                className=\"mt-2 bg-slate-700 border-slate-600 text-slate-200\"\n                contentClassName=\"bg-slate-800 border-slate-700\"\n                itemClassName=\"text-slate-200 hover:bg-slate-700\"\n                allowUnassigned={true}\n                showLoadingState={true}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAssignDialog(false)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button onClick={handleAssign} className=\"bg-blue-600 hover:bg-blue-700\">\n              Assign Opportunities\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\opportunities\\OpportunityCard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { DollarSign, Calendar, TrendingUp, MoreHorizontal, Edit, Trash2, Eye } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\n// Matching the stat card colors from Opportunities page - semi-transparent backgrounds\nconst stageColors = {\n  prospecting: \"bg-blue-900/20 text-blue-300 border-blue-700\",\n  qualification: \"bg-indigo-900/20 text-indigo-300 border-indigo-700\",\n  proposal: \"bg-purple-900/20 text-purple-300 border-purple-700\",\n  negotiation: \"bg-yellow-900/20 text-yellow-300 border-yellow-700\",\n  closed_won: \"bg-emerald-900/20 text-emerald-300 border-emerald-700\",\n  closed_lost: \"bg-red-900/20 text-red-300 border-red-700\"\n};\n\nconst stageLabels = {\n  prospecting: \"Prospecting\",\n  qualification: \"Qualification\",\n  proposal: \"Proposal\",\n  negotiation: \"Negotiation\",\n  closed_won: \"Closed Won\",\n  closed_lost: \"Closed Lost\"\n};\n\nexport default function OpportunityCard({\n  opportunity,\n  accountName,\n  contactName,\n  assignedUserName,\n  onEdit,\n  onDelete,\n  onViewDetails,\n  isSelected,\n  onSelect\n}) {\n  const formattedAmount = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(opportunity.amount || 0);\n\n  const closeDate = opportunity.close_date ? format(new Date(opportunity.close_date), 'MMM d, yyyy') : 'Not set';\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700 hover:shadow-lg transition-all duration-200\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-3\">\n          <div className=\"flex items-start gap-3 flex-1 min-w-0\">\n            <Checkbox\n              checked={isSelected}\n              onCheckedChange={onSelect}\n              className=\"mt-1 border-slate-600 data-[state=checked]:bg-blue-600 flex-shrink-0\"\n            />\n            <div className=\"flex-1 min-w-0\">\n              {/* Stage Badge - Prominent at top with matching colors */}\n              <Badge className={`${stageColors[opportunity.stage]} capitalize text-xs font-semibold mb-2 border`}>\n                {stageLabels[opportunity.stage] || opportunity.stage?.replace(/_/g, ' ')}\n              </Badge>\n              \n              <h3 \n                className=\"font-semibold text-slate-100 mb-1 cursor-pointer hover:text-blue-400 transition-colors break-words line-clamp-2\"\n                onClick={onViewDetails}\n              >\n                {opportunity.name}\n              </h3>\n              {accountName && (\n                <p className=\"text-sm text-slate-400 break-words line-clamp-1\">{accountName}</p>\n              )}\n            </div>\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-slate-400 hover:text-slate-200 hover:bg-slate-700 flex-shrink-0\">\n                <MoreHorizontal className=\"w-4 h-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"bg-slate-800 border-slate-700 text-slate-200\">\n              <DropdownMenuItem onClick={onEdit} className=\"hover:bg-slate-700\">\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Edit\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={onViewDetails} className=\"hover:bg-slate-700\">\n                <Eye className=\"w-4 h-4 mr-2\" />\n                View Details\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={onDelete} className=\"text-red-400 hover:bg-slate-700 focus:text-red-400\">\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Delete\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <DollarSign className=\"w-4 h-4 text-green-400 flex-shrink-0\" />\n            <span className=\"text-xl font-bold text-green-400\">{formattedAmount}</span>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-3 text-sm\">\n          <div className=\"flex items-center gap-2 text-slate-400\">\n            <TrendingUp className=\"w-4 h-4 flex-shrink-0\" />\n            <span>{opportunity.probability || 0}%</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-slate-400\">\n            <Calendar className=\"w-4 h-4 flex-shrink-0\" />\n            <span className=\"truncate\">{closeDate}</span>\n          </div>\n        </div>\n\n        {contactName && (\n          <div className=\"text-sm text-slate-400 pt-2 border-t border-slate-700 break-words\">\n            Contact: {contactName}\n          </div>\n        )}\n\n        {assignedUserName && (\n          <div className=\"text-sm text-slate-400 break-words\">\n            Assigned: {assignedUserName}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\opportunities\\OpportunityDetailPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Alert' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[239,245],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDescription' is defined but never used.","line":6,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"AlertDescription"},"fix":{"range":[244,262],"text":""},"desc":"Remove unused variable 'AlertDescription'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertTitle' is defined but never used.","line":6,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"AlertTitle"},"fix":{"range":[262,274],"text":""},"desc":"Remove unused variable 'AlertTitle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle2' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle2"},"fix":{"range":[498,514],"text":""},"desc":"Remove unused variable 'CheckCircle2'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[537,551],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'MoreHorizontal' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"MoreHorizontal"},"fix":{"range":[551,569],"text":""},"desc":"Remove unused variable 'MoreHorizontal'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"AlertCircle"},"fix":{"range":[701,716],"text":""},"desc":"Remove unused variable 'AlertCircle'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Calendar as CalendarIcon,\n  CheckCircle2,\n  X,\n  Edit,\n  Trash2,\n  TrendingUp,\n  MoreHorizontal,\n  Loader2,\n  Building2,\n  User,\n  Users,\n  Phone,\n  Mail,\n  CheckCircle,\n  FileText,\n  Presentation,\n  ExternalLink,\n  ChevronDown,\n  AlertCircle,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { toast } from \"sonner\";\nimport { Activity } from \"@/api/entities\";\nimport { createPageUrl } from \"@/utils\";\nimport { Link } from \"react-router-dom\";\nimport StatusHelper from \"../shared/StatusHelper\"; // New import\n\nexport default function OpportunityDetailPanel({\n  opportunity,\n  accounts,\n  contacts,\n  users,\n  leads,\n  onClose,\n  onEdit,\n  onDelete,\n  onStageChange,\n}) {\n  const [localOpportunity, setLocalOpportunity] = useState(opportunity);\n  const [relatedActivities, setRelatedActivities] = useState([]);\n  const [loadingActivities, setLoadingActivities] = useState(false);\n  const [creatingActivity, setCreatingActivity] = useState(false);\n\n  // Update localOpportunity when the prop changes\n  useEffect(() => {\n    setLocalOpportunity(opportunity);\n  }, [opportunity]);\n\n  // Load related activities\n  useEffect(() => {\n    const loadActivities = async () => {\n      if (!localOpportunity?.id) return;\n\n      setLoadingActivities(true);\n      try {\n        const allActivities = await Activity.list();\n        const filtered = allActivities.filter(\n          (a) => a.related_to === \"opportunity\" && a.related_id === localOpportunity.id\n        );\n        // Sort by due date descending (most recent first). Null due_dates come last.\n        filtered.sort((a, b) => {\n          const dateA = a.due_date ? new Date(a.due_date).getTime() : -Infinity;\n          const dateB = b.due_date ? new Date(b.due_date).getTime() : -Infinity;\n\n          if (dateA === -Infinity && dateB === -Infinity) {\n            return 0;\n          }\n          if (dateA === -Infinity) return 1;\n          if (dateB === -Infinity) return -1;\n\n          return dateB - dateA;\n        });\n        setRelatedActivities(filtered);\n      } catch (error) {\n        console.error(\"Failed to load activities:\", error);\n        setRelatedActivities([]);\n      } finally {\n        setLoadingActivities(false);\n      }\n    };\n    loadActivities();\n  }, [localOpportunity?.id]);\n\n  // Helper function to get Account Name\n  const getAccountName = () =>\n    accounts?.find((acc) => acc.id === localOpportunity.account_id)?.name || \"N/A\";\n  \n  // Helper function to get Contact Name\n  const getContactName = () =>\n    contacts?.find((con) => con.id === localOpportunity.contact_id)?.name || \"N/A\";\n  \n  // Helper function to get Lead Name\n  const getLeadName = () =>\n    leads?.find((lead) => lead.id === localOpportunity.lead_id)?.name || \"N/A\";\n  \n  // Helper function to get Assigned To Name\n  const getAssignedToName = () =>\n    users?.find((u) => u.id === localOpportunity.assigned_to)?.name || \"N/A\";\n\n  const handleStageUpdate = async (newStage) => {\n    if (onStageChange) {\n      const updatedOpportunity = await onStageChange(localOpportunity.id, newStage);\n      if (updatedOpportunity) {\n        setLocalOpportunity(updatedOpportunity);\n        toast.success(`Opportunity stage updated to ${newStage.replace(/_/g, \" \")}`);\n      }\n    }\n  };\n\n  const handleDelete = async () => {\n    if (onDelete) {\n      await onDelete(localOpportunity.id);\n      onClose();\n    }\n  };\n\n  // Helper for stage badge colors\n  const getStageColor = (stage) => {\n    switch (stage) {\n      case \"prospecting\":\n        return \"bg-blue-600\";\n      case \"qualification\":\n        return \"bg-indigo-600\";\n      case \"proposal\":\n        return \"bg-purple-600\";\n      case \"negotiation\":\n        return \"bg-yellow-600\";\n      case \"closed_won\":\n        return \"bg-green-600\";\n      case \"closed_lost\":\n        return \"bg-red-600\";\n      default:\n        return \"bg-gray-600\";\n    }\n  };\n\n  const handleCreateActivity = async () => {\n    if (!localOpportunity?.id) return;\n\n    setCreatingActivity(true);\n    try {\n      const dueDate = new Date();\n      dueDate.setDate(dueDate.getDate() + 2);\n      const dueDateStr = dueDate.toISOString().split(\"T\")[0];\n\n      const activityPayload = {\n        type: \"call\",\n        subject: `Follow up: ${localOpportunity.name}`,\n        description:\n          `Follow up on opportunity for ${getAccountName() || \"Unknown Account\"}\\n` +\n          `Amount: $${(localOpportunity.amount || 0).toLocaleString()}\\n` +\n          `Stage: ${localOpportunity.stage?.replace(/_/g, \" \")}`,\n        status: \"scheduled\",\n        priority: \"normal\",\n        related_to: \"opportunity\",\n        related_id: localOpportunity.id,\n        related_name: localOpportunity.name,\n        due_date: dueDateStr,\n        tenant_id: localOpportunity.tenant_id,\n        assigned_to: localOpportunity.assigned_to,\n        is_test_data: false,\n      };\n\n      console.log(\"[OpportunityDetail] Creating activity with payload:\", activityPayload);\n\n      const newActivity = await Activity.create(activityPayload);\n\n      console.log(\"[OpportunityDetail] Activity created:\", newActivity);\n\n      toast.success(\"Activity created successfully!\");\n\n      // Reload activities\n      const allActivities = await Activity.list();\n      const filtered = allActivities.filter(\n        (a) => a.related_to === \"opportunity\" && a.related_id === localOpportunity.id\n      );\n      filtered.sort((a, b) => {\n        const dateA = a.due_date ? new Date(a.due_date).getTime() : -Infinity;\n        const dateB = b.due_date ? new Date(b.due_date).getTime() : -Infinity;\n        if (dateA === -Infinity && dateB === -Infinity) return 0;\n        if (dateA === -Infinity) return 1;\n        if (dateB === -Infinity) return -1;\n        return dateB - dateA;\n      });\n      setRelatedActivities(filtered);\n\n      // Navigate to the activity\n      setTimeout(() => {\n        window.location.href = createPageUrl(`Activities?id=${newActivity.id}`);\n      }, 500);\n    } catch (error) {\n      console.error(\"Failed to create activity:\", error);\n      toast.error(`Failed to create activity: ${error.message || \"Unknown error\"}`);\n    } finally {\n      setCreatingActivity(false);\n    }\n  };\n\n  const getActivityStatusColor = (status) => {\n    const colors = {\n      scheduled: \"bg-blue-100 text-blue-800 border-blue-200\",\n      overdue: \"bg-red-100 text-red-800 border-red-200\",\n      completed: \"bg-green-100 text-green-800 border-green-200\",\n      cancelled: \"bg-gray-100 text-gray-800 border-gray-200\",\n      \"in-progress\": \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n    };\n    return colors[status] || \"bg-gray-100 text-gray-800 border-gray-200\";\n  };\n\n  const getActivityTypeIcon = (type) => {\n    const icons = {\n      call: Phone,\n      email: Mail,\n      meeting: Users,\n      task: CheckCircle,\n      note: FileText,\n      demo: Presentation,\n      proposal: FileText,\n    };\n    return icons[type] || CalendarIcon;\n  };\n\n  if (!localOpportunity) return null;\n\n  return (\n    <div className=\"fixed inset-y-0 right-0 w-full md:w-2/3 lg:w-1/2 bg-slate-800 shadow-2xl z-50 overflow-y-auto border-l border-slate-700\">\n      {/* Header */}\n      <div className=\"sticky top-0 bg-slate-800 border-b border-slate-700 p-6 z-10\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex-1\">\n            <h2 className=\"text-2xl font-bold text-slate-100 mb-2\">{localOpportunity.name}</h2>\n            <div className=\"flex flex-wrap items-center gap-2\">\n              <div className=\"flex items-center gap-1\">\n                <Badge className={`${getStageColor(localOpportunity.stage)} !text-white`}>\n                  {localOpportunity.stage?.replace(/_/g, \" \")}\n                </Badge>\n                <StatusHelper statusKey={`opp_${localOpportunity.stage}`} />\n              </div>\n              {localOpportunity.type && (\n                <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n                  {localOpportunity.type?.replace(/_/g, \" \")}\n                </Badge>\n              )}\n              {localOpportunity.lead_source && (\n                <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n                  {localOpportunity.lead_source}\n                </Badge>\n              )}\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"text-slate-400 hover:text-slate-300 hover:bg-slate-700\"\n            aria-label=\"Close Panel\"\n          >\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-wrap gap-2\">\n          <Button\n            onClick={handleCreateActivity}\n            disabled={creatingActivity}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n            size=\"sm\"\n          >\n            {creatingActivity ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Creating...\n              </>\n            ) : (\n              <>\n                <CalendarIcon className=\"w-4 h-4 mr-2\" />\n                Create Activity\n              </>\n            )}\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onEdit(localOpportunity)}\n            className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n          >\n            <Edit className=\"w-4 h-4 mr-2\" />\n            Edit\n          </Button>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n              >\n                Change Stage\n                <ChevronDown className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n              <DropdownMenuItem\n                onClick={() => handleStageUpdate(\"prospecting\")}\n                className=\"hover:bg-slate-700\"\n              >\n                Prospecting\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                onClick={() => handleStageUpdate(\"qualification\")}\n                className=\"hover:bg-slate-700\"\n              >\n                Qualification\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                onClick={() => handleStageUpdate(\"proposal\")}\n                className=\"hover:bg-slate-700\"\n              >\n                Proposal\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                onClick={() => handleStageUpdate(\"negotiation\")}\n                className=\"hover:bg-slate-700\"\n              >\n                Negotiation\n              </DropdownMenuItem>\n              <DropdownMenuSeparator className=\"bg-slate-700\" />\n              <DropdownMenuItem\n                onClick={() => handleStageUpdate(\"closed_won\")}\n                className=\"hover:bg-slate-700\"\n              >\n                Closed Won\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                onClick={() => handleStageUpdate(\"closed_lost\")}\n                className=\"hover:bg-slate-700\"\n              >\n                Closed Lost\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleDelete}\n            className=\"border-red-600 text-red-400 hover:bg-red-900/30\"\n          >\n            <Trash2 className=\"w-4 h-4 mr-2\" />\n            Delete\n          </Button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-6 space-y-6\">\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <Card className=\"bg-slate-700/50 border-slate-600\">\n            <CardContent className=\"p-4\">\n              <p className=\"text-xs text-slate-400 mb-1\">Amount</p>\n              <p className=\"text-2xl font-bold text-slate-100\">\n                ${(localOpportunity.amount || 0).toLocaleString()}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-700/50 border-slate-600\">\n            <CardContent className=\"p-4\">\n              <p className=\"text-xs text-slate-400 mb-1\">Close Date</p>\n              <p className=\"text-lg font-semibold text-slate-100\">\n                {localOpportunity.close_date\n                  ? format(new Date(localOpportunity.close_date), \"MMM d, yyyy\")\n                  : \"Not set\"}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-700/50 border-slate-600\">\n            <CardContent className=\"p-4\">\n              <p className=\"text-xs text-slate-400 mb-1\">Probability</p>\n              <p className=\"text-2xl font-bold text-slate-100\">\n                {localOpportunity.probability || 0}%\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Relationships */}\n        <Card className=\"bg-slate-700/50 border-slate-600\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-200\">Relationships</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-start gap-3\">\n              <Building2 className=\"w-4 h-4 text-slate-400 mt-0.5\" />\n              <div>\n                <p className=\"text-xs text-slate-400\">Account</p>\n                <p className=\"text-sm text-slate-200\">{getAccountName()}</p>\n              </div>\n            </div>\n\n            {localOpportunity.contact_id && (\n              <div className=\"flex items-start gap-3\">\n                <User className=\"w-4 h-4 text-slate-400 mt-0.5\" />\n                <div>\n                  <p className=\"text-xs text-slate-400\">Primary Contact</p>\n                  <p className=\"text-sm text-slate-200\">{getContactName()}</p>\n                </div>\n              </div>\n            )}\n\n            {localOpportunity.lead_id && (\n              <div className=\"flex items-start gap-3\">\n                <Users className=\"w-4 h-4 text-slate-400 mt-0.5\" />\n                <div>\n                  <p className=\"text-xs text-slate-400\">Related Lead</p>\n                  <p className=\"text-sm text-slate-200\">{getLeadName()}</p>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex items-start gap-3\">\n              <User className=\"w-4 h-4 text-slate-400 mt-0.5\" />\n              <div>\n                <p className=\"text-xs text-slate-400\">Assigned To</p>\n                <p className=\"text-sm text-slate-200\">{getAssignedToName()}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Related Activities */}\n        <Card className=\"bg-slate-700/50 border-slate-600\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-slate-200 flex items-center gap-2\">\n                <CalendarIcon className=\"w-5 h-5 text-blue-400\" />\n                Activities ({relatedActivities.length})\n              </CardTitle>\n              {loadingActivities && (\n                <Loader2 className=\"w-4 h-4 animate-spin text-blue-400\" />\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            {loadingActivities && relatedActivities.length === 0 ? (\n              <div className=\"text-center py-8 text-slate-400\">\n                <Loader2 className=\"w-8 h-8 mx-auto mb-3 animate-spin text-blue-400\" />\n                <p className=\"text-sm\">Loading activities...</p>\n              </div>\n            ) : relatedActivities.length === 0 ? (\n              <div className=\"text-center py-8 text-slate-400\">\n                <CalendarIcon className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p className=\"text-sm\">No activities yet</p>\n                <p className=\"text-xs mt-1\">Create an activity to track follow-ups</p>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {relatedActivities.map((activity) => {\n                  const ActivityIcon = getActivityTypeIcon(activity.type);\n                  return (\n                    <Link\n                      key={activity.id}\n                      to={createPageUrl(`Activities?id=${activity.id}`)}\n                      className=\"block\"\n                    >\n                      <div className=\"p-3 bg-slate-800 border border-slate-600 rounded-lg hover:border-blue-500 transition-colors cursor-pointer\">\n                        <div className=\"flex items-start gap-3\">\n                          <ActivityIcon className=\"w-4 h-4 text-slate-400 mt-1\" />\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center justify-between gap-2\">\n                              <p className=\"text-sm font-medium text-slate-200 truncate\">\n                                {activity.subject}\n                              </p>\n                              <Badge\n                                className={`${getActivityStatusColor(\n                                  activity.status\n                                )} text-xs flex-shrink-0`}\n                              >\n                                {activity.status}\n                              </Badge>\n                            </div>\n                            <div className=\"flex items-center gap-3 mt-1 text-xs text-slate-400\">\n                              <span className=\"capitalize\">{activity.type}</span>\n                              {activity.due_date && (\n                                <>\n                                  <span>ΓÇó</span>\n                                  <span>\n                                    {format(new Date(activity.due_date), \"MMM d, yyyy\")}\n                                  </span>\n                                </>\n                              )}\n                            </div>\n                          </div>\n                          <ExternalLink className=\"w-4 h-4 text-slate-400 flex-shrink-0\" />\n                        </div>\n                      </div>\n                    </Link>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Description */}\n        {localOpportunity.description && (\n          <Card className=\"bg-slate-700/50 border-slate-600\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-200\">Description</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-slate-300 whitespace-pre-wrap\">\n                {localOpportunity.description}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Additional Details */}\n        <Card className=\"bg-slate-700/50 border-slate-600\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-200\">Additional Details</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {localOpportunity.next_step && (\n              <div>\n                <p className=\"text-xs text-slate-400 mb-1\">Next Step</p>\n                <p className=\"text-sm text-slate-200\">{localOpportunity.next_step}</p>\n              </div>\n            )}\n\n            {localOpportunity.competitor && (\n              <div>\n                <p className=\"text-xs text-slate-400 mb-1\">Competitor</p>\n                <p className=\"text-sm text-slate-200\">{localOpportunity.competitor}</p>\n              </div>\n            )}\n\n            {localOpportunity.tags && localOpportunity.tags.length > 0 && (\n              <div>\n                <p className=\"text-xs text-slate-400 mb-2\">Tags</p>\n                <div className=\"flex flex-wrap gap-1\">\n                  {localOpportunity.tags.map((tag, idx) => (\n                    <Badge\n                      key={idx}\n                      variant=\"outline\"\n                      className=\"border-slate-600 text-slate-300 text-xs\"\n                    >\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Metadata */}\n        <Card className=\"bg-slate-700/50 border-slate-600\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-200 text-sm\">Record Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-xs text-slate-400\">\n            <div className=\"flex justify-between\">\n              <span>Created:</span>\n              <span>\n                {localOpportunity.created_date\n                  ? format(new Date(localOpportunity.created_date), \"MMM d, yyyy h:mm a\")\n                  : \"N/A\"}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Last Updated:</span>\n              <span>\n                {localOpportunity.updated_date\n                  ? format(new Date(localOpportunity.updated_date), \"MMM d, yyyy h:mm a\")\n                  : \"N/A\"}\n              </span>\n            </div>\n            {localOpportunity.created_by && (\n              <div className=\"flex justify-between\">\n                <span>Created By:</span>\n                <span>{localOpportunity.created_by}</span>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\opportunities\\OpportunityForm.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"X"},"fix":{"range":[627,629],"text":""},"desc":"Remove unused variable 'X'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'propUsers' is defined but never used.","line":20,"column":131,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":140,"suggestions":[{"messageId":"removeVar","data":{"varName":"propUsers"},"fix":{"range":[1105,1123],"text":""},"desc":"Remove unused variable 'propUsers'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\"; // Added import for Switch\nimport { User } from \"@/api/entities\";\nimport { Tenant } from \"@/api/entities\";\nimport { Employee } from \"@/api/entities\";\nimport { useTenant } from \"../shared/tenantContext\";\nimport { X, Plus } from \"lucide-react\";\nimport SearchableAccountSelector from \"../shared/SearchableAccountSelector\";\nimport SearchableContactSelector from \"../shared/SearchableContactSelector\";\nimport TagInput from \"../shared/TagInput\";\nimport CreateAccountDialog from \"../accounts/CreateAccountDialog\";\nimport LinkContactDialog from \"../shared/LinkContactDialog\";\n\nexport default function OpportunityForm({ opportunity, onSubmit, onCancel, contacts: propContacts, accounts: propAccounts, users: propUsers, leads: propLeads }) {\n  const { selectedTenantId } = useTenant();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    account_id: \"\",\n    contact_id: \"\",\n    assigned_to: \"\",\n    stage: \"prospecting\",\n    amount: \"\",\n    close_date: \"\",\n    lead_source: \"website\",\n    type: \"new_business\",\n    description: \"\",\n    next_step: \"\",\n    competitor: \"\",\n    tags: [],\n    is_test_data: false,\n    lead_id: \"\",\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [currentTenant, setCurrentTenant] = useState(null);\n\n  const [accounts, setAccounts] = useState(Array.isArray(propAccounts) ? propAccounts : []);\n  const [contacts, setContacts] = useState(Array.isArray(propContacts) ? propContacts : []);\n  const [filteredContacts, setFilteredContacts] = useState([]);\n  const [leads, setLeads] = useState(Array.isArray(propLeads) ? propLeads : []);\n  const [filteredLeads, setFilteredLeads] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  const [showCreateAccount, setShowCreateAccount] = useState(false);\n  const [showLinkContact, setShowLinkContact] = useState(false);\n\n  const isB2C = currentTenant?.business_model === 'b2c';\n  const isAdmin = currentUser?.role === 'admin' || currentUser?.role === 'superadmin'; // Define isAdmin here\n\n  // Load current user and tenant\n  useEffect(() => {\n    const loadUserAndTenant = async () => {\n      try {\n        const user = await User.me();\n        setCurrentUser(user);\n        \n        const tenantId = selectedTenantId || user.tenant_id;\n        if (tenantId) {\n          const tenants = await Tenant.list();\n          const tenant = tenants.find(t => t.id === tenantId);\n          setCurrentTenant(tenant);\n        }\n\n        // CRITICAL FIX: Load employees filtered by tenant\n        const tenantFilter = {};\n        \n        // Determine which tenant to filter by\n        if (user.role === 'superadmin' || user.role === 'admin') {\n          // Admins can see employees from selected tenant or their own\n          if (selectedTenantId) {\n            tenantFilter.tenant_id = selectedTenantId;\n          } else if (user.tenant_id) {\n            tenantFilter.tenant_id = user.tenant_id;\n          }\n        } else {\n          // Regular users only see employees from their own tenant\n          if (user.tenant_id) {\n            tenantFilter.tenant_id = user.tenant_id;\n          }\n        }\n\n        console.log('[OpportunityForm] Loading employees with filter:', tenantFilter);\n\n        // Load employees with tenant filter and only those with CRM access\n        const empList = await Employee.filter({\n          ...tenantFilter,\n          has_crm_access: true,\n          is_active: true\n        });\n        \n        console.log('[OpportunityForm] Loaded employees:', empList?.length || 0);\n        setEmployees(empList || []);\n      } catch (error) {\n        console.error(\"Failed to load user/tenant/employees:\", error);\n      }\n    };\n    loadUserAndTenant();\n  }, [selectedTenantId]);\n\n  // Update local state when props change\n  useEffect(() => {\n    if (Array.isArray(propAccounts)) {\n      setAccounts(propAccounts);\n    }\n  }, [propAccounts]);\n\n  useEffect(() => {\n    if (Array.isArray(propContacts)) {\n      setContacts(propContacts);\n    }\n  }, [propContacts]);\n\n  useEffect(() => {\n    if (Array.isArray(propLeads)) {\n      setLeads(propLeads);\n    }\n  }, [propLeads]);\n\n  // Load opportunity data if editing\n  useEffect(() => {\n    if (opportunity) {\n      setFormData({\n        name: opportunity.name || \"\",\n        account_id: opportunity.account_id || \"\",\n        contact_id: opportunity.contact_id || \"\",\n        assigned_to: opportunity.assigned_to || \"\",\n        stage: opportunity.stage || \"prospecting\",\n        amount: opportunity.amount || \"\",\n        close_date: opportunity.close_date || \"\",\n        lead_source: opportunity.lead_source || \"website\",\n        type: opportunity.type || \"new_business\",\n        description: opportunity.description || \"\",\n        next_step: opportunity.next_step || \"\",\n        competitor: opportunity.competitor || \"\",\n        tags: opportunity.tags || [],\n        is_test_data: opportunity.is_test_data || false,\n        lead_id: opportunity.lead_id || \"\",\n      });\n    } else if (currentUser) {\n      // Set defaults for new opportunity\n      setFormData(prev => ({\n        ...prev,\n        assigned_to: currentUser.email\n      }));\n    }\n  }, [opportunity, currentUser]);\n\n  // Filter contacts based on selected account\n  useEffect(() => {\n    if (formData.account_id) {\n      const filtered = contacts.filter(c => c.account_id === formData.account_id);\n      setFilteredContacts(filtered);\n    } else {\n      setFilteredContacts(contacts);\n    }\n  }, [formData.account_id, contacts]);\n\n  // Filter leads based on selected account\n  useEffect(() => {\n    if (formData.account_id) {\n      const filtered = leads.filter(l => l.account_id === formData.account_id);\n      setFilteredLeads(filtered);\n    } else {\n      setFilteredLeads(leads);\n    }\n  }, [formData.account_id, leads]);\n\n  const handleChange = useCallback((field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.amount || !formData.close_date) {\n      alert(\"Please fill in all required fields: Name, Amount, and Close Date\");\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const tenantId = selectedTenantId || currentUser?.tenant_id;\n      const payload = {\n        ...formData,\n        tenant_id: tenantId,\n        amount: parseFloat(formData.amount) || 0,\n        // Remove empty optional fields\n        account_id: formData.account_id || undefined,\n        contact_id: formData.contact_id || undefined,\n        lead_id: formData.lead_id || undefined,\n        assigned_to: formData.assigned_to || undefined,\n      };\n\n      await onSubmit(payload);\n    } catch (error) {\n      console.error(\"Error submitting opportunity:\", error);\n      alert(\"Failed to save opportunity. Please try again.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleAccountCreated = (newAccount) => {\n    setAccounts(prev => [...prev, newAccount]);\n    handleChange('account_id', newAccount.id);\n    setShowCreateAccount(false);\n  };\n\n  const handleContactLinked = (contactId) => {\n    handleChange('contact_id', contactId);\n    setShowLinkContact(false);\n  };\n\n  return (\n    <>\n      <div className=\"space-y-6 p-1 bg-slate-800\"> {/* Modified wrapper div to match outline styling */}\n        <form onSubmit={handleSubmit} className=\"space-y-6\"> {/* Modified form class to match outline styling */}\n          <div className=\"grid grid-cols-1 gap-4\">\n            <div>\n              <Label htmlFor=\"opp-name\" className=\"text-slate-300\">\n                {isB2C ? \"Deal Name\" : \"Opportunity Name\"} <span className=\"text-red-400\">*</span>\n              </Label>\n              <Input \n                id=\"opp-name\" \n                name=\"name\"\n                value={formData.name} \n                onChange={e => handleChange('name', e.target.value)} \n                required \n                className=\"bg-slate-700 border-slate-600 text-white\" \n                placeholder=\"Enter opportunity name\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"opp-amount\" className=\"text-slate-300\">\n                Amount <span className=\"text-red-400\">*</span>\n              </Label>\n              <Input \n                id=\"opp-amount\" \n                name=\"amount\"\n                type=\"number\" \n                step=\"0.01\"\n                value={formData.amount} \n                onChange={e => handleChange('amount', e.target.value)} \n                required \n                className=\"bg-slate-700 border-slate-600 text-white\" \n                placeholder=\"0.00\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"opp-close-date\" className=\"text-slate-300\">\n                Expected Close Date <span className=\"text-red-400\">*</span>\n              </Label>\n              <Input \n                id=\"opp-close-date\" \n                name=\"close_date\"\n                type=\"date\" \n                value={formData.close_date} \n                onChange={e => handleChange('close_date', e.target.value)} \n                required \n                className=\"bg-slate-700 border-slate-600 text-white\" \n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"opp-stage\" className=\"text-slate-300\">Stage</Label>\n              <Select value={formData.stage} onValueChange={value => handleChange('stage', value)}>\n                <SelectTrigger id=\"opp-stage\" className=\"bg-slate-700 border-slate-600 text-white\">\n                  <SelectValue placeholder=\"Select stage\" />\n                </SelectTrigger>\n                <SelectContent \n                  className=\"bg-slate-800 border-slate-600 text-slate-200\"\n                  position=\"popper\" \n                  sideOffset={5}\n                  style={{ zIndex: 2147483647 }}\n                >\n                  <SelectItem value=\"prospecting\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Prospecting</SelectItem>\n                  <SelectItem value=\"qualification\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Qualification</SelectItem>\n                  <SelectItem value=\"proposal\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Proposal</SelectItem>\n                  <SelectItem value=\"negotiation\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Negotiation</SelectItem>\n                  <SelectItem value=\"closed_won\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Closed Won</SelectItem>\n                  <SelectItem value=\"closed_lost\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Closed Lost</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"opp-type\" className=\"text-slate-300\">Type</Label>\n              <Select value={formData.type} onValueChange={value => handleChange('type', value)}>\n                <SelectTrigger id=\"opp-type\" className=\"bg-slate-700 border-slate-600 text-white\">\n                  <SelectValue placeholder=\"Select type\" />\n                </SelectTrigger>\n                <SelectContent \n                  className=\"bg-slate-800 border-slate-600 text-slate-200\"\n                  position=\"popper\" \n                  sideOffset={5}\n                  style={{ zIndex: 2147483647 }}\n                >\n                  <SelectItem value=\"new_business\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">New Business</SelectItem>\n                  <SelectItem value=\"existing_business\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Existing Business</SelectItem>\n                  <SelectItem value=\"renewal\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Renewal</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Account (Optional) */}\n          <div>\n            <div className=\"flex items-center justify-between mb-2\">\n              <Label htmlFor=\"opp-account\" className=\"text-slate-300\">{isB2C ? \"Customer\" : \"Account\"}</Label>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowCreateAccount(true)}\n                className=\"text-blue-400 hover:text-blue-300 hover:bg-slate-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-1\" /> Create New\n              </Button>\n            </div>\n            <SearchableAccountSelector\n              id=\"opp-account\"\n              value={formData.account_id}\n              onChange={value => handleChange('account_id', value)}\n              accounts={accounts}\n              placeholder=\"Search for account (optional)\"\n              className=\"bg-slate-700 border-slate-600 text-white\"\n            />\n          </div>\n\n          {/* Contact (Optional) */}\n          <div>\n            <div className=\"flex items-center justify-between mb-2\">\n              <Label htmlFor=\"opp-contact\" className=\"text-slate-300\">Contact</Label>\n              {formData.account_id && (\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowLinkContact(true)}\n                  className=\"text-blue-400 hover:text-blue-300 hover:bg-slate-700\"\n                >\n                  <Plus className=\"w-4 h-4 mr-1\" /> Link Contact\n                </Button>\n              )}\n            </div>\n            <SearchableContactSelector\n              id=\"opp-contact\"\n              value={formData.contact_id}\n              onChange={value => handleChange('contact_id', value)}\n              contacts={filteredContacts}\n              placeholder=\"Search for contact (optional)\"\n              className=\"bg-slate-700 border-slate-600 text-white\"\n            />\n          </div>\n\n          {/* Lead (Optional) */}\n          {leads.length > 0 && (\n            <div>\n              <Label htmlFor=\"opp-lead\" className=\"text-slate-300\">Related Lead</Label>\n              <Select value={formData.lead_id || \"\"} onValueChange={value => handleChange('lead_id', value)}>\n                <SelectTrigger id=\"opp-lead\" className=\"bg-slate-700 border-slate-600 text-white\">\n                  <SelectValue placeholder=\"Select lead (optional)\" />\n                </SelectTrigger>\n                <SelectContent \n                  className=\"bg-slate-800 border-slate-600 text-slate-200\"\n                  position=\"popper\" \n                  sideOffset={5}\n                  style={{ zIndex: 2147483647 }}\n                >\n                  <SelectItem value={null} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">None</SelectItem>\n                  {filteredLeads.map(lead => (\n                    <SelectItem key={lead.id} value={lead.id} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">\n                      {lead.first_name} {lead.last_name} {lead.company ? `- ${lead.company}` : ''}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          {/* Assigned To */}\n          <div>\n            <Label htmlFor=\"opp-assigned\" className=\"text-slate-300\">Assigned To</Label>\n            <Select value={formData.assigned_to || \"\"} onValueChange={value => handleChange('assigned_to', value)}>\n              <SelectTrigger id=\"opp-assigned\" className=\"bg-slate-700 border-slate-600 text-white\">\n                <SelectValue placeholder=\"Select user\" />\n              </SelectTrigger>\n              <SelectContent \n                className=\"bg-slate-800 border-slate-600 text-slate-200\"\n                position=\"popper\" \n                sideOffset={5}\n                style={{ zIndex: 2147483647 }}\n              >\n                <SelectItem value={null} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Unassigned</SelectItem>\n                {employees.map(emp => (\n                  <SelectItem key={emp.id} value={emp.user_email || emp.email} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">\n                    {emp.first_name} {emp.last_name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Lead Source */}\n          <div>\n            <Label htmlFor=\"opp-source\" className=\"text-slate-300\">Lead Source</Label>\n            <Select value={formData.lead_source} onValueChange={value => handleChange('lead_source', value)}>\n              <SelectTrigger id=\"opp-source\" className=\"bg-slate-700 border-slate-600 text-white\">\n                <SelectValue placeholder=\"Select source\" />\n              </SelectTrigger>\n              <SelectContent \n                className=\"bg-slate-800 border-slate-600 text-slate-200\"\n                position=\"popper\" \n                sideOffset={5}\n                style={{ zIndex: 2147483647 }}\n              >\n                <SelectItem value=\"website\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Website</SelectItem>\n                <SelectItem value=\"referral\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Referral</SelectItem>\n                <SelectItem value=\"cold_call\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Cold Call</SelectItem>\n                <SelectItem value=\"email\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Email</SelectItem>\n                <SelectItem value=\"social_media\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Social Media</SelectItem>\n                <SelectItem value=\"trade_show\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Trade Show</SelectItem>\n                <SelectItem value=\"advertising\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Advertising</SelectItem>\n                <SelectItem value=\"other\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Description */}\n          <div>\n            <Label htmlFor=\"opp-description\" className=\"text-slate-300\">Description</Label>\n            <Textarea \n              id=\"opp-description\" \n              name=\"description\"\n              value={formData.description} \n              onChange={e => handleChange('description', e.target.value)} \n              className=\"bg-slate-700 border-slate-600 text-white\" \n              rows={3}\n              placeholder=\"Describe the opportunity...\"\n            />\n          </div>\n\n          {/* Next Step */}\n          <div>\n            <Label htmlFor=\"opp-next-step\" className=\"text-slate-300\">Next Step</Label>\n            <Input \n              id=\"opp-next-step\" \n              name=\"next_step\"\n              value={formData.next_step} \n              onChange={e => handleChange('next_step', e.target.value)} \n              className=\"bg-slate-700 border-slate-600 text-white\" \n              placeholder=\"What's the next action?\"\n            />\n          </div>\n\n          {/* Competitor */}\n          <div>\n            <Label htmlFor=\"opp-competitor\" className=\"text-slate-300\">Competitor</Label>\n            <Input \n              id=\"opp-competitor\" \n              name=\"competitor\"\n              value={formData.competitor} \n              onChange={e => handleChange('competitor', e.target.value)} \n              className=\"bg-slate-700 border-slate-600 text-white\" \n              placeholder=\"Who are you competing against?\"\n            />\n          </div>\n\n          {/* Tags */}\n          <div>\n            <Label className=\"text-slate-300\">Tags</Label>\n            <TagInput\n              value={formData.tags}\n              onChange={value => handleChange('tags', value)}\n              placeholder=\"Add tags...\"\n              className=\"bg-slate-700 border-slate-600\"\n            />\n          </div>\n\n          {/* Test Data Toggle (Admin only) */}\n          {isAdmin && (\n            <div className=\"flex items-center space-x-2 p-4 bg-amber-900/20 border border-amber-700/50 rounded-lg\">\n              <Switch\n                id=\"is_test_data\"\n                checked={formData.is_test_data || false}\n                onCheckedChange={(checked) => handleChange('is_test_data', checked)}\n                className=\"data-[state=checked]:bg-amber-600\"\n              />\n              <Label htmlFor=\"is_test_data\" className=\"text-amber-300 font-medium\">\n                Mark as Test Data\n              </Label>\n              <span className=\"text-xs text-amber-400 ml-2\">\n                (For admin cleanup purposes)\n              </span>\n            </div>\n          )}\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end gap-3 pt-4 border-t border-slate-700\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onCancel}\n              className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              {isSubmitting ? \"Saving...\" : opportunity ? \"Update Opportunity\" : \"Create Opportunity\"}\n            </Button>\n          </div>\n        </form>\n      </div>\n\n      {/* Create Account Dialog - Direct DOM rendering outside React portal */}\n      {showCreateAccount && (\n        <>\n          <div \n            className=\"fixed inset-0 bg-black/70\" \n            style={{ zIndex: 2147483646 }}\n            onClick={() => setShowCreateAccount(false)}\n          />\n          <div \n            className=\"fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 bg-slate-800 rounded-lg shadow-2xl border border-slate-700 w-[min(96vw,56rem)] max-h-[90vh] overflow-y-auto\"\n            style={{ zIndex: 2147483647 }}\n          >\n            <div className=\"flex items-center justify-between px-6 py-4 border-b border-slate-700 sticky top-0 bg-slate-800 z-10\">\n              <h2 className=\"text-lg font-semibold text-slate-100\">Create New Account</h2>\n              <button\n                onClick={() => setShowCreateAccount(false)}\n                className=\"text-slate-400 hover:text-slate-200 text-2xl leading-none\"\n                aria-label=\"Close\"\n              >\n                ├ù\n              </button>\n            </div>\n            <div className=\"p-6\">\n              <CreateAccountDialog\n                open={true}\n                onOpenChange={setShowCreateAccount}\n                onAccountCreated={handleAccountCreated}\n              />\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* Link Contact Dialog - Direct DOM rendering outside React portal */}\n      {showLinkContact && formData.account_id && (\n        <>\n          <div \n            className=\"fixed inset-0 bg-black/70\" \n            style={{ zIndex: 2147483646 }}\n            onClick={() => setShowLinkContact(false)}\n          />\n          <div \n            className=\"fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 bg-slate-800 rounded-lg shadow-2xl border border-slate-700 w-[min(96vw,56rem)] max-h-[90vh] overflow-y-auto\"\n            style={{ zIndex: 2147483647 }}\n          >\n            <div className=\"flex items-center justify-between px-6 py-4 border-b border-slate-700 sticky top-0 bg-slate-800 z-10\">\n              <h2 className=\"text-lg font-semibold text-slate-100\">Link Contact to Account</h2>\n              <button\n                onClick={() => setShowLinkContact(false)}\n                className=\"text-slate-400 hover:text-slate-200 text-2xl leading-none\"\n                aria-label=\"Close\"\n              >\n                ├ù\n              </button>\n            </div>\n            <div className=\"p-6\">\n              <LinkContactDialog\n                open={true}\n                onOpenChange={setShowLinkContact}\n                accountId={formData.account_id}\n                onContactLinked={handleContactLinked}\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\opportunities\\OpportunityKanbanBoard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\opportunities\\OpportunityKanbanCard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Draggable } from '@hello-pangea/dnd';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Edit, Trash2, Eye, GripVertical } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function OpportunityKanbanCard({ opportunity, accountName, assignedUserName, index, onEdit, onDelete, onView }) {\n  const draggableId = String(opportunity.id);\n  \n  return (\n    <Draggable draggableId={draggableId} index={index}>\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          className={`mb-3 ${snapshot.isDragging ? 'opacity-70 rotate-2' : ''}`}\n        >\n          <Card className={`bg-slate-700 border-slate-600 transition-all cursor-grab active:cursor-grabbing ${snapshot.isDragging ? 'shadow-2xl border-blue-500' : 'hover:border-blue-500'}`}>\n            <CardHeader className=\"p-3 pb-2\">\n              <div className=\"flex items-start justify-between gap-2\">\n                <div className=\"flex items-start gap-2 flex-1 min-w-0\">\n                  <div className=\"mt-1 flex-shrink-0\">\n                    <GripVertical className=\"w-4 h-4 text-slate-400\" />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <CardTitle className=\"text-sm font-semibold text-slate-100 truncate\">\n                      {opportunity.name}\n                    </CardTitle>\n                    {accountName && (\n                      <p className=\"text-xs text-slate-400 mt-1 truncate\">{accountName}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"p-3 pt-0 space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-lg font-bold text-emerald-400\">\n                  ${(opportunity.amount || 0).toLocaleString()}\n                </span>\n                {opportunity.probability && (\n                  <Badge variant=\"outline\" className=\"border-slate-600 text-slate-300 text-xs\">\n                    {opportunity.probability}%\n                  </Badge>\n                )}\n              </div>\n\n              {opportunity.close_date && (\n                <div className=\"text-xs text-slate-400\">\n                  Close: {format(new Date(opportunity.close_date), 'MMM d, yyyy')}\n                </div>\n              )}\n\n              {assignedUserName && (\n                <div className=\"text-xs text-slate-400 truncate\">\n                  ≡ƒæñ {assignedUserName}\n                </div>\n              )}\n\n              <div className=\"flex items-center gap-1 pt-2\" onClick={(e) => e.stopPropagation()}>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onView(opportunity);\n                  }}\n                  className=\"h-7 px-2 text-slate-300 hover:text-slate-100 hover:bg-slate-600 cursor-pointer\"\n                >\n                  <Eye className=\"w-3 h-3 mr-1\" />\n                  View\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onEdit(opportunity);\n                  }}\n                  className=\"h-7 px-2 text-slate-300 hover:text-slate-100 hover:bg-slate-600 cursor-pointer\"\n                >\n                  <Edit className=\"w-3 h-3 mr-1\" />\n                  Edit\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    if (window.confirm('Delete this opportunity?')) {\n                      onDelete(opportunity.id);\n                    }\n                  }}\n                  className=\"h-7 px-2 text-red-400 hover:text-red-300 hover:bg-red-900/30 cursor-pointer\"\n                >\n                  <Trash2 className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </Draggable>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\reports\\AIMarketInsights.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'BarChart' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"BarChart"},"fix":{"range":[556,565],"text":""},"desc":"Remove unused variable 'BarChart'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Bar' is defined but never used.","line":25,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"Bar"},"fix":{"range":[564,569],"text":""},"desc":"Remove unused variable 'Bar'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'XAxis' is defined but never used.","line":25,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"XAxis"},"fix":{"range":[569,576],"text":""},"desc":"Remove unused variable 'XAxis'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'YAxis' is defined but never used.","line":25,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"YAxis"},"fix":{"range":[576,583],"text":""},"desc":"Remove unused variable 'YAxis'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CartesianGrid' is defined but never used.","line":25,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"CartesianGrid"},"fix":{"range":[583,598],"text":""},"desc":"Remove unused variable 'CartesianGrid'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used.","line":25,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":61,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[598,607],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ResponsiveContainer' is defined but never used.","line":25,"column":63,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":82,"suggestions":[{"messageId":"removeVar","data":{"varName":"ResponsiveContainer"},"fix":{"range":[607,628],"text":""},"desc":"Remove unused variable 'ResponsiveContainer'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":361,"column":22,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14927,14989],"text":"Click &quot;Generate Insights\" to analyze current market conditions"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14927,14989],"text":"Click &ldquo;Generate Insights\" to analyze current market conditions"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14927,14989],"text":"Click &#34;Generate Insights\" to analyze current market conditions"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14927,14989],"text":"Click &rdquo;Generate Insights\" to analyze current market conditions"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":361,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14927,14989],"text":"Click \"Generate Insights&quot; to analyze current market conditions"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14927,14989],"text":"Click \"Generate Insights&ldquo; to analyze current market conditions"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14927,14989],"text":"Click \"Generate Insights&#34; to analyze current market conditions"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14927,14989],"text":"Click \"Generate Insights&rdquo; to analyze current market conditions"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  TrendingUp,\n  Loader2,\n  Lightbulb,\n  AlertCircle,\n  Target,\n  RefreshCw,\n  Building2,\n  AlertTriangle,\n  Shield,\n  Zap,\n  TrendingDown,\n  Globe,\n  Newspaper,\n  CheckCircle,\n  XCircle\n} from \"lucide-react\";\nimport { base44 } from \"@/api/base44Client\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst INDUSTRY_LABELS = {\n  accounting_and_finance: \"Accounting & Finance\",\n  aerospace_and_defense: \"Aerospace & Defense\",\n  agriculture_and_farming: \"Agriculture & Farming\",\n  automotive_and_transportation: \"Automotive & Transportation\",\n  banking_and_financial_services: \"Banking & Financial Services\",\n  biotechnology_and_pharmaceuticals: \"Biotechnology & Pharmaceuticals\",\n  chemicals_and_materials: \"Chemicals & Materials\",\n  construction_and_engineering: \"Construction & Engineering\",\n  consulting_and_professional_services: \"Consulting & Professional Services\",\n  consumer_goods_and_retail: \"Consumer Goods & Retail\",\n  cybersecurity: \"Cybersecurity\",\n  data_analytics_and_business_intelligence: \"Data Analytics & Business Intelligence\",\n  education_and_training: \"Education & Training\",\n  energy_oil_and_gas: \"Energy, Oil & Gas\",\n  entertainment_and_media: \"Entertainment & Media\",\n  environmental_services: \"Environmental Services\",\n  event_management: \"Event Management\",\n  fashion_and_apparel: \"Fashion & Apparel\",\n  food_and_beverage: \"Food & Beverage\",\n  franchising: \"Franchising\",\n  gaming_and_esports: \"Gaming & Esports\",\n  government_and_public_sector: \"Government & Public Sector\",\n  green_energy_and_solar: \"Green Energy & Solar\",\n  healthcare_and_medical_services: \"Healthcare & Medical Services\",\n  hospitality_and_tourism: \"Hospitality & Tourism\",\n  human_resources_and_staffing: \"Human Resources & Staffing\",\n  information_technology_and_software: \"Information Technology & Software\",\n  insurance: \"Insurance\",\n  interior_design_and_architecture: \"Interior Design & Architecture\",\n  legal_services: \"Legal Services\",\n  logistics_and_supply_chain: \"Logistics & Supply Chain\",\n  manufacturing_industrial: \"Manufacturing (Industrial)\",\n  marketing_advertising_and_pr: \"Marketing, Advertising & PR\",\n  mining_and_metals: \"Mining & Metals\",\n  nonprofit_and_ngos: \"Nonprofit & NGOs\",\n  packaging_and_printing: \"Packaging & Printing\",\n  pharmaceuticals: \"Pharmaceuticals\",\n  real_estate_and_property_management: \"Real Estate & Property Management\",\n  renewable_energy: \"Renewable Energy\",\n  research_and_development: \"Research & Development\",\n  retail_and_wholesale: \"Retail & Wholesale\",\n  robotics_and_automation: \"Robotics & Automation\",\n  saas_and_cloud_services: \"SaaS & Cloud Services\",\n  security_services: \"Security Services\",\n  social_media_and_influencer: \"Social Media & Influencer\",\n  sports_and_recreation: \"Sports & Recreation\",\n  telecommunications: \"Telecommunications\",\n  textiles_and_apparel: \"Textiles & Apparel\",\n  transportation_and_delivery: \"Transportation & Delivery\",\n  utilities_water_and_waste: \"Utilities (Water & Waste)\",\n  veterinary_services: \"Veterinary Services\",\n  warehousing_and_distribution: \"Warehousing & Distribution\",\n  wealth_management: \"Wealth Management\",\n  other: \"Other\"\n};\n\nconst GEOGRAPHIC_LABELS = {\n  north_america: \"North America\",\n  europe: \"Europe\",\n  asia: \"Asia\",\n  south_america: \"South America\",\n  africa: \"Africa\",\n  oceania: \"Oceania\",\n  global: \"Global\"\n};\n\nexport default function AIMarketInsights({ tenant }) {\n  const [generating, setGenerating] = useState(false);\n  const [insights, setInsights] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Helper function to format large numbers with B/M/K suffixes\n  const formatLargeNumber = (num) => {\n    if (num === null || num === undefined || typeof num !== 'number' || isNaN(num)) return num;\n\n    if (Math.abs(num) >= 1e9) {\n      return (num / 1e9).toFixed(1).replace(/\\.0$/, '') + 'B';\n    } else if (Math.abs(num) >= 1e6) {\n      return (num / 1e6).toFixed(1).replace(/\\.0$/, '') + 'M';\n    } else if (Math.abs(num) >= 1e3) {\n      return (num / 1e3).toFixed(1).replace(/\\.0$/, '') + 'K';\n    }\n    return num.toFixed(1);\n  };\n\n  // Helper to format display value with unit\n  const formatDisplayValue = (value, unit) => {\n    if (value === null || value === undefined || typeof value !== 'number' || isNaN(value)) return value;\n\n    if (unit && typeof unit === 'string') {\n      const lowerUnit = unit.toLowerCase();\n      if (lowerUnit.includes('usd') || lowerUnit.includes('dollar')) {\n        return '$' + formatLargeNumber(value);\n      } else if (lowerUnit.includes('percent') || lowerUnit === '%') {\n        return value.toFixed(1) + ' %';\n      } else if (lowerUnit.includes('job')) {\n        return value.toLocaleString('en-US', { maximumFractionDigits: 0 }) + ' jobs';\n      } else if (lowerUnit.includes('index')) {\n        return Math.round(value).toLocaleString('en-US', { maximumFractionDigits: 0 }) + ' index';\n      } else if (lowerUnit.includes('unit')) {\n        return value.toLocaleString('en-US', { maximumFractionDigits: 0 }) + ' units';\n      }\n    }\n    // Default formatting if no specific unit match\n    return value.toLocaleString('en-US', { maximumFractionDigits: 2 }) + (unit ? ' ' + unit : '');\n  };\n\n  const handleGenerateInsights = async () => {\n    if (!tenant?.industry) {\n      setError(\"No industry configured for the selected organization. Please update tenant settings.\");\n      return;\n    }\n\n    setGenerating(true);\n    setError(null);\n    setInsights(null);\n\n    try {\n      const industryLabel = INDUSTRY_LABELS[tenant.industry] || tenant.industry;\n      const businessModel = tenant.business_model || \"B2B\";\n      const geographicFocus = GEOGRAPHIC_LABELS[tenant.geographic_focus] || \"North America\";\n\n      // Build location string with increasing specificity\n      let locationContext = geographicFocus;\n      if (tenant.country) {\n        locationContext = tenant.country;\n        if (tenant.major_city) {\n          locationContext = `${tenant.major_city}, ${tenant.country}`;\n        }\n      }\n\n      console.log('Generating insights for:', { industryLabel, businessModel, locationContext });\n\n      const prompt = `You are an expert market research analyst. Provide a comprehensive, data-driven market analysis for a company operating in the ${industryLabel} industry.\n\n**Company Context:**\n- Industry: ${industryLabel}\n- Business Model: ${businessModel}\n- Location: ${locationContext}\n- Company: ${tenant.name || \"A company\"}\n\n**Generate a detailed analysis with the following sections:**\n\n1. **Market Overview**: A brief summary of the current state and size of the ${industryLabel} market in ${locationContext}.\n2. **SWOT Analysis**:\n   - Strengths: 3-5 key strengths for companies in this industry/location\n   - Weaknesses: 3-5 common weaknesses or vulnerabilities\n   - Opportunities: 3-5 emerging growth opportunities\n   - Threats: 3-5 external threats or challenges\n3. **Competitive Landscape**: Analysis of major competitors, market share distribution, and competitive advantages in ${locationContext}.\n4. **Major News & Events**: 3-5 recent significant news items or events affecting the ${industryLabel} industry in ${locationContext} (last 6 months).\n5. **Strategic Recommendations**: 3-5 actionable recommendations based on current market conditions and data for a company in this space.\n6. **Economic Indicators**: Key economic data points relevant to this industry (provide 5 data points with values for trending charts).\n\nEnsure the output is specific to ${locationContext} and the ${industryLabel} industry. Format perfectly as JSON according to the schema.`;\n\n      const response = await base44.integrations.Core.InvokeLLM({\n        prompt,\n        add_context_from_internet: true,\n        response_json_schema: {\n          type: \"object\",\n          properties: {\n            market_overview: { type: \"string\" },\n            swot_analysis: {\n              type: \"object\",\n              properties: {\n                strengths: { type: \"array\", items: { type: \"string\" } },\n                weaknesses: { type: \"array\", items: { type: \"string\" } },\n                opportunities: { type: \"array\", items: { type: \"string\" } },\n                threats: { type: \"array\", items: { type: \"string\" } }\n              },\n              required: [\"strengths\", \"weaknesses\", \"opportunities\", \"threats\"]\n            },\n            competitive_landscape: {\n              type: \"object\",\n              properties: {\n                overview: { type: \"string\" },\n                major_competitors: { type: \"array\", items: { type: \"string\" } },\n                market_dynamics: { type: \"string\" }\n              },\n              required: [\"overview\", \"major_competitors\"]\n            },\n            major_news: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  title: { type: \"string\" },\n                  description: { type: \"string\" },\n                  date: { type: \"string\" },\n                  impact: { type: \"string\", enum: [\"positive\", \"negative\", \"neutral\"] }\n                },\n                required: [\"title\", \"description\", \"date\", \"impact\"]\n              }\n            },\n            recommendations: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  title: { type: \"string\" },\n                  description: { type: \"string\" },\n                  priority: { type: \"string\", enum: [\"high\", \"medium\", \"low\"] }\n                },\n                required: [\"title\", \"description\", \"priority\"]\n              }\n            },\n            economic_indicators: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  name: { type: \"string\" },\n                  current_value: { type: \"number\" },\n                  trend: { type: \"string\", enum: [\"up\", \"down\", \"stable\"] },\n                  unit: { type: \"string\" }\n                },\n                required: [\"name\", \"current_value\", \"trend\", \"unit\"]\n              }\n            }\n          },\n          required: [\"market_overview\", \"swot_analysis\", \"competitive_landscape\", \"major_news\", \"recommendations\", \"economic_indicators\"]\n        }\n      });\n\n      console.log('LLM Response:', response);\n\n      // InvokeLLM returns data directly when response_json_schema is provided\n      if (response && typeof response === 'object') {\n        setInsights(response);\n      } else {\n        setError(\"Failed to generate insights. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error generating AI insights:\", error);\n      setError(error.message || \"An error occurred while generating insights.\");\n    } finally {\n      setGenerating(false);\n    }\n  };\n\n  if (!tenant) {\n    return (\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-12 text-center\">\n          <Building2 className=\"w-12 h-12 text-slate-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-slate-300 mb-2\">No Tenant Selected</h3>\n          <p className=\"text-slate-400\">Please select a tenant to view AI market insights.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between text-slate-100\">\n          <span className=\"flex items-center gap-2\">\n            <Lightbulb className=\"w-5 h-5 text-yellow-400\" />\n            AI Market Insights for {tenant.name}\n          </span>\n          <Button\n            onClick={handleGenerateInsights}\n            disabled={generating || !tenant?.industry}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            {generating ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Analyzing...\n              </>\n            ) : (\n              <>\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Generate Insights\n              </>\n            )}\n          </Button>\n        </CardTitle>\n        <p className=\"text-slate-400 mt-2\">\n          AI-powered market analysis for <span className=\"font-semibold text-slate-200\">{tenant.name}</span>\n        </p>\n        <div className=\"flex flex-wrap gap-2 mt-3\">\n          {tenant.industry && (\n            <Badge className=\"bg-blue-900/30 text-blue-300 border border-blue-700/50\">\n              {INDUSTRY_LABELS[tenant.industry] || tenant.industry}\n            </Badge>\n          )}\n          {tenant.business_model && (\n            <Badge className=\"bg-purple-900/30 text-purple-300 border border-purple-700/50\">\n              {tenant.business_model.toUpperCase()}\n            </Badge>\n          )}\n          {tenant.geographic_focus && (\n            <Badge className=\"bg-green-900/30 text-green-300 border border-green-700/50\">\n              <Globe className=\"w-3 h-3 mr-1\" />\n              {GEOGRAPHIC_LABELS[tenant.geographic_focus] || tenant.geographic_focus}\n            </Badge>\n          )}\n          {tenant.country && (\n            <Badge className=\"bg-orange-900/30 text-orange-300 border border-orange-700/50\">\n              <Globe className=\"w-3 h-3 mr-1\" />\n              {tenant.country}\n            </Badge>\n          )}\n          {tenant.major_city && (\n            <Badge className=\"bg-teal-900/30 text-teal-300 border border-teal-700/50\">\n              <Building2 className=\"w-3 h-3 mr-1\" />\n              {tenant.major_city}\n            </Badge>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\" data-ai-insights={insights ? JSON.stringify(insights) : null}>\n        {error && (\n          <Alert className=\"bg-red-900/20 border-red-700/50\">\n            <AlertCircle className=\"h-4 w-4 text-red-400\" />\n            <AlertDescription className=\"text-red-300\">{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {!tenant?.industry && !generating && (\n          <Alert className=\"bg-yellow-900/20 border-yellow-700/50\">\n            <AlertTriangle className=\"h-4 w-4 text-yellow-400\" />\n            <AlertDescription className=\"text-yellow-300\">\n              Please configure an industry for this organization in tenant settings to generate AI insights.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {!insights && !generating && tenant?.industry && (\n          <div className=\"text-center py-12 text-slate-400\">\n            <Lightbulb className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n            <p>Click \"Generate Insights\" to analyze current market conditions</p>\n            {tenant.major_city && tenant.country && (\n              <p className=\"text-sm mt-2\">\n                Analysis will be focused on: {tenant.major_city}, {tenant.country}\n              </p>\n            )}\n            {!tenant.major_city && tenant.country && (\n              <p className=\"text-sm mt-2\">\n                Analysis will be focused on: {tenant.country}\n              </p>\n            )}\n            {!tenant.country && tenant.geographic_focus && (\n              <p className=\"text-sm mt-2\">\n                Analysis will be focused on: {GEOGRAPHIC_LABELS[tenant.geographic_focus] || tenant.geographic_focus}\n              </p>\n            )}\n          </div>\n        )}\n\n        {insights && (\n          <div className=\"space-y-6\">\n            {/* Market Overview */}\n            {insights.market_overview && (\n              <div className=\"bg-gradient-to-br from-blue-900/30 to-blue-800/20 border border-blue-700/50 rounded-lg p-4\">\n                <h3 className=\"text-lg font-semibold text-blue-300 mb-2 flex items-center gap-2\">\n                  <Globe className=\"w-5 h-5\" />\n                  Market Overview\n                </h3>\n                <p className=\"text-slate-300 leading-relaxed\">{insights.market_overview}</p>\n              </div>\n            )}\n\n            {/* SWOT Analysis */}\n            {insights.swot_analysis && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* Strengths */}\n                {insights.swot_analysis.strengths && insights.swot_analysis.strengths.length > 0 && (\n                  <div className=\"bg-gradient-to-br from-green-900/30 to-green-800/20 border border-green-700/50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-green-300 mb-3 flex items-center gap-2\">\n                      <CheckCircle className=\"w-5 h-5\" />\n                      Strengths\n                    </h4>\n                    <ul className=\"space-y-2\">\n                      {insights.swot_analysis.strengths.map((item, idx) => (\n                        <li key={idx} className=\"text-slate-300 text-sm flex items-start gap-2\">\n                          <span className=\"text-green-400 mt-0.5\">ΓÇó</span>\n                          <span>{item}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n\n                {/* Weaknesses */}\n                {insights.swot_analysis.weaknesses && insights.swot_analysis.weaknesses.length > 0 && (\n                  <div className=\"bg-gradient-to-br from-red-900/30 to-red-800/20 border border-red-700/50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-red-300 mb-3 flex items-center gap-2\">\n                      <XCircle className=\"w-5 h-5\" />\n                      Weaknesses\n                    </h4>\n                    <ul className=\"space-y-2\">\n                      {insights.swot_analysis.weaknesses.map((item, idx) => (\n                        <li key={idx} className=\"text-slate-300 text-sm flex items-start gap-2\">\n                          <span className=\"text-red-400 mt-0.5\">ΓÇó</span>\n                          <span>{item}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n\n                {/* Opportunities */}\n                {insights.swot_analysis.opportunities && insights.swot_analysis.opportunities.length > 0 && (\n                  <div className=\"bg-gradient-to-br from-cyan-900/30 to-cyan-800/20 border border-cyan-700/50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-cyan-300 mb-3 flex items-center gap-2\">\n                      <Target className=\"w-5 h-5\" />\n                      Opportunities\n                    </h4>\n                    <ul className=\"space-y-2\">\n                      {insights.swot_analysis.opportunities.map((item, idx) => (\n                        <li key={idx} className=\"text-slate-300 text-sm flex items-start gap-2\">\n                          <span className=\"text-cyan-400 mt-0.5\">ΓÇó</span>\n                          <span>{item}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n\n                {/* Threats */}\n                {insights.swot_analysis.threats && insights.swot_analysis.threats.length > 0 && (\n                  <div className=\"bg-gradient-to-br from-orange-900/30 to-orange-800/20 border border-orange-700/50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-orange-300 mb-3 flex items-center gap-2\">\n                      <AlertTriangle className=\"w-5 h-5\" />\n                      Threats\n                    </h4>\n                    <ul className=\"space-y-2\">\n                      {insights.swot_analysis.threats.map((item, idx) => (\n                        <li key={idx} className=\"text-slate-300 text-sm flex items-start gap-2\">\n                          <span className=\"text-orange-400 mt-0.5\">ΓÇó</span>\n                          <span>{item}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Competitive Landscape */}\n            {insights.competitive_landscape && (\n              <div className=\"bg-gradient-to-br from-purple-900/30 to-purple-800/20 border border-purple-700/50 rounded-lg p-4\">\n                <h3 className=\"text-lg font-semibold text-purple-300 mb-3 flex items-center gap-2\">\n                  <Shield className=\"w-5 h-5\" />\n                  Competitive Landscape\n                </h3>\n                {insights.competitive_landscape.overview && (\n                  <p className=\"text-slate-300 mb-3\">{insights.competitive_landscape.overview}</p>\n                )}\n                {insights.competitive_landscape.major_competitors && insights.competitive_landscape.major_competitors.length > 0 && (\n                  <div>\n                    <h4 className=\"text-sm font-medium text-purple-200 mb-2\">Major Competitors:</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {insights.competitive_landscape.major_competitors.map((comp, idx) => (\n                        <Badge key={idx} className=\"bg-purple-800/50 text-purple-200 border-purple-600\">\n                          {comp}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                {insights.competitive_landscape.market_dynamics && (\n                  <p className=\"text-slate-300 text-sm mt-3\">{insights.competitive_landscape.market_dynamics}</p>\n                )}\n              </div>\n            )}\n\n            {/* Major News & Events */}\n            {insights.major_news && insights.major_news.length > 0 && (\n              <div className=\"bg-gradient-to-br from-indigo-900/30 to-indigo-800/20 border border-indigo-700/50 rounded-lg p-4\">\n                <h3 className=\"text-lg font-semibold text-indigo-300 mb-3 flex items-center gap-2\">\n                  <Newspaper className=\"w-5 h-5\" />\n                  Major News & Events\n                </h3>\n                <div className=\"space-y-3\">\n                  {insights.major_news.map((news, idx) => (\n                    <div key={idx} className=\"bg-slate-800/50 rounded p-3 border border-slate-700\">\n                      <div className=\"flex items-start justify-between gap-2 mb-1\">\n                        <h4 className=\"font-medium text-slate-200\">{news.title}</h4>\n                        {news.impact && (\n                          <Badge\n                            className={\n                              news.impact === 'positive' ? 'bg-green-800/50 text-green-200 border-green-600' :\n                              news.impact === 'negative' ? 'bg-red-800/50 text-red-200 border-red-600' :\n                              'bg-slate-700 text-slate-300 border-slate-600'\n                            }\n                          >\n                            {news.impact}\n                          </Badge>\n                        )}\n                      </div>\n                      {news.date && <p className=\"text-sm text-slate-400 mb-1\">{news.date}</p>}\n                      {news.description && <p className=\"text-sm text-slate-300\">{news.description}</p>}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Economic Indicators Chart - UPDATED */}\n            {insights.economic_indicators && insights.economic_indicators.length > 0 && (\n              <div className=\"bg-gradient-to-br from-teal-900/30 to-teal-800/20 border border-teal-700/50 rounded-lg p-4\">\n                <h3 className=\"text-lg font-semibold text-teal-300 mb-4 flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  Key Economic Indicators\n                </h3>\n\n                {/* Chart removed - replaced with indicator cards only */}\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\">\n                  {insights.economic_indicators.map((indicator, idx) => {\n                    const displayValue = formatDisplayValue(indicator.current_value, indicator.unit);\n\n                    return (\n                      <div key={idx} className=\"bg-slate-800/50 rounded p-3 border border-slate-700\">\n                        <div className=\"flex items-start justify-between mb-1\">\n                          <span className=\"text-sm font-medium text-slate-300\">{indicator.name}</span>\n                          {indicator.trend === 'up' && <TrendingUp className=\"w-4 h-4 text-green-400\" />}\n                          {indicator.trend === 'down' && <TrendingDown className=\"w-4 h-4 text-red-400\" />}\n                          {indicator.trend === 'stable' && <span className=\"text-xs text-slate-500\">ΓåÆ</span>}\n                        </div>\n                        <p className=\"text-lg font-semibold text-teal-300\">\n                          {displayValue}\n                        </p>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n\n            {/* Strategic Recommendations */}\n            {insights.recommendations && insights.recommendations.length > 0 && (\n              <div className=\"bg-gradient-to-br from-amber-900/30 to-amber-800/20 border border-amber-700/50 rounded-lg p-4\">\n                <h3 className=\"text-lg font-semibold text-amber-300 mb-3 flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5\" />\n                  Strategic Recommendations\n                </h3>\n                <div className=\"space-y-3\">\n                  {insights.recommendations.map((rec, idx) => (\n                    <div key={idx} className=\"bg-slate-800/50 rounded p-3 border border-slate-700\">\n                      <div className=\"flex items-start justify-between gap-2 mb-1\">\n                        <h4 className=\"font-medium text-slate-200\">{rec.title}</h4>\n                        {rec.priority && (\n                          <Badge\n                            className={\n                              rec.priority === 'high' ? 'bg-red-800/50 text-red-200 border-red-600' :\n                              rec.priority === 'medium' ? 'bg-yellow-800/50 text-yellow-200 border-yellow-600' :\n                              'bg-blue-800/50 text-blue-200 border-blue-600'\n                            }\n                          >\n                            {rec.priority}\n                          </Badge>\n                        )}\n                      </div>\n                      {rec.description && <p className=\"text-sm text-slate-300\">{rec.description}</p>}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\reports\\DataQualityReport.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'XCircle' is defined but never used.","line":5,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"XCircle"},"fix":{"range":[281,290],"text":""},"desc":"Remove unused variable 'XCircle'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadQualityData'. Either include it or remove the dependency array.","line":212,"column":6,"nodeType":"ArrayExpression","endLine":212,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [loadQualityData, tenantFilter]","fix":{"range":[7102,7116],"text":"[loadQualityData, tenantFilter]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle, CheckCircle, XCircle, Info, Loader2, RefreshCw } from 'lucide-react';\nimport { analyzeDataQuality } from '@/api/functions';\n\nexport default function DataQualityReport({ tenantFilter }) {\n  const [loading, setLoading] = useState(true);\n  const [qualityData, setQualityData] = useState(null);\n  const [error, setError] = useState(null);\n\n  const loadQualityData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('DataQualityReport: Analyzing with filter:', tenantFilter);\n      \n      // Extract tenant_id from tenantFilter for the backend call\n      const tenant_id = tenantFilter?.tenant_id || null;\n      \n      const result = await analyzeDataQuality({ tenant_id });\n      console.log('DataQualityReport: Raw result:', result);\n      \n      // Check if we got a valid response\n      if (!result || !result.data) {\n        throw new Error('No data received from analysis');\n      }\n\n      const data = result.data;\n      console.log('DataQualityReport: Analysis data:', data);\n\n      // Validate the data structure\n      if (!data.report) {\n        throw new Error('Invalid response format: missing report data');\n      }\n\n      // Calculate overall score from entity scores\n      const report = data.report;\n      const entityScores = {\n        Contacts: 100,\n        Accounts: 100,\n        Leads: 100,\n        Opportunities: 100\n      };\n\n      // Calculate scores based on issues\n      if (report.contacts) {\n        const contactIssues = report.contacts.issues_percentage || 0;\n        entityScores.Contacts = Math.round(100 - contactIssues);\n      }\n      if (report.accounts) {\n        const accountIssues = report.accounts.issues_percentage || 0;\n        entityScores.Accounts = Math.round(100 - accountIssues);\n      }\n      if (report.leads) {\n        const leadIssues = report.leads.issues_percentage || 0;\n        entityScores.Leads = Math.round(100 - leadIssues);\n      }\n\n      // Calculate overall score\n      const scores = Object.values(entityScores);\n      const overallScore = Math.round(scores.reduce((a, b) => a + b, 0) / scores.length);\n\n      // Format issues for display\n      const issues = {\n        Contacts: [],\n        Accounts: [],\n        Leads: [],\n        Opportunities: []\n      };\n\n      // Process contacts issues\n      if (report.contacts?.issues) {\n        const contactIssues = report.contacts.issues;\n        if (contactIssues.missing_first_name > 0) {\n          issues.Contacts.push({\n            field: 'First Name',\n            issue: 'Missing first name',\n            count: contactIssues.missing_first_name\n          });\n        }\n        if (contactIssues.missing_last_name > 0) {\n          issues.Contacts.push({\n            field: 'Last Name',\n            issue: 'Missing last name',\n            count: contactIssues.missing_last_name\n          });\n        }\n        if (contactIssues.invalid_email > 0) {\n          issues.Contacts.push({\n            field: 'Email',\n            issue: 'Invalid email format',\n            count: contactIssues.invalid_email\n          });\n        }\n        if (contactIssues.missing_contact_info > 0) {\n          issues.Contacts.push({\n            field: 'Contact Info',\n            issue: 'Missing both phone and email',\n            count: contactIssues.missing_contact_info\n          });\n        }\n        if (contactIssues.invalid_name_characters > 0) {\n          issues.Contacts.push({\n            field: 'Name',\n            issue: 'Invalid characters in name',\n            count: contactIssues.invalid_name_characters\n          });\n        }\n      }\n\n      // Process accounts issues\n      if (report.accounts?.issues) {\n        const accountIssues = report.accounts.issues;\n        if (accountIssues.invalid_email > 0) {\n          issues.Accounts.push({\n            field: 'Email',\n            issue: 'Invalid email format',\n            count: accountIssues.invalid_email\n          });\n        }\n        if (accountIssues.missing_contact_info > 0) {\n          issues.Accounts.push({\n            field: 'Contact Info',\n            issue: 'Missing both phone and email',\n            count: accountIssues.missing_contact_info\n          });\n        }\n        if (accountIssues.invalid_name_characters > 0) {\n          issues.Accounts.push({\n            field: 'Name',\n            issue: 'Invalid characters in name',\n            count: accountIssues.invalid_name_characters\n          });\n        }\n      }\n\n      // Process leads issues\n      if (report.leads?.issues) {\n        const leadIssues = report.leads.issues;\n        if (leadIssues.missing_first_name > 0) {\n          issues.Leads.push({\n            field: 'First Name',\n            issue: 'Missing first name',\n            count: leadIssues.missing_first_name\n          });\n        }\n        if (leadIssues.missing_last_name > 0) {\n          issues.Leads.push({\n            field: 'Last Name',\n            issue: 'Missing last name',\n            count: leadIssues.missing_last_name\n          });\n        }\n        if (leadIssues.invalid_email > 0) {\n          issues.Leads.push({\n            field: 'Email',\n            issue: 'Invalid email format',\n            count: leadIssues.invalid_email\n          });\n        }\n        if (leadIssues.missing_contact_info > 0) {\n          issues.Leads.push({\n            field: 'Contact Info',\n            issue: 'Missing both phone and email',\n            count: leadIssues.missing_contact_info\n          });\n        }\n        if (leadIssues.invalid_name_characters > 0) {\n          issues.Leads.push({\n            field: 'Name',\n            issue: 'Invalid characters in name',\n            count: leadIssues.invalid_name_characters\n          });\n        }\n      }\n\n      // Generate recommendations\n      const recommendations = [];\n      if (overallScore < 80) {\n        recommendations.push('Review and clean up records with missing or invalid data');\n      }\n      if (Object.values(issues).some(arr => arr.some(i => i.field.includes('Email')))) {\n        recommendations.push('Validate email addresses to ensure they follow proper format');\n      }\n      if (Object.values(issues).some(arr => arr.some(i => i.field.includes('Name')))) {\n        recommendations.push('Ensure all contacts and leads have complete name information');\n      }\n      if (Object.values(issues).some(arr => arr.some(i => i.issue.includes('contact info')))) {\n        recommendations.push('Add phone numbers or emails for records missing contact information');\n      }\n\n      setQualityData({\n        overallScore,\n        entityScores,\n        issues,\n        recommendations\n      });\n\n    } catch (error) {\n      console.error('Error analyzing data quality:', error);\n      setError(error.message);\n      setQualityData(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadQualityData();\n  }, [tenantFilter]);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-12\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n        <span className=\"ml-3 text-slate-400\">Analyzing data quality...</span>\n      </div>\n    );\n  }\n\n  if (error || !qualityData) {\n    return (\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-12 text-center\">\n          <AlertTriangle className=\"w-12 h-12 text-orange-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-slate-300 mb-2\">Unable to Load Data Quality Report</h3>\n          <p className=\"text-slate-400 mb-4\">{error || 'Please try again later.'}</p>\n          <Button onClick={loadQualityData} variant=\"outline\" className=\"bg-slate-700 hover:bg-slate-600 text-slate-200 border-slate-600\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getScoreColor = (score) => {\n    if (score >= 80) return 'text-green-400';\n    if (score >= 60) return 'text-yellow-400';\n    return 'text-red-400';\n  };\n\n  const getScoreBadge = (score) => {\n    if (score >= 80) return <Badge className=\"bg-green-900/30 text-green-400 border-green-700\">Excellent</Badge>;\n    if (score >= 60) return <Badge className=\"bg-yellow-900/30 text-yellow-400 border-yellow-700\">Good</Badge>;\n    return <Badge className=\"bg-red-900/30 text-red-400 border-red-700\">Needs Improvement</Badge>;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-100\">Data Quality Report</h2>\n          <p className=\"text-slate-400\">Comprehensive analysis of your CRM data quality</p>\n        </div>\n        <Button onClick={loadQualityData} variant=\"outline\" className=\"bg-slate-700 hover:bg-slate-600 text-slate-200 border-slate-600\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Refresh\n        </Button>\n      </div>\n\n      {/* Overall Score */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Overall Data Quality Score</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className={`text-6xl font-bold ${getScoreColor(qualityData.overallScore)}`}>\n                {qualityData.overallScore}%\n              </div>\n              <div className=\"mt-2\">\n                {getScoreBadge(qualityData.overallScore)}\n              </div>\n            </div>\n            <div className=\"text-right text-slate-400\">\n              <p className=\"text-sm\">Last analyzed: {new Date().toLocaleString()}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Entity Scores */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {Object.entries(qualityData.entityScores || {}).map(([entity, score]) => (\n          <Card key={entity} className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-sm text-slate-300\">{entity}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className={`text-3xl font-bold ${getScoreColor(score)}`}>\n                {score}%\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Issues by Entity */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {Object.entries(qualityData.issues || {}).map(([entity, entityIssues]) => (\n          <Card key={entity} className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100\">{entity} Issues</CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                {entityIssues.length} issue{entityIssues.length !== 1 ? 's' : ''} found\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {entityIssues.length === 0 ? (\n                  <div className=\"flex items-center gap-2 text-green-400\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">No issues found</span>\n                  </div>\n                ) : (\n                  entityIssues.map((issue, idx) => (\n                    <div key={idx} className=\"flex items-start gap-3 p-3 bg-slate-700/50 rounded-lg\">\n                      <AlertTriangle className=\"w-4 h-4 text-yellow-400 mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-slate-200 font-medium\">{issue.field}</p>\n                        <p className=\"text-xs text-slate-400 mt-1\">{issue.issue}</p>\n                        <p className=\"text-xs text-slate-500 mt-1\">\n                          Affected records: {issue.count}\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Recommendations */}\n      {qualityData.recommendations && qualityData.recommendations.length > 0 && (\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n              <Info className=\"w-5 h-5 text-blue-400\" />\n              Recommendations\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {qualityData.recommendations.map((rec, idx) => (\n                <div key={idx} className=\"border-l-4 border-blue-400 pl-4 py-2\">\n                  <p className=\"text-sm text-slate-200\">{rec}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\reports\\ForecastingDashboard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\reports\\HistoricalTrends.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Account' is defined but never used.","line":7,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"Account"},"fix":{"range":[482,491],"text":""},"desc":"Remove unused variable 'Account'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Activity' is defined but never used.","line":7,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"Activity"},"fix":{"range":[510,520],"text":""},"desc":"Remove unused variable 'Activity'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"User"},"fix":{"range":[546,584],"text":""},"desc":"Remove unused variable 'User'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'useTenant' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"useTenant"},"fix":{"range":[585,637],"text":""},"desc":"Remove unused variable 'useTenant'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';\nimport { TrendingUp, Calendar, Users, Target, DollarSign, Loader2 } from 'lucide-react';\nimport { Contact, Account, Lead, Opportunity, Activity } from '@/api/entities';\nimport { User } from '@/api/entities';\nimport { useTenant } from '../shared/tenantContext';\n\nexport default function HistoricalTrends({ tenantFilter }) {\n  const [loading, setLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState('30');\n  const [trendsData, setTrendsData] = useState([]);\n  const [summaryStats, setSummaryStats] = useState({\n    totalContacts: 0,\n    totalLeads: 0,\n    totalOpportunities: 0,\n    totalValue: 0\n  });\n\n  const loadTrendsData = useCallback(async () => {\n    setLoading(true);\n    try {\n      console.log('HistoricalTrends: Using filter:', tenantFilter);\n      \n      // Calculate date range\n      const endDate = new Date();\n      endDate.setHours(23, 59, 59, 999); // Ensure endDate includes the entire current day\n      const startDate = new Date();\n      startDate.setDate(endDate.getDate() - parseInt(timeRange) + 1); // +1 to include startDate itself in the range\n      startDate.setHours(0, 0, 0, 0); // Ensure startDate includes the very beginning of the day\n\n      console.log('HistoricalTrends: Date range:', {\n        startDate: startDate.toISOString(),\n        endDate: endDate.toISOString()\n      });\n\n      // Load data with tenant filter\n      const effectiveFilter = { ...tenantFilter };\n      if (!('is_test_data' in effectiveFilter)) {\n        effectiveFilter.is_test_data = { $ne: true };\n      }\n\n      const [contacts, leads, opportunities] = await Promise.all([\n        Contact.filter(effectiveFilter).catch(() => []),\n        Lead.filter(effectiveFilter).catch(() => []),\n        Opportunity.filter(effectiveFilter).catch(() => [])\n      ]);\n\n      console.log('HistoricalTrends: Fetched data:', {\n        contacts: contacts.length,\n        leads: leads.length,\n        opportunities: opportunities.length\n      });\n\n      // Log sample dates from fetched data\n      if (contacts.length > 0) {\n        console.log('HistoricalTrends: Sample contact dates:', {\n          first: contacts[0]?.created_date,\n          second: contacts[1]?.created_date,\n          third: contacts[2]?.created_date\n        });\n      }\n      if (leads.length > 0) {\n        console.log('HistoricalTrends: Sample lead dates:', {\n          first: leads[0]?.created_date,\n          second: leads[1]?.created_date,\n          third: leads[2]?.created_date\n        });\n      }\n      if (opportunities.length > 0) {\n        console.log('HistoricalTrends: Sample opportunity dates:', {\n          first: opportunities[0]?.created_date,\n          second: opportunities[1]?.created_date,\n          third: opportunities[2]?.created_date\n        });\n      }\n\n      // Filter data by date range for the trend\n      const filterByDateRange = (items, dateField = 'created_date') => {\n        return items.filter((item, index) => {\n          if (!item[dateField]) {\n            if (index < 5) console.log(`HistoricalTrends: Missing date field: '${dateField}' for item ID: ${item.id}`);\n            return false;\n          }\n          const itemDate = new Date(item[dateField]);\n          // Adjust itemDate to its specific day's start for comparison with startDate, and end for endDate\n          const itemDateDayStart = new Date(itemDate.getFullYear(), itemDate.getMonth(), itemDate.getDate(), 0, 0, 0, 0);\n          const itemDateDayEnd = new Date(itemDate.getFullYear(), itemDate.getMonth(), itemDate.getDate(), 23, 59, 59, 999);\n\n\n          const inRange = itemDateDayStart >= startDate && itemDateDayEnd <= endDate;\n          \n          if (!inRange && index < 5) { // Log only a few examples to avoid console spam\n            console.log('HistoricalTrends: Item date out of range:', {\n              itemId: item.id,\n              itemDate: itemDate.toISOString(),\n              itemDateDayStart: itemDateDayStart.toISOString(),\n              itemDateDayEnd: itemDateDayEnd.toISOString(),\n              rangeStart: startDate.toISOString(),\n              rangeEnd: endDate.toISOString(),\n              isBeforeStart: itemDateDayStart < startDate,\n              isAfterEnd: itemDateDayEnd > endDate,\n            });\n          }\n          \n          return inRange;\n        });\n      };\n\n      const filteredContacts = filterByDateRange(contacts, 'created_date');\n      const filteredLeads = filterByDateRange(leads, 'created_date');\n      const filteredOpportunities = filterByDateRange(opportunities, 'created_date');\n\n      console.log('HistoricalTrends: Filtered by date range:', {\n        contacts: filteredContacts.length,\n        leads: filteredLeads.length,\n        opportunities: filteredOpportunities.length,\n        dateRange: `${startDate.toLocaleDateString()} to ${endDate.toLocaleDateString()}`\n      });\n\n      // Calculate summary stats (for the selected period)\n      const totalValue = filteredOpportunities.reduce((sum, opp) => sum + (opp.amount || 0), 0);\n      setSummaryStats({\n        totalContacts: filteredContacts.length,\n        totalLeads: filteredLeads.length,\n        totalOpportunities: filteredOpportunities.length,\n        totalValue\n      });\n\n      // Group data by day for trend analysis\n      const dailyData = {};\n      const dayCount = parseInt(timeRange);\n      \n      // Initialize all days with zero values\n      for (let i = 0; i < dayCount; i++) {\n        const date = new Date(endDate); // Start from endDate and go backwards\n        date.setDate(endDate.getDate() - i);\n        const dateStr = date.toISOString().split('T')[0];\n        dailyData[dateStr] = {\n          date: dateStr,\n          contacts: 0,\n          leads: 0,\n          opportunities: 0,\n          value: 0\n        };\n      }\n\n      // Count contacts by day\n      filteredContacts.forEach(contact => {\n        const dateStr = new Date(contact.created_date).toISOString().split('T')[0];\n        if (dailyData[dateStr]) {\n          dailyData[dateStr].contacts++;\n        }\n      });\n\n      // Count leads by day\n      filteredLeads.forEach(lead => {\n        const dateStr = new Date(lead.created_date).toISOString().split('T')[0];\n        if (dailyData[dateStr]) {\n          dailyData[dateStr].leads++;\n        }\n      });\n\n      // Count opportunities by day\n      filteredOpportunities.forEach(opportunity => {\n        const dateStr = new Date(opportunity.created_date).toISOString().split('T')[0];\n        if (dailyData[dateStr]) {\n          dailyData[dateStr].opportunities++;\n          dailyData[dateStr].value += (opportunity.amount || 0);\n        }\n      });\n\n      // Convert to array and sort by date\n      const trendsArray = Object.values(dailyData).sort((a, b) => new Date(a.date) - new Date(b.date));\n      \n      // Format dates for display\n      const formattedTrends = trendsArray.map(item => ({\n        ...item,\n        displayDate: new Date(item.date).toLocaleDateString('en-US', { \n          month: 'short', \n          day: 'numeric' \n        })\n      }));\n\n      console.log('HistoricalTrends: Final trends data sample (last 5 days):', formattedTrends.slice(-5));\n\n      setTrendsData(formattedTrends);\n    } catch (error) {\n      console.error('Error loading trends data:', error);\n      setTrendsData([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [tenantFilter, timeRange]);\n\n  useEffect(() => {\n    loadTrendsData();\n  }, [loadTrendsData]);\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-center p-12\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-blue-600\" />\n          <span className=\"ml-3 text-slate-600\">Loading historical trends...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-100\">Historical Trends</h2>\n          <p className=\"text-slate-400\">New records created over time</p>\n        </div>\n        <Select value={timeRange} onValueChange={setTimeRange}>\n          <SelectTrigger className=\"w-40 bg-slate-700 border-slate-600 text-slate-200\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent className=\"bg-slate-700 border-slate-600\">\n            <SelectItem value=\"7\">Last 7 days</SelectItem>\n            <SelectItem value=\"30\">Last 30 days</SelectItem>\n            <SelectItem value=\"90\">Last 90 days</SelectItem>\n            <SelectItem value=\"180\">Last 6 months</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-slate-400\">New Contacts</CardTitle>\n            <Users className=\"h-4 w-4 text-blue-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-slate-100\">{summaryStats.totalContacts}</div>\n            <p className=\"text-xs text-slate-500\">Created in selected period</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-slate-400\">New Leads</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-slate-100\">{summaryStats.totalLeads}</div>\n            <p className=\"text-xs text-slate-500\">Created in selected period</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-slate-400\">New Opportunities</CardTitle>\n            <Target className=\"h-4 w-4 text-purple-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-slate-100\">{summaryStats.totalOpportunities}</div>\n            <p className=\"text-xs text-slate-500\">Created in selected period</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-slate-400\">Pipeline Value</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-orange-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-slate-100\">${summaryStats.totalValue.toLocaleString()}</div>\n            <p className=\"text-xs text-slate-500\">From new opportunities</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Trends Chart */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Daily Activity Trends</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={trendsData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                <XAxis dataKey=\"displayDate\" tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <YAxis tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#1e293b', \n                    border: '1px solid #475569', \n                    borderRadius: '8px', \n                    color: '#f1f5f9' \n                  }} \n                />\n                <Legend wrapperStyle={{ color: '#f1f5f9' }} />\n                <Line type=\"monotone\" dataKey=\"contacts\" stroke=\"#3b82f6\" strokeWidth={2} name=\"Contacts\" />\n                <Line type=\"monotone\" dataKey=\"leads\" stroke=\"#10b981\" strokeWidth={2} name=\"Leads\" />\n                <Line type=\"monotone\" dataKey=\"opportunities\" stroke=\"#f59e0b\" strokeWidth={2} name=\"Opportunities\" />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Daily Pipeline Value</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={trendsData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                <XAxis dataKey=\"displayDate\" tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <YAxis tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <Tooltip \n                  formatter={(value) => [`$${value.toLocaleString()}`, 'Value']} \n                  contentStyle={{ \n                    backgroundColor: '#1e293b', \n                    border: '1px solid #475569', \n                    borderRadius: '8px', \n                    color: '#f1f5f9' \n                  }} \n                />\n                <Bar dataKey=\"value\" fill=\"#8b5cf6\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {summaryStats.totalContacts === 0 && summaryStats.totalLeads === 0 && summaryStats.totalOpportunities === 0 && (\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-12 text-center\">\n            <Calendar className=\"w-12 h-12 text-slate-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-slate-300 mb-2\">No New Records in This Period</h3>\n            <p className=\"text-slate-400\">\n              No contacts, leads, or opportunities were created in the last {timeRange} days. \n              Try selecting a longer time period to see historical data.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\reports\\LeadAnalytics.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used.","line":3,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardDescription"},"fix":{"range":[102,119],"text":""},"desc":"Remove unused variable 'CardDescription'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'allLeads' is assigned a value but never used.","line":83,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"allLeads"},"fix":{"range":[5381,5389],"text":""},"desc":"Remove unused variable 'allLeads'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":370,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":370,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[17059,17066],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, TrendingUp, Target, Zap } from \"lucide-react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  Legend // Added Legend as per outline\n} from \"recharts\";\nimport { format, subDays } from \"date-fns\"; // Changed from subMonths/startOfMonth\n\n// Mock Lead entity to simulate data fetching.\n// In a real application, this would typically import an actual API client or ORM model.\nclass Lead {\n    constructor({ id, status, source, estimated_value, created_date, score, tenant_id }) {\n        this.id = id;\n        this.status = status;\n        this.source = source;\n        this.estimated_value = estimated_value;\n        this.created_date = created_date;\n        this.score = score;\n        this.tenant_id = tenant_id;\n    }\n\n    static async filter(tenantFilter) {\n        // Simulate an asynchronous API call\n        await new Promise(resolve => setTimeout(resolve, 300)); \n\n        const mockLeads = [\n            // Tenant 'tenant1' Leads\n            new Lead({ id: 'l1', status: 'new', source: 'website', estimated_value: 1000, created_date: '2024-07-28T10:00:00Z', score: 75, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l2', status: 'contacted', source: 'referral', estimated_value: 1500, created_date: '2024-07-25T11:00:00Z', score: 80, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l3', status: 'converted', source: 'website', estimated_value: 5000, created_date: '2024-07-20T12:00:00Z', score: 90, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l4', status: 'new', source: 'campaign', estimated_value: 800, created_date: '2024-07-27T09:00:00Z', score: 60, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l5', status: 'converted', source: 'referral', estimated_value: 3000, created_date: '2024-07-15T14:00:00Z', score: 85, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l6', status: 'contacted', source: 'website', estimated_value: 1200, created_date: '2024-07-22T16:00:00Z', score: 55, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l7', status: 'qualified', source: 'website', estimated_value: 2000, created_date: '2024-07-18T10:00:00Z', score: 70, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l8', status: 'new', source: 'cold call', estimated_value: 500, created_date: '2024-07-26T10:00:00Z', score: 30, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l9', status: 'new', source: 'cold call', estimated_value: 500, created_date: '2024-07-25T10:00:00Z', score: 25, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l10', status: 'new', source: 'cold call', estimated_value: 500, created_date: '2024-07-24T10:00:00Z', score: 20, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l11', status: 'converted', source: 'campaign', estimated_value: 6000, created_date: '2024-07-10T09:00:00Z', score: 92, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l12', status: 'qualified', source: 'website', estimated_value: 2500, created_date: '2024-07-23T15:00:00Z', score: 78, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l13', status: 'contacted', source: 'social media', estimated_value: 900, created_date: '2024-07-21T11:00:00Z', score: 65, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l14', status: 'new', source: 'referral', estimated_value: 1100, created_date: '2024-07-29T13:00:00Z', score: 70, tenant_id: 'tenant1' }),\n            new Lead({ id: 'l15', status: 'new', source: 'campaign', estimated_value: 700, created_date: '2024-07-28T14:00:00Z', score: 40, tenant_id: 'tenant1' }),\n\n\n            // Tenant 'tenant2' Leads\n            new Lead({ id: 'l16', status: 'new', source: 'partner', estimated_value: 2000, created_date: '2024-07-29T10:00:00Z', score: 65, tenant_id: 'tenant2' }),\n            new Lead({ id: 'l17', status: 'converted', source: 'website', estimated_value: 7000, created_date: '2024-07-19T11:00:00Z', score: 95, tenant_id: 'tenant2' }),\n            new Lead({ id: 'l18', status: 'contacted', source: 'partner', estimated_value: 1800, created_date: '2024-07-24T12:00:00Z', score: 70, tenant_id: 'tenant2' }),\n            new Lead({ id: 'l19', status: 'new', source: 'social media', estimated_value: 900, created_date: '2024-07-28T09:00:00Z', score: 45, tenant_id: 'tenant2' }),\n            new Lead({ id: 'l20', status: 'converted', source: 'social media', estimated_value: 4000, created_date: '2024-07-13T14:00:00Z', score: 88, tenant_id: 'tenant2' }),\n            new Lead({ id: 'l21', status: 'new', source: 'website', estimated_value: 1100, created_date: '2024-07-27T10:00:00Z', score: 58, tenant_id: 'tenant2' }),\n        ];\n\n        // If tenantFilter is 'all', return all leads. Otherwise, filter by tenant_id.\n        if (tenantFilter === 'all') {\n            return mockLeads;\n        } else {\n            return mockLeads.filter(lead => lead.tenant_id === tenantFilter);\n        }\n    }\n}\n\n\n// Updated COLORS as per outline + added a few more for variety\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#A28FDF', '#FF6347'];\n\nexport default function LeadAnalytics({ tenantFilter }) {\n  // State for fetched and processed data\n  const [allLeads, setAllLeads] = useState([]);\n  const [leadsByStatus, setLeadsByStatus] = useState([]);\n  const [leadsBySource, setLeadsBySource] = useState([]);\n  const [leadsOverTime, setLeadsOverTime] = useState([]);\n  const [leadQualityData, setLeadQualityData] = useState([]);\n\n  // Key metrics states, derived from allLeads\n  const [totalLeadsCount, setTotalLeadsCount] = useState(0);\n  const [convertedLeadsCount, setConvertedLeadsCount] = useState(0);\n  const [conversionRate, setConversionRate] = useState(0);\n  const [avgLeadScore, setAvgLeadScore] = useState(0);\n\n  useEffect(() => {\n    const fetchLeadData = async () => {\n      // Fetch leads based on the tenantFilter\n      const fetchedLeads = await Lead.filter(tenantFilter);\n      setAllLeads(fetchedLeads); // Store raw leads if needed elsewhere, otherwise just process\n\n      // --- Calculate Key Metrics ---\n      const total = fetchedLeads.length;\n      const converted = fetchedLeads.filter(lead => lead.status === 'converted').length;\n      const rate = total > 0 ? (converted / total) * 100 : 0;\n      const avgScore = total > 0 ? fetchedLeads.reduce((sum, lead) => sum + (lead.score || 0), 0) / total : 0;\n      \n      setTotalLeadsCount(total);\n      setConvertedLeadsCount(converted);\n      setConversionRate(rate);\n      setAvgLeadScore(Math.round(avgScore));\n\n      // --- Leads by Status Distribution ---\n      const statusMap = fetchedLeads.reduce((acc, lead) => {\n        const status = lead.status || 'new';\n        acc[status] = (acc[status] || 0) + 1;\n        return acc;\n      }, {});\n      const statusData = Object.entries(statusMap).map(([name, value]) => ({ name, value }));\n      setLeadsByStatus(statusData);\n\n      // --- Lead Source Performance ---\n      const sourceMap = {};\n      fetchedLeads.forEach(lead => {\n        const source = lead.source || 'other';\n        if (!sourceMap[source]) {\n          sourceMap[source] = { total: 0, converted: 0, value: 0 };\n        }\n        sourceMap[source].total++;\n        if (lead.status === 'converted') {\n          sourceMap[source].converted++;\n          sourceMap[source].value += lead.estimated_value || 0;\n        }\n      });\n      const sourceData = Object.entries(sourceMap).map(([name, data]) => ({\n        source: name,\n        leads: data.total,\n        converted: data.converted,\n        conversionRate: data.total > 0 ? Math.round((data.converted / data.total) * 100) : 0,\n        value: Math.round(data.value / 1000)\n      }));\n      setLeadsBySource(sourceData);\n\n      // --- Daily Lead Generation Trend (Last 30 days) ---\n      const dailyData = [];\n      const today = new Date();\n      // Loop from 29 days ago up to today (0 days ago)\n      for (let i = 29; i >= 0; i--) { \n        const date = subDays(today, i);\n        const formattedDate = format(date, 'MMM dd'); // e.g., 'Jul 28'\n        \n        const dayLeads = fetchedLeads.filter(lead => {\n          const leadDate = new Date(lead.created_date);\n          return format(leadDate, 'MMM dd') === formattedDate; // Compare by formatted date string\n        });\n\n        const convertedInDay = dayLeads.filter(lead => lead.status === 'converted').length;\n        \n        dailyData.push({\n          date: formattedDate,\n          leads: dayLeads.length,\n          converted: convertedInDay,\n          rate: dayLeads.length > 0 ? Math.round((convertedInDay / dayLeads.length) * 100) : 0\n        });\n      }\n      setLeadsOverTime(dailyData);\n\n      // --- Lead Quality Distribution ---\n      const qualityRanges = {\n        'Low (0-30)': 0,\n        'Medium (31-60)': 0,\n        'High (61-80)': 0,\n        'Premium (81-100)': 0\n      };\n      fetchedLeads.forEach(lead => {\n        const score = lead.score || 0;\n        if (score <= 30) qualityRanges['Low (0-30)']++;\n        else if (score <= 60) qualityRanges['Medium (31-60)']++;\n        else if (score <= 80) qualityRanges['High (61-80)']++;\n        else qualityRanges['Premium (81-100)']++;\n      });\n      const qualityData = Object.entries(qualityRanges).map(([range, count]) => ({ range, count }));\n      setLeadQualityData(qualityData);\n\n    };\n\n    fetchLeadData();\n  }, [tenantFilter]); // Re-run effect when tenantFilter changes\n\n  // Helper function to render Custom Tooltip for Pie Chart\n  const renderCustomizedTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div \n          className=\"p-2 bg-slate-800 border border-slate-700 rounded-lg shadow-md\"\n          style={{ \n            backgroundColor: '#1e293b', \n            border: '1px solid #475569', \n            borderRadius: '8px',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n          }}\n        >\n          <p className=\"text-sm font-semibold text-slate-100\">{data.name}</p>\n          <p className=\"text-xs text-slate-400\">Count: {data.value}</p>\n          <p className=\"text-xs text-slate-400\">\n            Percentage: {(data.percent * 100).toFixed(1)}%\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Total Leads</p>\n                <p className=\"text-2xl font-bold text-slate-100\">{totalLeadsCount}</p>\n              </div>\n              <Users className=\"w-8 h-8 text-blue-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Conversion Rate</p>\n                <p className=\"text-2xl font-bold text-slate-100\">{conversionRate.toFixed(1)}%</p>\n              </div>\n              <Target className=\"w-8 h-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Converted Leads</p>\n                <p className=\"text-2xl font-bold text-slate-100\">{convertedLeadsCount}</p>\n              </div>\n              <Zap className=\"w-8 h-8 text-purple-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Avg Lead Score</p>\n                <p className=\"text-2xl font-bold text-slate-100\">\n                  {avgLeadScore}\n                </p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-orange-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-slate-100\">Lead Generation Trend (Last 30 Days)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={leadsOverTime} margin={{ top: 5, right: 30, left: 20, bottom: 50 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                <XAxis \n                  dataKey=\"date\" \n                  tick={{ fontSize: 10, fill: '#94a3b8' }}\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={80}\n                  interval=\"preserveStartEnd\"\n                />\n                <YAxis tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#1e293b', \n                    border: '1px solid #475569', \n                    borderRadius: '8px',\n                    color: '#f1f5f9'\n                  }}\n                />\n                <Legend wrapperStyle={{ paddingTop: '20px', color: '#f1f5f9' }} />\n                <Line type=\"monotone\" dataKey=\"leads\" stroke=\"#3b82f6\" strokeWidth={2} name=\"Total Leads\" />\n                <Line type=\"monotone\" dataKey=\"converted\" stroke=\"#10b981\" strokeWidth={2} name=\"Converted\" />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-slate-100\">Lead Status Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={leadsByStatus}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  dataKey=\"value\"\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                >\n                  {leadsByStatus.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip \n                  content={renderCustomizedTooltip} \n                  contentStyle={{ \n                    backgroundColor: '#1e293b', \n                    border: '1px solid #475569', \n                    borderRadius: '8px',\n                    color: '#f1f5f9'\n                  }}\n                />\n                <Legend wrapperStyle={{ paddingTop: '20px', color: '#f1f5f9' }} />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-slate-100\">Lead Quality Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={leadQualityData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                <XAxis dataKey=\"range\" tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <YAxis tick={{ fontSize: 12, fill: '#94a3b8' }} allowDecimals={false} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#1e293b', \n                    border: '1px solid #475569', \n                    borderRadius: '8px',\n                    color: '#f1f5f9'\n                  }}\n                />\n                <Bar dataKey=\"count\" fill=\"#8b5cf6\" radius={[4, 4, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-slate-100\">Lead Source Performance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {leadsBySource.map((source, index) => (\n                <div key={source.source} className=\"flex items-center justify-between p-3 bg-slate-700 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-slate-200 capitalize\">{source.source}</p>\n                    <p className=\"text-sm text-slate-400\">\n                      {source.leads} leads ΓÇó {source.converted} converted ΓÇó ${source.value}K value\n                    </p>\n                  </div>\n                  <Badge \n                    variant={source.conversionRate > 30 ? \"default\" : source.conversionRate > 15 ? \"secondary\" : \"outline\"}\n                    className=\"ml-4 bg-slate-600 text-slate-200 border-slate-500\"\n                  >\n                    {source.conversionRate}% rate\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\reports\\OverviewStats.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Contact' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"Contact"},"fix":{"range":[393,401],"text":""},"desc":"Remove unused variable 'Contact'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ActivityEntity' is defined but never used.","line":25,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":73,"suggestions":[{"messageId":"removeVar","data":{"varName":"ActivityEntity"},"fix":{"range":[428,456],"text":""},"desc":"Remove unused variable 'ActivityEntity'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":229,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":229,"endColumn":66,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[8807,8814],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Users,\n  Building,\n  Star,\n  Target,\n  DollarSign,\n  Activity,\n} from \"lucide-react\";\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  Tooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Legend,\n} from \"recharts\";\nimport { Contact, Account, Lead, Opportunity, Activity as ActivityEntity } from \"@/api/entities\";\nimport TrendIndicator from './TrendIndicator';\nimport { getDashboardStats } from \"@/api/functions\";\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n\nexport default function OverviewStats({ tenantFilter }) {\n  const [stats, setStats] = useState({\n    contacts: 0,\n    accounts: 0,\n    leads: 0,\n    opportunities: 0,\n    activities: 0,\n    pipelineValue: 0\n  });\n\n  const [trends, setTrends] = useState({\n    contacts: null,\n    accounts: null,\n    leads: null,\n    opportunities: null,\n    activities: null,\n    pipelineValue: null,\n  });\n  \n  const [chartData, setChartData] = useState({\n    leadSources: [],\n    opportunityStages: []\n  });\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        console.log('OverviewStats: Fetching stats with filter:', tenantFilter);\n        \n        // Use the same function as Dashboard to ensure consistency\n        const response = await getDashboardStats({ tenantFilter });\n        \n        // Ensure test data is excluded unless explicitly included for direct entity fetches\n        const effectiveFilter = { ...tenantFilter };\n        if (!('is_test_data' in effectiveFilter)) {\n          effectiveFilter.is_test_data = { $ne: true };\n        }\n\n        // Fetch additional data for charts and specific stats that getDashboardStats might not provide as totals\n        const [allLeads, allOpportunities, allAccounts] = await Promise.all([\n          Lead.filter(effectiveFilter),\n          Opportunity.filter(effectiveFilter),\n          Account.filter(effectiveFilter)\n        ]);\n\n        if (response.data && response.data.stats) {\n          const dashboardStats = response.data.stats;\n          \n          console.log('OverviewStats: Received dashboard stats from getDashboardStats:', dashboardStats);\n          console.log('OverviewStats: Chart data counts from direct entity fetches:', {\n            leads: allLeads.length,\n            opportunities: allOpportunities.length,\n            accounts: allAccounts.length\n          });\n          \n          setStats({\n            contacts: dashboardStats.totalContacts || 0,\n            accounts: allAccounts.length, // Use actual count from direct fetch for accuracy\n            leads: allLeads.length,       // Use actual total leads from direct fetch\n            opportunities: allOpportunities.length, // Use actual total opportunities from direct fetch\n            activities: dashboardStats.activitiesLogged || 0, // Assuming this aligns with 'Activities This Month' contextually from dashboard\n            pipelineValue: dashboardStats.pipelineValue || 0\n          });\n          \n          // Set trends if available\n          if (dashboardStats.trends) {\n            setTrends(dashboardStats.trends);\n          }\n        } else {\n          console.warn(\"OverviewStats: No stats data received from getDashboardStats.\");\n        }\n\n        // Prepare chart data\n        // Initialize all possible lead sources\n        const allLeadSources = {\n          'website': 0,\n          'referral': 0,\n          'cold_call': 0,\n          'email': 0,\n          'social_media': 0,\n          'trade_show': 0,\n          'advertising': 0,\n          'other': 0\n        };\n\n        allLeads.forEach(lead => {\n          const source = (lead.source || '').toLowerCase();\n          const key = Object.prototype.hasOwnProperty.call(allLeadSources, source) ? source : 'other';\n          allLeadSources[key]++;\n        });\n        \n        // Initialize all possible opportunity stages\n        const allOpportunityStages = {\n          'prospecting': 0,\n          'qualification': 0,\n          'proposal': 0,\n          'negotiation': 0,\n          'closed_won': 0,\n          'closed_lost': 0\n        };\n\n        allOpportunities.forEach(opp => {\n          const stage = (opp.stage || '').toLowerCase();\n          const key = Object.prototype.hasOwnProperty.call(allOpportunityStages, stage) ? stage : 'prospecting';\n          allOpportunityStages[key]++;\n        });\n        \n        setChartData({\n          leadSources: Object.entries(allLeadSources).map(([name, value]) => ({ \n            name: name.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()), \n            value,\n            originalKey: name\n          })),\n          opportunityStages: Object.entries(allOpportunityStages).map(([name, value]) => ({ \n            name: name.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()), \n            value,\n            originalKey: name\n          })),\n        });\n\n      } catch (error) {\n        console.error(\"Error fetching overview stats:\", error);\n      }\n    };\n\n    fetchStats();\n  }, [tenantFilter]);\n\n  const statItems = [\n    { title: \"Total Contacts\", value: stats.contacts, icon: Users, color: \"bg-blue-500\", trend: trends.contacts },\n    { title: \"Active Accounts\", value: stats.accounts, icon: Building, color: \"bg-emerald-500\", trend: trends.accounts },\n    { title: \"Total Leads\", value: stats.leads, icon: Star, color: \"bg-purple-500\", trend: trends.leads },\n    { title: \"Opportunities\", value: stats.opportunities, icon: Target, color: \"bg-orange-500\", trend: trends.opportunities },\n    { title: \"Pipeline Value\", value: `$${stats.pipelineValue.toLocaleString()}`, icon: DollarSign, color: \"bg-amber-500\", trend: trends.pipelineValue },\n    { title: \"Activities This Month\", value: stats.activities, icon: Activity, color: \"bg-indigo-500\", trend: trends.activities }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {statItems.map((stat, index) => (\n          <Card key={index} className=\"relative overflow-hidden bg-slate-800 border-slate-700 shadow-lg hover:shadow-xl transition-all duration-300\">\n            <div className={`absolute top-0 right-0 w-32 h-32 ${stat.color} opacity-5 rounded-full transform translate-x-8 -translate-y-8`} />\n            <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-400\">\n                {stat.title}\n              </CardTitle>\n              <div className={`p-2 rounded-lg ${stat.color} bg-opacity-10`}>\n                <stat.icon className={`w-4 h-4 ${stat.color.replace('bg-', 'text-')}`} />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-slate-100 mb-1\">\n                {stat.value}\n              </div>\n              <TrendIndicator percentage={stat.trend} />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Lead Sources Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={chartData.leadSources.filter(item => item.value > 0)} // Only show slices with data\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label={({ name, percent }) => {\n                    // Only show labels for slices that are 5% or larger to avoid overlap\n                    if (percent >= 0.05) {\n                      return `${name} ${(percent * 100).toFixed(0)}%`;\n                    }\n                    return '';\n                  }}\n                >\n                  {chartData.leadSources.filter(item => item.value > 0).map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #475569', borderRadius: '8px', color: '#f1f5f9' }} />\n                <Legend\n                  align=\"center\"\n                  verticalAlign=\"bottom\"\n                  layout=\"horizontal\"\n                  iconType=\"circle\"\n                  wrapperStyle={{ \n                    paddingTop: '15px',\n                    fontSize: '12px' \n                  }}\n                  payload={chartData.leadSources.map((item, index) => {\n                    const filteredItems = chartData.leadSources.filter(d => d.value > 0);\n                    const itemInFiltered = filteredItems.find(fItem => Object.prototype.hasOwnProperty.call(fItem, 'originalKey') && fItem.originalKey === item.originalKey);\n                    const color = item.value > 0 \n                      ? COLORS[filteredItems.indexOf(itemInFiltered) % COLORS.length] \n                      : '#64748b'; // Grey out items with 0 value\n                    return {\n                      value: item.name,\n                      type: 'circle',\n                      color: color,\n                      payload: item // Keep the original item data in payload\n                    };\n                  })}\n                  formatter={(value, entry) => {\n                    const item = entry.payload;\n                    const totalWithData = chartData.leadSources.reduce((sum, item) => sum + (item.value > 0 ? item.value : 0), 0);\n                    const percent = totalWithData > 0 && item.value > 0 ? ((item.value / totalWithData) * 100).toFixed(0) : 0;\n                    return (\n                      <span style={{ \n                        color: entry.color, // match slice color; grey for zero\n                        fontStyle: item.value === 0 ? 'italic' : 'normal'\n                      }}>\n                        {value} ({item.value > 0 ? `${percent}%` : '0'})\n                      </span>\n                    );\n                  }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Sales Pipeline by Stage</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={chartData.opportunityStages.filter(item => item.value > 0)}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                <XAxis\n                  dataKey=\"name\"\n                  tick={{ fontSize: 12, fill: '#94a3b8' }}\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={80}\n                />\n                <YAxis tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <Tooltip contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #475569', borderRadius: '8px', color: '#f1f5f9' }} />\n                <Bar dataKey=\"value\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\reports\\ProductivityAnalytics.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":5,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"Clock"},"fix":{"range":[231,238],"text":""},"desc":"Remove unused variable 'Clock'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":302,"column":72,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11264,11277],"text":"Today&apos;s Tasks"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11264,11277],"text":"Today&lsquo;s Tasks"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11264,11277],"text":"Today&#39;s Tasks"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11264,11277],"text":"Today&rsquo;s Tasks"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":406,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":406,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[15835,15842],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Activity as ActivityIcon, Clock, CheckCircle, Calendar, Zap, Lightbulb } from \"lucide-react\"; // Added Lightbulb and Renamed Activity to ActivityIcon to avoid conflict\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  Legend\n} from \"recharts\";\nimport { startOfWeek, format, subWeeks, isThisWeek, isToday } from \"date-fns\";\nimport { Activity, User } from \"@/api/entities\"; // Assuming User is also exported from here\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n\nexport default function ProductivityAnalytics({ tenantFilter }) {\n  const [activities, setActivities] = useState([]);\n  const [activitiesPerUser, setActivitiesPerUser] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchProductivityData = async () => {\n      setIsLoading(true);\n      try {\n        // Assuming Activity and User from \"@/api/entities\" have a similar .filter method as the mocks\n        const [rawActivities, users] = await Promise.all([\n          Activity.filter(tenantFilter),\n          User.filter(tenantFilter)\n        ]);\n\n        setActivities(rawActivities); // Set the main activities state for overall calculations\n\n        // Process data for activitiesPerUser\n        const userMap = users.reduce((acc, user) => {\n          acc[user.id] = user.name;\n          return acc;\n        }, {});\n\n        const activitiesByUser = rawActivities.reduce((acc, activity) => {\n          if (!activity.userId) return acc; // Skip if no user ID\n          if (!acc[activity.userId]) {\n            acc[activity.userId] = {\n              name: userMap[activity.userId] || `Unknown User (${activity.userId})`,\n              total: 0,\n              completed: 0,\n            };\n          }\n          acc[activity.userId].total++;\n          if (activity.status === 'completed') {\n            acc[activity.userId].completed++;\n          }\n          return acc;\n        }, {});\n\n        const processedActivitiesPerUser = Object.entries(activitiesByUser).map(([userId, data]) => ({\n          userId: userId,\n          name: data.name,\n          totalActivities: data.total,\n          completedActivities: data.completed,\n          completionRate: data.total > 0 ? Math.round((data.completed / data.total) * 100) : 0,\n        }));\n        setActivitiesPerUser(processedActivitiesPerUser);\n\n      } catch (error) {\n        console.error(\"Failed to fetch productivity data:\", error);\n        setActivities([]); // Clear activities on error\n        setActivitiesPerUser([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchProductivityData();\n  }, [tenantFilter]);\n\n  // Calculate key productivity metrics\n  const completedActivities = activities.filter(act => act.status === 'completed');\n  const completionRate = activities.length > 0 ? (completedActivities.length / activities.length) * 100 : 0;\n  const todaysActivities = activities.filter(act => act.due_date && isToday(new Date(act.due_date)));\n  const thisWeekActivities = activities.filter(act => act.due_date && isThisWeek(new Date(act.due_date)));\n\n  // Activity type distribution\n  const getActivityTypeData = () => {\n    const types = {};\n    activities.forEach(activity => {\n      const type = activity.type || 'other';\n      if (!types[type]) {\n        types[type] = { total: 0, completed: 0 };\n      }\n      types[type].total++;\n      if (activity.status === 'completed') {\n        types[type].completed++;\n      }\n    });\n\n    return Object.entries(types).map(([name, data]) => ({\n      type: name,\n      total: data.total,\n      completed: data.completed,\n      completionRate: data.total > 0 ? Math.round((data.completed / data.total) * 100) : 0\n    }));\n  };\n\n  // Weekly activity trends\n  const getWeeklyActivityTrend = () => {\n    const weeklyData = [];\n    // Go back 7 weeks from the current week\n    for (let i = 7; i >= 0; i--) {\n      const weekStart = startOfWeek(subWeeks(new Date(), i), { weekStartsOn: 1 }); // Monday start\n      // To get activities strictly within a week, define weekEnd as the start of the next week\n      const weekEnd = startOfWeek(subWeeks(new Date(), i - 1), { weekStartsOn: 1 }); \n      const weekName = format(weekStart, 'MMM dd'); // Display the start date of the week\n      \n      const weekActivities = activities.filter(activity => {\n        const actCreatedDate = new Date(activity.created_date);\n        return actCreatedDate >= weekStart && actCreatedDate < weekEnd;\n      });\n\n      const completed = weekActivities.filter(act => act.status === 'completed').length;\n      \n      weeklyData.push({\n        week: weekName,\n        activities: weekActivities.length,\n        completed: completed,\n        completionRate: weekActivities.length > 0 ? Math.round((completed / weekActivities.length) * 100) : 0\n      });\n    }\n    return weeklyData;\n  };\n\n  // Priority distribution\n  const getPriorityDistribution = () => {\n    const priorities = {};\n    activities.forEach(activity => {\n      const priority = activity.priority || 'normal';\n      priorities[priority] = (priorities[priority] || 0) + 1;\n    });\n    return Object.entries(priorities).map(([name, value]) => ({ name, value }));\n  };\n\n  // Activity efficiency metrics\n  const getEfficiencyMetrics = () => {\n    const metrics = {\n      onTime: 0,\n      late: 0,\n      upcoming: 0\n    };\n\n    activities.forEach(activity => {\n      if (!activity.due_date) return;\n      \n      const dueDate = new Date(activity.due_date);\n      const now = new Date();\n      \n      if (activity.status === 'completed' && dueDate >= now) { // Completed on or before due date\n        metrics.onTime++;\n      } else if (activity.status === 'completed' && dueDate < now) { // Completed but late\n        metrics.late++; // Count as late even if completed\n      } else if (activity.status !== 'completed' && dueDate < now) { // Not completed and overdue\n        metrics.late++;\n      } else if (activity.status !== 'completed' && dueDate >= now) { // Not completed and upcoming\n        metrics.upcoming++;\n      }\n    });\n\n    return [\n      { name: 'On Time', value: metrics.onTime },\n      { name: 'Overdue', value: metrics.late },\n      { name: 'Upcoming', value: metrics.upcoming }\n    ];\n  };\n\n  const typeData = getActivityTypeData();\n  const weeklyData = getWeeklyActivityTrend();\n  const priorityData = getPriorityDistribution();\n  const efficiencyData = getEfficiencyMetrics();\n\n  // Calculate insights statistics\n  const stats = {\n    highestCompletionDate: null,\n    completionRate: completionRate,\n    mostProductiveType: 'N/A',\n    overdueCount: 0,\n  };\n\n  if (weeklyData.length > 0) {\n    const highestWeek = weeklyData.reduce((max, week) =>\n      (week.completionRate === undefined ? -1 : week.completionRate) > (max.completionRate === undefined ? -1 : max.completionRate) ? week : max,\n      { completionRate: -1 } // Initial value for max.completionRate if all are undefined\n    );\n    if (highestWeek.week && highestWeek.completionRate !== -1) {\n      stats.highestCompletionDate = highestWeek.week;\n    }\n  }\n\n  if (typeData.length > 0) {\n    const mostProductive = typeData.reduce((max, type) =>\n      (type.completionRate === undefined ? -1 : type.completionRate) > (max.completionRate === undefined ? -1 : max.completionRate) ? type : max,\n      { completionRate: -1 }\n    );\n    if (mostProductive.type && mostProductive.completionRate !== -1) {\n      stats.mostProductiveType = mostProductive.type;\n    }\n  }\n\n  const overdueEntry = efficiencyData.find(e => e.name === 'Overdue');\n  if (overdueEntry) {\n    stats.overdueCount = overdueEntry.value;\n  }\n\n  const insights = [\n    {\n      type: 'completion',\n      bgColor: 'bg-blue-50',\n      textColor: 'text-blue-900',\n      borderColor: 'border-blue-200',\n      message: stats.highestCompletionDate\n        ? `Your highest completion rate was during the week of ${stats.highestCompletionDate}. Schedule important tasks during these periods.`\n        : 'Track your activities to see completion patterns.'\n    },\n    {\n      type: 'improvement',\n      bgColor: 'bg-green-50',\n      textColor: 'text-green-900',\n      borderColor: 'border-green-200',\n      message: stats.completionRate < 70 \n        ? `Your completion rate of ${stats.completionRate.toFixed(1)}% needs improvement. Consider reducing task volume or extending deadlines.`\n        : `Great job! Your ${stats.completionRate.toFixed(1)}% completion rate shows strong execution.`\n    },\n    {\n      type: 'focus',\n      bgColor: 'bg-purple-50',\n      textColor: 'text-purple-900',\n      borderColor: 'border-purple-200',\n      message: stats.mostProductiveType !== 'N/A'\n        ? `Most productive activity type: \"${stats.mostProductiveType}\". Focus more energy on high-performing tasks.`\n        : 'Complete more activities to identify your most productive task types.'\n    },\n    {\n      type: 'deadline',\n      bgColor: 'bg-amber-50',\n      textColor: 'text-amber-900',\n      borderColor: 'border-amber-200',\n      message: stats.overdueCount > 0\n        ? `You have ${stats.overdueCount} overdue tasks. Consider using time-blocking and setting realistic deadlines to improve efficiency.`\n        : 'No overdue tasks! Your deadline management is excellent.'\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-6 text-center text-slate-400\">\n          <p>Loading productivity data...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Productivity Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Total Activities</p>\n                <p className=\"text-2xl font-bold text-slate-100\">{activities.length}</p>\n              </div>\n              <ActivityIcon className=\"w-8 h-8 text-blue-400\" /> {/* Changed to ActivityIcon */}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Completion Rate</p>\n                <p className=\"text-2xl font-bold text-slate-100\">{completionRate.toFixed(1)}%</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Today's Tasks</p>\n                <p className=\"text-2xl font-bold text-slate-100\">{todaysActivities.length}</p>\n              </div>\n              <Calendar className=\"w-8 h-8 text-purple-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">This Week</p>\n                <p className=\"text-2xl font-bold text-slate-100\">{thisWeekActivities.length}</p>\n              </div>\n              <Zap className=\"w-8 h-8 text-orange-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-slate-100\">Weekly Activity Trend</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={weeklyData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                <XAxis \n                  dataKey=\"week\" \n                  tick={{ fontSize: 12, fill: '#94a3b8' }}\n                />\n                <YAxis tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#1e293b', \n                    border: '1px solid #475569', \n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n                    color: '#f1f5f9'\n                  }}\n                />\n                <Line type=\"monotone\" dataKey=\"activities\" stroke=\"#3b82f6\" strokeWidth={2} name=\"Total\" />\n                <Line type=\"monotone\" dataKey=\"completed\" stroke=\"#10b981\" strokeWidth={2} name=\"Completed\" />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-slate-100\">Task Completion Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={efficiencyData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                >\n                  {efficiencyData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #475569', borderRadius: '8px', color: '#f1f5f9' }} />\n                <Legend wrapperStyle={{ paddingTop: '20px', color: '#f1f5f9' }} />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-slate-100\">Activity Priority Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={priorityData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                <XAxis dataKey=\"name\" tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <YAxis tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <Tooltip contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #475569', borderRadius: '8px', color: '#f1f5f9' }} />\n                <Bar dataKey=\"value\" fill=\"#8b5cf6\" radius={[4, 4, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-slate-100\">Activity Type Performance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {typeData.map((type, index) => (\n                <div key={type.type} className=\"flex items-center justify-between p-3 bg-slate-700 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-slate-200 capitalize\">{type.type}</p>\n                    <p className=\"text-sm text-slate-400\">\n                      {type.total} total ΓÇó {type.completed} completed\n                    </p>\n                  </div>\n                  <Badge \n                    variant={type.completionRate > 80 ? \"default\" : type.completionRate > 60 ? \"secondary\" : \"outline\"}\n                    className=\"ml-4 bg-slate-600 text-slate-200 border-slate-500\"\n                  >\n                    {type.completionRate}% done\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Productivity Insights */}\n      <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Lightbulb className=\"w-5 h-5 text-yellow-400\" />\n            Productivity Insights & Recommendations\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Insights are based on tenant ID: {tenantFilter?.tenantId || 'N/A'}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {insights.map((insight, idx) => (\n              <div\n                key={idx}\n                className={`p-4 rounded-lg border-2 ${insight.bgColor} ${insight.borderColor}`}\n              >\n                <p className={`text-sm font-medium ${insight.textColor}`}>\n                  {insight.message}\n                </p>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* New: Activities Per User (Fetched but not fully rendered in outline, showing example here) */}\n      <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-lg text-slate-100\">Individual User Performance (within tenant)</CardTitle>\n          <CardDescription className=\"text-slate-400\">Breakdown of total and completed activities per user.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {activitiesPerUser.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart\n                data={activitiesPerUser}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                <XAxis dataKey=\"name\" tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <YAxis tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                <Tooltip contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #475569', borderRadius: '8px', color: '#f1f5f9' }} />\n                <Legend wrapperStyle={{ color: '#f1f5f9' }} />\n                <Bar dataKey=\"totalActivities\" fill=\"#3b82f6\" name=\"Total Activities\" />\n                <Bar dataKey=\"completedActivities\" fill=\"#10b981\" name=\"Completed Activities\" />\n              </BarChart>\n            </ResponsiveContainer>\n          ) : (\n            <p className=\"text-center text-slate-400\">No user data available for this tenant.</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\reports\\SalesAnalytics.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":6,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[306,318],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ScatterChart' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"ScatterChart"},"fix":{"range":[502,518],"text":""},"desc":"Remove unused variable 'ScatterChart'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Scatter' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Scatter"},"fix":{"range":[518,529],"text":""},"desc":"Remove unused variable 'Scatter'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'entry' is defined but never used.","line":339,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":339,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"entry"},"fix":{"range":[14675,14682],"text":""},"desc":"Remove unused variable 'entry'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":359,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":359,"endColumn":61,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[15725,15732],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Target, DollarSign, TrendingUp, Calendar, Award } from \"lucide-react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  ScatterChart,\n  Scatter,\n  Legend\n} from \"recharts\";\nimport { startOfMonth, format, subMonths, differenceInDays } from \"date-fns\";\nimport { Opportunity } from '@/api/entities';\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];\n\n// Changed component props to accept tenantFilter instead of direct opportunities/accounts\nexport default function SalesAnalytics({ tenantFilter }) {\n  const [period, setPeriod] = useState(\"6months\");\n  // State to hold the fetched opportunities\n  const [opportunities, setOpportunities] = useState([]);\n  // States to hold the processed data for charts\n  const [revenueByStage, setRevenueByStage] = useState([]);\n  const [dealsOverTime, setDealsOverTime] = useState([]);\n  const [leadSourcePerformance, setLeadSourcePerformance] = useState([]);\n\n  // useEffect to fetch and process data when tenantFilter or period changes\n  useEffect(() => {\n    const fetchAndProcessSalesData = async () => {\n      // Assuming Opportunity.filter is an async function that fetches opportunities\n      // based on the provided tenantFilter (e.g., tenantId, or 'all' for superadmin)\n      const fetchedOpportunities = await Opportunity.filter(tenantFilter);\n      setOpportunities(fetchedOpportunities); // Store the raw fetched opportunities\n\n      // Process the fetched data for various analytics charts\n      const monthlyData = getMonthlySalesData(fetchedOpportunities, period);\n      setDealsOverTime(monthlyData);\n\n      const stageDistData = getStageDistribution(fetchedOpportunities);\n      setRevenueByStage(stageDistData);\n\n      const leadSourceData = getLeadSourcePerformance(fetchedOpportunities);\n      setLeadSourcePerformance(leadSourceData);\n    };\n\n    fetchAndProcessSalesData();\n  }, [tenantFilter, period]); // Dependencies: re-run when tenantFilter or period changes\n\n  // Monthly sales performance function - now accepts opportunities and period as arguments\n  const getMonthlySalesData = (opportunitiesToProcess, currentPeriod) => {\n    const months = currentPeriod === \"12months\" ? 12 : 6;\n    const monthlyData = [];\n    \n    for (let i = months - 1; i >= 0; i--) {\n      const monthStart = startOfMonth(subMonths(new Date(), i));\n      const monthEnd = startOfMonth(subMonths(new Date(), i - 1)); // Correctly represents the start of the next month\n      const monthName = format(monthStart, 'MMM yyyy');\n      \n      const monthOpps = opportunitiesToProcess.filter(opp => {\n        // Ensure close_date exists and is a valid date string\n        if (!opp.close_date) return false;\n        const closeDate = new Date(opp.close_date);\n        return closeDate >= monthStart && closeDate < monthEnd && opp.stage === 'closed_won';\n      });\n\n      const monthlyRevenue = monthOpps.reduce((sum, opp) => sum + (opp.amount || 0), 0);\n      \n      monthlyData.push({\n        month: monthName,\n        revenue: Math.round(monthlyRevenue / 1000), // Convert to thousands\n        deals: monthOpps.length,\n        avgDeal: monthOpps.length > 0 ? Math.round(monthlyRevenue / monthOpps.length / 1000) : 0\n      });\n    }\n    return monthlyData;\n  };\n\n  // Stage distribution function - now accepts opportunities as an argument\n  const getStageDistribution = (opportunitiesToProcess) => {\n    const stages = {\n      prospecting: { name: \"Prospecting\", count: 0, value: 0 },\n      qualification: { name: \"Qualification\", count: 0, value: 0 },\n      proposal: { name: \"Proposal\", count: 0, value: 0 },\n      negotiation: { name: \"Negotiation\", count: 0, value: 0 },\n      closed_won: { name: \"Closed Won\", count: 0, value: 0 },\n      closed_lost: { name: \"Closed Lost\", count: 0, value: 0 }\n    };\n\n    opportunitiesToProcess.forEach(opp => {\n      if (stages[opp.stage]) {\n        stages[opp.stage].count++;\n        stages[opp.stage].value += opp.amount || 0;\n      }\n    });\n\n    return Object.values(stages).map(stage => ({\n      ...stage,\n      value: Math.round(stage.value / 1000) // Convert to thousands for chart display\n    }));\n  };\n\n  // Lead source performance function - now accepts opportunities as an argument\n  const getLeadSourcePerformance = (opportunitiesToProcess) => {\n    const sources = {};\n    opportunitiesToProcess.forEach(opp => {\n      const source = opp.lead_source || 'unknown';\n      if (!sources[source]) {\n        sources[source] = { count: 0, revenue: 0, closed: 0 };\n      }\n      sources[source].count++;\n      if (opp.stage === 'closed_won') {\n        sources[source].closed++;\n        sources[source].revenue += opp.amount || 0;\n      }\n    });\n\n    return Object.entries(sources).map(([name, data]) => ({\n      source: name,\n      opportunities: data.count,\n      revenue: Math.round(data.revenue / 1000), // Convert to thousands\n      winRate: data.count > 0 ? Math.round((data.closed / data.count) * 100) : 0\n    }));\n  };\n\n  // Calculate key metrics - these now depend on the 'opportunities' state\n  const totalPipelineValue = opportunities.reduce((sum, opp) => sum + (opp.amount || 0), 0);\n  const closedWon = opportunities.filter(opp => opp.stage === 'closed_won');\n  const closedLost = opportunities.filter(opp => opp.stage === 'closed_lost');\n  // Avoid division by zero for winRate calculation\n  const totalClosedOpportunities = closedWon.length + closedLost.length;\n  const winRate = totalClosedOpportunities > 0 ? (closedWon.length / totalClosedOpportunities) * 100 : 0;\n  const avgDealSize = closedWon.length > 0 ? closedWon.reduce((sum, opp) => sum + (opp.amount || 0), 0) / closedWon.length : 0;\n\n  // Calculate sales cycle length\n  const avgSalesCycle = closedWon.reduce((sum, opp) => {\n    if (opp.close_date && opp.created_date) {\n      const closeDate = new Date(opp.close_date);\n      const createdDate = new Date(opp.created_date);\n      // Ensure dates are valid before calculating difference\n      if (!isNaN(closeDate.getTime()) && !isNaN(createdDate.getTime())) {\n          return sum + differenceInDays(closeDate, createdDate);\n      }\n    }\n    return sum;\n  }, 0) / Math.max(closedWon.length, 1); // Avoid division by zero\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Total Pipeline</p>\n                <p className=\"text-2xl font-bold text-slate-100\">\n                  ${(totalPipelineValue / 1000).toFixed(0)}K\n                </p>\n              </div>\n              <DollarSign className=\"w-8 h-8 text-blue-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Win Rate</p>\n                <p className=\"text-2xl font-bold text-slate-100\">{winRate.toFixed(1)}%</p>\n              </div>\n              <Award className=\"w-8 h-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Avg Deal Size</p>\n                <p className=\"text-2xl font-bold text-slate-100\">\n                  ${(avgDealSize / 1000).toFixed(0)}K\n                </p>\n              </div>\n              <Target className=\"w-8 h-8 text-purple-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Sales Cycle</p>\n                <p className=\"text-2xl font-bold text-slate-100\">{Math.round(avgSalesCycle)} days</p>\n              </div>\n              <Calendar className=\"w-8 h-8 text-orange-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={period} onValueChange={setPeriod}>\n        <TabsList className=\"bg-slate-800 border border-slate-700\">\n          <TabsTrigger value=\"6months\" className=\"data-[state=active]:bg-slate-700 data-[state=active]:text-slate-100 text-slate-400\">Last 6 Months</TabsTrigger>\n          <TabsTrigger value=\"12months\" className=\"data-[state=active]:bg-slate-700 data-[state=active]:text-slate-100 text-slate-400\">Last 12 Months</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={period} className=\"space-y-6\">\n          {/* Monthly Revenue Trend */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-slate-100\">Monthly Revenue Trend ($K)</CardTitle>\n                <CardDescription className=\"text-slate-400\">Closed-won revenue over time.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={dealsOverTime}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                    <XAxis \n                      dataKey=\"month\" \n                      tick={{ fontSize: 12, fill: '#94a3b8' }}\n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={80}\n                    />\n                    <YAxis tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                    <Tooltip \n                      formatter={(value) => [`$${value}K`, 'Revenue']}\n                      contentStyle={{ \n                        backgroundColor: '#1e293b', \n                        border: '1px solid #475569', \n                        borderRadius: '8px',\n                        color: '#f1f5f9'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#10b981\" \n                      strokeWidth={3} \n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-slate-100\">Deals Closed by Month</CardTitle>\n                <CardDescription className=\"text-slate-400\">Number of opportunities closed-won each month.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={dealsOverTime}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#475569\" />\n                    <XAxis \n                      dataKey=\"month\" \n                      tick={{ fontSize: 12, fill: '#94a3b8' }}\n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={80}\n                    />\n                    <YAxis tick={{ fontSize: 12, fill: '#94a3b8' }} />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: '#1e293b', \n                        border: '1px solid #475569', \n                        borderRadius: '8px',\n                        color: '#f1f5f9'\n                      }}\n                    />\n                    <Bar dataKey=\"deals\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]} />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Pipeline Distribution */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-slate-100\">Pipeline by Stage ($K)</CardTitle>\n                <CardDescription className=\"text-slate-400\">Current pipeline value by sales stage.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={revenueByStage}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, percent }) => {\n                        // Only show labels for slices that are 3% or larger to avoid overlap\n                        if (percent >= 0.03) {\n                          return `${name} (${(percent * 100).toFixed(0)}%)`;\n                        }\n                        return '';\n                      }}\n                      labelLine={false}\n                    >\n                      {revenueByStage.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      formatter={(value) => [`$${value}K`, 'Pipeline Value']} \n                      contentStyle={{ \n                        backgroundColor: '#1e293b', \n                        border: '1px solid #475569', \n                        borderRadius: '8px',\n                        color: '#f1f5f9'\n                      }}\n                    />\n                    <Legend\n                      align=\"center\"\n                      verticalAlign=\"bottom\"\n                      layout=\"horizontal\"\n                      iconType=\"circle\"\n                      wrapperStyle={{ paddingTop: '20px', color: '#f1f5f9', fontSize: '12px' }}\n                      formatter={(value, entry) => {\n                        const item = revenueByStage.find(item => item.name === value);\n                        const total = revenueByStage.reduce((sum, item) => sum + item.value, 0);\n                        const percent = total > 0 ? ((item?.value || 0) / total * 100).toFixed(0) : 0;\n                        return `${value} (${percent}%)`;\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-slate-100\">Lead Source Performance</CardTitle>\n                <CardDescription className=\"text-slate-400\">Opportunities and revenue by lead source.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {leadSourcePerformance.length > 0 ? (\n                    leadSourcePerformance.map((source, index) => (\n                      <div key={source.source} className=\"flex items-center justify-between p-3 bg-slate-700 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-slate-200 capitalize\">{source.source}</p>\n                          <p className=\"text-sm text-slate-400\">\n                            {source.opportunities} opportunities ΓÇó ${source.revenue}K revenue\n                          </p>\n                        </div>\n                        <Badge \n                          variant={source.winRate > 30 ? \"default\" : source.winRate > 15 ? \"secondary\" : \"outline\"}\n                          className=\"ml-4 bg-slate-600 text-slate-200 border-slate-500\"\n                        >\n                          {source.winRate}% win rate\n                        </Badge>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-sm text-slate-400\">No lead source data available.</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\reports\\TrendIndicator.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'isNeutral' is assigned a value but never used.","line":12,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"isNeutral"},"fix":{"range":[450,485],"text":""},"desc":"Remove unused variable 'isNeutral'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { ArrowUpRight, ArrowDownRight, Minus } from 'lucide-react';\nimport { cn } from \"@/lib/utils\";\n\nexport default function TrendIndicator({ percentage, period = \"from last month\" }) {\n  if (percentage === null || typeof percentage === 'undefined' || !isFinite(percentage)) {\n    return null; // Don't render if the trend is not available\n  }\n\n  const isPositive = percentage > 0;\n  const isNegative = percentage < 0;\n  const isNeutral = percentage === 0;\n\n  const color = isPositive ? \"text-green-600\" : isNegative ? \"text-red-600\" : \"text-slate-500\";\n  const Icon = isPositive ? ArrowUpRight : isNegative ? ArrowDownRight : Minus;\n\n  return (\n    <p className={cn(\"text-xs text-muted-foreground flex items-center\", color)}>\n      <Icon className=\"w-4 h-4 mr-1\" />\n      {isPositive ? '+' : ''}{percentage.toFixed(1)}% {period}\n    </p>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\AIExecutionLogViewer.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'PerformanceLog' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"PerformanceLog"},"fix":{"range":[66,114],"text":""},"desc":"Remove unused variable 'PerformanceLog'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'formatDistanceToNow' is defined but never used.","line":8,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatDistanceToNow"},"fix":{"range":[404,425],"text":""},"desc":"Remove unused variable 'formatDistanceToNow'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'toast' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"toast"},"fix":{"range":[445,476],"text":""},"desc":"Remove unused variable 'toast'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'LogDetailDialog' is assigned a value but never used.","line":22,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"LogDetailDialog"},"fix":{"range":[751,2365],"text":""},"desc":"Remove unused variable 'LogDetailDialog'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { PerformanceLog } from '@/api/entities';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Bot } from 'lucide-react'; // Added Bot, removed unused icons\nimport { format, formatDistanceToNow } from 'date-fns';\nimport { toast } from \"sonner\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"; // New import\n\nimport { listPerformanceLogs } from \"@/api/functions\";\n\nconst LogDetailDialog = ({ log }) => {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"h-7 bg-slate-700 border-slate-600 hover:bg-slate-600\">Details</Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl bg-slate-900 border-slate-700 text-slate-200\">\n        <DialogHeader>\n          <DialogTitle>Log Details: {log.function_name}</DialogTitle>\n          <DialogDescription>\n            {format(new Date(log.created_date), 'PPP p')}\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4 max-h-[70vh] overflow-y-auto pr-4\">\n          {log.error_message && (\n            <div>\n              <h4 className=\"font-semibold text-red-400 mb-2\">Error Message</h4>\n              <pre className=\"bg-red-900/20 p-3 rounded-md text-sm text-red-300 whitespace-pre-wrap\">{log.error_message}</pre>\n            </div>\n          )}\n          {log.payload && (\n            <div>\n              <h4 className=\"font-semibold text-blue-400 mb-2\">Request Payload</h4>\n              <pre className=\"bg-slate-800 p-3 rounded-md text-sm text-slate-300 whitespace-pre-wrap\">{JSON.stringify(log.payload, null, 2)}</pre>\n            </div>\n          )}\n          {log.response && (\n             <div>\n              <h4 className=\"font-semibold text-green-400 mb-2\">Final Response / Plan</h4>\n              <pre className=\"bg-slate-800 p-3 rounded-md text-sm text-slate-300 whitespace-pre-wrap\">{JSON.stringify(log.response, null, 2)}</pre>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default function AIExecutionLogViewer() {\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const loadLogs = useCallback(async () => {\n    setLoading(true);\n    try {\n      // Expanded list to capture all AI-related executions (and cron runner visibility)\n      const functionNames = [\n        // Core AI pipeline\n        \"mcpHandler\",\n        \"generateAIPlan\",\n        \"executeAIPlan\",\n        \"processAICommand\",\n        \"processChatCommand\",\n        // Chat/LLM wrappers\n        \"aiRun\",\n        \"aiToken\",\n        \"invokeTenantLLM\",\n        \"invokeSystemOpenAI\",\n        \"testSystemOpenAI\",\n        \"generateEntitySummary\",\n        // Voice / MCP servers\n        \"voiceCommand\",\n        \"handleVoiceCommand\",\n        \"mcpServer\",\n        \"mcpServerPublic\",\n        \"mcpServerSimple\",\n        \"mcpServerDebug\",\n        // Cron+Schedulers\n        \"cronHeartbeat\",\n        \"cronHeartbeat.duration\",\n        \"cronJobRunner\",\n        \"processScheduledAICalls\",\n        \"processScheduledAIEmails\"\n      ];\n\n      // Use backend function to avoid entity GET network errors and respect admin auth\n      const { data } = await listPerformanceLogs({ limit: 50, functionNames });\n      setLogs(Array.isArray(data?.logs) ? data.logs : []);\n    } catch (error) {\n      console.error(\"Failed to load execution logs:\", error);\n      // Fallback to empty logs and keep UI responsive\n      setLogs([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadLogs();\n  }, [loadLogs]);\n\n  // Auto-refresh every 30s to keep logs up-to-date\n  useEffect(() => {\n    const id = setInterval(() => {\n      loadLogs();\n    }, 30000);\n    return () => clearInterval(id);\n  }, [loadLogs]);\n\n  return (\n    <div className=\"space-y-6\">\n      <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n        <Bot className=\"h-4 w-4 text-blue-400\" />\n        <AlertDescription className=\"text-blue-300\">\n          View detailed logs of AI function calls and responses for debugging and optimization.\n        </AlertDescription>\n      </Alert>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Bot className=\"w-5 h-5 text-purple-400\" />\n            AI Execution Logs\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Recent AI function invocations\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex justify-center p-8\">\n              <Loader2 className=\"w-6 h-6 animate-spin text-blue-400\" />\n            </div>\n          ) : logs.length === 0 ? (\n            <div className=\"text-center p-8 text-slate-400\">\n              No AI execution logs available\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {logs.map((log, idx) => (\n                <div key={idx} className=\"p-4 bg-slate-900 rounded-lg border border-slate-700\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <Badge variant=\"outline\" className=\"bg-slate-700 text-slate-300 border-slate-600\">\n                          {log.function_name}\n                        </Badge>\n                        <Badge className={log.status === 'success' ? 'bg-green-600' : 'bg-red-600'}>\n                          {log.status}\n                        </Badge>\n                      </div>\n                      <div className=\"mt-2 text-sm text-slate-300\">\n                        Response Time: {log.response_time_ms}ms\n                      </div>\n                      <div className=\"mt-1 text-xs text-slate-500\">\n                        {new Date(log.created_date).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\ActivityVisibilityDebug.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, Search, AlertCircle, CheckCircle, XCircle } from 'lucide-react';\nimport { base44 } from '@/api/base44Client';\nimport { toast } from 'sonner';\n\nexport default function ActivityVisibilityDebug() {\n  const [activityId, setActivityId] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null);\n\n  const handleDiagnose = async () => {\n    if (!activityId.trim()) {\n      toast.error('Please enter an Activity ID');\n      return;\n    }\n\n    setLoading(true);\n    setResult(null);\n\n    try {\n      const response = await base44.functions.invoke('diagnoseActivityVisibility', {\n        activity_id: activityId.trim()\n      });\n\n      setResult(response.data);\n    } catch (error) {\n      console.error('Diagnosis failed:', error);\n      toast.error('Failed to diagnose: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n            <Search className=\"w-5 h-5 text-blue-400\" />\n            Activity Visibility Diagnostic\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Diagnose why an Activity is not visible to a user\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label className=\"text-slate-200\">Activity ID</Label>\n            <Input\n              value={activityId}\n              onChange={(e) => setActivityId(e.target.value)}\n              placeholder=\"Enter Activity ID\"\n              className=\"bg-slate-700 border-slate-600 text-slate-200\"\n            />\n          </div>\n\n          <Button\n            onClick={handleDiagnose}\n            disabled={loading || !activityId.trim()}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            {loading ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Diagnosing...\n              </>\n            ) : (\n              <>\n                <Search className=\"w-4 h-4 mr-2\" />\n                Run Diagnosis\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {result && (\n        <div className=\"space-y-4\">\n          {/* Summary */}\n          <Alert className={result.user_can_see ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}>\n            {result.user_can_see ? (\n              <>\n                <CheckCircle className=\"h-4 w-4 text-green-700\" />\n                <AlertDescription className=\"text-green-800\">\n                  <strong>Activity is visible</strong> - User can see this activity\n                </AlertDescription>\n              </>\n            ) : (\n              <>\n                <XCircle className=\"h-4 w-4 text-red-700\" />\n                <AlertDescription className=\"text-red-800\">\n                  <strong>Activity is NOT visible</strong> - User cannot see this activity\n                </AlertDescription>\n              </>\n            )}\n          </Alert>\n\n          {/* Current User Info */}\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100\">Current User</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-slate-400\">Email</p>\n                  <p className=\"text-slate-200\">{result.current_user.email}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-400\">Role</p>\n                  <p className=\"text-slate-200\">{result.current_user.role}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-400\">Employee Role</p>\n                  <p className=\"text-slate-200\">{result.current_user.employee_role || 'None'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-400\">Tenant ID</p>\n                  <p className=\"text-slate-200\">{result.current_user.tenant_id || 'None'}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Activity Record */}\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100\">Activity Record</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-slate-400\">ID</p>\n                  <p className=\"text-slate-200 font-mono text-xs\">{result.activity_record.id}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-400\">Subject</p>\n                  <p className=\"text-slate-200\">{result.activity_record.subject}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-400\">Type</p>\n                  <p className=\"text-slate-200\">{result.activity_record.type}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-400\">Status</p>\n                  <p className=\"text-slate-200\">{result.activity_record.status}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-400\">Tenant ID</p>\n                  <p className=\"text-slate-200 font-mono text-xs\">{result.activity_record.tenant_id || 'None'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-400\">Created By</p>\n                  <p className=\"text-slate-200\">{result.activity_record.created_by}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-400\">Assigned To</p>\n                  <p className=\"text-slate-200\">{result.activity_record.assigned_to || 'Unassigned'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-400\">Test Data</p>\n                  <p className=\"text-slate-200\">{result.activity_record.is_test_data ? 'Yes' : 'No'}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* RLS Evaluation */}\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100\">RLS Evaluation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {Object.entries(result.rls_evaluation).map(([key, value]) => (\n                  <div key={key} className=\"flex items-center justify-between p-2 bg-slate-700/50 rounded\">\n                    <span className=\"text-sm text-slate-300\">{key.replace(/_/g, ' ')}</span>\n                    <span className={`text-sm font-medium ${value ? 'text-green-400' : 'text-red-400'}`}>\n                      {value ? 'Γ£ô' : 'Γ£ù'}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Tenant Info */}\n          {result.tenant_info && (\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-slate-100\">Tenant Info</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-slate-400\">Tenant ID</p>\n                    <p className=\"text-slate-200 font-mono text-xs\">{result.tenant_info.id}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-slate-400\">Tenant Name</p>\n                    <p className=\"text-slate-200\">{result.tenant_info.name}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Creator Info */}\n          {result.creator_info && (\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-slate-100\">Creator Info</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-slate-400\">Email</p>\n                    <p className=\"text-slate-200\">{result.creator_info.email}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-slate-400\">Full Name</p>\n                    <p className=\"text-slate-200\">{result.creator_info.full_name}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-slate-400\">Role</p>\n                    <p className=\"text-slate-200\">{result.creator_info.role}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-slate-400\">Tenant ID</p>\n                    <p className=\"text-slate-200 font-mono text-xs\">{result.creator_info.tenant_id || 'None'}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Diagnosis Result */}\n          {!result.user_can_see && result.should_see_by_rls && (\n            <Alert className=\"bg-red-50 border-red-200\">\n              <AlertCircle className=\"h-4 w-4 text-red-700\" />\n              <AlertDescription className=\"text-red-800\">\n                <strong>RLS Policy Issue Detected!</strong><br/>\n                According to RLS rules, user SHOULD see this activity, but they cannot.\n                This indicates a problem with the RLS policy implementation or caching.\n              </AlertDescription>\n            </Alert>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\AdminOpenAISettings.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[852,856],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":106,"column":128,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3706,3893],"text":"\n            Configure your personal OpenAI API key to power AI features across the platform. This will be used when tenants don&apos;t have their own OpenAI integration configured.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3706,3893],"text":"\n            Configure your personal OpenAI API key to power AI features across the platform. This will be used when tenants don&lsquo;t have their own OpenAI integration configured.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3706,3893],"text":"\n            Configure your personal OpenAI API key to power AI features across the platform. This will be used when tenants don&#39;t have their own OpenAI integration configured.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3706,3893],"text":"\n            Configure your personal OpenAI API key to power AI features across the platform. This will be used when tenants don&rsquo;t have their own OpenAI integration configured.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, KeyRound, CheckCircle, AlertCircle, Save, Plug } from 'lucide-react';\nimport { User } from '@/api/entities';\nimport { testSystemOpenAI } from '@/api/functions';\nimport { toast } from \"sonner\";\n\nexport default function AdminOpenAISettings() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [localSettings, setLocalSettings] = useState({\n    openai_api_key: '',\n    model: 'gpt-4o-mini',\n    max_tokens: 1000,\n    temperature: 0.7,\n    enabled: false,\n  });\n  const [isSaving, setIsSaving] = useState(false);\n  const [isTesting, setIsTesting] = useState(false);\n  const [testResult, setTestResult] = useState(null);\n  const [showKey, setShowKey] = useState(false);\n\n  useEffect(() => {\n    async function loadUser() {\n      try {\n        const userData = await User.me();\n        setUser(userData);\n        if (userData.system_openai_settings) {\n          setLocalSettings(userData.system_openai_settings);\n        }\n      } catch (error) {\n        console.error(\"Failed to load user:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    loadUser();\n  }, []);\n\n  const handleSettingChange = (field, value) => {\n    setLocalSettings(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSaveSettings = async () => {\n    setIsSaving(true);\n    try {\n      await User.updateMyUserData({ system_openai_settings: localSettings });\n      toast.success(\"OpenAI settings saved successfully!\");\n    } catch (error) {\n      toast.error(\"Failed to save settings.\");\n      console.error(error);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleTestConnection = async () => {\n    if (!localSettings.openai_api_key) {\n      toast.error(\"Please enter an OpenAI API key to test.\");\n      return;\n    }\n    setIsTesting(true);\n    setTestResult(null);\n    try {\n      const response = await testSystemOpenAI({\n        api_key: localSettings.openai_api_key,\n        model: localSettings.model\n      });\n      setTestResult(response.data);\n      if (response.data.success) {\n        toast.success(\"OpenAI connection successful!\");\n        setLocalSettings(prev => ({ ...prev, enabled: true }));\n      } else {\n        toast.error(`Test failed: ${response.data.error}`);\n      }\n    } catch (error) {\n      // Improved error handling to show specific backend message\n      const errorMessage = error.response?.data?.error || \"The request failed. Please check the function logs.\";\n      setTestResult({ success: false, error: errorMessage });\n      toast.error(errorMessage, {\n        description: error.response?.data?.details || \"No further details available.\",\n      });\n    } finally {\n      setIsTesting(false);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"flex justify-center p-8\"><Loader2 className=\"w-6 h-6 animate-spin text-slate-400\" /></div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-slate-700/50 border-slate-600\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">System OpenAI Integration</CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Configure your personal OpenAI API key to power AI features across the platform. This will be used when tenants don't have their own OpenAI integration configured.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"openai_api_key\" className=\"text-slate-200\">OpenAI API Key</Label>\n            <div className=\"flex items-center gap-2\">\n              <Input\n                id=\"openai_api_key\"\n                type={showKey ? 'text' : 'password'}\n                value={localSettings.openai_api_key}\n                onChange={(e) => handleSettingChange('openai_api_key', e.target.value)}\n                placeholder=\"sk-...\"\n                className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              />\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => setShowKey(!showKey)} className=\"text-slate-400 hover:text-slate-200\">\n                <KeyRound className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            <a href=\"https://platform.openai.com/api-keys\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-xs text-blue-400 hover:underline\">\n              Get your API key from OpenAI Platform\n            </a>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"model\" className=\"text-slate-200\">Model</Label>\n              <Select value={localSettings.model} onValueChange={(value) => handleSettingChange('model', value)}>\n                <SelectTrigger id=\"model\" className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                  <SelectItem value=\"gpt-4o-mini\" className=\"focus:bg-slate-700\">GPT-4o Mini</SelectItem>\n                  <SelectItem value=\"gpt-4o\" className=\"focus:bg-slate-700\">GPT-4o</SelectItem>\n                  <SelectItem value=\"gpt-4-turbo\" className=\"focus:bg-slate-700\">GPT-4 Turbo</SelectItem>\n                  <SelectItem value=\"gpt-3.5-turbo\" className=\"focus:bg-slate-700\">GPT-3.5 Turbo</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"max_tokens\" className=\"text-slate-200\">Max Tokens</Label>\n              <Input\n                id=\"max_tokens\"\n                type=\"number\"\n                value={localSettings.max_tokens}\n                onChange={(e) => handleSettingChange('max_tokens', parseInt(e.target.value, 10))}\n                className=\"bg-slate-700 border-slate-600 text-slate-200\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"temperature\" className=\"text-slate-200\">Temperature</Label>\n              <Input\n                id=\"temperature\"\n                type=\"number\"\n                step=\"0.1\"\n                min=\"0\"\n                max=\"2\"\n                value={localSettings.temperature}\n                onChange={(e) => handleSettingChange('temperature', parseFloat(e.target.value))}\n                className=\"bg-slate-700 border-slate-600 text-slate-200\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 pt-4\">\n            <Switch\n              id=\"enabled\"\n              checked={localSettings.enabled}\n              onCheckedChange={(checked) => handleSettingChange('enabled', checked)}\n            />\n            <Label htmlFor=\"enabled\" className=\"text-slate-200\">Enable system OpenAI integration</Label>\n            {localSettings.enabled && <Badge className=\"bg-green-600\">Enabled</Badge>}\n          </div>\n\n          {testResult && (\n            <Alert className={testResult.success ? \"bg-green-900/30 border-green-700/50\" : \"bg-red-900/30 border-red-700/50\"}>\n              <AlertTitle className=\"flex items-center gap-2\">\n                {testResult.success ? <CheckCircle className=\"text-green-400\" /> : <AlertCircle className=\"text-red-400\" />}\n                <span className={testResult.success ? \"text-green-200\" : \"text-red-200\"}>\n                  {testResult.success ? \"Connection Successful\" : \"Connection Failed\"}\n                </span>\n              </AlertTitle>\n              <AlertDescription className={testResult.success ? \"text-green-300\" : \"text-red-300\"}>\n                {testResult.success ? testResult.message : testResult.error}\n              </AlertDescription>\n            </Alert>\n          )}\n\n        </CardContent>\n        <CardFooter className=\"flex gap-2 bg-slate-800/50 py-4 px-6 border-t border-slate-600\">\n          <Button onClick={handleSaveSettings} disabled={isSaving || isTesting}>\n            {isSaving ? <Loader2 className=\"w-4 h-4 animate-spin mr-2\" /> : <Save className=\"w-4 h-4 mr-2\" />}\n            Save Settings\n          </Button>\n          <Button variant=\"outline\" onClick={handleTestConnection} disabled={isTesting || isSaving}>\n            {isTesting ? <Loader2 className=\"w-4 h-4 animate-spin mr-2\" /> : <Plug className=\"w-4 h-4 mr-2\" />}\n            Test Connection\n          </Button>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\ApiHealthDashboard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\ApiKeyManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":142,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":354,"column":75,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14516,14592],"text":"\n                              Are you sure you want to delete the API key &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14516,14592],"text":"\n                              Are you sure you want to delete the API key &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14516,14592],"text":"\n                              Are you sure you want to delete the API key &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14516,14592],"text":"\n                              Are you sure you want to delete the API key &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":354,"column":90,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14606,14744],"text":"&quot;?\n                              This action cannot be undone and will break any integrations using this key.\n                            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14606,14744],"text":"&ldquo;?\n                              This action cannot be undone and will break any integrations using this key.\n                            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14606,14744],"text":"&#34;?\n                              This action cannot be undone and will break any integrations using this key.\n                            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14606,14744],"text":"&rdquo;?\n                              This action cannot be undone and will break any integrations using this key.\n                            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Plus,\n  Copy,\n  Eye,\n  EyeOff,\n  Trash2,\n  Key,\n  Calendar,\n  BarChart3,\n  AlertTriangle,\n  RefreshCw,\n  User // Added User icon for created_by\n} from 'lucide-react';\nimport { ApiKey } from '@/api/entities';\nimport { format } from 'date-fns';\nimport toast from 'react-hot-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function ApiKeyManager() {\n  const [apiKeys, setApiKeys] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showNewKeyDialog, setShowNewKeyDialog] = useState(false);\n  const [visibleKeys, setVisibleKeys] = useState(new Set());\n  const [justCreatedKey, setJustCreatedKey] = useState(null); // Track newly created keys\n\n  // New key form state\n  const [newKey, setNewKey] = useState({\n    key_name: '',\n    description: '',\n    key_value: ''\n  });\n\n  useEffect(() => {\n    loadApiKeys();\n  }, []);\n\n  const loadApiKeys = async () => {\n    try {\n      const keys = await ApiKey.list('-created_date');\n      // Sort by created_date descending to be sure\n      keys.sort((a, b) => new Date(b.created_date) - new Date(a.created_date));\n      setApiKeys(keys);\n    } catch (error) {\n      console.error('Failed to load API keys:', error);\n      toast.error('Failed to load API keys');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateRandomKey = () => {\n    // Generate a secure random key with app prefix\n    const prefix = 'aisha';\n    const timestamp = Date.now().toString(36);\n    const random = Array.from(crypto.getRandomValues(new Uint8Array(16)))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('');\n\n    return `${prefix}_${timestamp}_${random}`;\n  };\n\n  const handleCreateKey = async () => {\n    if (!newKey.key_name.trim()) {\n      toast.error('Key name is required');\n      return;\n    }\n\n    try {\n      const keyData = {\n        ...newKey,\n        key_value: newKey.key_value || generateRandomKey()\n      };\n\n      const createdKey = await ApiKey.create(keyData);\n      setApiKeys([createdKey, ...apiKeys]);\n      setNewKey({ key_name: '', description: '', key_value: '' });\n      setShowNewKeyDialog(false);\n\n      // Make the newly created key immediately visible\n      setJustCreatedKey(createdKey.id);\n      setVisibleKeys(prev => new Set(prev).add(createdKey.id));\n\n      toast.success('API key created successfully! The key is now visible for you to copy.');\n    } catch (error) {\n      console.error('Failed to create API key:', error);\n      toast.error('Failed to create API key');\n    }\n  };\n\n  const handleDeleteKey = async (keyId) => {\n    try {\n      await ApiKey.delete(keyId);\n      setApiKeys(apiKeys.filter(key => key.id !== keyId));\n      toast.success('API key deleted');\n    } catch (error) {\n      console.error('Failed to delete API key:', error);\n      toast.error('Failed to delete API key');\n    }\n  };\n\n  const toggleKeyVisibility = (keyId) => {\n    const newVisible = new Set(visibleKeys);\n    if (newVisible.has(keyId)) {\n      newVisible.delete(keyId);\n    } else {\n      newVisible.add(keyId);\n    }\n    setVisibleKeys(newVisible);\n  };\n\n  const copyToClipboard = async (text) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast.success('Copied to clipboard');\n    } catch (error) {\n      toast.error('Failed to copy');\n    }\n  };\n\n  const maskKey = (key) => {\n    if (key.length <= 8) return '*'.repeat(key.length);\n    return key.substring(0, 4) + '*'.repeat(key.length - 8) + key.substring(key.length - 4);\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Key className=\"w-5 h-5 text-amber-400\" />\n            <span className=\"text-slate-100\">API Keys</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex justify-center p-8\">\n            <RefreshCw className=\"w-6 h-6 animate-spin text-slate-400\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Key className=\"w-5 h-5 text-amber-400\" />\n              <span className=\"text-slate-100\">API Keys</span>\n            </div>\n            <Dialog open={showNewKeyDialog} onOpenChange={setShowNewKeyDialog}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Generate New Key\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"bg-slate-800 border-slate-700\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-slate-100\">Generate New API Key</DialogTitle>\n                  <DialogDescription className=\"text-slate-400\">\n                    Create a new API key for external applications to access your CRM functions.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"key_name\" className=\"text-slate-200\">Key Name *</Label>\n                    <Input\n                      id=\"key_name\"\n                      value={newKey.key_name}\n                      onChange={(e) => setNewKey({...newKey, key_name: e.target.value})}\n                      placeholder=\"e.g., Dialogflow Scheduler\"\n                      className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"description\" className=\"text-slate-200\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={newKey.description}\n                      onChange={(e) => setNewKey({...newKey, description: e.target.value})}\n                      placeholder=\"What this key will be used for...\"\n                      className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"key_value\" className=\"text-slate-200\">Custom Key (Optional)</Label>\n                    <Input\n                      id=\"key_value\"\n                      value={newKey.key_value}\n                      onChange={(e) => setNewKey({...newKey, key_value: e.target.value})}\n                      placeholder=\"Leave blank to auto-generate\"\n                      className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                    />\n                    <p className=\"text-sm text-slate-400 mt-1\">\n                      Leave blank to generate a secure random key\n                    </p>\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button variant=\"outline\" onClick={() => setShowNewKeyDialog(false)} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n                    Cancel\n                  </Button>\n                  <Button onClick={handleCreateKey} className=\"bg-blue-600 hover:bg-blue-700\">\n                    Generate Key\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Manage API keys for external integrations and automation\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {apiKeys.length === 0 ? (\n            <div className=\"text-center py-8 text-slate-400\">\n              <Key className=\"w-12 h-12 mx-auto mb-4 text-slate-500\" />\n              <p className=\"font-medium text-slate-300\">No API keys created yet</p>\n              <p className=\"text-sm\">Generate your first API key to get started</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {apiKeys.map((key) => (\n                <Card\n                  key={key.id}\n                  className={`border-l-4 ${\n                    justCreatedKey === key.id\n                      ? 'border-l-green-500 bg-green-900/20'\n                      : 'border-l-blue-500 bg-slate-700'\n                  }`}\n                >\n                  <CardContent className=\"pt-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3 className=\"font-semibold text-slate-100\">{key.key_name}</h3>\n                          <Badge variant={key.is_active ? 'default' : 'secondary'} className={key.is_active ? 'bg-green-600 text-white' : 'bg-slate-600 text-slate-300'}>\n                            {key.is_active ? 'Active' : 'Inactive'}\n                          </Badge>\n                          {justCreatedKey === key.id && (\n                            <Badge className=\"bg-green-600 text-white\">\n                              Just Created - Copy Now!\n                            </Badge>\n                          )}\n                        </div>\n\n                        {key.description && (\n                          <p className=\"text-sm text-slate-400 mb-3\">{key.description}</p>\n                        )}\n\n                        <div className={`font-mono text-sm p-2 rounded border flex items-center justify-between ${\n                          justCreatedKey === key.id ? 'bg-green-900/30 border-green-600' : 'bg-slate-600 border-slate-500'\n                        }`}>\n                          <span className=\"break-all text-slate-200\">\n                            {visibleKeys.has(key.id) ? key.key_value : maskKey(key.key_value)}\n                          </span>\n                          <div className=\"flex items-center gap-1 ml-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => toggleKeyVisibility(key.id)}\n                              className=\"text-slate-300 hover:text-slate-100 hover:bg-slate-500\"\n                            >\n                              {visibleKeys.has(key.id) ? (\n                                <EyeOff className=\"w-4 h-4\" />\n                              ) : (\n                                <Eye className=\"w-4 h-4\" />\n                              )}\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                copyToClipboard(key.key_value);\n                                if (justCreatedKey === key.id) {\n                                  setJustCreatedKey(null); // Remove highlight after copying\n                                }\n                              }}\n                              className={`text-slate-300 hover:text-slate-100 ${justCreatedKey === key.id ? 'bg-green-700 hover:bg-green-600' : 'hover:bg-slate-500'}`}\n                            >\n                              <Copy className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"flex flex-wrap items-center gap-x-4 gap-y-1 mt-3 text-xs text-slate-400\">\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"w-3 h-3\" />\n                            Created: {format(new Date(key.created_date), 'MMM d, yyyy HH:mm')}\n                          </div>\n                          {key.created_by && (\n                            <div className=\"flex items-center gap-1\">\n                              <User className=\"w-3 h-3\" />\n                              Creator: {key.created_by}\n                            </div>\n                          )}\n                          {key.usage_count > 0 && (\n                            <div className=\"flex items-center gap-1\">\n                              <BarChart3 className=\"w-3 h-3\" />\n                              Used: {key.usage_count} times\n                            </div>\n                          )}\n                          {key.last_used && (\n                            <div className=\"flex items-center gap-1\">\n                              <Calendar className=\"w-3 h-3\" />\n                              Last used: {format(new Date(key.last_used), 'MMM d, yyyy')}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-red-400 hover:text-red-300 hover:bg-slate-600\">\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent className=\"bg-slate-800 border-slate-700\">\n                          <AlertDialogHeader>\n                            <AlertDialogTitle className=\"flex items-center gap-2 text-slate-100\">\n                              <AlertTriangle className=\"w-5 h-5 text-red-400\" />\n                              Delete API Key\n                            </AlertDialogTitle>\n                            <AlertDialogDescription className=\"text-slate-400\">\n                              Are you sure you want to delete the API key \"{key.key_name}\"?\n                              This action cannot be undone and will break any integrations using this key.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDeleteKey(key.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                            >\n                              Delete Key\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\BillingSettings.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { SubscriptionPlan, Subscription, User, Tenant } from '@/api/entities';\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Check, Crown, Loader2, AlertCircle, Users, ExternalLink, Building2, Plug, Eye, EyeOff, Save, CheckCircle } from 'lucide-react';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { createCheckoutSession } from '@/api/functions';\nimport { createBillingPortalSession } from '@/api/functions';\nimport { toast } from \"sonner\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { testStripeConnection } from \"@/api/functions\";\n\nconst AdminStripeConfig = ({ user, onUpdate }) => {\n  const [config, setConfig] = useState({ secret_key: '', publishable_key: '', webhook_secret: '', is_connected: false });\n  const [showSecret, setShowSecret] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isTesting, setIsTesting] = useState(false);\n  const [testResult, setTestResult] = useState(null);\n\n  useEffect(() => {\n    if (user?.system_stripe_settings) {\n      setConfig(user.system_stripe_settings);\n      setTestResult({\n        success: user.system_stripe_settings.is_connected,\n        message: user.system_stripe_settings.is_connected ? 'Connection is active.' : 'Not tested.',\n      });\n    }\n  }, [user]);\n\n  const handleSave = async () => {\n    setIsSaving(true);\n    try {\n      await User.updateMyUserData({ system_stripe_settings: { ...config, is_connected: testResult?.success || false } });\n      toast.success(\"Stripe configuration saved.\");\n      onUpdate();\n    } catch (error) {\n      toast.error(\"Failed to save Stripe configuration.\");\n      console.error(error);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleTest = async () => {\n    if (!config.secret_key) {\n      toast.error(\"Please enter a Stripe Secret Key to test.\");\n      return;\n    }\n    setIsTesting(true);\n    setTestResult(null);\n    try {\n      const { data } = await testStripeConnection({ apiKey: config.secret_key });\n      setTestResult(data);\n      if (data.success) {\n        toast.success(\"Stripe connection successful!\");\n        // Auto-save the connection status\n        await User.updateMyUserData({ system_stripe_settings: { ...config, is_connected: true } });\n        onUpdate();\n      } else {\n        toast.error(`Connection failed: ${data.message}`);\n        await User.updateMyUserData({ system_stripe_settings: { ...config, is_connected: false } });\n        onUpdate();\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || error.message;\n      setTestResult({ success: false, message });\n      toast.error(`Connection failed: ${message}`);\n      await User.updateMyUserData({ system_stripe_settings: { ...config, is_connected: false } });\n      onUpdate();\n    } finally {\n      setIsTesting(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700 mt-8\">\n      <CardHeader>\n        <CardTitle className=\"text-slate-100\">System Stripe Configuration</CardTitle>\n        <CardDescription className=\"text-slate-400\">\n          Connect your Stripe account to process payments for tenant subscriptions. These keys are stored securely.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"stripe-secret\" className=\"text-slate-300\">Stripe Secret Key</Label>\n          <div className=\"relative\">\n            <Input\n              id=\"stripe-secret\"\n              type={showSecret ? 'text' : 'password'}\n              value={config.secret_key || ''}\n              onChange={(e) => setConfig(prev => ({ ...prev, secret_key: e.target.value }))}\n              placeholder=\"sk_live_...\"\n              className=\"bg-slate-700 border-slate-600 text-slate-200\"\n            />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute right-2 top-1/2 -translate-y-1/2 h-7 w-7 text-slate-400 hover:text-slate-200\"\n              onClick={() => setShowSecret(!showSecret)}\n            >\n              {showSecret ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n            </Button>\n          </div>\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"stripe-publishable\" className=\"text-slate-300\">Stripe Publishable Key</Label>\n          <Input\n            id=\"stripe-publishable\"\n            value={config.publishable_key || ''}\n            onChange={(e) => setConfig(prev => ({ ...prev, publishable_key: e.target.value }))}\n            placeholder=\"pk_live_...\"\n            className=\"bg-slate-700 border-slate-600 text-slate-200\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"stripe-webhook\" className=\"text-slate-300\">Stripe Webhook Secret</Label>\n          <Input\n            id=\"stripe-webhook\"\n            value={config.webhook_secret || ''}\n            onChange={(e) => setConfig(prev => ({ ...prev, webhook_secret: e.target.value }))}\n            placeholder=\"whsec_...\"\n            className=\"bg-slate-700 border-slate-600 text-slate-200\"\n          />\n           <p className=\"text-xs text-slate-500\">\n            Find this in your Stripe Dashboard under Developers ΓåÆ Webhooks. Use the endpoint for `/functions/handleStripeWebhook`.\n          </p>\n        </div>\n        \n        {testResult && (\n          <Alert className={testResult.success ? 'bg-green-900/30 border-green-700/50' : 'bg-red-900/30 border-red-700/50'}>\n            {testResult.success ? <CheckCircle className=\"h-4 w-4 text-green-400\" /> : <AlertCircle className=\"h-4 w-4 text-red-400\" />}\n            <AlertDescription className={testResult.success ? 'text-green-300' : 'text-red-300'}>\n              {testResult.message}\n            </AlertDescription>\n          </Alert>\n        )}\n\n      </CardContent>\n      <CardFooter className=\"flex gap-2\">\n        <Button onClick={handleSave} disabled={isSaving || isTesting} className=\"bg-blue-600 hover:bg-blue-700\">\n          {isSaving ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : <Save className=\"w-4 h-4 mr-2\" />}\n          Save\n        </Button>\n        <Button variant=\"outline\" onClick={handleTest} disabled={isSaving || isTesting} className=\"bg-slate-700 border-slate-600 hover:bg-slate-600\">\n          {isTesting ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : <Plug className=\"w-4 h-4 mr-2\" />}\n          Test Connection\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n};\n\n\nexport default function BillingSettings() {\n  const [plans, setPlans] = useState([]);\n  const [currentSubscription, setCurrentSubscription] = useState(null);\n  const [allSubscriptions, setAllSubscriptions] = useState([]);\n  const [allTenants, setAllTenants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      const [plansData, userData] = await Promise.all([\n        SubscriptionPlan.list('display_order'),\n        User.me()\n      ]);\n      setPlans(plansData);\n      setUser(userData);\n      \n      // Admin-specific data\n      if (userData?.role === 'admin' || userData?.role === 'superadmin') {\n        const [subsData, tenantsData] = await Promise.all([\n            Subscription.list(),\n            Tenant.list()\n        ]);\n        setAllSubscriptions(subsData);\n        setAllTenants(tenantsData);\n      }\n\n      // User-specific data (for both admins and regular users)\n      if (userData?.tenant_id) {\n        const subscriptions = await Subscription.filter({ tenant_id: userData.tenant_id });\n        if (subscriptions.length > 0) {\n          setCurrentSubscription(subscriptions[0]);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching billing data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubscribe = async (plan) => {\n    if (!user?.tenant_id) {\n      alert(\"Tenant information is missing. Cannot subscribe.\");\n      return;\n    }\n    setIsProcessing(true);\n    try {\n      const { data } = await createCheckoutSession({ \n        priceId: plan.stripe_price_id,\n        tenantId: user.tenant_id\n      });\n      if (data.url) {\n        window.location.href = data.url;\n      }\n    } catch (error) {\n      console.error(\"Error creating checkout session:\", error);\n      alert(\"Could not initiate subscription. Please try again.\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleManageSubscription = async (customerId) => {\n    if (!customerId) {\n      alert(\"Could not find customer billing information.\");\n      return;\n    }\n    setIsProcessing(true);\n    try {\n      const { data } = await createBillingPortalSession({ \n        customerId: customerId \n      });\n      if (data.url) {\n        window.location.href = data.url;\n      }\n    } catch (error) {\n      console.error(\"Error creating billing portal session:\", error);\n      alert(\"Could not open billing portal. Please try again.\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const getTenantSubscription = (tenantId) => {\n    return allSubscriptions.find(sub => sub.tenant_id === tenantId);\n  };\n\n  const getPlanName = (planId) => {\n    const plan = plans.find(p => p.id === planId);\n    return plan ? plan.name : 'Unknown Plan';\n  };\n\n  if (loading) {\n    return <div className=\"flex justify-center items-center p-10\"><Loader2 className=\"w-8 h-8 animate-spin text-slate-400\" /></div>;\n  }\n  \n  if (user?.role === 'admin' || user?.role === 'superadmin') {\n    return (\n      <div className=\"space-y-8\">\n        <AdminStripeConfig user={user} onUpdate={fetchData} />\n\n        {/* Available Subscription Plans */}\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Available Subscription Plans</CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              These are the plans available to your tenants. Manage plan details through your Stripe dashboard.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {plans.map((plan) => (\n                <Card key={plan.id} className={`flex flex-col bg-slate-700 border-slate-600 ${plan.name === 'Professional' ? 'border-blue-500 relative' : ''}`}>\n                  {plan.name === 'Professional' && (\n                    <div className=\"absolute top-3 right-3\">\n                      <Crown className=\"w-5 h-5 text-yellow-500\" />\n                    </div>\n                  )}\n                  <CardHeader>\n                    <h3 className=\"text-xl font-bold text-slate-100\">{plan.name}</h3>\n                    <p className=\"text-slate-400 text-sm\">{plan.description}</p>\n                  </CardHeader>\n                  <CardContent className=\"flex-1\">\n                    <div className=\"mb-6\">\n                      <span className=\"text-4xl font-bold text-slate-100\">${plan.price_monthly}</span>\n                      <span className=\"text-slate-400\">/month</span>\n                    </div>\n                    <ul className=\"space-y-3\">\n                      {plan.features?.map((feature, i) => (\n                        <li key={i} className=\"flex items-center gap-3\">\n                          <Check className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                          <span className=\"text-sm text-slate-300\">{feature}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </CardContent>\n                  <CardFooter>\n                    <Button className=\"w-full bg-slate-600 hover:bg-slate-500\" disabled>\n                      Plan Configuration\n                    </Button>\n                  </CardFooter>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tenant Subscription Management */}\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n              <Users className=\"w-5 h-5 text-blue-600\" />\n              Tenant Subscription Management\n            </CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              View and manage subscriptions for all tenants in the system.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow className=\"border-slate-700\">\n                  <TableHead className=\"text-slate-300\">Tenant</TableHead>\n                  <TableHead className=\"text-slate-300\">Current Plan</TableHead>\n                  <TableHead className=\"text-slate-300\">Status</TableHead>\n                  <TableHead className=\"text-slate-300\">Renews On</TableHead>\n                  <TableHead className=\"text-slate-300\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {allTenants.map(tenant => {\n                  const subscription = getTenantSubscription(tenant.id);\n                  return (\n                    <TableRow key={tenant.id} className=\"border-slate-700\">\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Building2 className=\"w-4 h-4 text-slate-500\" />\n                          <div>\n                            <div className=\"font-medium text-slate-200\">{tenant.name}</div>\n                            {tenant.domain && (\n                              <div className=\"text-xs text-slate-500\">{tenant.domain}</div>\n                            )}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {subscription ? (\n                          <Badge variant=\"default\" className=\"bg-blue-100 text-blue-800\">\n                            {getPlanName(subscription.plan_id)}\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"secondary\" className=\"bg-slate-600 text-slate-300\">No Active Plan</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {subscription ? (\n                          <Badge variant={subscription.status === 'active' ? 'default' : 'secondary'} \n                                 className={subscription.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-slate-600 text-slate-300'}>\n                            {subscription.status}\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"outline\" className=\"bg-slate-700 border-slate-600 text-slate-300\">Unsubscribed</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"text-slate-300\">\n                        {subscription?.current_period_end ? \n                          new Date(subscription.current_period_end).toLocaleDateString() : 'N/A'}\n                      </TableCell>\n                      <TableCell>\n                        {subscription ? (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleManageSubscription(subscription.stripe_customer_id)}\n                            disabled={isProcessing}\n                            className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n                          >\n                            {isProcessing ? (\n                              <Loader2 className=\"w-3 h-3 mr-2 animate-spin\" />\n                            ) : (\n                              <ExternalLink className=\"w-3 h-3 mr-2\" />\n                            )}\n                            Manage\n                          </Button>\n                        ) : (\n                          <span className=\"text-xs text-slate-500\">No subscription</span>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n            {allTenants.length === 0 && (\n              <div className=\"text-center py-8 text-slate-500\">\n                No tenants found in the system.\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // View for Regular Users\n  const currentPlan = plans.find(p => p.id === currentSubscription?.plan_id);\n  \n  return (\n    <div className=\"space-y-6\">\n      {currentSubscription && currentPlan ? (\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">Your Subscription</CardTitle>\n            <CardDescription className=\"text-slate-400\">Manage your current plan and billing details.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 border rounded-lg bg-slate-700/50 border-slate-600\">\n              <h3 className=\"text-lg font-semibold text-blue-400\">{currentPlan.name}</h3>\n              <p className=\"text-slate-300\">You are currently subscribed to the {currentPlan.name} plan.</p>\n              <div className=\"mt-2 text-sm\">\n                Status: <Badge className={currentSubscription.status === 'active' ? 'bg-green-600 text-white' : 'bg-slate-600 text-slate-300'}>{currentSubscription.status}</Badge>\n              </div>\n              {currentSubscription.current_period_end && (\n                <div className=\"mt-1 text-sm text-slate-400\">\n                  Your plan renews on {new Date(currentSubscription.current_period_end).toLocaleDateString()}.\n                </div>\n              )}\n            </div>\n            <Button \n                onClick={() => handleManageSubscription(currentSubscription.stripe_customer_id)}\n                disabled={isProcessing}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n                {isProcessing ? <Loader2 className=\"w-4 h-4 animate-spin mr-2\" /> : null}\n                Manage Billing & Subscription\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n            <Alert className=\"bg-red-900/30 border-red-700/50\">\n                <AlertCircle className=\"h-4 w-4 text-red-400\" />\n                <AlertTitle className=\"text-red-200\">No Active Subscription</AlertTitle>\n                <AlertDescription className=\"text-red-300\">\n                Please choose a plan below to activate your CRM features.\n                </AlertDescription>\n            </Alert>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {plans.map((plan) => (\n                <Card key={plan.id} className={`flex flex-col bg-slate-700 border-slate-600 ${plan.name === 'Professional' ? 'border-blue-500' : ''}`}>\n                <CardHeader>\n                    <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-xl font-bold text-slate-100\">{plan.name}</h3>\n                    {plan.name === 'Professional' && <Crown className=\"w-5 h-5 text-yellow-500\" />}\n                    </div>\n                    <p className=\"text-slate-400 text-sm\">{plan.description}</p>\n                </CardHeader>\n                <CardContent className=\"flex-1\">\n                    <div className=\"mb-6\">\n                    <span className=\"text-4xl font-bold text-slate-100\">${plan.price_monthly}</span>\n                    <span className=\"text-slate-400\">/month</span>\n                    </div>\n                    <ul className=\"space-y-3\">\n                    {plan.features?.map((feature, i) => (\n                        <li key={i} className=\"flex items-center gap-3\">\n                        <Check className=\"w-5 h-5 text-green-500\" />\n                        <span className=\"text-sm text-slate-300\">{feature}</span>\n                        </li>\n                    ))}\n                    </ul>\n                </CardContent>\n                <CardFooter>\n                    <Button \n                        className=\"w-full bg-blue-600 hover:bg-blue-700\" \n                        onClick={() => handleSubscribe(plan)}\n                        disabled={isProcessing}\n                    >\n                        {isProcessing ? <Loader2 className=\"w-4 h-4 animate-spin mr-2\" /> : null}\n                        Choose Plan\n                    </Button>\n                </CardFooter>\n                </Card>\n            ))}\n            </div>\n        </>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\BrandingSettings.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\ClientOffboarding.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Tenant } from '@/api/entities';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, Trash2, AlertTriangle } from 'lucide-react';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { deleteTenantWithData } from '@/api/functions';\nimport { toast } from 'sonner';\n\nexport default function ClientOffboarding() {\n  const [tenants, setTenants] = useState([]);\n  const [selectedTenantId, setSelectedTenantId] = useState(\"\");\n  const [deleting, setDeleting] = useState(false);\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadTenants();\n  }, []);\n\n  const loadTenants = async () => {\n    try {\n      const tenantList = await Tenant.list();\n      setTenants(tenantList);\n    } catch (error) {\n      console.error(\"Failed to load tenants:\", error);\n      toast.error(\"Failed to load tenants\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteTenant = async () => {\n    if (!selectedTenantId) {\n      alert(\"Please select a tenant first\");\n      return;\n    }\n\n    const tenant = tenants.find(t => t.id === selectedTenantId);\n    if (!tenant) {\n      alert(\"Tenant not found\");\n      return;\n    }\n\n    const confirmation1 = confirm(\n      `ΓÜá∩╕Å DELETE ALL DATA FOR \"${tenant.name}\"?\\n\\n` +\n      `This will permanently delete:\\n` +\n      `ΓÇó All Contacts\\n` +\n      `ΓÇó All Accounts\\n` +\n      `ΓÇó All Leads\\n` +\n      `ΓÇó All Opportunities\\n` +\n      `ΓÇó All Activities\\n` +\n      `ΓÇó All Notes\\n` +\n      `ΓÇó All Settings\\n` +\n      `ΓÇó The Tenant itself\\n\\n` +\n      `Users will be unassigned (not deleted).\\n\\n` +\n      `This action CANNOT BE UNDONE.`\n    );\n\n    if (!confirmation1) return;\n\n    const confirmation2 = prompt(\n      `Type the tenant name \"${tenant.name}\" to confirm deletion:`\n    );\n\n    if (confirmation2 !== tenant.name) {\n      alert(\"Tenant name did not match. Deletion cancelled.\");\n      return;\n    }\n\n    setDeleting(true);\n    setResult(null);\n\n    try {\n      const response = await deleteTenantWithData({ tenantId: selectedTenantId });\n      \n      if (response.data.status === 'success') {\n        setResult({\n          type: 'success',\n          message: response.data.message\n        });\n        setSelectedTenantId(\"\");\n        toast.success('Client offboarded successfully');\n        \n        // Reload tenant list\n        loadTenants();\n      } else {\n        setResult({\n          type: 'error',\n          message: response.data.message || 'Deletion failed'\n        });\n        toast.error('Failed to offboard client');\n      }\n    } catch (error) {\n      console.error(\"Deletion error:\", error);\n      setResult({\n        type: 'error',\n        message: error.message || 'An error occurred during deletion'\n      });\n      toast.error('An error occurred during offboarding');\n    } finally {\n      setDeleting(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold text-slate-100\">Client Offboarding</h3>\n        <p className=\"text-sm text-slate-400 mt-1\">\n          Permanently delete all data for clients who are offboarding. This action cannot be undone.\n        </p>\n      </div>\n\n      {result && (\n        <Alert variant={result.type === 'success' ? 'default' : 'destructive'}>\n          <AlertTitle>{result.type === 'success' ? 'Success' : 'Error'}</AlertTitle>\n          <AlertDescription>{result.message}</AlertDescription>\n        </Alert>\n      )}\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n            <Trash2 className=\"w-5 h-5 text-red-400\" />\n            Delete Client Data\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Permanently delete all data for a client who is offboarding.\n            This removes all contacts, accounts, leads, opportunities, activities, and settings.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label className=\"text-slate-300 mb-2 block\">Select Client to Delete</Label>\n            <Select value={selectedTenantId} onValueChange={setSelectedTenantId} disabled={deleting}>\n              <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                <SelectValue placeholder=\"Choose a client...\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-700\">\n                {tenants.map(tenant => (\n                  <SelectItem key={tenant.id} value={tenant.id} className=\"text-slate-200\">\n                    {tenant.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Alert variant=\"destructive\" className=\"bg-red-900/20 border-red-700\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertTitle>Warning</AlertTitle>\n            <AlertDescription>\n              This will permanently delete ALL data for the selected client. This action cannot be undone.\n              Users will be unassigned but not deleted.\n            </AlertDescription>\n          </Alert>\n\n          <Button\n            onClick={handleDeleteTenant}\n            disabled={!selectedTenantId || deleting}\n            variant=\"destructive\"\n            className=\"w-full bg-red-600 hover:bg-red-700\"\n          >\n            {deleting ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Deleting Client Data...\n              </>\n            ) : (\n              <>\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Delete Client & All Data\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\ComponentTester.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertTitle, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Play,\n  CheckCircle,\n  XCircle,\n  Loader2,\n  ListChecks,\n  ChevronDown,\n  ChevronRight,\n  RefreshCw,\n  Activity,\n  AlertTriangle,\n} from \"lucide-react\";\nimport { runComponentTests } from \"@/api/functions\";\n\nconst availableComponents = [\n  { id: \"ContactManagement\", name: \"Contact Management\", description: \"Tests contact CRUD operations and data handling.\", lastUpdated: \"2024-07-20\" },\n  { id: \"AccountManagement\", name: \"Account Management\", description: \"Tests account creation, updates, and associations.\", lastUpdated: \"2024-07-20\" },\n  { id: \"LeadManagement\", name: \"Lead Management\", description: \"Tests lead processing and conversion workflows.\", lastUpdated: \"2024-07-20\" },\n  { id: \"OpportunityManagement\", name: \"Opportunity Management\", description: \"Tests sales pipeline and opportunity tracking.\", lastUpdated: \"2024-07-20\" },\n  { id: \"ActivityTracking\", name: \"Activity Tracking\", description: \"Tests activity creation and status management.\", lastUpdated: \"2024-07-21\" },\n  { id: \"ReportsAndAnalytics\", name: \"Reports & Analytics\", description: \"Tests dashboard statistics and reporting accuracy.\", lastUpdated: \"2024-07-20\" },\n  { id: \"UserTagging\", name: \"User Tagging\", description: \"Tests adding, verifying, and removing user tags.\", lastUpdated: \"2024-07-22\" }\n];\n\nexport default function QATestRunner() {\n    const [testResults, setTestResults] = useState(null);\n    const [runningTest, setRunningTest] = useState(null);\n    const [selectedComponent, setSelectedComponent] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n    const [expandedTests, setExpandedTests] = useState({});\n    const [systemStatus, setSystemStatus] = useState(null);\n    const [statusLoading, setStatusLoading] = useState(true);\n    const [statusError, setStatusError] = useState(null);\n    const { toast } = useToast();\n\n    useEffect(() => {\n        loadSystemStatus();\n    }, []);\n\n    const loadSystemStatus = async () => {\n        setStatusLoading(true);\n        setStatusError(null);\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n            try {\n                const { checkBackendStatus } = await import(\"@/api/functions\");\n                const { data } = await checkBackendStatus({}, { signal: controller.signal });\n                \n                clearTimeout(timeoutId);\n                setSystemStatus(data);\n            } catch (functionError) {\n                clearTimeout(timeoutId);\n                console.warn(\"Backend status check function not available:\", functionError);\n                \n                setStatusError(\"Function not available\");\n                setSystemStatus({\n                    overall_status: 'unknown',\n                    authenticated: true, \n                    error: `Backend status check function is not available.`,\n                    timestamp: new Date().toISOString(),\n                    endpoints: {\n                        general: { \n                            status: 'unknown', \n                            details: 'Status check function not deployed or failed to load.' \n                        }\n                    }\n                });\n            }\n            \n        } catch (error) {\n            console.warn(\"System status check failed:\", error);\n            \n            let errorMessage = \"Status check unavailable\";\n            if (error.name === 'AbortError') {\n                errorMessage = \"Status check timed out\";\n            } else if (error.message?.includes('Rate limit') || error.response?.status === 429) {\n                errorMessage = \"Rate limit exceeded\";\n            } else if (error.response?.status >= 500) {\n                errorMessage = \"Backend service temporarily unavailable\";\n            }\n            \n            setStatusError(errorMessage);\n            \n            setSystemStatus({\n                overall_status: 'unknown',\n                authenticated: true, \n                error: `Backend status check is not accessible: ${errorMessage}.`,\n                timestamp: new Date().toISOString(),\n                endpoints: {\n                    general: { \n                        status: 'unknown', \n                        details: 'Status check function unavailable or failed.' \n                    }\n                }\n            });\n        } finally {\n            setStatusLoading(false);\n        }\n    };\n\n    const handleRunTests = async () => {\n        if (!selectedComponent) {\n            toast({\n                variant: \"destructive\",\n                title: \"No Component Selected\",\n                description: \"Please select a component to test.\",\n            });\n            return;\n        }\n\n        setIsLoading(true);\n        setRunningTest(selectedComponent);\n        setTestResults(null);\n        try {\n            const { data } = await runComponentTests({ componentName: selectedComponent });\n            \n            setTestResults({\n                componentName: data.component_name || selectedComponent,\n                results: data.report_data || [], // Directly use the results array\n                error: data.error || (data.report_data?.length === 0 ? \"The test ran but produced no specific result items. This can happen if test dependencies are not met.\" : null)\n            });\n\n            toast({\n                title: \"Tests Complete\",\n                description: `${data.component_name || selectedComponent} tests finished.`,\n            });\n        } catch (error) {\n            console.error(\"Error running component tests:\", error);\n            toast({\n                variant: \"destructive\",\n                title: \"Test Execution Error\",\n                description: error.message || \"An unexpected error occurred.\",\n            });\n        } finally {\n            setIsLoading(false);\n            setRunningTest(null);\n        }\n    };\n\n    const toggleExpand = (index) => {\n        setExpandedTests(prev => ({ ...prev, [index]: !prev[index] }));\n    };\n\n    const getStatusColor = (status) => {\n        if (status === 'ok' || status === 'healthy') return 'bg-green-500';\n        if (status === 'warning' || status === 'degraded') return 'bg-yellow-500';\n        if (status === 'error' || status === 'down') return 'bg-red-500';\n        return 'bg-gray-500';\n    };\n\n    const getStatusText = (status) => {\n        if (status === 'ok') return 'Operational';\n        if (status === 'unknown') return 'Unknown';\n        return status?.charAt(0).toUpperCase() + status?.slice(1) || 'Unknown';\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            {/* System Status Overview */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n                        <Activity className=\"w-5 h-5 text-blue-400\" />\n                        System Status\n                        <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={loadSystemStatus}\n                            disabled={statusLoading}\n                            className=\"p-1 h-auto text-slate-300 hover:text-slate-100 hover:bg-slate-600\"\n                        >\n                            {statusLoading ? (\n                                <Loader2 className=\"w-4 h-4 animate-spin\" />\n                            ) : (\n                                <RefreshCw className=\"w-4 h-4\" />\n                            )}\n                        </Button>\n                    </CardTitle>\n                </CardHeader>\n                <CardContent>\n                    {statusLoading ? (\n                        <div className=\"flex items-center justify-center p-4\">\n                            <Loader2 className=\"w-6 h-6 animate-spin mr-2 text-slate-400\" />\n                            <span className=\"text-slate-300\">Checking system status...</span>\n                        </div>\n                    ) : statusError ? (\n                        <div className=\"p-4 bg-yellow-900/30 text-yellow-300 border border-yellow-700/50 rounded-md\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                                <AlertTriangle className=\"w-4 h-4\" />\n                                <span className=\"font-medium\">Status Check Issue</span>\n                            </div>\n                            <p className=\"text-sm\">\n                                {statusError}. The application should still function normally. This is often expected in staging or limited deployment environments.\n                            </p>\n                        </div>\n                    ) : systemStatus ? (\n                        <div>\n                            <div className=\"flex items-center gap-2 mb-4\">\n                                <div className={`w-3 h-3 rounded-full ${getStatusColor(systemStatus.overall_status)}`}></div>\n                                <span className=\"text-lg font-semibold text-slate-200\">{getStatusText(systemStatus.overall_status)}</span>\n                            </div>\n                            <p className=\"text-sm text-slate-400\">{systemStatus.error || \"All systems operational.\"}</p>\n                        </div>\n                    ) : null}\n                </CardContent>\n            </Card>\n\n            {/* Component Test Runner */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n                        <ListChecks className=\"w-5 h-5 text-blue-400\" />\n                        Internal Component Test Runner\n                    </CardTitle>\n                    <CardDescription className=\"text-slate-400\">\n                        Run automated tests against key CRM components to verify data handling and rendering.\n                    </CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"space-y-4\">\n                        <div>\n                            <Select onValueChange={setSelectedComponent} value={selectedComponent}>\n                                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                                    <SelectValue placeholder=\"Select a component to test...\" />\n                                </SelectTrigger>\n                                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                                    {availableComponents.map(comp => (\n                                        <SelectItem key={comp.id} value={comp.id} className=\"text-slate-200 hover:bg-slate-700\">\n                                            <div className=\"flex flex-col\">\n                                                <span className=\"font-medium\">{comp.name}</span>\n                                                <span className=\"text-xs text-slate-400\">{comp.description} (Updated: {comp.lastUpdated})</span>\n                                            </div>\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </Select>\n                        </div>\n                        <Button\n                            onClick={handleRunTests}\n                            disabled={isLoading || !selectedComponent}\n                            className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                        >\n                            {isLoading && runningTest === selectedComponent ? (\n                                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                            ) : (\n                                <Play className=\"w-4 h-4 mr-2\" />\n                            )}\n                            {isLoading && runningTest === selectedComponent\n                                ? `Running ${selectedComponent} Tests...`\n                                : `Test ${selectedComponent || 'Selected'} Module`}\n                        </Button>\n\n                        {selectedComponent && (\n                            <div className=\"p-3 bg-blue-900/30 rounded-lg border border-blue-700/50\">\n                                <h4 className=\"font-medium text-blue-200\">\n                                    {availableComponents.find(c => c.id === selectedComponent)?.name}\n                                </h4>\n                                <p className=\"text-sm text-blue-300\">\n                                    {availableComponents.find(c => c.id === selectedComponent)?.description}\n                                </p>\n                            </div>\n                        )}\n                    </div>\n                </CardContent>\n            </Card>\n\n            {/* Test Results */}\n            {testResults && (\n                <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardHeader>\n                        <CardTitle className=\"text-slate-100\">Test Results for: {testResults.componentName}</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                        {testResults.results && Array.isArray(testResults.results) && testResults.results.length > 0 ? (\n                            testResults.results.map((result, index) => (\n                                <Card key={index} className=\"bg-slate-700 border-slate-600\">\n                                    <CardHeader\n                                        className=\"flex flex-row items-center justify-between cursor-pointer p-4\"\n                                        onClick={() => toggleExpand(index)}\n                                    >\n                                        <div className=\"flex items-center gap-3\">\n                                            {result.status === \"Success\" ? (\n                                                <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                                            ) : result.status === \"Error\" ? (\n                                                <XCircle className=\"w-5 h-5 text-red-500\" />\n                                            ) : result.status === \"Warning\" ? (\n                                                <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />\n                                            ) : (\n                                                <></>\n                                            )}\n                                            <p className=\"font-medium text-slate-200\">{result.entity ? `${result.entity}: ` : ''}{typeof result.details === 'string' && result.details.length > 100 ? result.details.substring(0, 100) + '...' : typeof result.details === 'string' ? result.details : JSON.stringify(result.details)}</p>\n                                        </div>\n                                        <div className=\"flex items-center gap-3\">\n                                            <Badge variant={result.status === \"Success\" ? \"default\" : result.status === \"Error\" ? \"destructive\" : \"secondary\"} className=\"capitalize\">\n                                                {result.status}\n                                            </Badge>\n                                            {expandedTests[index] ? <ChevronDown className=\"w-4 h-4 text-slate-300\" /> : <ChevronRight className=\"w-4 h-4 text-slate-300\" />}\n                                        </div>\n                                    </CardHeader>\n                                    {expandedTests[index] && (\n                                        <CardContent className=\"p-4 pt-0\">\n                                            <pre className=\"text-xs bg-slate-900 text-slate-200 p-3 rounded-md overflow-x-auto\">\n                                                {JSON.stringify(result.details, null, 2)}\n                                            </pre>\n                                        </CardContent>\n                                    )}\n                                </Card>\n                            ))\n                        ) : (\n                            <div className=\"text-center py-4\">\n                                <p className=\"text-slate-400\">No test results available or invalid test data format.</p>\n                                {testResults.error && (\n                                    <Alert variant=\"default\" className=\"mt-4 text-left bg-blue-900/30 border-blue-700/50\">\n                                        <AlertTriangle className=\"h-4 w-4 text-blue-400\" />\n                                        <AlertTitle className=\"text-blue-200\">Note</AlertTitle>\n                                        <AlertDescription className=\"text-blue-300\">\n                                            {testResults.error}\n                                        </AlertDescription>\n                                    </Alert>\n                                )}\n                            </div>\n                        )}\n                    </CardContent>\n                </Card>\n            )}\n        </div>\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\CronJobManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[108,156],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Input' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Input"},"fix":{"range":[157,203],"text":""},"desc":"Remove unused variable 'Input'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Label' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Label"},"fix":{"range":[204,250],"text":""},"desc":"Remove unused variable 'Label'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Textarea' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"Textarea"},"fix":{"range":[251,303],"text":""},"desc":"Remove unused variable 'Textarea'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Select' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[313,320],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectContent' is defined but never used.","line":8,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectContent"},"fix":{"range":[319,334],"text":""},"desc":"Remove unused variable 'SelectContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectItem' is defined but never used.","line":8,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectItem"},"fix":{"range":[334,346],"text":""},"desc":"Remove unused variable 'SelectItem'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectTrigger' is defined but never used.","line":8,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":58,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectTrigger"},"fix":{"range":[346,361],"text":""},"desc":"Remove unused variable 'SelectTrigger'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectValue' is defined but never used.","line":8,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":71,"suggestions":[{"messageId":"removeVar","data":{"varName":"SelectValue"},"fix":{"range":[361,374],"text":""},"desc":"Remove unused variable 'SelectValue'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Table' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Table"},"fix":{"range":[515,521],"text":""},"desc":"Remove unused variable 'Table'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TableBody' is defined but never used.","line":10,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableBody"},"fix":{"range":[520,531],"text":""},"desc":"Remove unused variable 'TableBody'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TableCell' is defined but never used.","line":10,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableCell"},"fix":{"range":[531,542],"text":""},"desc":"Remove unused variable 'TableCell'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TableHead' is defined but never used.","line":10,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableHead"},"fix":{"range":[542,553],"text":""},"desc":"Remove unused variable 'TableHead'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TableHeader' is defined but never used.","line":10,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":61,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableHeader"},"fix":{"range":[553,566],"text":""},"desc":"Remove unused variable 'TableHeader'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TableRow' is defined but never used.","line":10,"column":63,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":71,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableRow"},"fix":{"range":[566,576],"text":""},"desc":"Remove unused variable 'TableRow'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Switch' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"Switch"},"fix":{"range":[656,704],"text":""},"desc":"Remove unused variable 'Switch'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Dialog' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"Dialog"},"fix":{"range":[714,721],"text":""},"desc":"Remove unused variable 'Dialog'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogContent' is defined but never used.","line":13,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogContent"},"fix":{"range":[720,735],"text":""},"desc":"Remove unused variable 'DialogContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogHeader' is defined but never used.","line":13,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogHeader"},"fix":{"range":[735,749],"text":""},"desc":"Remove unused variable 'DialogHeader'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogTitle' is defined but never used.","line":13,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":58,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogTitle"},"fix":{"range":[749,762],"text":""},"desc":"Remove unused variable 'DialogTitle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogTrigger' is defined but never used.","line":13,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":73,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogTrigger"},"fix":{"range":[762,777],"text":""},"desc":"Remove unused variable 'DialogTrigger'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Plus"},"fix":{"range":[921,926],"text":""},"desc":"Remove unused variable 'Plus'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used.","line":15,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"AlertCircle"},"fix":{"range":[932,945],"text":""},"desc":"Remove unused variable 'AlertCircle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":15,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[945,958],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'RefreshCw' is defined but never used.","line":15,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":58,"suggestions":[{"messageId":"removeVar","data":{"varName":"RefreshCw"},"fix":{"range":[958,969],"text":""},"desc":"Remove unused variable 'RefreshCw'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Pencil' is defined but never used.","line":15,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":75,"suggestions":[{"messageId":"removeVar","data":{"varName":"Pencil"},"fix":{"range":[978,986],"text":""},"desc":"Remove unused variable 'Pencil'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Save' is defined but never used.","line":15,"column":77,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":81,"suggestions":[{"messageId":"removeVar","data":{"varName":"Save"},"fix":{"range":[986,992],"text":""},"desc":"Remove unused variable 'Save'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Trash2' is defined but never used.","line":15,"column":83,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":89,"suggestions":[{"messageId":"removeVar","data":{"varName":"Trash2"},"fix":{"range":[992,1000],"text":""},"desc":"Remove unused variable 'Trash2'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used.","line":15,"column":91,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":104,"suggestions":[{"messageId":"removeVar","data":{"varName":"AlertTriangle"},"fix":{"range":[1000,1015],"text":""},"desc":"Remove unused variable 'AlertTriangle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'format' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"format"},"fix":{"range":[1039,1073],"text":""},"desc":"Remove unused variable 'format'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SCHEDULABLE_FUNCTIONS' is assigned a value but never used.","line":20,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"SCHEDULABLE_FUNCTIONS"},"fix":{"range":[1152,2565],"text":""},"desc":"Remove unused variable 'SCHEDULABLE_FUNCTIONS'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'tenants' is assigned a value but never used.","line":87,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"tenants"},"fix":{"range":[3485,3492],"text":""},"desc":"Remove unused variable 'tenants'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'isCreateDialogOpen' is assigned a value but never used.","line":89,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"isCreateDialogOpen"},"fix":{"range":[3579,3597],"text":""},"desc":"Remove unused variable 'isCreateDialogOpen'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setIsCreateDialogOpen' is assigned a value but never used.","line":89,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"setIsCreateDialogOpen"},"fix":{"range":[3597,3620],"text":""},"desc":"Remove unused variable 'setIsCreateDialogOpen'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'editingJob' is assigned a value but never used.","line":90,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"editingJob"},"fix":{"range":[3650,3660],"text":""},"desc":"Remove unused variable 'editingJob'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setEditingJob' is assigned a value but never used.","line":90,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"setEditingJob"},"fix":{"range":[3660,3675],"text":""},"desc":"Remove unused variable 'setEditingJob'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'saving' is assigned a value but never used.","line":91,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"saving"},"fix":{"range":[3704,3710],"text":""},"desc":"Remove unused variable 'saving'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setSaving' is assigned a value but never used.","line":91,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSaving"},"fix":{"range":[3710,3721],"text":""},"desc":"Remove unused variable 'setSaving'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'formData' is assigned a value but never used.","line":93,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"formData"},"fix":{"range":[3752,3760],"text":""},"desc":"Remove unused variable 'formData'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setFormData' is assigned a value but never used.","line":93,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFormData"},"fix":{"range":[3760,3773],"text":""},"desc":"Remove unused variable 'setFormData'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'calculateNextExecution' is assigned a value but never used.","line":135,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":135,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"calculateNextExecution"},"fix":{"range":[4904,7024],"text":""},"desc":"Remove unused variable 'calculateNextExecution'."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":153,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":153,"endColumn":40,"suggestions":[{"messageId":"addBrackets","fix":{"range":[5839,5965],"text":"{ const nextHour = new Date(now);\n        nextHour.setHours(now.getHours() + 1, 0, 0, 0);\n        return nextHour.toISOString(); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":158,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":158,"endColumn":39,"suggestions":[{"messageId":"addBrackets","fix":{"range":[6023,6173],"text":"{ const nextDay = new Date(now);\n        nextDay.setDate(now.getDate() + 1);\n        nextDay.setHours(0, 0, 0, 0);\n        return nextDay.toISOString(); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":163,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":163,"endColumn":39,"suggestions":[{"messageId":"addBrackets","fix":{"range":[6206,6403],"text":"{ const next8am = new Date(now);\n        if (now.getHours() >= 8) {\n          next8am.setDate(now.getDate() + 1);\n        }\n        next8am.setHours(8, 0, 0, 0);\n        return next8am.toISOString(); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":170,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":170,"endColumn":40,"suggestions":[{"messageId":"addBrackets","fix":{"range":[6433,6619],"text":"{ const nextWeek = new Date(now);\n        nextWeek.setDate(now.getDate() + (7 - now.getDay())); // Next Sunday\n        nextWeek.setHours(0, 0, 0, 0);\n        return nextWeek.toISOString(); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":175,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":175,"endColumn":41,"suggestions":[{"messageId":"addBrackets","fix":{"range":[6650,6834],"text":"{ const nextMonth = new Date(now);\n        nextMonth.setMonth(now.getMonth() + 1, 1); // 1st of next month\n        nextMonth.setHours(0, 0, 0, 0);\n        return nextMonth.toISOString(); }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { CronJob } from '@/api/entities';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"; // Added Alert and AlertDescription\nimport { Plus, Clock, AlertCircle, CheckCircle, RefreshCw, Loader2, Pencil, Save, Trash2, AlertTriangle } from \"lucide-react\";\nimport { format } from 'date-fns';\nimport { toast } from \"sonner\";\n\n// Available functions that can be scheduled\nconst SCHEDULABLE_FUNCTIONS = [\n  {\n    name: 'processScheduledAICalls',\n    description: 'Process and execute scheduled AI calls',\n    recommendedSchedule: 'every_5_minutes',\n    category: 'AI Calls',\n    requiresTenant: true\n  },\n  {\n    name: 'processScheduledAIEmails',\n    description: 'Process and send scheduled AI emails',\n    recommendedSchedule: 'every_15_minutes',\n    category: 'AI Emails',\n    requiresTenant: true\n  },\n  {\n    name: 'archiveAgedData',\n    description: 'Archive old completed activities and opportunities',\n    recommendedSchedule: 'daily',\n    category: 'Data Management',\n    requiresTenant: true\n  },\n  {\n    name: 'cleanupTestRecords',\n    description: 'Remove test data and expired records',\n    recommendedSchedule: 'weekly',\n    category: 'Data Management',\n    requiresTenant: false\n  },\n  {\n    name: 'checkIntegrationUsage',\n    description: 'Monitor API usage and integration health',\n    recommendedSchedule: 'hourly',\n    category: 'Monitoring',\n    requiresTenant: false\n  },\n  {\n    name: 'generateDailyBriefing',\n    description: 'Generate daily CRM summary reports',\n    recommendedSchedule: 'daily_8am',\n    category: 'Reporting',\n    requiresTenant: true\n  },\n  {\n    name: 'runFullSystemDiagnostics',\n    description: 'Run comprehensive system health checks',\n    recommendedSchedule: 'daily_midnight',\n    category: 'Monitoring',\n    requiresTenant: false\n  }\n];\n\nconst SCHEDULE_PRESETS = {\n  'every_minute': { expression: '* * * * *', description: 'Every minute' },\n  'every_5_minutes': { expression: '*/5 * * * *', description: 'Every 5 minutes' },\n  'every_15_minutes': { expression: '*/15 * * * *', description: 'Every 15 minutes' },\n  'every_30_minutes': { expression: '*/30 * * * *', description: 'Every 30 minutes' },\n  'hourly': { expression: '0 * * * *', description: 'Every hour' },\n  'daily': { expression: '0 0 * * *', description: 'Daily at midnight' },\n  'daily_8am': { expression: '0 8 * * *', description: 'Daily at 8 AM' },\n  'daily_midnight': { expression: '0 0 * * *', description: 'Daily at midnight' },\n  'weekly': { expression: '0 0 * * 0', description: 'Weekly on Sunday' },\n  'monthly': { expression: '0 0 1 * *', description: 'Monthly on 1st' }\n};\n\nexport default function CronJobManager({ user }) {\n  const [cronJobs, setCronJobs] = useState([]);\n  const [tenants, setTenants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingJob, setEditingJob] = useState(null);\n  const [saving, setSaving] = useState(false);\n\n  const [formData, setFormData] = useState({\n    name: '',\n    tenant_id: '',\n    function_name: '',\n    schedule_expression: '',\n    description: '',\n    is_active: true,\n    max_retries: 3,\n    timeout_seconds: 300\n  });\n\n  const loadCronJobs = useCallback(async () => {\n    try {\n      setLoading(true);\n      const [jobs, tenantsData] = await Promise.all([\n        CronJob.list('-created_date'),\n        user?.role === 'superadmin' || user?.role === 'admin' ?\n          (async () => {\n            try {\n              const { Tenant } = await import('@/api/entities');\n              return await Tenant.list();\n            } catch (error) {\n              console.error('Error loading tenants:', error);\n              toast.error('Failed to load tenants.');\n              return [];\n            }\n          })() : Promise.resolve([])\n      ]);\n      setCronJobs(jobs);\n      setTenants(tenantsData);\n    } catch (error) {\n      console.error('Error loading cron jobs:', error);\n      toast.error('Failed to load scheduled tasks.');\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    loadCronJobs();\n  }, [loadCronJobs]);\n\n  const calculateNextExecution = (scheduleExpression) => {\n    // Simple calculation - in production you'd want a proper cron parser\n    const now = new Date();\n    // const preset = SCHEDULE_PRESETS[scheduleExpression]; // unused variable\n\n    // This simplified logic assumes schedule_expression directly maps to preset keys or implies 'every_minute'\n    // For a real cron expression, a library like 'cron-parser' would be used.\n    // For now, based on the existing logic:\n    switch (scheduleExpression) {\n      case 'every_minute':\n        return new Date(now.getTime() + 60 * 1000).toISOString();\n      case 'every_5_minutes':\n        return new Date(now.getTime() + 5 * 60 * 1000).toISOString();\n      case 'every_15_minutes':\n        return new Date(now.getTime() + 15 * 60 * 1000).toISOString();\n      case 'every_30_minutes':\n        return new Date(now.getTime() + 30 * 60 * 1000).toISOString();\n      case 'hourly':\n        const nextHour = new Date(now);\n        nextHour.setHours(now.getHours() + 1, 0, 0, 0);\n        return nextHour.toISOString();\n      case 'daily':\n      case 'daily_midnight':\n        const nextDay = new Date(now);\n        nextDay.setDate(now.getDate() + 1);\n        nextDay.setHours(0, 0, 0, 0);\n        return nextDay.toISOString();\n      case 'daily_8am':\n        const next8am = new Date(now);\n        if (now.getHours() >= 8) {\n          next8am.setDate(now.getDate() + 1);\n        }\n        next8am.setHours(8, 0, 0, 0);\n        return next8am.toISOString();\n      case 'weekly':\n        const nextWeek = new Date(now);\n        nextWeek.setDate(now.getDate() + (7 - now.getDay())); // Next Sunday\n        nextWeek.setHours(0, 0, 0, 0);\n        return nextWeek.toISOString();\n      case 'monthly':\n        const nextMonth = new Date(now);\n        nextMonth.setMonth(now.getMonth() + 1, 1); // 1st of next month\n        nextMonth.setHours(0, 0, 0, 0);\n        return nextMonth.toISOString();\n      default:\n        // If not a known preset, fallback to a default or error. Here, we'll mimic every minute.\n        return new Date(now.getTime() + 60 * 1000).toISOString();\n    }\n  };\n\n  // UNUSED: handleSubmit function - form submission not connected to UI\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   setSaving(true);\n\n  //   try {\n  //     const payload = {\n  //       ...formData,\n  //       tenant_id: formData.tenant_id === '' ? null : formData.tenant_id\n  //     };\n\n  //     if (editingJob) {\n  //       await CronJob.update(editingJob.id, payload);\n  //       toast.success(`Task \"${payload.name}\" updated successfully.`);\n  //     } else {\n  //       const nextExecution = calculateNextExecution(formData.schedule_expression);\n  //       await CronJob.create({\n  //         ...payload,\n  //         next_execution: nextExecution\n  //       });\n  //       toast.success(`Task \"${payload.name}\" created successfully.`);\n  //     }\n\n  //     setIsCreateDialogOpen(false);\n  //     setEditingJob(null);\n  //     setFormData({\n  //       name: '',\n  //       tenant_id: '',\n  //       function_name: '',\n  //       schedule_expression: '',\n  //       description: '',\n  //       is_active: true,\n  //       max_retries: 3,\n  //       timeout_seconds: 300\n  //     });\n\n  //     loadCronJobs();\n  //   } catch (error) {\n  //     console.error('Error saving cron job:', error);\n  //     toast.error(`Error saving scheduled task: ${error.message}`);\n  //   } finally {\n  //     setSaving(false);\n  //   }\n  // };\n\n  // UNUSED: handleToggleActive function - not connected to UI\n  // const handleToggleActive = async (jobId, isActive) => {\n  //   try {\n  //     await CronJob.update(jobId, { is_active: isActive });\n  //     toast.success(`Task status updated to ${isActive ? 'Active' : 'Paused'}.`);\n  //     loadCronJobs();\n  //   } catch (error) {\n  //     console.error('Error toggling job status:', error);\n  //     toast.error('Failed to toggle task status.');\n  //   }\n  // };\n\n  // UNUSED: handleDelete function - not connected to UI\n  // const handleDelete = async (jobId) => {\n  //   if (!confirm('Are you sure you want to delete this cron job?')) return;\n\n  //   try {\n  //     await CronJob.delete(jobId);\n  //     toast.success('Scheduled task deleted successfully.');\n  //     loadCronJobs();\n  //   } catch (error) {\n  //     console.error('Error deleting cron job:', error);\n  //     toast.error('Failed to delete scheduled task.');\n  //   }\n  // };\n\n  // UNUSED: handleEdit function - not connected to UI\n  // const handleEdit = (job) => {\n  //   setEditingJob(job);\n  //   setFormData({\n  //     name: job.name,\n  //     tenant_id: job.tenant_id || '',\n  //     function_name: job.function_name,\n  //     schedule_expression: job.schedule_expression,\n  //     description: job.description || '',\n  //     is_active: job.is_active,\n  //     max_retries: job.max_retries || 3,\n  //     timeout_seconds: job.timeout_seconds || 300\n  //   });\n  //   setIsCreateDialogOpen(true);\n  // };\n\n  // UNUSED: getStatusBadge function - not connected to UI\n  // const getStatusBadge = (job) => {\n  //   if (!job.is_active) {\n  //     return <Badge variant=\"secondary\" className=\"bg-slate-600 text-slate-300\">Paused</Badge>;\n  //   }\n\n  //   if (job.error_count > 0) {\n  //     return <Badge variant=\"destructive\" className=\"bg-red-700 text-red-100\">Error ({job.error_count})</Badge>;\n  //   }\n\n  //   return <Badge variant=\"default\" className=\"bg-green-600 text-white\">Active</Badge>;\n  // };\n\n  // UNUSED: getNextRunText function - not connected to UI\n  // const getNextRunText = (job) => {\n  //   if (!job.next_execution) return 'Not scheduled';\n\n  //   const nextRun = new Date(job.next_execution);\n  //   const now = new Date();\n\n  //   if (nextRun < now) {\n  //     return 'Overdue';\n  //   }\n\n  //   return format(nextRun, 'MMM d, h:mm a');\n  // };\n\n  return (\n    <div className=\"space-y-6\">\n      <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n        <Clock className=\"h-4 w-4 text-blue-400\" />\n        <AlertDescription className=\"text-blue-300\">\n          Manage scheduled background tasks and automated processes.\n        </AlertDescription>\n      </Alert>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Clock className=\"w-5 h-5 text-yellow-400\" />\n            Scheduled Cron Jobs\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            View and manage automated tasks\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex justify-center p-8\">\n              <Loader2 className=\"w-6 h-6 animate-spin text-blue-400\" />\n            </div>\n          ) : cronJobs.length === 0 ? (\n            <div className=\"text-center p-8 text-slate-400\">\n              No cron jobs configured\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {cronJobs.map((job) => (\n                <div key={job.id} className=\"p-4 bg-slate-900 rounded-lg border border-slate-700\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-slate-200\">{job.name}</p>\n                      <p className=\"text-xs text-slate-400 mt-1\">{job.description}</p>\n                      <div className=\"flex items-center gap-4 mt-2 text-xs text-slate-500\">\n                        <span>Schedule: {SCHEDULE_PRESETS[job.schedule_expression]?.description || job.schedule_expression}</span>\n                        <span>Executions: {job.execution_count}</span>\n                      </div>\n                    </div>\n                    <Badge variant={job.is_active ? 'default' : 'secondary'} className={job.is_active ? 'bg-green-600' : 'bg-slate-600'}>\n                      {job.is_active ? 'Active' : 'Inactive'}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\DataConsistencyManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Database, \n  Search, \n  AlertTriangle, \n  CheckCircle2, \n  Loader2,\n  Info\n} from \"lucide-react\";\nimport { detectOrphanedRecords } from \"@/api/functions\";\n\nexport default function DataConsistencyManager() {\n  const [scanning, setScanning] = useState(false);\n  const [results, setResults] = useState(null);\n\n  const handleScan = async () => {\n    setScanning(true);\n    try {\n      const response = await detectOrphanedRecords();\n      setResults(response.data);\n    } catch (error) {\n      console.error(\"Error scanning for orphans:\", error);\n      alert(\"Failed to scan for orphaned records: \" + error.message);\n    } finally {\n      setScanning(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Database className=\"w-5 h-5 text-pink-400\" />\n            Data Consistency Manager\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Detect and fix orphaned records and invalid foreign key references\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n            <Info className=\"h-4 w-4 text-blue-400\" />\n            <AlertDescription className=\"text-blue-300\">\n              <strong>Phase 1 Implementation:</strong> This tool helps maintain referential integrity by finding records with invalid references to accounts, employees, contacts, or leads.\n            </AlertDescription>\n          </Alert>\n\n          <Button\n            onClick={handleScan}\n            disabled={scanning}\n            className=\"bg-green-600 hover:bg-green-700 text-white\"\n          >\n            {scanning ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Scanning...\n              </>\n            ) : (\n              <>\n                <Search className=\"w-4 h-4 mr-2\" />\n                Scan for Orphans\n              </>\n            )}\n          </Button>\n\n          {results && (\n            <div className=\"space-y-4 mt-4\">\n              <Alert className={results.totalOrphans > 0 ? \"bg-amber-900/30 border-amber-700/50\" : \"bg-green-900/30 border-green-700/50\"}>\n                {results.totalOrphans > 0 ? (\n                  <>\n                    <AlertTriangle className=\"h-4 w-4 text-amber-400\" />\n                    <AlertDescription className=\"text-amber-300\">\n                      <strong>Found {results.totalOrphans} orphaned records</strong> across {Object.keys(results.orphanedRecords).length} entities.\n                    </AlertDescription>\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle2 className=\"h-4 w-4 text-green-400\" />\n                    <AlertDescription className=\"text-green-300\">\n                      <strong>Data integrity check passed!</strong> No orphaned records found.\n                    </AlertDescription>\n                  </>\n                )}\n              </Alert>\n\n              {results.totalOrphans > 0 && (\n                <Card className=\"bg-slate-900 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-slate-100 text-base\">Orphaned Records by Entity</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {Object.entries(results.orphanedRecords).map(([entity, records]) => (\n                        <div key={entity} className=\"flex items-center justify-between p-3 bg-slate-800 rounded-lg border border-slate-700\">\n                          <div>\n                            <p className=\"font-medium text-slate-200\">{entity}</p>\n                            <p className=\"text-xs text-slate-400\">\n                              {records.length} record{records.length !== 1 ? 's' : ''} with invalid references\n                            </p>\n                          </div>\n                          <Badge variant=\"destructive\" className=\"bg-red-600 text-white\">\n                            {records.length}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {results.totalOrphans > 0 && (\n                <Alert className=\"bg-slate-900 border-slate-700\">\n                  <Info className=\"h-4 w-4 text-blue-400\" />\n                  <AlertDescription className=\"text-slate-300\">\n                    <strong>Next Steps:</strong> Review the orphaned records in the Data Diagnostics page to clean them up or reassign valid references.\n                  </AlertDescription>\n                </Alert>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\DataOptimizationDashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used.","line":26,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"loading"},"fix":{"range":[682,689],"text":""},"desc":"Remove unused variable 'loading'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setLoading' is assigned a value but never used.","line":26,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"setLoading"},"fix":{"range":[689,701],"text":""},"desc":"Remove unused variable 'setLoading'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":186,"column":76,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6631,6670],"text":"Compute and cache today&apos;s sales metrics"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6631,6670],"text":"Compute and cache today&lsquo;s sales metrics"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6631,6670],"text":"Compute and cache today&#39;s sales metrics"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6631,6670],"text":"Compute and cache today&rsquo;s sales metrics"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":205,"column":70,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7419,7460],"text":"Rollup this month&apos;s comprehensive metrics"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7419,7460],"text":"Rollup this month&lsquo;s comprehensive metrics"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7419,7460],"text":"Rollup this month&#39;s comprehensive metrics"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7419,7460],"text":"Rollup this month&rsquo;s comprehensive metrics"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  TrendingUp, \n  Calendar, \n  CheckCircle2, \n  AlertTriangle,\n  Database,\n  Play,\n  Archive,\n  Settings as SettingsIcon,\n  Loader2\n} from \"lucide-react\";\n\nexport default function DataOptimizationDashboard() {\n  const [stats, setStats] = useState({\n    dailyMetricsCached: 0,\n    monthlyReports: 0,\n    successfulSyncs: 0,\n    failedSyncs: 0,\n    lastDailyCalc: null,\n    lastMonthlyCalc: null\n  });\n  const [loading, setLoading] = useState(false);\n  const [actionLoading, setActionLoading] = useState({\n    daily: false,\n    monthly: false,\n    archive: false,\n    register: false\n  });\n\n  useEffect(() => {\n    loadStats();\n  }, []);\n\n  const loadStats = async () => {\n    // Placeholder - in production, load from respective entities\n    setStats({\n      dailyMetricsCached: 0,\n      monthlyReports: 0,\n      successfulSyncs: 0,\n      failedSyncs: 0,\n      lastDailyCalc: null,\n      lastMonthlyCalc: null\n    });\n  };\n\n  const handleCalculateDaily = async () => {\n    setActionLoading({ ...actionLoading, daily: true });\n    try {\n      // Call calculateDailyMetrics function\n      alert(\"Daily metrics calculation triggered\");\n      loadStats();\n    } catch (error) {\n      console.error(\"Error calculating daily metrics:\", error);\n    } finally {\n      setActionLoading({ ...actionLoading, daily: false });\n    }\n  };\n\n  const handleCalculateMonthly = async () => {\n    setActionLoading({ ...actionLoading, monthly: true });\n    try {\n      // Call calculateMonthlyPerformance function\n      alert(\"Monthly performance calculation triggered\");\n      loadStats();\n    } catch (error) {\n      console.error(\"Error calculating monthly performance:\", error);\n    } finally {\n      setActionLoading({ ...actionLoading, monthly: false });\n    }\n  };\n\n  const handleArchiveOldData = async () => {\n    if (!confirm(\"Archive old data? This will move completed activities and closed opportunities older than 1 year to archive tables.\")) {\n      return;\n    }\n    \n    setActionLoading({ ...actionLoading, archive: true });\n    try {\n      // Call archiveOldData function\n      alert(\"Data archiving triggered\");\n      loadStats();\n    } catch (error) {\n      console.error(\"Error archiving data:\", error);\n    } finally {\n      setActionLoading({ ...actionLoading, archive: false });\n    }\n  };\n\n  const handleRegisterCronJobs = async () => {\n    setActionLoading({ ...actionLoading, register: true });\n    try {\n      // Call registerDataMaintenanceJobs function\n      alert(\"Cron jobs registered successfully\");\n    } catch (error) {\n      console.error(\"Error registering cron jobs:\", error);\n    } finally {\n      setActionLoading({ ...actionLoading, register: false });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Info Alert */}\n      <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n        <Database className=\"h-4 w-4 text-blue-400\" />\n        <AlertDescription className=\"text-blue-300\">\n          <strong>Query Optimization Active:</strong> Aggregate tables and caching are improving dashboard performance by up to 10x.\n        </AlertDescription>\n      </Alert>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Daily Metrics Cached</p>\n                <p className=\"text-3xl font-bold text-slate-100\">{stats.dailyMetricsCached}</p>\n                <p className=\"text-xs text-slate-500 mt-1\">\n                  Last: {stats.lastDailyCalc || 'Never'}\n                </p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-purple-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Monthly Reports</p>\n                <p className=\"text-3xl font-bold text-slate-100\">{stats.monthlyReports}</p>\n                <p className=\"text-xs text-slate-500 mt-1\">\n                  Last: {stats.lastMonthlyCalc || 'Never'}\n                </p>\n              </div>\n              <Calendar className=\"h-8 w-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Successful Syncs</p>\n                <p className=\"text-3xl font-bold text-slate-100\">{stats.successfulSyncs}</p>\n                <p className=\"text-xs text-slate-500 mt-1\">Last 10 runs</p>\n              </div>\n              <CheckCircle2 className=\"h-8 w-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-400\">Failed Syncs</p>\n                <p className=\"text-3xl font-bold text-slate-100\">{stats.failedSyncs}</p>\n                <p className=\"text-xs text-slate-500 mt-1\">Needs attention</p>\n              </div>\n              <AlertTriangle className=\"h-8 w-8 text-red-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Manual Actions */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Manual Optimization Actions</CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Run these manually or let automated cron jobs handle them\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between p-4 bg-slate-900 rounded-lg border border-slate-700\">\n            <div>\n              <h4 className=\"font-medium text-slate-100\">Calculate Daily Metrics</h4>\n              <p className=\"text-sm text-slate-400\">Compute and cache today's sales metrics</p>\n            </div>\n            <Button\n              onClick={handleCalculateDaily}\n              disabled={actionLoading.daily}\n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n            >\n              {actionLoading.daily ? (\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <Play className=\"w-4 h-4 mr-2\" />\n              )}\n              Calculate\n            </Button>\n          </div>\n\n          <div className=\"flex items-center justify-between p-4 bg-slate-900 rounded-lg border border-slate-700\">\n            <div>\n              <h4 className=\"font-medium text-slate-100\">Calculate Monthly Performance</h4>\n              <p className=\"text-sm text-slate-400\">Rollup this month's comprehensive metrics</p>\n            </div>\n            <Button\n              onClick={handleCalculateMonthly}\n              disabled={actionLoading.monthly}\n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n            >\n              {actionLoading.monthly ? (\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <Play className=\"w-4 h-4 mr-2\" />\n              )}\n              Calculate\n            </Button>\n          </div>\n\n          <div className=\"flex items-center justify-between p-4 bg-slate-900 rounded-lg border border-slate-700\">\n            <div>\n              <h4 className=\"font-medium text-slate-100\">Archive Old Data</h4>\n              <p className=\"text-sm text-slate-400\">Move completed activities and closed deals older than 1 year to archive</p>\n            </div>\n            <Button\n              onClick={handleArchiveOldData}\n              disabled={actionLoading.archive}\n              variant=\"outline\"\n              className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n            >\n              {actionLoading.archive ? (\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <Archive className=\"w-4 h-4 mr-2\" />\n              )}\n              Archive\n            </Button>\n          </div>\n\n          <div className=\"flex items-center justify-between p-4 bg-amber-900/20 rounded-lg border border-amber-700/50\">\n            <div>\n              <h4 className=\"font-medium text-slate-100\">Register Automated Cron Jobs</h4>\n              <p className=\"text-sm text-slate-400\">Set up automated daily/monthly optimization jobs</p>\n            </div>\n            <Button\n              onClick={handleRegisterCronJobs}\n              disabled={actionLoading.register}\n              className=\"bg-amber-600 hover:bg-amber-700 text-white\"\n            >\n              {actionLoading.register ? (\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <SettingsIcon className=\"w-4 h-4 mr-2\" />\n              )}\n              Register\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\DatabaseSettings.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\DenormalizationSync.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, RefreshCw } from \"lucide-react\"; // Removed CheckCircle, AlertCircle, Zap\nimport { syncDenormalizedFields } from \"@/api/functions\";\n\nexport default function DenormalizationSync() {\n  const [syncing, setSyncing] = useState(null); // Changed to null to indicate no specific mode syncing\n  const [result, setResult] = useState(null);\n\n  const handleSync = async (syncMode) => {\n    setSyncing(syncMode); // Set to the mode currently syncing\n    setResult(null);\n\n    try {\n      const payload = {\n        mode: syncMode,\n        // entityType is removed as per the new UI design, implying 'all' entities or backend default\n      };\n\n      const response = await syncDenormalizedFields(payload);\n      // Assuming response.data might contain a message or we construct one\n      setResult({\n        status: 'success',\n        message: response.data.message || `Denormalization sync (${syncMode}) completed successfully! Total records: ${response.data.totalSynced || 0}`\n      });\n    } catch (error) {\n      console.error(\"Sync error:\", error);\n      setResult({\n        status: 'error',\n        message: error.message || \"Denormalization sync failed\"\n      });\n    } finally {\n      setSyncing(null); // Reset to null after sync\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n        <RefreshCw className=\"h-4 w-4 text-blue-400\" />\n        <AlertDescription className=\"text-blue-300\">\n          Keep cached data fields synchronized across entities for optimal performance.\n        </AlertDescription>\n      </Alert>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <RefreshCw className=\"w-5 h-5 text-cyan-400\" />\n            Denormalization Sync\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Synchronize denormalized fields across all entities\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Button\n              onClick={() => handleSync('incremental')}\n              disabled={syncing !== null} // Disable if any sync is in progress\n              className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              {syncing === 'incremental' ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Syncing...\n                </>\n              ) : (\n                'Incremental Sync'\n              )}\n            </Button>\n            <Button\n              onClick={() => handleSync('full')}\n              disabled={syncing !== null} // Disable if any sync is in progress\n              variant=\"outline\"\n              className=\"bg-slate-700 text-slate-200 border-slate-600 hover:bg-slate-600\"\n            >\n              {syncing === 'full' ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Syncing...\n                </>\n              ) : (\n                'Full Sync'\n              )}\n            </Button>\n          </div>\n\n          {result && (\n            <Alert className={result.status === 'success' ? 'bg-green-900/30 border-green-700/50' : 'bg-red-900/30 border-red-700/50'}>\n              {result.status === 'success' ? (\n                <RefreshCw className=\"h-4 w-4 text-green-400\" /> // Using RefreshCw for success as well, based on common patterns\n              ) : (\n                <RefreshCw className=\"h-4 w-4 text-red-400\" />\n              )}\n              <AlertDescription className={result.status === 'success' ? 'text-green-300' : 'text-red-300'}>\n                {result.message}\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\DocumentationSeeder.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":103,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3787,3875],"text":"\n            This is safe to run multiple times - it won&apos;t create duplicates.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3787,3875],"text":"\n            This is safe to run multiple times - it won&lsquo;t create duplicates.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3787,3875],"text":"\n            This is safe to run multiple times - it won&#39;t create duplicates.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3787,3875],"text":"\n            This is safe to run multiple times - it won&rsquo;t create duplicates.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":110,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4164,4190],"text":"&quot;How do I convert a lead?\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4164,4190],"text":"&ldquo;How do I convert a lead?\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4164,4190],"text":"&#34;How do I convert a lead?\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4164,4190],"text":"&rdquo;How do I convert a lead?\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":110,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4164,4190],"text":"\"How do I convert a lead?&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4164,4190],"text":"\"How do I convert a lead?&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4164,4190],"text":"\"How do I convert a lead?&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4164,4190],"text":"\"How do I convert a lead?&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":111,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4212,4238],"text":"&quot;What are BizDev Sources?\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4212,4238],"text":"&ldquo;What are BizDev Sources?\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4212,4238],"text":"&#34;What are BizDev Sources?\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4212,4238],"text":"&rdquo;What are BizDev Sources?\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":111,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4212,4238],"text":"\"What are BizDev Sources?&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4212,4238],"text":"\"What are BizDev Sources?&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4212,4238],"text":"\"What are BizDev Sources?&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4212,4238],"text":"\"What are BizDev Sources?&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":112,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4260,4289],"text":"&quot;How does the calendar work?\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4260,4289],"text":"&ldquo;How does the calendar work?\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4260,4289],"text":"&#34;How does the calendar work?\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4260,4289],"text":"&rdquo;How does the calendar work?\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":112,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4260,4289],"text":"\"How does the calendar work?&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4260,4289],"text":"\"How does the calendar work?&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4260,4289],"text":"\"How does the calendar work?&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4260,4289],"text":"\"How does the calendar work?&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":113,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4311,4342],"text":"&quot;How do I set up integrations?\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4311,4342],"text":"&ldquo;How do I set up integrations?\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4311,4342],"text":"&#34;How do I set up integrations?\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4311,4342],"text":"&rdquo;How do I set up integrations?\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":113,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4311,4342],"text":"\"How do I set up integrations?&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4311,4342],"text":"\"How do I set up integrations?&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4311,4342],"text":"\"How do I set up integrations?&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4311,4342],"text":"\"How do I set up integrations?&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Book, CheckCircle, AlertTriangle } from \"lucide-react\";\nimport { seedDocumentation } from \"@/api/functions\";\n\nexport default function DocumentationSeeder() {\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  const handleSeed = async () => {\n    setLoading(true);\n    setResult(null);\n    setError(null);\n\n    try {\n      const response = await seedDocumentation();\n      \n      if (response.data?.success) {\n        setResult(response.data);\n      } else {\n        setError(response.data?.error || response.data?.message || 'Failed to seed documentation');\n      }\n    } catch (err) {\n      console.error('Error seeding documentation:', err);\n      setError(err.message || 'An error occurred while seeding documentation');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n          <Book className=\"w-6 h-6 text-blue-400\" />\n          AI Avatar Documentation\n        </CardTitle>\n        <CardDescription className=\"text-slate-400\">\n          Seed the documentation database to enable the AI Avatar to answer questions about system workflows, features, and best practices.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <h3 className=\"font-semibold text-slate-200\">What gets seeded:</h3>\n          <ul className=\"list-disc list-inside text-sm text-slate-400 space-y-1\">\n            <li>Getting Started Guide</li>\n            <li>Contact Management workflows</li>\n            <li>Lead Conversion process</li>\n            <li>Sales Pipeline management</li>\n            <li>Activity Tracking guide</li>\n            <li>BizDev Sources workflow</li>\n            <li>AI Features documentation</li>\n            <li>Integrations setup</li>\n            <li>Reports & Analytics guide</li>\n            <li>Cash Flow management</li>\n            <li>User Management & Permissions</li>\n          </ul>\n        </div>\n\n        {result && (\n          <Alert className=\"bg-green-900/30 border-green-700/50\">\n            <CheckCircle className=\"h-4 w-4 text-green-400\" />\n            <AlertDescription className=\"text-green-300\">\n              <strong>Success!</strong> {result.message}\n              <br />\n              <span className=\"text-sm\">Created {result.count} documentation records.</span>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {error && (\n          <Alert variant=\"destructive\" className=\"bg-red-900/30 border-red-700/50\">\n            <AlertTriangle className=\"h-4 w-4 text-red-400\" />\n            <AlertDescription className=\"text-red-300\">\n              <strong>Error:</strong> {error}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"flex items-center gap-3\">\n          <Button\n            onClick={handleSeed}\n            disabled={loading}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            {loading ? (\n              <>\n                <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n                Seeding Documentation...\n              </>\n            ) : (\n              <>\n                <Book className=\"w-4 h-4 mr-2\" />\n                Seed Documentation\n              </>\n            )}\n          </Button>\n\n          <div className=\"text-xs text-slate-400\">\n            This is safe to run multiple times - it won't create duplicates.\n          </div>\n        </div>\n\n        <div className=\"text-xs text-slate-500 bg-slate-700/50 p-3 rounded border border-slate-600\">\n          <strong>Note:</strong> After seeding, users can ask the AI Avatar questions like:\n          <ul className=\"mt-2 space-y-1 ml-4 list-disc\">\n            <li>\"How do I convert a lead?\"</li>\n            <li>\"What are BizDev Sources?\"</li>\n            <li>\"How does the calendar work?\"</li>\n            <li>\"How do I set up integrations?\"</li>\n          </ul>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\EnhancedUserManagement.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Trash2' is defined but never used.","line":10,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"Trash2"},"fix":{"range":[650,658],"text":""},"desc":"Remove unused variable 'Trash2'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":10,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"Users"},"fix":{"range":[671,678],"text":""},"desc":"Remove unused variable 'Users'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used.","line":10,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":66,"suggestions":[{"messageId":"removeVar","data":{"varName":"AlertTriangle"},"fix":{"range":[684,699],"text":""},"desc":"Remove unused variable 'AlertTriangle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'UserEntity' is defined but never used.","line":11,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"UserEntity"},"fix":{"range":[757,809],"text":""},"desc":"Remove unused variable 'UserEntity'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'UserPermissions' is defined but never used.","line":17,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"UserPermissions"},"fix":{"range":[1019,1040],"text":""},"desc":"Remove unused variable 'UserPermissions'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Alert' is defined but never used.","line":18,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[1070,1076],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDescription' is defined but never used.","line":18,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"AlertDescription"},"fix":{"range":[1075,1093],"text":""},"desc":"Remove unused variable 'AlertDescription'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":209,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10060,10169],"text":"\n                            This will update how the user&apos;s name appears in the app\n                        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10060,10169],"text":"\n                            This will update how the user&lsquo;s name appears in the app\n                        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10060,10169],"text":"\n                            This will update how the user&#39;s name appears in the app\n                        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10060,10169],"text":"\n                            This will update how the user&rsquo;s name appears in the app\n                        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":263,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13271,13418],"text":"\n                            Note: Base44 role is always &quot;user\" for Employees/Managers. This controls CRM data visibility.\n                        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13271,13418],"text":"\n                            Note: Base44 role is always &ldquo;user\" for Employees/Managers. This controls CRM data visibility.\n                        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13271,13418],"text":"\n                            Note: Base44 role is always &#34;user\" for Employees/Managers. This controls CRM data visibility.\n                        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13271,13418],"text":"\n                            Note: Base44 role is always &rdquo;user\" for Employees/Managers. This controls CRM data visibility.\n                        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":263,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13271,13418],"text":"\n                            Note: Base44 role is always \"user&quot; for Employees/Managers. This controls CRM data visibility.\n                        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13271,13418],"text":"\n                            Note: Base44 role is always \"user&ldquo; for Employees/Managers. This controls CRM data visibility.\n                        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13271,13418],"text":"\n                            Note: Base44 role is always \"user&#34; for Employees/Managers. This controls CRM data visibility.\n                        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13271,13418],"text":"\n                            Note: Base44 role is always \"user&rdquo; for Employees/Managers. This controls CRM data visibility.\n                        "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Loader2, Trash2, ShieldCheck, Users, Edit, AlertTriangle, Search, RefreshCw, Plus, X, Copy } from \"lucide-react\";\nimport { User as UserEntity } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Tenant } from \"@/api/entities\";\nimport { Employee } from \"@/api/entities\";\nimport { toast } from \"sonner\";\nimport { Badge } from '@/components/ui/badge';\nimport UserPermissions from './UserPermissions';\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport InviteUserDialog from './InviteUserDialog';\nimport { Switch } from \"@/components/ui/switch\";\nimport { format } from 'date-fns';\nimport { updateEmployeeSecure } from \"@/api/functions\";\n\nconst UserFormModal = ({ user, tenants, currentUser, onSave, onCancel }) => {\n    const navigationPages = [\n        { key: 'Dashboard', label: 'Dashboard' },\n        { key: 'Contacts', label: 'Contacts' },\n        { key: 'Accounts', label: 'Accounts' },\n        { key: 'Leads', label: 'Leads' },\n        { key: 'Opportunities', label: 'Opportunities' },\n        { key: 'Activities', label: 'Activities' },\n        { key: 'Calendar', label: 'Calendar' },\n        { key: 'BizDevSources', label: 'BizDev Sources' },\n        { key: 'CashFlow', label: 'Cash Flow' },\n        { key: 'DocumentProcessing', label: 'Document Processing' },\n        { key: 'DocumentManagement', label: 'Document Management' },\n        { key: 'AICampaigns', label: 'AI Campaigns' },\n        { key: 'Employees', label: 'Employees' },\n        { key: 'Reports', label: 'Reports' },\n        { key: 'Integrations', label: 'Integrations' },\n        { key: 'Documentation', label: 'Documentation' },\n        { key: 'Settings', label: 'Settings' },\n        { key: 'Agent', label: 'AI Agent (Avatar)' },\n        { key: 'PaymentPortal', label: 'Payment Portal' },\n        { key: 'Utilities', label: 'Utilities' },\n        { key: 'ClientOnboarding', label: 'Client Onboarding' },\n        { key: 'WorkflowGuide', label: 'Workflow Guide' },\n        { key: 'ClientRequirements', label: 'Client Requirements' }, // Added ClientRequirements\n    ];\n\n    const initNavPerms = () => {\n        const existing = user?.navigation_permissions || {};\n        const obj = {};\n        // The following logic will set a default 'true' for core pages if not explicitly defined,\n        // and 'false' for others (including Utilities) if not defined.\n        navigationPages.forEach(p => { obj[p.key] = existing[p.key] !== undefined ? existing[p.key] : (p.key === 'Dashboard' || p.key === 'Contacts' || p.key === 'Accounts' || p.key === 'Leads' || p.key === 'Opportunities' || p.key === 'Activities'); });\n        return obj;\n    };\n\n    const [formData, setFormData] = useState({\n        full_name: user?.display_name || user?.full_name || '',\n        tenant_id: user?.tenant_id || 'no-client',\n        employee_role: user?.employee_role || 'employee', // SIMPLIFIED: Only manager or employee\n        is_active: user?.is_active !== false,\n        tags: user?.tags || [],\n        can_use_softphone: user?.permissions?.can_use_softphone || false,\n        crm_access: user?.permissions?.crm_access !== false,\n        access_level: user?.permissions?.access_level || 'read_write',\n        dashboard_scope: user?.permissions?.dashboard_scope || 'own',\n        navigation_permissions: initNavPerms(),\n        manager_employee_id: null\n    });\n    const [saving, setSaving] = useState(false);\n    const [tagInput, setTagInput] = useState('');\n\n    const [employeesInTenant, setEmployeesInTenant] = useState([]);\n    const [myEmployeeRecord, setMyEmployeeRecord] = useState(null);\n\n    useEffect(() => {\n        (async () => {\n            const tenantId = user?.tenant_id || null;\n            if (!tenantId) {\n                setEmployeesInTenant([]);\n                setMyEmployeeRecord(null);\n                setFormData((prev) => ({ ...prev, manager_employee_id: null }));\n                return;\n            }\n            try {\n                const list = await Employee.filter({ tenant_id: tenantId });\n                setEmployeesInTenant(Array.isArray(list) ? list : []);\n                const mine = await Employee.filter({ tenant_id: tenantId, user_email: user?.email || \"\" });\n                const myEmp = Array.isArray(mine) && mine.length > 0 ? mine[0] : null;\n                setMyEmployeeRecord(myEmp);\n                if (myEmp?.manager_employee_id) {\n                    setFormData((prev) => ({ ...prev, manager_employee_id: myEmp.manager_employee_id }));\n                } else {\n                    setFormData((prev) => ({ ...prev, manager_employee_id: null }));\n                }\n            } catch (error) {\n                console.error(\"Failed to load employee data for user form:\", error);\n                toast.error(\"Failed to load employee data.\");\n            }\n        })();\n    }, [user?.tenant_id, user?.email]);\n\n    const managerOptions = useMemo(() => {\n        const idToExclude = myEmployeeRecord?.id || null;\n        return employeesInTenant.filter((e) => e.id !== idToExclude);\n    }, [employeesInTenant, myEmployeeRecord]);\n\n    const canEditPermissions = (currentUser?.role === 'admin'); // Changed: Only Admin can edit granular permissions\n\n    const handleAddTag = () => {\n        if (tagInput && !formData.tags.includes(tagInput.trim())) {\n            setFormData(prev => ({ ...prev, tags: [...prev.tags, tagInput.trim()] }));\n            setTagInput('');\n        }\n    };\n\n    const handleRemoveTag = (indexToRemove) => {\n        setFormData(prev => ({\n            ...prev,\n            tags: prev.tags.filter((_, index) => index !== indexToRemove)\n        }));\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setSaving(true);\n        try {\n            // 1) Persist employee manager relationship\n            if (myEmployeeRecord?.id) {\n                const desiredManagerId = formData.manager_employee_id || null;\n                if (desiredManagerId !== (myEmployeeRecord.manager_employee_id || null)) {\n                    await updateEmployeeSecure({\n                        employee_id: myEmployeeRecord.id,\n                        update: { manager_employee_id: desiredManagerId || null }\n                    });\n                }\n            }\n\n            // Build the navigation_permissions object - ensure ALL keys are included\n            const navPerms = {};\n            navigationPages.forEach(p => {\n                navPerms[p.key] = !!formData.navigation_permissions?.[p.key];\n            });\n\n            console.log('[EnhancedUserManagement] Navigation permissions being saved:', navPerms);\n\n            const updateData = {\n                tenant_id: formData.tenant_id === 'no-client' ? null : formData.tenant_id,\n                employee_role: formData.employee_role || 'employee', // Always set employee_role\n                is_active: formData.is_active,\n                tags: formData.tags,\n                permissions: { // New nested permissions object for CRM capabilities\n                    can_use_softphone: formData.can_use_softphone,\n                    crm_access: !!formData.crm_access,\n                    access_level: formData.access_level,\n                    dashboard_scope: formData.dashboard_scope\n                },\n                navigation_permissions: navPerms\n            };\n\n            if (formData.full_name) {\n                updateData.full_name = formData.full_name;\n            }\n\n            console.log('[EnhancedUserManagement] Saving user with payload:', updateData);\n\n            await onSave(user.id, updateData);\n        } catch (error) {\n            console.error('Error saving user:', error);\n            toast.error('Failed to save user changes');\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    const toggleNav = (key, value) => {\n        console.log('[EnhancedUserManagement] Toggling nav permission:', key, '=', value);\n        setFormData(prev => ({\n            ...prev,\n            navigation_permissions: { ...(prev.navigation_permissions || {}), [key]: !!value }\n        }));\n    };\n\n    return (\n        <Dialog open={!!user} onOpenChange={onCancel}>\n            <DialogContent className=\"max-w-4xl w-[95vw] sm:w-full max-h-[85vh] overflow-y-auto bg-slate-800 border-slate-700 text-slate-200\">\n                <DialogHeader>\n                    <DialogTitle className=\"text-slate-100\">Edit User</DialogTitle>\n                    <DialogDescription className=\"text-slate-400\">\n                        Update user information, CRM access, permissions, and navigation visibility\n                    </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                    {/* Display Name */}\n                    <div>\n                        <Label htmlFor=\"full_name\" className=\"text-slate-200\">Display Name</Label>\n                        <Input\n                            id=\"full_name\"\n                            value={formData.full_name}\n                            onChange={(e) => setFormData(prev => ({ ...prev, full_name: e.target.value }))}\n                            placeholder=\"Enter display name\"\n                            required\n                            className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400\"\n                        />\n                        <p className=\"text-xs text-slate-500 mt-1\">\n                            This will update how the user's name appears in the app\n                        </p>\n                    </div>\n\n                    {/* Client */}\n                    <div>\n                        <Label htmlFor=\"tenant_id\" className=\"text-slate-200\">Client</Label>\n                        <Select\n                            value={formData.tenant_id}\n                            onValueChange={(value) => setFormData(prev => ({ ...prev, tenant_id: value }))}\n                        >\n                            <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                                <SelectValue placeholder=\"Select client\" />\n                            </SelectTrigger>\n                            <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                                <SelectItem value=\"no-client\">No Client</SelectItem>\n                                {tenants.map(tenant => (\n                                    <SelectItem key={tenant.id} value={tenant.id}>\n                                        {tenant.name}\n                                    </SelectItem>\n                                ))}\n                            </SelectContent>\n                        </Select>\n                    </div>\n\n                    {/* SIMPLIFIED: Only Employee Role - No confusing \"Role/Status\" field */}\n                    <div>\n                        <Label htmlFor=\"employee_role\" className=\"text-slate-200\">CRM Role</Label>\n                        <Select\n                            value={formData.employee_role || 'employee'}\n                            onValueChange={(value) => setFormData(prev => ({\n                                ...prev,\n                                employee_role: value\n                            }))}\n                        >\n                            <SelectTrigger id=\"employee_role\" className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                                <SelectValue placeholder=\"Select CRM role\" />\n                            </SelectTrigger>\n                            <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                                <SelectItem value=\"employee\">\n                                    <div className=\"flex flex-col\">\n                                        <span className=\"font-semibold\">Employee</span>\n                                        <span className=\"text-xs text-slate-400\">Can only see their own records</span>\n                                    </div>\n                                </SelectItem>\n                                <SelectItem value=\"manager\">\n                                    <div className=\"flex flex-col\">\n                                        <span className=\"font-semibold\">Manager</span>\n                                        <span className=\"text-xs text-slate-400\">Can see all records in their tenant</span>\n                                    </div>\n                                </SelectItem>\n                            </SelectContent>\n                        </Select>\n                        <p className=\"text-xs text-slate-500 mt-1\">\n                            Note: Base44 role is always \"user\" for Employees/Managers. This controls CRM data visibility.\n                        </p>\n                    </div>\n\n                    {/* Active Status */}\n                    <div className=\"flex items-center space-x-2\">\n                        <Switch\n                            id=\"is_active\"\n                            checked={formData.is_active}\n                            onCheckedChange={(checked) => setFormData(prev => ({ ...prev, is_active: checked }))}\n                        />\n                        <Label htmlFor=\"is_active\" className=\"text-slate-200\">Account Active</Label>\n                        <p className=\"text-xs text-slate-500 mt-1\">\n                            Deactivating will prevent login.\n                        </p>\n                    </div>\n\n                    <div>\n                        <Label htmlFor=\"tags\" className=\"text-slate-200\">Tags</Label>\n                        <div className=\"flex items-center gap-2\">\n                            <Input\n                                id=\"tag-input\"\n                                value={tagInput}\n                                onChange={(e) => setTagInput(e.target.value)}\n                                placeholder=\"e.g., Sales, Manager\"\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        e.preventDefault();\n                                        handleAddTag();\n                                    }\n                                }}\n                                className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400\"\n                            />\n                            <Button type=\"button\" variant=\"outline\" onClick={handleAddTag} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n                                Add\n                            </Button>\n                        </div>\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                            {formData.tags.map((tag, index) => (\n                                <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1 bg-slate-700 text-slate-200 border-slate-600\">\n                                    {tag}\n                                    <button\n                                        type=\"button\"\n                                        onClick={() => handleRemoveTag(index)}\n                                        className=\"rounded-full hover:bg-black/10 p-0.5\"\n                                    >\n                                        <X className=\"h-3 w-3\" />\n                                    </button>\n                                </Badge>\n                            ))}\n                        </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                        <Switch\n                            id=\"can_use_softphone\"\n                            checked={formData.can_use_softphone}\n                            onCheckedChange={(checked) => setFormData(prev => ({ ...prev, can_use_softphone: checked }))}\n                        />\n                        <Label htmlFor=\"can_use_softphone\" className=\"text-slate-200\">Can use Softphone</Label>\n                    </div>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                        <div className=\"flex items-center space-x-2\">\n                            <Switch\n                                id=\"crm_access\"\n                                checked={formData.crm_access}\n                                onCheckedChange={(checked) => setFormData(prev => ({ ...prev, crm_access: checked }))}\n                            />\n                            <Label htmlFor=\"crm_access\" className=\"text-slate-200\">CRM Access</Label>\n                        </div>\n                        <div>\n                            <Label htmlFor=\"access_level\" className=\"text-slate-200\">Access Level</Label>\n                            <Select\n                                value={formData.access_level}\n                                onValueChange={(value) => setFormData(prev => ({ ...prev, access_level: value }))}\n                            >\n                                <SelectTrigger id=\"access_level\" className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                                    <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                                    <SelectItem value=\"read\">Read</SelectItem>\n                                    <SelectItem value=\"read_write\">Read/Write</SelectItem>\n                                </SelectContent>\n                            </Select>\n                        </div>\n                        {/* Dashboard Data Scope */}\n                        <div>\n                            <Label htmlFor=\"dashboard_scope\" className=\"text-slate-200\">Dashboard Data Scope</Label>\n                            <Select\n                                value={formData.dashboard_scope}\n                                onValueChange={(value) => setFormData(prev => ({ ...prev, dashboard_scope: value }))}\n                            >\n                                <SelectTrigger id=\"dashboard_scope\" className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                                    <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                                    <SelectItem value=\"own\">Own</SelectItem>\n                                    <SelectItem value=\"aggregated\">Aggregated (tenant)</SelectItem>\n                                </SelectContent>\n                            </Select>\n                            <p className=\"text-xs text-slate-500 mt-1\">\n                                Default to individual, or aggregated for broader views.\n                            </p>\n                        </div>\n                        {/* Manager selection (organizational relationship) */}\n                        <div>\n                            <Label htmlFor=\"manager_employee_id\" className=\"text-slate-200\">Manager</Label>\n                            <Select\n                                value={formData.manager_employee_id || \"none\"}\n                                onValueChange={(val) =>\n                                    setFormData((prev) => ({\n                                        ...prev,\n                                        manager_employee_id: val === \"none\" ? null : val\n                                    }))\n                                }\n                                disabled={!user?.tenant_id}\n                            >\n                                <SelectTrigger id=\"manager_employee_id\" className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                                    <SelectValue placeholder=\"Select a manager (optional)\" />\n                                </SelectTrigger>\n                                <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                                    <SelectItem value=\"none\">No Manager</SelectItem>\n                                    {managerOptions.map((e) => (\n                                        <SelectItem key={e.id} value={e.id}>\n                                            {(e.first_name || \"\") + \" \" + (e.last_name || \"\") || e.user_email || e.employee_number}\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </Select>\n                            <p className=\"text-xs text-slate-500 mt-1\">\n                                A manager will be able to filter reports to view this employeeΓÇÖs data (and their direct team).\n                            </p>\n                        </div>\n                    </div>\n                    <div className=\"mt-2\">\n                        <Label className=\"mb-2 block text-slate-200\">Navigation Permissions</Label>\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 max-h-64 overflow-y-auto rounded-md border border-slate-600 p-2 bg-slate-800/40\">\n                            {navigationPages.map((p) => (\n                                <div key={p.key} className=\"flex items-center justify-between px-2 py-1 rounded-md bg-slate-700/40 border border-slate-600\">\n                                    <span className=\"text-sm text-slate-200\">{p.label}</span>\n                                    <Switch\n                                        checked={!!formData.navigation_permissions?.[p.key]}\n                                        onCheckedChange={(v) => toggleNav(p.key, v)}\n                                        disabled={!canEditPermissions}\n                                    />\n                                </div>\n                            ))}\n                        </div>\n                        {!canEditPermissions && (\n                            <p className=\"text-xs text-slate-500 mt-1\">\n                                Only Admin can change these.\n                            </p>\n                        )}\n                    </div>\n                    <DialogFooter>\n                        <Button type=\"button\" variant=\"outline\" onClick={onCancel} disabled={saving} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n                            Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={saving} className=\"bg-blue-600 hover:bg-blue-700\">\n                            {saving ? <Loader2 className=\"w-4 h-4 animate-spin mr-2\" /> : null}\n                            Save Changes\n                        </Button>\n                    </DialogFooter>\n                </form>\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nexport default function EnhancedUserManagement() {\n    const [users, setUsers] = useState([]);\n    const [allTenants, setAllTenants] = useState([]);\n    const [currentUser, setCurrentUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [editingUser, setEditingUser] = useState(null);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [roleFilter, setRoleFilter] = useState('all');\n    const [isInviteModalOpen, setInviteModalOpen] = useState(false);\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    const loadData = async () => {\n        setLoading(true);\n        try {\n            const [usersData, tenantsData, userData] = await Promise.all([\n                User.list(),\n                Tenant.list(),\n                User.me()\n            ]);\n            setUsers(usersData);\n            setAllTenants(tenantsData);\n            setCurrentUser(userData);\n        } catch (error) {\n            console.error(\"Failed to load data:\", error);\n            toast.error(\"Failed to load user and tenant data.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const refreshUsers = () => {\n        loadData();\n    };\n\n    const copyToClipboard = (text, label) => {\n        navigator.clipboard.writeText(text);\n        toast.success(`${label} copied to clipboard`);\n    };\n\n    const handleSaveUser = async (userId, data) => {\n        try {\n            const userBeingEdited = users.find(u => u.id === userId);\n            if (!userBeingEdited) {\n                throw new Error(\"User not found for update.\");\n            }\n\n            const cleanedData = { ...data };\n            if (cleanedData.tenant_id === 'no-client') {\n                cleanedData.tenant_id = null;\n            }\n            if (cleanedData.full_name) {\n                cleanedData.display_name = cleanedData.full_name;\n                delete cleanedData.full_name;\n            }\n\n            // Build permissions object\n            const permissionsToSave = {\n                ...userBeingEdited.permissions,\n                ...cleanedData.permissions,\n            };\n\n            // Set intended_role based on actual Base44 role\n            if (userBeingEdited.role === 'admin' || userBeingEdited.role === 'superadmin') {\n                permissionsToSave.intended_role = userBeingEdited.role;\n            } else {\n                permissionsToSave.intended_role = 'user';\n            }\n\n            const finalUpdateData = {\n                tenant_id: cleanedData.tenant_id,\n                display_name: cleanedData.display_name,\n                is_active: cleanedData.is_active,\n                tags: cleanedData.tags,\n                employee_role: cleanedData.employee_role,\n                permissions: permissionsToSave,\n                navigation_permissions: cleanedData.navigation_permissions, // Top-level is the source of truth\n            };\n\n            console.log('[EnhancedUserManagement] Final update payload for User.update:', JSON.stringify(finalUpdateData, null, 2));\n\n            await User.update(userId, finalUpdateData);\n            \n            toast.success(\"User updated successfully!\");\n            setEditingUser(null);\n            \n            await loadData();\n            \n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n            \n        } catch (error) {\n            console.error(\"Error updating user:\", error);\n            toast.error(`Failed to update user: ${error.message || 'An unknown error occurred.'}`);\n        }\n    };\n\n    const handleInviteSuccess = () => {\n        loadData();\n    };\n\n    // Simplified role display\n    const getRoleDisplay = (user) => {\n        if (user.role === 'admin' || user.role === 'superadmin') return 'Admin (App Owner)';\n        if (user.employee_role === 'manager') return 'Manager';\n        return 'Employee';\n    };\n\n    // Simplified role badge class\n    const getRoleBadgeClass = (user) => {\n        if (user.is_active === false) return 'bg-red-100 text-red-800';\n        if (user.role === 'admin' || user.role === 'superadmin') return 'bg-purple-100 text-purple-800';\n        if (user.employee_role === 'manager') return 'bg-blue-100 text-blue-800';\n        return 'bg-gray-100 text-gray-800';\n    };\n\n    const filteredUsers = users.filter(user => {\n        const matchesSearch = searchTerm === '' ||\n            user.full_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            user.display_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            user.email?.toLowerCase().includes(searchTerm.toLowerCase());\n\n        let matchesRoleFilter = true;\n        if (roleFilter !== 'all') {\n            if (roleFilter === 'superadmin') {\n                matchesRoleFilter = user.role === 'superadmin';\n            } else if (roleFilter === 'admin') {\n                matchesRoleFilter = user.role === 'admin';\n            } else if (roleFilter === 'power-user') {\n                // Map 'power-user' filter to 'manager' employee_role for non-admins\n                matchesRoleFilter = user.employee_role === 'manager' && user.role !== 'admin' && user.role !== 'superadmin';\n            } else if (roleFilter === 'user') {\n                // Map 'user' filter to 'employee' employee_role for non-admins\n                matchesRoleFilter = user.employee_role === 'employee' && user.role !== 'admin' && user.role !== 'superadmin';\n            }\n        }\n        return matchesSearch && matchesRoleFilter;\n    });\n\n    if (loading) {\n        return (\n            <div className=\"p-8 text-center\">\n                <Loader2 className=\"w-8 h-8 animate-spin mx-auto\" />\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"space-y-6\">\n            <Card className=\"bg-slate-800 border-slate-700\">\n                <CardHeader>\n                    <div className=\"flex justify-between items-center\">\n                        <div>\n                            <CardTitle className=\"text-slate-100\">User Management</CardTitle>\n                            <CardDescription className=\"text-slate-400\">Manage user accounts, roles, and permissions</CardDescription>\n                        </div>\n                        <Button onClick={() => setInviteModalOpen(true)} className=\"bg-blue-600 hover:bg-blue-700\">\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Invite User\n                        </Button>\n                    </div>\n                </CardHeader>\n            </Card>\n\n            <div className=\"bg-blue-900/20 border border-blue-700/50 rounded-lg p-3\">\n                <div className=\"flex items-start gap-2\">\n                    <ShieldCheck className=\"w-4 h-4 text-blue-400 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm\">\n                        <p className=\"font-medium text-blue-200\">Role Hierarchy</p>\n                        <p className=\"text-blue-300\">Admin (App Owner) ΓåÆ Manager (CRM Tenant Visibility) ΓåÆ Employee (CRM Own Records)</p>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center\">\n                <div className=\"flex flex-col sm:flex-row gap-2\">\n                    <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                        <Input\n                            placeholder=\"Search users...\"\n                            value={searchTerm}\n                            onChange={(e) => setSearchTerm(e.target.value)}\n                            className=\"pl-9 w-full sm:w-64 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                        />\n                    </div>\n                    <Select value={roleFilter} onValueChange={setRoleFilter}>\n                        <SelectTrigger className=\"w-full sm:w-40 bg-slate-700 border-slate-600 text-slate-200\">\n                            <SelectValue placeholder=\"Filter by role\" />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-slate-800 border-slate-700\">\n                            <SelectItem value=\"all\" className=\"text-slate-200 hover:bg-slate-700\">All Roles</SelectItem>\n                            <SelectItem value=\"superadmin\" className=\"text-slate-200 hover:bg-slate-700\">Super Admin</SelectItem>\n                            <SelectItem value=\"admin\" className=\"text-slate-200 hover:bg-slate-700\">Admin</SelectItem>\n                            <SelectItem value=\"power-user\" className=\"text-slate-200 hover:bg-slate-700\">Manager</SelectItem>\n                            <SelectItem value=\"user\" className=\"text-slate-200 hover:bg-slate-700\">Employee</SelectItem>\n                        </SelectContent>\n                    </Select>\n                </div>\n\n                <div className=\"flex gap-2\">\n                    <Button variant=\"outline\" onClick={refreshUsers} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n                        <RefreshCw className=\"w-4 h-4 mr-2\" />\n                        Refresh\n                    </Button>\n                </div>\n            </div>\n\n            <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-0\">\n                    <div className=\"overflow-x-auto\">\n                        <Table>\n                            <TableHeader>\n                                <TableRow className=\"border-slate-700 hover:bg-slate-700/50\">\n                                    <TableHead className=\"text-slate-300\">Name</TableHead>\n                                    <TableHead className=\"text-slate-300\">Role</TableHead>\n                                    <TableHead className=\"text-slate-300\">Client</TableHead>\n                                    <TableHead className=\"text-slate-300\">Tenant ID</TableHead>\n                                    <TableHead className=\"text-slate-300\">Account Status</TableHead>\n                                    <TableHead className=\"hidden md:table-cell text-slate-300\">Live Status</TableHead>\n                                    <TableHead className=\"hidden lg:table-cell text-slate-300\">Last Login</TableHead>\n                                    <TableHead className=\"text-right text-slate-300\">Actions</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {filteredUsers.length === 0 ? (\n                                    <TableRow>\n                                        <TableCell colSpan={8} className=\"text-center py-8 text-slate-400\">\n                                            No users found matching your criteria.\n                                        </TableCell>\n                                    </TableRow>\n                                ) : (\n                                    filteredUsers.map((user) => {\n                                        const tenant = allTenants.find(t => t.id === user.tenant_id);\n                                        const isCreator = currentUser && user.id === currentUser.id && user.role === 'superadmin';\n                                        \n                                        // managerCanEdit now only checks for admin role to edit specific permissions\n                                        const managerCanEdit = (currentUser?.role === 'admin' || currentUser?.role === 'superadmin');\n\n                                        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n                                        let statusColor, statusText;\n\n                                        if (!user.last_login && user.is_active) {\n                                            statusColor = 'bg-amber-500';\n                                            statusText = 'Invited';\n                                        } else if (user.is_active && user.last_login && new Date(user.last_login) > oneHourAgo) {\n                                            statusColor = 'bg-green-500';\n                                            statusText = 'Online';\n                                        } else if (!user.is_active) {\n                                            statusColor = 'bg-red-400';\n                                            statusText = 'Inactive';\n                                        } else {\n                                            statusColor = 'bg-slate-400';\n                                            statusText = 'Offline';\n                                        }\n\n                                        return (\n                                            <TableRow key={user.id} className=\"border-slate-700 hover:bg-slate-700/50\">\n                                                <TableCell className=\"font-medium\">\n                                                    <div className=\"flex items-center gap-3\">\n                                                        <div className=\"relative\">\n                                                            <div className=\"w-10 h-10 bg-slate-600 rounded-full flex items-center justify-center\">\n                                                                <span className=\"text-base font-medium text-slate-200\">\n                                                                    {(user.display_name || user.full_name)?.charAt(0)?.toUpperCase() || 'U'}\n                                                                </span>\n                                                            </div>\n                                                            <span className={`absolute bottom-0 right-0 block h-2.5 w-2.5 rounded-full ${statusColor} ring-2 ring-slate-800`} />\n                                                        </div>\n                                                        <div>\n                                                            <div className=\"font-semibold text-slate-100\">\n                                                                {user.display_name || user.full_name || 'Unknown User'}\n                                                            </div>\n                                                            <div className=\"text-sm text-slate-400\">{user.email}</div>\n                                                        </div>\n                                                    </div>\n                                                    {isCreator && (\n                                                        <Badge variant=\"outline\" className=\"bg-amber-900/30 border-amber-700/50 text-amber-300 text-xs mt-1\">\n                                                            <ShieldCheck className=\"w-3 h-3 mr-1\" />\n                                                            Creator\n                                                        </Badge>\n                                                    )}\n                                                    {user.tags && user.tags.length > 0 && (\n                                                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                                                            {user.tags.map((tag, tagIndex) => (\n                                                                <Badge key={tagIndex} variant=\"outline\" className=\"text-xs px-1.5 py-0.5 bg-slate-700 border-slate-600 text-slate-300\">\n                                                                    {tag}\n                                                                </Badge>\n                                                            ))}\n                                                        </div>\n                                                    )}\n                                                </TableCell>\n                                                <TableCell>\n                                                    <Badge className={getRoleBadgeClass(user)}>\n                                                        {getRoleDisplay(user)}\n                                                    </Badge>\n                                                </TableCell>\n                                                <TableCell>\n                                                    {user.tenant_id ? (\n                                                        <Badge variant=\"outline\" className=\"bg-slate-700 border-slate-600 text-slate-300\">\n                                                            {tenant?.name || 'Unknown Client'}\n                                                        </Badge>\n                                                    ) : (\n                                                        <Badge variant=\"secondary\" className=\"bg-slate-600 text-slate-300\">No Client</Badge>\n                                                    )}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {user.tenant_id ? (\n                                                        <div className=\"flex items-center gap-1\">\n                                                            <code className=\"text-xs text-cyan-400 bg-slate-900/50 px-2 py-1 rounded font-mono\">\n                                                                {user.tenant_id.substring(0, 8)}...\n                                                            </code>\n                                                            <Button\n                                                                variant=\"ghost\"\n                                                                size=\"icon\"\n                                                                className=\"h-6 w-6\"\n                                                                onClick={() => copyToClipboard(user.tenant_id, 'Tenant ID')}\n                                                            >\n                                                                <Copy className=\"h-3 w-3 text-slate-400 hover:text-slate-200\" />\n                                                            </Button>\n                                                        </div>\n                                                    ) : (\n                                                        <span className=\"text-xs text-slate-500\">N/A</span>\n                                                    )}\n                                                </TableCell>\n                                                <TableCell>\n                                                    <Badge variant={user.is_active ? \"default\" : \"secondary\"} className={user.is_active ? \"bg-green-600 text-white\" : \"bg-slate-600 text-slate-300\"}>\n                                                        {user.is_active ? \"Active\" : \"Inactive\"}\n                                                    </Badge>\n                                                </TableCell>\n                                                <TableCell className=\"hidden md:table-cell\">\n                                                    <div className=\"flex items-center gap-2\">\n                                                        <div className={`w-2 h-2 rounded-full ${statusColor}`} />\n                                                        <span className=\"text-sm text-slate-300\">{statusText}</span>\n                                                    </div>\n                                                </TableCell>\n                                                <TableCell className=\"hidden lg:table-cell text-slate-300\">\n                                                    {user.last_login ?\n                                                        format(new Date(user.last_login), \"PPpp\") :\n                                                        'Never'\n                                                    }\n                                                </TableCell>\n                                                <TableCell className=\"text-right\">\n                                                    <Button\n                                                        variant=\"outline\"\n                                                        size=\"sm\"\n                                                        onClick={() => setEditingUser(user)}\n                                                        disabled={!managerCanEdit}\n                                                        className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600 disabled:opacity-60\"\n                                                    >\n                                                        <Edit className=\"w-4 h-4 mr-1\" />\n                                                        Edit\n                                                    </Button>\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })\n                                )}\n                            </TableBody>\n                        </Table>\n                    </div>\n                </CardContent>\n            </Card>\n\n            {editingUser && (\n                <UserFormModal\n                    user={editingUser}\n                    tenants={allTenants}\n                    currentUser={currentUser}\n                    onSave={handleSaveUser}\n                    onCancel={() => setEditingUser(null)}\n                />\n            )}\n\n            <InviteUserDialog\n                open={isInviteModalOpen}\n                onOpenChange={setInviteModalOpen}\n                onSuccess={handleInviteSuccess}\n                tenants={allTenants}\n                currentUser={currentUser}\n            />\n        </div>\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\FieldCustomization.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used.","line":148,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":148,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"loading"},"fix":{"range":[6859,6866],"text":""},"desc":"Remove unused variable 'loading'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { FieldCustomization as FieldCustomizationEntity } from \"@/api/entities\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Plus, \n  Pencil, \n  Trash2, \n  Save, \n  X, \n  Settings2,\n  Users,\n  Building2,\n  TrendingUp,\n  Target,\n  Calendar\n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { CardDescription } from \"@/components/ui/card\"; // Import CardDescription\n\nconst entityIcons = {\n  Contact: Users,\n  Account: Building2,\n  Lead: TrendingUp,\n  Opportunity: Target,\n  Activity: Calendar\n};\n\nconst defaultFields = {\n  Contact: [\n    { field_name: 'first_name', field_label: 'First Name', field_type: 'text', is_required: true },\n    { field_name: 'last_name', field_label: 'Last Name', field_type: 'text', is_required: true },\n    { field_name: 'email', field_label: 'Email', field_type: 'email', is_required: true },\n    { field_name: 'phone', field_label: 'Phone', field_type: 'phone' },\n    { field_name: 'job_title', field_label: 'Job Title', field_type: 'text' },\n    { field_name: 'status', field_label: 'Status', field_type: 'select', options: [\n      { value: 'prospect', label: 'Prospect' },\n      { value: 'customer', label: 'Customer' },\n      { value: 'active', label: 'Active' },\n      { value: 'inactive', label: 'Inactive' }\n    ]}\n  ],\n  Account: [\n    { field_name: 'name', field_label: 'Account Name', field_type: 'text', is_required: true },\n    { field_name: 'type', field_label: 'Account Type', field_type: 'select', options: [\n      { value: 'prospect', label: 'Prospect' },\n      { value: 'customer', label: 'Customer' },\n      { value: 'partner', label: 'Partner' },\n      { value: 'competitor', label: 'Competitor' },\n      { value: 'vendor', label: 'Vendor' }\n    ]},\n    { field_name: 'industry', field_label: 'Industry', field_type: 'select', options: [\n      { value: 'aerospace_and_defense', label: 'Aerospace & Defense' },\n      { value: 'agriculture', label: 'Agriculture' },\n      { value: 'automotive', label: 'Automotive' },\n      { value: 'banking_and_financial_services', label: 'Banking & Financial Services' },\n      { value: 'construction', label: 'Construction' },\n      { value: 'consumer_goods', label: 'Consumer Goods' },\n      { value: 'education', label: 'Education' },\n      { value: 'energy_and_utilities', label: 'Energy & Utilities' },\n      { value: 'entertainment_and_media', label: 'Entertainment & Media' },\n      { value: 'government_and_public_sector', label: 'Government & Public Sector' },\n      { value: 'green_energy_and_solar', label: 'Green Energy & Solar' },\n      { value: 'healthcare_and_life_sciences', label: 'Healthcare & Life Sciences' },\n      { value: 'hospitality_and_travel', label: 'Hospitality & Travel' },\n      { value: 'information_technology', label: 'Information Technology (IT) & Software' },\n      { value: 'insurance', label: 'Insurance' },\n      { value: 'legal_services', label: 'Legal Services' },\n      { value: 'logistics_and_transportation', label: 'Logistics & Transportation' },\n      { value: 'manufacturing', label: 'Manufacturing' },\n      { value: 'marketing_advertising_pr', label: 'Marketing, Advertising & PR' },\n      { value: 'media_and_publishing', label: 'Media & Publishing' },\n      { value: 'mining_and_metals', label: 'Mining & Metals' },\n      { value: 'nonprofit_and_ngos', label: 'Nonprofit & NGOs' },\n      { value: 'pharmaceuticals_and_biotechnology', label: 'Pharmaceuticals & Biotechnology' },\n      { value: 'professional_services', label: 'Professional Services (Consulting, Accounting, HR)' },\n      { value: 'real_estate', label: 'Real Estate' },\n      { value: 'retail_and_wholesale', label: 'Retail & Wholesale' },\n      { value: 'telecommunications', label: 'Telecommunications' },\n      { value: 'textiles_and_apparel', label: 'Textiles & Apparel' }\n    ]}\n  ],\n  Lead: [\n    { field_name: 'first_name', field_label: 'First Name', field_type: 'text', is_required: true },\n    { field_name: 'last_name', field_label: 'Last Name', field_type: 'text', is_required: true },\n    { field_name: 'email', field_label: 'Email', field_type: 'email', is_required: true },\n    { field_name: 'status', field_label: 'Status', field_type: 'select', options: [\n      { value: 'new', label: 'New' },\n      { value: 'contacted', label: 'Contacted' },\n      { value: 'qualified', label: 'Qualified' },\n      { value: 'unqualified', label: 'Unqualified' },\n      { value: 'converted', label: 'Converted' },\n      { value: 'lost', label: 'Lost' }\n    ]},\n    { field_name: 'source', field_label: 'Lead Source', field_type: 'select', options: [\n      { value: 'website', label: 'Website' },\n      { value: 'referral', label: 'Referral' },\n      { value: 'cold_call', label: 'Cold Call' },\n      { value: 'email', label: 'Email' },\n      { value: 'social_media', label: 'Social Media' },\n      { value: 'other', label: 'Other' }\n    ]}\n  ],\n  Opportunity: [\n    { field_name: 'name', field_label: 'Opportunity Name', field_type: 'text', is_required: true },\n    { field_name: 'stage', field_label: 'Stage', field_type: 'select', options: [\n      { value: 'prospecting', label: 'Prospecting' },\n      { value: 'qualification', label: 'Qualification' },\n      { value: 'proposal', label: 'Proposal' },\n      { value: 'negotiation', label: 'Negotiation' },\n      { value: 'closed_won', label: 'Closed Won' },\n      { value: 'closed_lost', label: 'Closed Lost' }\n    ]},\n    { field_name: 'amount', field_label: 'Amount', field_type: 'number' }\n  ],\n  Activity: [\n    { field_name: 'type', field_label: 'Activity Type', field_type: 'select', options: [\n      { value: 'call', label: 'Call' },\n      { value: 'email', label: 'Email' },\n      { value: 'meeting', label: 'Meeting' },\n      { value: 'task', label: 'Task' }\n    ]},\n    { field_name: 'subject', field_label: 'Subject', field_type: 'text', is_required: true },\n    { field_name: 'status', field_label: 'Status', field_type: 'select', options: [\n      { value: 'scheduled', label: 'Scheduled' },\n      { value: 'completed', label: 'Completed' },\n      { value: 'cancelled', label: 'Cancelled' }\n    ]}\n  ]\n};\n\nexport default function FieldCustomization() {\n  const [customizations, setCustomizations] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [activeEntity, setActiveEntity] = useState('Contact');\n  const [editingField, setEditingField] = useState(null);\n  const [showDialog, setShowDialog] = useState(false);\n\n  useEffect(() => {\n    loadCustomizations();\n  }, []);\n\n  const loadCustomizations = async () => {\n    try {\n      const data = await FieldCustomizationEntity.list();\n      setCustomizations(data);\n    } catch (error) {\n      console.error(\"Error loading customizations:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getFieldsForEntity = (entityName) => {\n    const customFields = customizations.filter(c => c.entity_name === entityName);\n    const defaultFieldsForEntity = defaultFields[entityName] || [];\n    \n    // Merge custom fields with defaults, prioritizing customizations\n    const mergedFields = defaultFieldsForEntity.map(defaultField => {\n      const customField = customFields.find(c => c.field_name === defaultField.field_name);\n      return customField || { ...defaultField, entity_name: entityName };\n    });\n\n    // Add any custom fields that don't exist in defaults\n    const customOnlyFields = customFields.filter(c => \n      !defaultFieldsForEntity.some(d => d.field_name === c.field_name)\n    );\n\n    return [...mergedFields, ...customOnlyFields].sort((a, b) => \n      (a.display_order || 0) - (b.display_order || 0)\n    );\n  };\n\n  const handleSaveField = async (fieldData) => {\n    try {\n      const existingCustomization = customizations.find(c => \n        c.entity_name === activeEntity && c.field_name === fieldData.field_name\n      );\n\n      if (existingCustomization) {\n        await FieldCustomizationEntity.update(existingCustomization.id, fieldData);\n      } else {\n        await FieldCustomizationEntity.create({ ...fieldData, entity_name: activeEntity });\n      }\n\n      await loadCustomizations();\n      setShowDialog(false);\n      setEditingField(null);\n    } catch (error) {\n      console.error(\"Error saving field customization:\", error);\n    }\n  };\n\n  const handleDeleteField = async (fieldName) => {\n    if (!confirm(\"Are you sure you want to delete this field customization?\")) return;\n    \n    try {\n      const customization = customizations.find(c => \n        c.entity_name === activeEntity && c.field_name === fieldName\n      );\n      \n      if (customization) {\n        await FieldCustomizationEntity.delete(customization.id);\n        await loadCustomizations();\n      }\n    } catch (error) {\n      console.error(\"Error deleting field customization:\", error);\n    }\n  };\n\n  const entities = ['Contact', 'Account', 'Lead', 'Opportunity', 'Activity'];\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Settings2 className=\"w-5 h-5 text-blue-400\" />\n            Field Customization\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Customize form fields for different CRM entities\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeEntity} onValueChange={setActiveEntity}>\n            <TabsList className=\"grid w-full grid-cols-5 bg-slate-700\">\n              {entities.map(entity => {\n                const Icon = entityIcons[entity];\n                return (\n                  <TabsTrigger key={entity} value={entity} className=\"flex items-center gap-2 text-slate-300 data-[state=active]:bg-blue-600 data-[state=active]:text-white\">\n                    <Icon className=\"w-4 h-4\" />\n                    {entity}\n                  </TabsTrigger>\n                );\n              })}\n            </TabsList>\n\n            {entities.map(entity => (\n              <TabsContent key={entity} value={entity} className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"text-lg font-semibold text-slate-100\">{entity} Fields</h3>\n                  <Dialog open={showDialog} onOpenChange={setShowDialog}>\n                    <DialogTrigger asChild>\n                      <Button onClick={() => setEditingField(null)} className=\"bg-blue-600 hover:bg-blue-700\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Custom Field\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl bg-slate-800 border-slate-700\">\n                      <DialogHeader>\n                        <DialogTitle className=\"text-slate-100\">\n                          {editingField ? 'Edit Field' : 'Add Custom Field'}\n                        </DialogTitle>\n                      </DialogHeader>\n                      <FieldEditor\n                        field={editingField}\n                        onSave={handleSaveField}\n                        onCancel={() => setShowDialog(false)}\n                      />\n                    </DialogContent>\n                  </Dialog>\n                </div>\n\n                <div className=\"grid gap-4\">\n                  {getFieldsForEntity(entity).map(field => (\n                    <FieldItem\n                      key={field.field_name}\n                      field={field}\n                      onEdit={(field) => {\n                        setEditingField(field);\n                        setShowDialog(true);\n                      }}\n                      onDelete={() => handleDeleteField(field.field_name)}\n                    />\n                  ))}\n                </div>\n              </TabsContent>\n            ))}\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction FieldItem({ field, onEdit, onDelete }) {\n  const isCustomized = field.id; // Has ID means it's been customized\n\n  return (\n    <Card className={`border bg-slate-700 ${isCustomized ? 'border-blue-500 bg-blue-900/20' : 'border-slate-600'}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <h4 className=\"font-medium text-slate-200\">{field.field_label}</h4>\n              <Badge variant=\"outline\" className=\"bg-slate-600 text-slate-300 border-slate-500\">{field.field_type}</Badge>\n              {field.is_required && <Badge variant=\"destructive\">Required</Badge>}\n              {isCustomized && <Badge className=\"bg-blue-600 text-white\">Custom</Badge>}\n            </div>\n            <p className=\"text-sm text-slate-400\">\n              Field name: <code className=\"bg-slate-600 text-slate-200 px-1 rounded\">{field.field_name}</code>\n            </p>\n            {field.help_text && (\n              <p className=\"text-sm text-slate-400 mt-1\">{field.help_text}</p>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => onEdit(field)} className=\"bg-slate-600 border-slate-500 text-slate-200 hover:bg-slate-500\">\n              <Pencil className=\"w-4 h-4\" />\n            </Button>\n            {isCustomized && (\n              <Button variant=\"outline\" size=\"sm\" onClick={onDelete} className=\"bg-slate-600 border-slate-500 text-slate-200 hover:bg-slate-500\">\n                <Trash2 className=\"w-4 h-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction FieldEditor({ field, onSave, onCancel }) {\n  const [formData, setFormData] = useState({\n    field_name: field?.field_name || '',\n    field_label: field?.field_label || '',\n    field_type: field?.field_type || 'text',\n    is_required: field?.is_required || false,\n    is_visible: field?.is_visible !== false,\n    placeholder: field?.placeholder || '',\n    help_text: field?.help_text || '',\n    options: field?.options || [],\n    display_order: field?.display_order || 0\n  });\n\n  const [newOption, setNewOption] = useState({ value: '', label: '' });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSave(formData);\n  };\n\n  const addOption = () => {\n    if (newOption.value && newOption.label) {\n      setFormData(prev => ({\n        ...prev,\n        options: [...prev.options, newOption]\n      }));\n      setNewOption({ value: '', label: '' });\n    }\n  };\n\n  const removeOption = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      options: prev.options.filter((_, i) => i !== index)\n    }));\n  };\n\n  const needsOptions = ['select', 'multiselect'].includes(formData.field_type);\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label className=\"text-slate-200\">Field Name (Technical)</Label>\n          <Input\n            value={formData.field_name}\n            onChange={(e) => setFormData(prev => ({ ...prev, field_name: e.target.value }))}\n            placeholder=\"e.g., custom_field_1\"\n            required\n            className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n          />\n        </div>\n        <div>\n          <Label className=\"text-slate-200\">Display Label</Label>\n          <Input\n            value={formData.field_label}\n            onChange={(e) => setFormData(prev => ({ ...prev, field_label: e.target.value }))}\n            placeholder=\"e.g., Custom Field\"\n            required\n            className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label className=\"text-slate-200\">Field Type</Label>\n          <Select value={formData.field_type} onValueChange={(value) => setFormData(prev => ({ ...prev, field_type: value }))}>\n            <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"bg-slate-800 border-slate-700\">\n              <SelectItem value=\"text\" className=\"text-slate-200 hover:bg-slate-700\">Text</SelectItem>\n              <SelectItem value=\"email\" className=\"text-slate-200 hover:bg-slate-700\">Email</SelectItem>\n              <SelectItem value=\"phone\" className=\"text-slate-200 hover:bg-slate-700\">Phone</SelectItem>\n              <SelectItem value=\"textarea\" className=\"text-slate-200 hover:bg-slate-700\">Textarea</SelectItem>\n              <SelectItem value=\"select\" className=\"text-slate-200 hover:bg-slate-700\">Select Dropdown</SelectItem>\n              <SelectItem value=\"multiselect\" className=\"text-slate-200 hover:bg-slate-700\">Multi-Select</SelectItem>\n              <SelectItem value=\"date\" className=\"text-slate-200 hover:bg-slate-700\">Date</SelectItem>\n              <SelectItem value=\"number\" className=\"text-slate-200 hover:bg-slate-700\">Number</SelectItem>\n              <SelectItem value=\"checkbox\" className=\"text-slate-200 hover:bg-slate-700\">Checkbox</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label className=\"text-slate-200\">Display Order</Label>\n          <Input\n            type=\"number\"\n            value={formData.display_order}\n            onChange={(e) => setFormData(prev => ({ ...prev, display_order: parseInt(e.target.value) || 0 }))}\n            className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n          />\n        </div>\n      </div>\n\n      <div>\n        <Label className=\"text-slate-200\">Placeholder Text</Label>\n        <Input\n          value={formData.placeholder}\n          onChange={(e) => setFormData(prev => ({ ...prev, placeholder: e.target.value }))}\n          placeholder=\"Enter placeholder text...\"\n          className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n        />\n      </div>\n\n      <div>\n        <Label className=\"text-slate-200\">Help Text</Label>\n        <Textarea\n          value={formData.help_text}\n          onChange={(e) => setFormData(prev => ({ ...prev, help_text: e.target.value }))}\n          placeholder=\"Optional help text to show below the field\"\n          rows={2}\n          className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n        />\n      </div>\n\n      <div className=\"flex items-center gap-6\">\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            checked={formData.is_required}\n            onCheckedChange={(checked) => setFormData(prev => ({ ...prev, is_required: checked }))}\n          />\n          <Label className=\"text-slate-200\">Required</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            checked={formData.is_visible}\n            onCheckedChange={(checked) => setFormData(prev => ({ ...prev, is_visible: checked }))}\n          />\n          <Label className=\"text-slate-200\">Visible</Label>\n        </div>\n      </div>\n\n      {needsOptions && (\n        <div>\n          <Label className=\"text-slate-200\">Options</Label>\n          <div className=\"space-y-2 mt-2\">\n            {formData.options.map((option, index) => (\n              <div key={index} className=\"flex items-center gap-2\">\n                <Input value={option.value} readOnly className=\"flex-1 bg-slate-700 border-slate-600 text-slate-200\" />\n                <Input value={option.label} readOnly className=\"flex-1 bg-slate-700 border-slate-600 text-slate-200\" />\n                <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={() => removeOption(index)} className=\"bg-slate-600 border-slate-500 text-slate-200 hover:bg-slate-500\">\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            ))}\n            <div className=\"flex items-center gap-2\">\n              <Input\n                placeholder=\"Value\"\n                value={newOption.value}\n                onChange={(e) => setNewOption(prev => ({ ...prev, value: e.target.value }))}\n                className=\"flex-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              />\n              <Input\n                placeholder=\"Label\"\n                value={newOption.label}\n                onChange={(e) => setNewOption(prev => ({ ...prev, label: e.target.value }))}\n                className=\"flex-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              />\n              <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={addOption} className=\"bg-slate-600 border-slate-500 text-slate-200 hover:bg-slate-500\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex justify-end gap-2 pt-4\">\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n          Cancel\n        </Button>\n        <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700\">\n          <Save className=\"w-4 h-4 mr-2\" />\n          Save Field\n        </Button>\n      </div>\n    </form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\FileUploadDiagnostics.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[50,55],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[54,67],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":2,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardHeader"},"fix":{"range":[67,79],"text":""},"desc":"Remove unused variable 'CardHeader'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":2,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardTitle"},"fix":{"range":[79,90],"text":""},"desc":"Remove unused variable 'CardTitle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used.","line":2,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardDescription"},"fix":{"range":[90,107],"text":""},"desc":"Remove unused variable 'CardDescription'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"User"},"fix":{"range":[286,324],"text":""},"desc":"Remove unused variable 'User'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { User } from \"@/api/entities\";\n\nexport default function FileUploadDiagnostics() {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleTestUpload = async () => {\n    setLoading(true);\n    setResult(null);\n    toast.info(\"Running file upload diagnostics...\");\n    \n    try {\n      // Create a dummy file in memory to send for the test\n      const testContent = `This is a diagnostic test file generated at ${new Date().toISOString()}. If you see this, the upload was successful.`;\n      const blob = new Blob([testContent], { type: 'text/plain' });\n      const testFile = new File([blob], \"diagnostic-upload-test.txt\", { type: \"text/plain\" });\n\n      // Create FormData and append the file\n      const formData = new FormData();\n      formData.append('file', testFile);\n\n      // Get authentication headers - check for authorization token in localStorage or sessionStorage\n      const headers = {};\n      \n      // Try to get the token from various possible storage locations\n      const authToken = localStorage.getItem('supabase.auth.token') || \n                       sessionStorage.getItem('supabase.auth.token') ||\n                       localStorage.getItem('sb-auth-token') ||\n                       document.cookie.match(/sb-access-token=([^;]+)/)?.[1];\n\n      if (authToken) {\n        try {\n          // If it's a JSON string, parse it to get the access_token\n          const tokenData = JSON.parse(authToken);\n          if (tokenData.access_token) {\n            headers['Authorization'] = `Bearer ${tokenData.access_token}`;\n          }\n        } catch {\n          // If parsing fails, assume it's already just the token\n          headers['Authorization'] = `Bearer ${authToken}`;\n        }\n      }\n\n      // Make the fetch request with proper authentication\n      const response = await fetch('/api/apps/68ad592dcffacef630b477d2/functions/debugUploadPrivateFile', {\n        method: 'POST',\n        headers: headers,\n        body: formData,\n        credentials: 'include', // Include cookies for authentication\n      });\n\n      const data = await response.json();\n      \n      setResult(data);\n      if (data.success) {\n        toast.success(\"Diagnostic successful!\", { description: data.message });\n      } else {\n        toast.error(\"Diagnostic failed.\", { description: data.error });\n      }\n    } catch (error) {\n      const errorData = { success: false, error: error.message };\n      setResult(errorData);\n      toast.error(\"Diagnostic request failed.\", { description: error.message });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <p className=\"text-sm text-slate-400\">\n        Click to run an end-to-end test of the private file upload system. This simulates uploading a small text file, verifying its storage, and then deleting it, which helps diagnose permission issues (like 403 errors).\n      </p>\n      <Button \n        onClick={handleTestUpload} \n        disabled={loading}\n        className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n      >\n        {loading ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : null}\n        Run Private Upload Test\n      </Button>\n      \n      {result && (\n        <div className=\"mt-4 p-4 bg-slate-900 rounded-lg border border-slate-700\">\n          <h4 className=\"font-semibold text-slate-200 mb-2 flex items-center gap-2\">\n            {result.success ? \n                <CheckCircle className=\"w-5 h-5 text-green-500\" /> : \n                <AlertCircle className=\"w-5 h-5 text-red-500\" />\n            }\n            Test Result:\n          </h4>\n          <pre className=\"text-xs text-slate-300 whitespace-pre-wrap overflow-auto max-h-96\">\n            {JSON.stringify(result, null, 2)}\n          </pre>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\IntegrationSettings.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Webhook' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Webhook"},"fix":{"range":[214,225],"text":""},"desc":"Remove unused variable 'Webhook'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Phone' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Phone"},"fix":{"range":[240,249],"text":""},"desc":"Remove unused variable 'Phone'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CreditCard' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"CreditCard"},"fix":{"range":[249,263],"text":""},"desc":"Remove unused variable 'CreditCard'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Database' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Database"},"fix":{"range":[263,275],"text":""},"desc":"Remove unused variable 'Database'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[275,289],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Users"},"fix":{"range":[289,298],"text":""},"desc":"Remove unused variable 'Users'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Mail' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Mail"},"fix":{"range":[298,306],"text":""},"desc":"Remove unused variable 'Mail'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'KeyRound' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"KeyRound"},"fix":{"range":[334,346],"text":""},"desc":"Remove unused variable 'KeyRound'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Accordion' is defined but never used.","line":32,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"Accordion"},"fix":{"range":[860,870],"text":""},"desc":"Remove unused variable 'Accordion'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AccordionContent' is defined but never used.","line":32,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionContent"},"fix":{"range":[869,887],"text":""},"desc":"Remove unused variable 'AccordionContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AccordionItem' is defined but never used.","line":32,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionItem"},"fix":{"range":[887,902],"text":""},"desc":"Remove unused variable 'AccordionItem'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AccordionTrigger' is defined but never used.","line":32,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":70,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionTrigger"},"fix":{"range":[902,920],"text":""},"desc":"Remove unused variable 'AccordionTrigger'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":196,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7615,7633],"text":"&quot;Generate New Key\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7615,7633],"text":"&ldquo;Generate New Key\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7615,7633],"text":"&#34;Generate New Key\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7615,7633],"text":"&rdquo;Generate New Key\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":196,"column":79,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7615,7633],"text":"\"Generate New Key&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7615,7633],"text":"\"Generate New Key&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7615,7633],"text":"\"Generate New Key&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7615,7633],"text":"\"Generate New Key&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":196,"column":121,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like &quot;ElevenLabs Tool Key\" and click \"Generate Key\"."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like &ldquo;ElevenLabs Tool Key\" and click \"Generate Key\"."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like &#34;ElevenLabs Tool Key\" and click \"Generate Key\"."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like &rdquo;ElevenLabs Tool Key\" and click \"Generate Key\"."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":196,"column":141,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key&quot; and click \"Generate Key\"."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key&ldquo; and click \"Generate Key\"."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key&#34; and click \"Generate Key\"."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key&rdquo; and click \"Generate Key\"."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":196,"column":153,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key\" and click &quot;Generate Key\"."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key\" and click &ldquo;Generate Key\"."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key\" and click &#34;Generate Key\"."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key\" and click &rdquo;Generate Key\"."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":196,"column":166,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key\" and click \"Generate Key&quot;."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key\" and click \"Generate Key&ldquo;."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key\" and click \"Generate Key&#34;."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7642,7721],"text":". Give it a memorable name like \"ElevenLabs Tool Key\" and click \"Generate Key&rdquo;."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":199,"column":147,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8369,8458],"text":"` with your client&apos;s actual Tenant ID (found in Settings ΓåÆ Tenants):\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8369,8458],"text":"` with your client&lsquo;s actual Tenant ID (found in Settings ΓåÆ Tenants):\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8369,8458],"text":"` with your client&#39;s actual Tenant ID (found in Settings ΓåÆ Tenants):\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8369,8458],"text":"` with your client&rsquo;s actual Tenant ID (found in Settings ΓåÆ Tenants):\n                    "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport {\n  Zap,\n  AlertCircle,\n  Loader2,\n  Building2,\n  Shield,\n  Webhook,\n  Copy,\n  Bot,\n  Phone,\n  CreditCard,\n  Database,\n  TrendingUp,\n  Users,\n  Mail,\n  Calendar,\n  ExternalLink,\n  KeyRound,\n  Workflow, // Added Workflow icon\n  File // Added File icon\n} from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { User } from \"@/api/entities\";\nimport AdminOpenAISettings from './AdminOpenAISettings';\nimport WebhookEmailSettings from \"./WebhookEmailSettings\";\nimport SecuritySettings from \"./SecuritySettings\";\nimport FileUploadDiagnostics from \"./FileUploadDiagnostics\";\nimport WebhookSetupGuide from \"./WebhookSetupGuide\"; // Added WebhookSetupGuide import\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { toast } from \"sonner\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { checkBackendStatus } from \"@/api/functions\"; // Added direct import for checkBackendStatus\n\n// Construct the correct, clean base URL for webhooks (remove preview subdomain)\nconst WEBHOOK_BASE_URL = (() => {\n  if (typeof window === 'undefined') return '';\n\n  const origin = window.location.origin;\n  // Remove 'preview' subdomain if present\n  const cleanOrigin = origin.replace('://preview.', '://');\n  return `${cleanOrigin}/api`;\n})();\n\nconst webhookServices = [\n{\n  name: \"ElevenLabs AI Assistant\",\n  description: \"Handles voice AI queries about CRM data.\",\n  webhook: `${WEBHOOK_BASE_URL}/functions/elevenLabsCRMWebhook/{tenant_id}`,\n  icon: Bot,\n  method: \"POST\",\n  payloadExample: `{\n  \"question\": \"List my contacts\"\n}`\n},\n{\n  name: \"n8n - Create Lead\",\n  description: \"Creates a new lead in the CRM from an n8n workflow.\",\n  webhook: `${WEBHOOK_BASE_URL}/functions/n8nCreateLead`,\n  icon: Workflow,\n  method: \"POST\",\n  payloadExample: `{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"company\": \"Example Inc.\"\n}`\n},\n{\n  name: \"n8n - Create Contact\",\n  description: \"Creates a new contact in the CRM from an n8n workflow.\",\n  webhook: `${WEBHOOK_BASE_URL}/functions/n8nCreateContact`,\n  icon: Workflow,\n  method: \"POST\",\n  payloadExample: `{\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Smith\",\n  \"email\": \"jane.smith@example.com\"\n}`\n},\n{ name: \"Zapier - Trigger Action\", description: \"Trigger CRM actions from Zapier.\", webhook: `${WEBHOOK_BASE_URL}/functions/tenantZapierWebhook`, icon: Zap, method: \"POST\", payloadExample: `{ \"action\": \"create_task\", \"data\": { \"title\": \"Follow up with client\" } }` },\n{ name: \"Google Drive Sync\", description: \"Syncs files and documents from Google Drive.\", webhook: `${WEBHOOK_BASE_URL}/functions/tenantGoogleDrive`, icon: File, method: \"POST\", payloadExample: `{ \"event_type\": \"file_added\", \"file_id\": \"...\" }` },\n{ name: \"Outlook Calendar Integration\", description: \"Syncs Outlook calendar events with CRM activities.\", webhook: `${WEBHOOK_BASE_URL}/functions/tenantOutlookCalendar`, icon: Calendar, method: \"POST\", payloadExample: `{\n  \"summary\": \"Quarterly Review\",\n  \"start_time\": \"2023-11-15T14:00:00Z\",\n  \"end_time\": \"2023-11-15T15:00:00Z\",\n  \"attendees\": [\"user@example.com\", \"client@example.com\"]\n}` }];\n\n\nconst copyToClipboard = (text, type) => {\n  navigator.clipboard.writeText(text);\n  toast.success(`${type} copied to clipboard!`);\n};\n\nexport default function IntegrationSettings() {\n  const [backendEnabled, setBackendEnabled] = useState(false);\n  const [isChecking, setIsChecking] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    const checkStatus = async () => {\n      setIsChecking(true);\n      try {\n        const user = await User.me();\n        setCurrentUser(user);\n\n        try {\n          // Using proper function import instead of dynamic import\n          await checkBackendStatus();\n          setBackendEnabled(true);\n        } catch (functionError) {\n          console.warn(\"Backend status check unavailable, assuming backend is enabled:\", functionError);\n          setBackendEnabled(true);\n        }\n\n      } catch (error) {\n        console.warn(\"Could not load user or check backend status:\", error);\n        setBackendEnabled(false);\n      } finally {\n        setIsChecking(false);\n      }\n    };\n    checkStatus();\n  }, []);\n\n  if (isChecking) {\n    return (\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"flex items-center justify-center p-8\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-blue-600\" />\n          <span className=\"ml-3 text-slate-300\">Loading integration settings...</span>\n        </CardContent>\n      </Card>);\n\n  }\n\n  if (!backendEnabled) {\n    return (\n      <Alert variant=\"destructive\" className=\"bg-red-900/30 border-red-700/50\">\n        <AlertCircle className=\"h-4 w-4 text-red-400\" />\n        <AlertDescription className=\"text-red-300\">\n          Backend functions may be disabled or unavailable. Some integrations might not work properly.\n          Please check your app configuration or try refreshing the page.\n        </AlertDescription>\n      </Alert>);\n\n  }\n\n  const isSuperAdmin = currentUser?.role === 'superadmin' || currentUser?.role === 'admin';\n  const elevenLabsService = webhookServices.find((s) => s.name === \"ElevenLabs AI Assistant\");\n\n  return (\n    <div className=\"space-y-6\">\n      {isSuperAdmin &&\n      <Alert className=\"bg-amber-900/30 border-amber-700/50\">\n          <Building2 className=\"h-4 w-4 text-amber-400\" />\n          <AlertDescription className=\"text-yellow-700 text-sm [&_p]:leading-relaxed\">\n            <strong>Super Admin View:</strong> You can configure system-level integrations and view tenant-specific settings.\n          </AlertDescription>\n        </Alert>\n      }\n\n      {currentUser &&\n      <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n          <Building2 className=\"h-4 w-4 text-blue-400\" />\n          <AlertDescription className=\"text-blue-600 text-sm [&_p]:leading-relaxed\">\n            <strong>Current User Role:</strong> {currentUser.role} |\n            <strong> Admin Access:</strong> {isSuperAdmin ? 'Yes (Admin/SuperAdmin)' : 'No'} |\n            <strong> Email:</strong> {currentUser.email}\n          </AlertDescription>\n        </Alert>\n      }\n\n      {/* New main Integrations & Webhooks Card */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Integrations & Webhooks</CardTitle>\n          <CardDescription className=\"text-slate-400\">Connect your CRM to other services.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-8\">\n\n            <div>\n              <h4 className=\"text-lg font-semibold text-slate-200 mb-3 flex items-center gap-2\"><Bot className=\"w-5 h-5 text-cyan-400\" /> ElevenLabs AI Assistant</h4>\n              <div className=\"bg-blue-900/20 p-4 rounded border border-blue-700/50\">\n                <h5 className=\"text-blue-700 mb-2 font-medium\">Updated Setup Instructions:</h5>\n                <ol className=\"list-decimal list-inside text-sm text-blue-200 space-y-3\">\n                  <li className=\"text-sky-600\">Navigate to <strong>Settings ΓåÆ System ΓåÆ API Keys</strong>.</li>\n                  <li className=\"text-sky-600\">Click <strong>\"Generate New Key\"</strong>. Give it a memorable name like \"ElevenLabs Tool Key\" and click \"Generate Key\".</li>\n                  <li className=\"text-sky-600\">The new key will appear highlighted. Click the <Copy className=\"w-3 h-3 inline-block\" /> icon to copy the key value. <strong>This is the only time you will see the full key.</strong></li>\n                  <li className=\"text-sky-600\">In your <a href=\"https://elevenlabs.io/speech-synthesis/agents\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline font-semibold\">ElevenLabs Agents dashboard</a>, select your agent and go to its Tool configuration.</li>\n                  <li className=\"text-sky-600\">Set the <strong>Webhook URL</strong> to the following, replacing `{'{tenant_id}'}` with your client's actual Tenant ID (found in Settings ΓåÆ Tenants):\n                    <div className=\"flex items-center gap-2 my-2\">\n                      <Input\n                        readOnly\n                        value={elevenLabsService?.webhook || \"URL not found\"}\n                        className=\"bg-slate-800 border-slate-700 text-cyan-300 font-mono text-sm\" />\n\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => copyToClipboard(elevenLabsService?.webhook, 'Webhook URL')}\n                        disabled={!elevenLabsService}>\n\n                        <Copy className=\"w-4 h-4 text-slate-400\" />\n                      </Button>\n                    </div>\n                  </li>\n                  <li className=\"text-sky-600\">In the <strong>Headers</strong> section of the tool, add a new header:\n                    <ul className=\"list-disc list-inside ml-4 my-1 text-blue-100\">\n                      <li className=\"text-cyan-400\">Set the header name to: `api-key`</li>\n                      <li className=\"text-cyan-400\">Paste the CRM-generated key you copied in step 3 as the value.</li>\n                    </ul>\n                  </li>\n                  <li className=\"text-sky-600\">Ensure the request body from the tool contains the `question`, `user_email`, and `tenant_id` fields, which are passed from the widget context.</li>\n                </ol>\n              </div>\n            </div>\n\n            <Separator className=\"border-slate-700\" />\n\n            <div>\n              <h4 className=\"text-lg font-semibold text-slate-200 mb-3 flex items-center gap-2\"><Zap className=\"w-5 h-5 text-yellow-400\" /> Automation & Sync Webhooks</h4>\n              <p className=\"text-sm text-slate-400 mb-4\">Use these webhook URLs in your automation tools to push data into the CRM or synchronize information.</p>\n              <div className=\"space-y-4\">\n                {webhookServices.filter((service) => service.name !== \"ElevenLabs AI Assistant\").map((service) =>\n                <div key={service.name} className=\"p-4 rounded-lg bg-slate-800/50 border border-slate-700\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <h5 className=\"font-semibold text-slate-200 flex items-center gap-2\"><service.icon className=\"w-4 h-4\" />{service.name}</h5>\n                        <p className=\"text-xs text-slate-400 mt-1\">{service.description}</p>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"bg-slate-700 text-slate-300\">{service.method}</Badge>\n                    </div>\n                    <div className=\"mt-3\">\n                      <Label className=\"text-xs text-slate-400\">Webhook URL</Label>\n                      <div className=\"flex items-center gap-2\">\n                        <Input\n                        readOnly\n                        value={service.webhook}\n                        className=\"bg-slate-900 border-slate-600 text-slate-300 font-mono text-sm h-9\" />\n\n                        <Button variant=\"ghost\" size=\"icon\" onClick={() => copyToClipboard(service.webhook, 'Webhook URL')}>\n                          <Copy className=\"w-4 h-4 text-slate-400\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"mt-3\">\n                      <Label className=\"text-xs text-slate-400\">Example Payload</Label>\n                      <pre className=\"bg-slate-900 text-slate-300 p-3 rounded-md text-xs mt-1 font-mono overflow-x-auto\">{service.payloadExample}</pre>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <Separator className=\"border-slate-700\" />\n\n            <div>\n              <h4 className=\"text-lg font-semibold text-slate-200 mb-3 flex items-center gap-2\"><ExternalLink className=\"w-5 h-5 text-purple-400\" /> General Webhook Setup Guide</h4>\n              <WebhookSetupGuide />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Original System-Level OpenAI Configuration Card */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Zap className=\"w-5 h-5 text-green-600\" />\n            System-Level OpenAI Configuration\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            {isSuperAdmin ?\n            \"Configure OpenAI API settings for AI features throughout the CRM\" :\n            \"OpenAI configuration is only available to Admins and Super Admins\"\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isSuperAdmin ?\n          <AdminOpenAISettings /> :\n\n          <Alert className=\"bg-red-900/30 border-red-700/50\">\n              <AlertCircle className=\"h-4 w-4 text-red-400\" />\n              <AlertDescription className=\"text-red-300\">\n                You need Admin or Super Admin privileges to configure system-level OpenAI settings.\n                Current role: <strong>{currentUser?.role || 'Unknown'}</strong>\n              </AlertDescription>\n            </Alert>\n          }\n        </CardContent>\n      </Card>\n\n      {/* Original File Upload Diagnostics Card */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Shield className=\"w-5 h-5 text-orange-600\" />\n            File Upload Diagnostics\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Test file upload functionality and diagnose 403 permission errors\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <FileUploadDiagnostics />\n        </CardContent>\n      </Card>\n\n      {/* Original API Security & Protection Card */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Shield className=\"w-5 h-5 text-green-600\" />\n            API Security & Protection\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Review your API endpoints security status and authentication methods\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <SecuritySettings />\n        </CardContent>\n      </Card>\n\n      {/* Original Webhook Email Settings */}\n      <WebhookEmailSettings />\n\n    </div>);\n\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\IntegrationUsageMonitor.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\"; // Button is no longer used in the Alert but might be elsewhere or kept for future expansion. Let's remove it if not used.\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, Loader2, ExternalLink } from 'lucide-react'; // ExternalLink is no longer used, Info replaced by TrendingUp.\n\nexport default function IntegrationUsageMonitor() {\n  const [loading, setLoading] = useState(true);\n  const [usage, setUsage] = useState([]);\n\n  useEffect(() => {\n    // Simulate fetching data\n    const fetchUsageData = async () => {\n      setLoading(true);\n      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay\n      setUsage([\n        { name: \"CRM Integration\", calls: 12450, status: \"Active\" },\n        { name: \"Analytics Service\", calls: 8760, status: \"Active\" },\n        { name: \"Payment Gateway\", calls: 5320, status: \"Active\" },\n        { name: \"Email Marketing\", calls: 3100, status: \"Active\" },\n        { name: \"Customer Support Chat\", calls: 1980, status: \"Active\" },\n      ]);\n      setLoading(false);\n    };\n\n    fetchUsageData();\n  }, []);\n\n  return (\n    <div className=\"space-y-6\">\n      <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n        <TrendingUp className=\"h-4 w-4 text-blue-400\" />\n        <AlertTitle className=\"sr-only\">Integration Usage Information</AlertTitle> {/* Added sr-only as the title text is moved to description */}\n        <AlertDescription className=\"text-blue-300\">\n          Track API call volume and monitor integration health across all services.\n        </AlertDescription>\n      </Alert>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <TrendingUp className=\"w-5 h-5 text-blue-400\" />\n            Integration Usage Statistics\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            API calls in the last 30 days\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex justify-center p-8\">\n              <Loader2 className=\"w-6 h-6 animate-spin text-blue-400\" />\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {usage.map((service, idx) => (\n                <div key={idx} className=\"p-4 bg-slate-900 rounded-lg border border-slate-700\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium text-slate-200\">{service.name}</p>\n                      <p className=\"text-xs text-slate-400 mt-1\">{service.calls} calls</p>\n                    </div>\n                    <Badge variant=\"outline\" className=\"bg-slate-700 text-slate-300 border-slate-600\">\n                      {service.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n              {/* Add a button to Base44 dashboard if still desired for more detailed info */}\n              <div className=\"mt-4 pt-4 border-t border-slate-700\">\n                <p className=\"mb-3 text-slate-400 text-sm\">\n                  For detailed billing and credit information, please visit your Base44 dashboard.\n                </p>\n                <Button \n                  onClick={() => window.open('https://base44.com/dashboard', '_blank')}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  Go to Base44 Dashboard\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\InternalPerformanceDashboard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\InviteUserDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'currentUser' is defined but never used.","line":20,"column":84,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":95,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentUser"},"fix":{"range":[703,716],"text":""},"desc":"Remove unused variable 'currentUser'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleNavigationChange' is assigned a value but never used.","line":113,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleNavigationChange"},"fix":{"range":[3584,3811],"text":""},"desc":"Remove unused variable 'handleNavigationChange'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Loader2, Send } from 'lucide-react';\nimport { useToast } from '@/components/ui/use-toast';\nimport { inviteUser } from '@/api/functions';\n\nexport default function InviteUserDialog({ open, onOpenChange, onSuccess, tenants, currentUser }) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    email: '',\n    full_name: '',\n    role: 'user',\n    employee_role: '', // NEW: Add employee role\n    tenant_id: '',\n    can_use_softphone: false,\n    access_level: 'read_write',\n    phone: '',\n    navigation_permissions: {},\n  });\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!formData.email || !formData.full_name || !formData.role) {\n      toast({ variant: \"destructive\", title: \"Validation Error\", description: \"Email, name, and role are required.\" });\n      return;\n    }\n\n    setSubmitting(true);\n    try {\n      const payload = {\n        email: formData.email,\n        full_name: formData.full_name,\n        role: formData.role,\n        employee_role: formData.employee_role === 'none' ? null : formData.employee_role || null, // NEW: Handle 'none' value\n        tenant_id: formData.tenant_id || null,\n        requested_access: formData.access_level || 'read_write',\n        can_use_softphone: formData.can_use_softphone || false,\n        phone: formData.phone || null,\n        permissions: {\n          navigation_permissions: formData.navigation_permissions || {}\n        }\n      };\n\n      const response = await inviteUser(payload);\n      \n      if (response?.status === 200 && response?.data?.success) {\n        const data = response.data;\n        \n        if (data.requires_manual_invite) {\n          toast({ \n            title: \"Invitation Notifications Sent\", \n            description: `${formData.email} will receive a welcome email. Please complete the invite via base44 platform (Dashboard ΓåÆ Users ΓåÆ Invite User).`,\n            duration: 8000\n          });\n        } else {\n          toast({ \n            title: \"User Invited Successfully\", \n            description: data.message || `${formData.email} has been added to the system.`\n          });\n        }\n        \n        onOpenChange(false);\n        if (onSuccess) onSuccess();\n      } else {\n        const errorMsg = response?.data?.error || response?.data?.message || 'Failed to process invitation';\n        toast({ \n          variant: \"destructive\", \n          title: \"Invitation Failed\", \n          description: errorMsg \n        });\n      }\n    } catch (error) {\n      console.error('Error inviting user:', error);\n      toast({ \n        variant: \"destructive\", \n        title: \"Error\", \n        description: error?.message || 'An error occurred'\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const onCancel = () => {\n    setFormData({\n      email: '',\n      full_name: '',\n      role: 'user',\n      employee_role: '', // NEW\n      tenant_id: '',\n      can_use_softphone: false,\n      access_level: 'read_write',\n      phone: '',\n      navigation_permissions: {},\n    });\n    onOpenChange(false);\n  };\n\n  const handleNavigationChange = (permissionKey, value) => {\n    setFormData(prev => ({\n      ...prev,\n      navigation_permissions: {\n        ...prev.navigation_permissions,\n        [permissionKey]: value,\n      },\n    }));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto bg-slate-800 border-slate-700\">\n        <DialogHeader>\n          <DialogTitle className=\"text-slate-100\">Invite New User</DialogTitle>\n          <DialogDescription className=\"text-slate-400\">\n            Send an invitation to join your CRM workspace\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"email\" className=\"text-slate-200\">Email address</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n              placeholder=\"Enter email address\"\n              required\n              className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"full_name\" className=\"text-slate-200\">Full Name</Label>\n            <Input\n              id=\"full_name\"\n              type=\"text\"\n              value={formData.full_name}\n              onChange={(e) => setFormData(prev => ({ ...prev, full_name: e.target.value }))}\n              placeholder=\"Enter full name\"\n              required\n              className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"phone\" className=\"text-slate-200\">Phone Number (Optional)</Label>\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              value={formData.phone}\n              onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n              placeholder=\"+1234567890\"\n              className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400\"\n            />\n            <p className=\"text-xs text-slate-500 mt-1\">Include country code for SMS notification (e.g., +1 for US)</p>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"role\" className=\"text-slate-200\">Role</Label>\n              <Select value={formData.role} onValueChange={(value) => setFormData(prev => ({ ...prev, role: value }))}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"Select access level\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-600 text-slate-200\">\n                  <SelectItem value=\"admin\">Admin - Can manage the app</SelectItem>\n                  <SelectItem value=\"power-user\">Power User - Advanced features</SelectItem>\n                  <SelectItem value=\"user\">User - Can use the app</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"employee_role\" className=\"text-slate-200\">Employee Role</Label>\n              <Select \n                value={formData.employee_role || 'none'} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, employee_role: value === 'none' ? '' : value }))}\n              >\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"Select employee role\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-600 text-slate-200\">\n                  <SelectItem value=\"none\">None (Use Base44 Role)</SelectItem>\n                  <SelectItem value=\"manager\">Manager (Full Visibility)</SelectItem>\n                  <SelectItem value=\"employee\">Employee (Own Records)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {tenants && tenants.length > 0 && (\n            <div>\n              <Label htmlFor=\"tenant\" className=\"text-slate-200\">Client (Optional)</Label>\n              <Select value={formData.tenant_id} onValueChange={(value) => setFormData(prev => ({ ...prev, tenant_id: value }))}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"Select client\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-600 text-slate-200\">\n                  <SelectItem value=\"no-client\">No specific client</SelectItem>\n                  {tenants.map(tenant => (\n                    <SelectItem key={tenant.id} value={tenant.id}>\n                      {tenant.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          <div>\n            <Label htmlFor=\"access_level\" className=\"text-slate-200\">Access Level</Label>\n            <Select value={formData.access_level} onValueChange={(value) => setFormData(prev => ({ ...prev, access_level: value }))}>\n              <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                <SelectValue placeholder=\"Select access level\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-600 text-slate-200\">\n                <SelectItem value=\"read_write\">Read & Write</SelectItem>\n                <SelectItem value=\"read_only\">Read Only</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"can_use_softphone\"\n              checked={formData.can_use_softphone}\n              onCheckedChange={(checked) => setFormData(prev => ({ ...prev, can_use_softphone: checked }))}\n              className=\"data-[state=checked]:bg-orange-500\"\n            />\n            <Label htmlFor=\"can_use_softphone\" className=\"text-slate-200\">Can use Softphone</Label>\n          </div>\n\n          <div className=\"p-3 bg-slate-700 border border-slate-600 rounded-lg text-slate-300\">\n            <h3 className=\"font-semibold mb-2\">Navigation Permissions (Advanced)</h3>\n            <p className=\"text-sm text-slate-400\">\n              Granular control over specific application routes. (UI not fully implemented in this example)\n            </p>\n            {/* Example: A simple checkbox for a specific nav item */}\n            {/* <div className=\"flex items-center space-x-2 mt-2\">\n              <Switch\n                id=\"nav_dashboard\"\n                checked={formData.navigation_permissions.dashboard || false}\n                onCheckedChange={(checked) => handleNavigationChange('dashboard', checked)}\n              />\n              <Label htmlFor=\"nav_dashboard\">Access Dashboard</Label>\n            </div> */}\n          </div>\n\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onCancel}\n              disabled={submitting}\n              className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={submitting}\n              className=\"bg-orange-500 hover:bg-orange-600 text-white\"\n            >\n              {submitting ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Sending...\n                </>\n              ) : (\n                <>\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  Send Invitation\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\LLMUsageMonitor.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Brain, \n  Loader2, \n  RefreshCw, \n  TrendingUp, \n  DollarSign,\n  Users,\n  Zap,\n  AlertTriangle,\n  CheckCircle\n} from \"lucide-react\";\nimport { Tenant, TenantIntegration } from \"@/api/entities\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nexport default function LLMUsageMonitor() {\n  const [tenants, setTenants] = useState([]);\n  const [integrations, setIntegrations] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState({\n    totalTenants: 0,\n    tenantsWithOwnLLM: 0,\n    tenantsUsingSystemLLM: 0,\n    llmTypes: {}\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      const [tenantsData, integrationsData] = await Promise.all([\n        Tenant.list(),\n        TenantIntegration.filter({\n          integration_type: ['openai_llm', 'anthropic_llm', 'azure_openai_llm']\n        })\n      ]);\n\n      setTenants(tenantsData);\n      setIntegrations(integrationsData);\n\n      // Calculate statistics\n      const activeLLMIntegrations = integrationsData.filter(i => i.is_active);\n      const tenantsWithLLM = new Set(activeLLMIntegrations.map(i => i.tenant_id));\n      \n      const llmTypeCounts = {};\n      activeLLMIntegrations.forEach(integration => {\n        llmTypeCounts[integration.integration_type] = (llmTypeCounts[integration.integration_type] || 0) + 1;\n      });\n\n      setStats({\n        totalTenants: tenantsData.length,\n        tenantsWithOwnLLM: tenantsWithLLM.size,\n        tenantsUsingSystemLLM: tenantsData.length - tenantsWithLLM.size,\n        llmTypes: llmTypeCounts\n      });\n\n    } catch (error) {\n      console.error('Error loading LLM usage data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getTenantLLMInfo = (tenantId) => {\n    const tenantIntegrations = integrations.filter(i => \n      i.tenant_id === tenantId && i.is_active\n    );\n    \n    if (tenantIntegrations.length === 0) {\n      return { type: 'system', provider: 'System Default', status: 'using_system' };\n    }\n\n    const integration = tenantIntegrations[0]; // Use first active integration\n    return {\n      type: 'tenant',\n      provider: integration.integration_type.replace('_', ' ').replace('llm', 'LLM').toUpperCase(),\n      status: integration.sync_status,\n      lastSync: integration.last_sync,\n      integrationName: integration.integration_name\n    };\n  };\n\n  const getStatusBadge = (status, type) => {\n    if (type === 'system') {\n      return <Badge className=\"bg-blue-700 text-blue-100 hover:bg-blue-700\">Using Your Credits</Badge>;\n    }\n\n    switch (status) {\n      case 'connected':\n        return <Badge className=\"bg-green-700 text-green-100 hover:bg-green-700\">Own API Key</Badge>;\n      case 'error':\n        return <Badge variant=\"destructive\">Error</Badge>;\n      case 'pending':\n        return <Badge variant=\"secondary\" className=\"bg-slate-600 text-slate-200 hover:bg-slate-600\">Configuring</Badge>;\n      case 'disconnected':\n        return <Badge variant=\"outline\" className=\"border-slate-500 text-slate-300\">Disconnected</Badge>;\n      default:\n        return <Badge variant=\"secondary\" className=\"bg-slate-600 text-slate-200 hover:bg-slate-600\">{status}</Badge>;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-8 text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4 text-slate-400\" />\n          <p className=\"text-slate-300\">Loading LLM usage data...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const selfServiceRate = stats.totalTenants > 0 ? Math.round((stats.tenantsWithOwnLLM / stats.totalTenants) * 100) : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overview Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"w-5 h-5 text-blue-600\" />\n              <div>\n                <p className=\"text-2xl font-bold text-slate-100\">{stats.totalTenants}</p>\n                <p className=\"text-sm text-slate-400\">Total Tenants</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <div>\n                <p className=\"text-2xl font-bold text-slate-100\">{stats.tenantsWithOwnLLM}</p>\n                <p className=\"text-sm text-slate-400\">Own API Keys</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <DollarSign className=\"w-5 h-5 text-amber-600\" />\n              <div>\n                <p className=\"text-2xl font-bold text-slate-100\">{stats.tenantsUsingSystemLLM}</p>\n                <p className=\"text-sm text-slate-400\">Using Your Credits</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5 text-slate-600\" />\n              <div>\n                <p className=\"text-2xl font-bold text-slate-100\">{selfServiceRate}%</p>\n                <p className=\"text-sm text-slate-400\">Self-Service Rate</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Cost Impact Alert */}\n      {stats.tenantsUsingSystemLLM > 0 && (\n        <Alert className=\"border-amber-600/50 bg-amber-900/30\">\n          <AlertTriangle className=\"h-4 w-4 text-amber-400\" />\n          <AlertDescription className=\"text-amber-300\">\n            <strong>{stats.tenantsUsingSystemLLM} tenants</strong> are currently using your system LLM credits. \n            Consider encouraging them to set up their own API keys in <strong>Settings &gt; Integrations</strong> to reduce your costs.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Main Data Table */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n              <Brain className=\"w-5 h-5 text-purple-600\" />\n              LLM Usage by Tenant\n            </CardTitle>\n            <Button variant=\"outline\" size=\"sm\" onClick={loadData} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Refresh\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow className=\"border-slate-700\">\n                <TableHead className=\"text-slate-300\">Tenant</TableHead>\n                <TableHead className=\"text-slate-300\">LLM Provider</TableHead>\n                <TableHead className=\"text-slate-300\">Status</TableHead>\n                <TableHead className=\"text-slate-300\">Configuration</TableHead>\n                <TableHead className=\"text-slate-300\">Cost Impact</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {tenants.map(tenant => {\n                const llmInfo = getTenantLLMInfo(tenant.id);\n                return (\n                  <TableRow key={tenant.id} className=\"border-slate-700\">\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium text-slate-200\">{tenant.name}</div>\n                        {tenant.domain && (\n                          <div className=\"text-sm text-slate-400\">{tenant.domain}</div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Brain className=\"w-4 h-4 text-slate-400\" />\n                        <span className=\"text-slate-200\">{llmInfo.provider}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {getStatusBadge(llmInfo.status, llmInfo.type)}\n                    </TableCell>\n                    <TableCell>\n                      {llmInfo.type === 'tenant' ? (\n                        <div className=\"text-sm\">\n                          <div className=\"text-slate-200\">{llmInfo.integrationName}</div>\n                          {llmInfo.lastSync && (\n                            <div className=\"text-slate-400\">\n                              Last sync: {new Date(llmInfo.lastSync).toLocaleDateString()}\n                            </div>\n                          )}\n                        </div>\n                      ) : (\n                        <div className=\"text-sm text-slate-400\">Default system configuration</div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {llmInfo.type === 'system' ? (\n                        <div className=\"flex items-center gap-1 text-amber-400\">\n                          <DollarSign className=\"w-3 h-3\" />\n                          <span className=\"text-sm\">Your cost</span>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center gap-1 text-green-400\">\n                          <CheckCircle className=\"w-3 h-3\" />\n                          <span className=\"text-sm\">Their cost</span>\n                        </div>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n              {tenants.length === 0 && (\n                <TableRow>\n                  <TableCell colSpan={5} className=\"text-center py-8 text-slate-400\">\n                    No tenants found.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* LLM Provider Breakdown */}\n      {Object.keys(stats.llmTypes).length > 0 && (\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n              <Zap className=\"w-5 h-5 text-blue-600\" />\n              LLM Provider Breakdown\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {Object.entries(stats.llmTypes).map(([provider, count]) => (\n                <div key={provider} className=\"p-4 border rounded-lg border-slate-600 bg-slate-700/30\">\n                  <div className=\"text-lg font-semibold text-slate-200\">\n                    {provider.replace('_', ' ').replace('llm', 'LLM').toUpperCase()}\n                  </div>\n                  <div className=\"text-2xl font-bold text-blue-400\">{count}</div>\n                  <div className=\"text-sm text-slate-400\">\n                    {count === 1 ? 'tenant' : 'tenants'}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\LeadVisibilityDiagnostic.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Search, AlertCircle, CheckCircle2 } from \"lucide-react\";\nimport { diagnoseLeadVisibility } from \"@/api/functions\";\nimport { fixLeadVisibility } from \"@/api/functions\";\nimport { toast } from \"sonner\";\n\nexport default function LeadVisibilityDiagnostic() {\n  const [leadId, setLeadId] = useState(\"\");\n  const [userEmail, setUserEmail] = useState(\"andrei.byfield@gmail.com\");\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null);\n  const [fixing, setFixing] = useState(false);\n\n  const handleDiagnose = async () => {\n    if (!leadId || !userEmail) {\n      toast.error(\"Please enter both lead ID and user email\");\n      return;\n    }\n\n    setLoading(true);\n    setResult(null);\n\n    try {\n      const response = await diagnoseLeadVisibility({ leadId, userEmail });\n      \n      if (response.data) {\n        setResult(response.data);\n      } else {\n        toast.error(\"Failed to diagnose lead visibility\");\n      }\n    } catch (error) {\n      console.error(\"Error diagnosing:\", error);\n      toast.error(error.message || \"Failed to diagnose\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFix = async () => {\n    if (!result) {\n      toast.error(\"Run diagnosis first\");\n      return;\n    }\n\n    // Get the CORRECT tenant ID (from the lead)\n    const correctTenantId = result.lead_info.tenant_id;\n    \n    if (correctTenantId === 'NOT SET Γ¥î') {\n      toast.error(\"Lead has no tenant_id set\");\n      return;\n    }\n\n    setFixing(true);\n    try {\n      const response = await fixLeadVisibility({\n        leadId: result.lead_info.id, // Use lead ID from the result\n        userEmail: result.target_user_info.email, // Use user email from the result\n        tenantId: correctTenantId\n      });\n\n      if (response.data?.success) {\n        toast.success(\"Fixed! User's tenant_id updated to match the lead.\");\n        // Re-diagnose to confirm\n        setTimeout(() => handleDiagnose(), 1000);\n      } else {\n        toast.error(\"Failed to apply fixes\");\n      }\n    } catch (error) {\n      console.error(\"Error fixing:\", error);\n      toast.error(error.message || \"Failed to fix\");\n    } finally {\n      setFixing(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"text-slate-100\">Lead Visibility Diagnostic</CardTitle>\n        <p className=\"text-sm text-slate-400\">\n          Diagnose why a user cannot see a specific lead\n        </p>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <Label className=\"text-slate-300\">Lead ID</Label>\n          <Input\n            value={leadId}\n            onChange={(e) => setLeadId(e.target.value)}\n            placeholder=\"Enter lead ID or unique_id (e.g., LEAD-000001)\"\n            className=\"bg-slate-700 border-slate-600 text-slate-200\"\n          />\n        </div>\n\n        <div>\n          <Label className=\"text-slate-300\">User Email</Label>\n          <Input\n            value={userEmail}\n            onChange={(e) => setUserEmail(e.target.value)}\n            placeholder=\"user@example.com\"\n            className=\"bg-slate-700 border-slate-600 text-slate-200\"\n          />\n        </div>\n\n        <Button\n          onClick={handleDiagnose}\n          disabled={loading}\n          className=\"bg-blue-600 hover:bg-blue-700 w-full\"\n        >\n          {loading ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              Diagnosing...\n            </>\n          ) : (\n            <>\n              <Search className=\"w-4 h-4 mr-2\" />\n              Diagnose\n            </>\n          )}\n        </Button>\n\n        {result && (\n          <div className=\"space-y-4 mt-4\">\n            {/* Lead Info */}\n            <div className=\"bg-slate-700/50 p-3 rounded\">\n              <h4 className=\"font-semibold text-slate-200 mb-2\">Lead Information</h4>\n              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                <span className=\"text-slate-400\">Name:</span>\n                <span className=\"text-slate-200\">{result.lead_info.name}</span>\n                \n                <span className=\"text-slate-400\">Unique ID:</span>\n                <span className=\"text-slate-200 font-mono text-xs\">{result.lead_info.unique_id}</span>\n                \n                <span className=\"text-slate-400\">Tenant ID:</span>\n                <span className={`${result.lead_info.tenant_id === 'NOT SET Γ¥î' ? 'text-red-400 font-bold' : 'text-slate-200'} font-mono text-xs`}>\n                  {result.lead_info.tenant_id}\n                </span>\n                \n                <span className=\"text-slate-400\">Created By:</span>\n                <span className=\"text-slate-200 text-xs\">{result.lead_info.created_by}</span>\n              </div>\n            </div>\n\n            {/* User Info */}\n            <div className=\"bg-slate-700/50 p-3 rounded\">\n              <h4 className=\"font-semibold text-slate-200 mb-2\">User Information</h4>\n              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                <span className=\"text-slate-400\">Email:</span>\n                <span className=\"text-slate-200 text-xs\">{result.target_user_info.email}</span>\n                \n                <span className=\"text-slate-400\">Tenant ID:</span>\n                <span className={`${result.target_user_info.tenant_id === 'NOT SET Γ¥î' ? 'text-red-400 font-bold' : 'text-slate-200'} font-mono text-xs`}>\n                  {result.target_user_info.tenant_id}\n                </span>\n                \n                <span className=\"text-slate-400\">Employee Role:</span>\n                <span className=\"text-slate-200\">{result.target_user_info.employee_role}</span>\n                \n                <span className=\"text-slate-400\">Role:</span>\n                <span className=\"text-slate-200\">{result.target_user_info.role}</span>\n              </div>\n            </div>\n\n            {/* Visibility Result */}\n            <Alert className={result.can_see_lead ? \"bg-green-900/20 border-green-700\" : \"bg-red-900/20 border-red-700\"}>\n              {result.can_see_lead ? (\n                <CheckCircle2 className=\"h-4 h-4 text-green-400\" />\n              ) : (\n                <AlertCircle className=\"h-4 w-4 text-red-400\" />\n              )}\n              <AlertDescription className={result.can_see_lead ? \"text-green-300\" : \"text-red-300\"}>\n                <div className=\"font-semibold mb-2\">\n                  {result.can_see_lead ? \"Γ£à User CAN see this lead\" : \"Γ¥î User CANNOT see this lead\"}\n                </div>\n                <div className=\"text-xs space-y-1\">\n                  {result.explanation.map((line, idx) => (\n                    <div key={idx}>{line}</div>\n                  ))}\n                </div>\n              </AlertDescription>\n            </Alert>\n\n            {/* Suggested Fixes */}\n            {result.suggested_fixes && result.suggested_fixes.length > 0 && (\n              <div className=\"bg-yellow-900/20 border border-yellow-700/50 p-3 rounded\">\n                <h4 className=\"font-semibold text-yellow-300 mb-2\">Suggested Fixes:</h4>\n                <ul className=\"text-sm text-yellow-200 space-y-1 mb-3\">\n                  {result.suggested_fixes.map((fix, idx) => (\n                    <li key={idx}>ΓÇó {fix.fix}</li>\n                  ))}\n                </ul>\n                <Button\n                  onClick={handleFix}\n                  disabled={fixing}\n                  className=\"bg-yellow-600 hover:bg-yellow-700 w-full\"\n                  size=\"sm\"\n                >\n                  {fixing ? (\n                    <>\n                      <Loader2 className=\"w-3 h-3 mr-2 animate-spin\" />\n                      Applying Fixes...\n                    </>\n                  ) : (\n                    \"Apply All Fixes\"\n                  )}\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\MCPServerMonitor.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\NavigationPermissions.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":2,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"useCallback"},"fix":{"range":[36,49],"text":""},"desc":"Remove unused variable 'useCallback'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'defaults' is assigned a value but never used.","line":34,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"defaults"},"fix":{"range":[1376,1384],"text":""},"desc":"Remove unused variable 'defaults'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array. If 'setLocal' needs the current value of 'value', you can also switch to useReducer instead of useState and read 'value' in the reducer.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [value]","fix":{"range":[3135,3137],"text":"[value]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { User } from \"@/api/entities\";\nimport { Loader2, Save } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nfunction toLabel(key) {\n  const map = {\n    CashFlow: \"Cash Flow\",\n    DocumentProcessing: \"Document Processing\",\n    DocumentManagement: \"Document Management\",\n    AICampaigns: \"AI Campaigns\",\n    PaymentPortal: \"Payment Portal\",\n    Utilities: \"Utilities\",\n    BizDevSources: \"BizDev Sources\",\n    ClientOnboarding: \"Client Onboarding\",\n    WorkflowGuide: \"Workflow Guide\",\n    ClientRequirements: \"Client Requirements\"\n  };\n  return map[key] || key.replace(/([a-z0-9])([A-Z])/g, \"$1 $2\");\n}\n\nconst ORDER = [\n  \"Dashboard\",\"Contacts\",\"Accounts\",\"Leads\",\"Opportunities\",\"Activities\",\"Calendar\",\n  \"BizDevSources\",\"CashFlow\",\"DocumentProcessing\",\"DocumentManagement\",\"AICampaigns\",\"Employees\",\n  \"Reports\",\"Integrations\",\"Documentation\",\"Settings\",\"Agent\",\"PaymentPortal\",\"Utilities\",\"ClientOnboarding\",\"WorkflowGuide\",\"ClientRequirements\"\n];\n\nexport default function NavigationPermissions({ value, onChange, disabled = false, className = \"\" }) {\n  const [keys, setKeys] = useState([]);\n  const [defaults, setDefaults] = useState({});\n  const [local, setLocal] = useState(value || {});\n  const [saving, setSaving] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load user and schema\n  useEffect(() => {\n    let mounted = true;\n    (async () => {\n      try {\n        const user = await User.me();\n        if (!mounted) return;\n        setCurrentUser(user);\n\n        const schema = await User.schema();\n        const props = schema?.properties?.navigation_permissions?.properties || {};\n        const ks = Object.keys(props);\n        const defs = ks.reduce((acc, k) => {\n          acc[k] = props[k]?.default !== undefined ? props[k].default : true;\n          return acc;\n        }, {});\n        \n        if (mounted) {\n          setKeys(ks);\n          setDefaults(defs);\n          \n          // Load user's actual navigation permissions from database\n          const userNavPerms = user?.navigation_permissions || {};\n          console.log('[NavigationPermissions] Loaded user nav perms:', userNavPerms);\n          \n          // Merge defaults with user's saved permissions\n          const merged = { ...defs, ...userNavPerms };\n          setLocal(merged);\n        }\n      } catch (e) {\n        console.error('[NavigationPermissions] Error loading:', e);\n        // Fallback to a safe static list\n        const ks = [...ORDER];\n        const defs = ks.reduce((acc, k) => { acc[k] = true; return acc; }, {});\n        if (mounted) {\n          setKeys(ks);\n          setDefaults(defs);\n          setLocal(prev => ({ ...defs, ...(value || prev) }));\n        }\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    })();\n    return () => { mounted = false; };\n  }, []);\n\n  // Update local state when value prop changes (for external updates)\n  useEffect(() => {\n    if (value) {\n      console.log('[NavigationPermissions] External value changed:', value);\n      setLocal(prev => ({ ...prev, ...value }));\n    }\n  }, [value]);\n\n  const sortedKeys = React.useMemo(() => {\n    const inOrder = ORDER.filter(k => keys.includes(k));\n    const extras = keys.filter(k => !ORDER.includes(k)).sort();\n    return [...inOrder, ...extras];\n  }, [keys]);\n\n  const handleToggle = (k, checked) => {\n    console.log('[NavigationPermissions] Toggle:', k, '=', checked);\n    const next = { ...local, [k]: !!checked };\n    setLocal(next);\n    \n    // Also notify parent component if onChange is provided\n    if (typeof onChange === \"function\") {\n      onChange(next);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!currentUser) {\n      toast.error(\"No user logged in\");\n      return;\n    }\n\n    setSaving(true);\n    try {\n      console.log('[NavigationPermissions] Saving:', local);\n      \n      // Save to User entity\n      await User.update(currentUser.id, {\n        navigation_permissions: local\n      });\n\n      // Verify it saved by re-fetching\n      const updatedUser = await User.me();\n      console.log('[NavigationPermissions] After save, user nav perms:', updatedUser?.navigation_permissions);\n\n      toast.success(\"Navigation permissions saved successfully!\");\n      \n      // Reload page to apply changes\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n\n    } catch (error) {\n      console.error('[NavigationPermissions] Save error:', error);\n      toast.error(\"Failed to save navigation permissions: \" + error.message);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card className={`bg-slate-800 border-slate-700 ${className}`}>\n        <CardContent className=\"flex items-center justify-center p-8\">\n          <Loader2 className=\"w-6 h-6 animate-spin text-blue-400\" />\n          <span className=\"ml-2 text-slate-300\">Loading permissions...</span>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`bg-slate-800 border-slate-700 ${className}`}>\n      <CardHeader className=\"border-b border-slate-700\">\n        <CardTitle className=\"text-slate-100 text-base\">Navigation Permissions</CardTitle>\n        <CardDescription className=\"text-slate-400\">\n          Control which menu items are visible to each user role\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-4\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 mb-4\">\n          {sortedKeys.map((k) => (\n            <div key={k} className=\"flex items-center justify-between rounded-md px-3 py-2 bg-slate-700/40 border border-slate-600\">\n              <span className=\"text-slate-200 text-sm\">{toLabel(k)}</span>\n              <Switch\n                checked={!!local[k]}\n                onCheckedChange={(c) => handleToggle(k, c)}\n                disabled={disabled || saving}\n              />\n            </div>\n          ))}\n        </div>\n\n        <div className=\"flex justify-end pt-4 border-t border-slate-700\">\n          <Button\n            onClick={handleSave}\n            disabled={disabled || saving}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            {saving ? (\n              <>\n                <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n                Saving...\n              </>\n            ) : (\n              <>\n                <Save className=\"w-4 h-4 mr-2\" />\n                Save Changes\n              </>\n            )}\n          </Button>\n        </div>\n\n        <p className=\"text-xs text-slate-500 mt-2\">\n          Changes will take effect after you save and reload the page.\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\PerformanceMonitor.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\PerformanceStatusCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\QATestRunner.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TestReport' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"TestReport"},"fix":{"range":[213,257],"text":""},"desc":"Remove unused variable 'TestReport'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { TestReport } from \"@/api/entities\"; // Keep TestReport for potential future use or if backend still interacts\nimport { runComponentTests } from \"@/api/functions\";\nimport { testSuites as getTestSuites } from \"@/api/functions\";\nimport {\n  Loader2,\n  TestTube2,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Play\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nconst statusConfig = {\n  success: { color: \"text-green-500\", icon: CheckCircle, label: \"Success\" },\n  warning: { color: \"text-yellow-500\", icon: AlertTriangle, label: \"Warning\" },\n  error: { color: \"text-red-500\", icon: XCircle, label: \"Error\" },\n  running: { color: \"text-blue-500\", icon: Loader2, label: \"Running\" },\n  untested: { color: \"text-slate-500\", icon: Clock, label: \"Not recently tested\" }\n};\n\nexport default function QATestRunner() {\n    const [running, setRunning] = useState(null); // Stores the id of the test currently running, or null\n    // Stores an object { rawData: {}, overallStatus: 'success' | 'error' | 'warning' }\n    const [result, setResult] = useState(null);\n\n    const [availableSuites, setAvailableSuites] = useState([]);\n    const [loadingSuites, setLoadingSuites] = useState(true);\n\n    const loadSuites = useCallback(async () => {\n        setLoadingSuites(true);\n        try {\n            const { data } = await getTestSuites();\n            const raw = Array.isArray(data) ? data : (data?.suites || data?.tests || []);\n            const normalized = (raw || [])\n                .map(s => ({\n                    id: s.id || s.key || s.name,\n                    name: s.name || s.title || s.id || s.key,\n                    description: s.description || s.desc || \"\"\n                }))\n                .filter(s => !!s.id);\n\n            setAvailableSuites(normalized);\n        } catch (e) {\n            console.warn(\"Failed to load available test suites from backend, falling back to none:\", e);\n            setAvailableSuites([]);\n        } finally {\n            setLoadingSuites(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        loadSuites();\n    }, [loadSuites]);\n    \n    const handleRunTest = async (testId) => {\n        setRunning(testId);\n        setResult(null); // Clear previous results\n        toast.info(`Running test suite: ${testId}...`);\n        try {\n            const { data } = await runComponentTests({ testNames: [testId] });\n\n            let currentOverallStatus;\n            let summaryMessage = '';\n\n            // Prioritize a top-level status if present in the response\n            if (data && data.status) {\n                currentOverallStatus = data.status.toLowerCase();\n                summaryMessage = data.summary || `Test suite '${testId}' completed with status: ${data.status}.`;\n            } else if (Array.isArray(data?.reports) && data.reports.length > 0) {\n                // If reports array exists and is not empty, derive status from reports\n                if (data.reports.every((r) => r.status === 'success')) {\n                    currentOverallStatus = 'success';\n                    summaryMessage = `All ${data.reports.length} checks passed for '${testId}'.`;\n                } else if (data.reports.some((r) => r.status === 'error')) {\n                    currentOverallStatus = 'error';\n                    const errorCount = data.reports.filter(r => r.status === 'error').length;\n                    summaryMessage = `${errorCount} checks failed for '${testId}'.`;\n                } else {\n                    currentOverallStatus = 'warning';\n                    const warningCount = data.reports.filter(r => r.status === 'warning').length;\n                    summaryMessage = `${warningCount} checks with warnings for '${testId}'.`;\n                }\n            } else {\n                // Default to error if no clear status or reports structure\n                currentOverallStatus = 'error';\n                summaryMessage = `Failed to get valid reports or status for '${testId}'.`;\n            }\n\n            // Ensure the rawData includes a summary for consistent display\n            const processedRawData = {\n                ...data,\n                summary: data?.summary || summaryMessage // Keep existing summary if preferred, else use derived\n            };\n\n            setResult({ rawData: processedRawData, overallStatus: currentOverallStatus });\n\n            // Show toast based on derived status\n            if (currentOverallStatus === 'success') {\n                toast.success(summaryMessage);\n            } else if (currentOverallStatus === 'warning') {\n                toast.warning(summaryMessage);\n            } else { // 'error' or any other unexpected status\n                toast.error(summaryMessage);\n            }\n        } catch (error) {\n            console.error(\"Error running test suite:\", error);\n            const errorMessage = `Failed to run test suite: ${error.message}`;\n            toast.error(errorMessage);\n            setResult({\n                rawData: { // Structure error details consistently\n                    component_name: testId,\n                    status: 'error',\n                    summary: errorMessage,\n                    report_data: [{ check: 'Execution', status: 'error', details: error.message }],\n                    error: error.message,\n                    timestamp: new Date().toISOString()\n                },\n                overallStatus: 'error' // Explicitly set error status for catch block\n            });\n        } finally {\n            setRunning(null);\n        }\n    };\n    \n    return (\n        <div className=\"space-y-6\">\n            <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n                <TestTube2 className=\"h-4 w-4 text-blue-400\" />\n                <AlertDescription className=\"text-blue-300\">\n                    Run automated tests to validate system components and functionality.\n                </AlertDescription>\n            </Alert>\n\n            <Card className=\"bg-slate-800 border-slate-700\">\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n                        <TestTube2 className=\"w-5 h-5 text-orange-400\" />\n                        Test Suites\n                    </CardTitle>\n                    <CardDescription className=\"text-slate-400\">\n                        Select and run automated tests\n                    </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                    {loadingSuites ? (\n                        <div className=\"text-center text-slate-400 py-4\">\n                            <Loader2 className=\"w-6 h-6 animate-spin inline-block mr-2\"/>\n                            <span>Loading available testsΓÇª</span>\n                        </div>\n                    ) : availableSuites.length === 0 ? (\n                        <div className=\"text-center text-slate-400 py-4\">\n                            No test suites available from server. Please try again later or check backend configuration.\n                        </div>\n                    ) : (\n                        availableSuites.map((test) => (\n                            <div key={test.id} className=\"p-4 bg-slate-900 rounded-lg border border-slate-700\">\n                                <div className=\"flex items-center justify-between\">\n                                    <div>\n                                        <p className=\"font-medium text-slate-200\">{test.name}</p>\n                                        <p className=\"text-xs text-slate-400 mt-1\">{test.description}</p>\n                                    </div>\n                                    <Button\n                                        onClick={() => handleRunTest(test.id)}\n                                        disabled={running === test.id || running !== null} // Disable all other buttons if one is running\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        className=\"bg-slate-700 text-slate-200 border-slate-600 hover:bg-slate-600\"\n                                    >\n                                        {running === test.id ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : <Play className=\"w-4 h-4 mr-2\" />}\n                                        {running === test.id ? 'Running' : 'Run Test'}\n                                    </Button>\n                                </div>\n                            </div>\n                        ))\n                    )}\n                </CardContent>\n            </Card>\n\n            {result && (\n                <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n                            {/* Use statusConfig for icon and label based on overallStatus */}\n                            {(() => {\n                                const statusInfo = statusConfig[result.overallStatus] || statusConfig.untested;\n                                const Icon = statusInfo.icon;\n                                return (\n                                    <>\n                                        <Icon className={`h-5 w-5 ${statusInfo.color}`} />\n                                        <span>Test Results: {statusInfo.label}</span>\n                                    </>\n                                );\n                            })()}\n                        </CardTitle>\n                        {result.rawData?.summary && (\n                            <CardDescription className=\"text-slate-400\">\n                                {result.rawData.summary}\n                            </CardDescription>\n                        )}\n                    </CardHeader>\n                    <CardContent>\n                        <pre className=\"bg-slate-900 text-slate-300 p-4 rounded-lg text-xs overflow-auto border border-slate-700\">\n                            {JSON.stringify(result.rawData, null, 2)}\n                        </pre>\n                    </CardContent>\n                </Card>\n            )}\n        </div>\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\R2ConfigChecker.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'HelpCircle' is defined but never used.","line":6,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":77,"suggestions":[{"messageId":"removeVar","data":{"varName":"HelpCircle"},"fix":{"range":[364,376],"text":""},"desc":"Remove unused variable 'HelpCircle'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, CheckCircle, XCircle, AlertTriangle, RefreshCw, HelpCircle } from \"lucide-react\";\nimport { toast } from \"react-hot-toast\"; // Assuming react-hot-toast for toast notifications\nimport { checkR2Config } from \"@/api/functions\";\n\nconst StatusBadge = ({ status }) => {\n    const isSet = status === 'SET';\n    return (\n        <Badge variant={isSet ? \"default\" : \"destructive\"} className={isSet ? \"bg-green-100 text-green-800\" : \"\"}>\n            {isSet ? <CheckCircle className=\"w-3 h-3 mr-1\" /> : <XCircle className=\"w-3 h-3 mr-1\" />}\n            {status}\n        </Badge>\n    );\n};\n\nexport default function R2ConfigChecker() {\n    const [checking, setChecking] = useState(false);\n    const [results, setResults] = useState(null);\n\n    const runDiagnostics = async () => {\n        setChecking(true);\n        try {\n            const { data: result } = await checkR2Config();\n            setResults(result);\n            \n            if (result.current_env_status.CLOUDFLARE_ACCOUNT_ID === 'MISSING') {\n                toast.error('R2 environment variables are missing!');\n            } else {\n                toast.success('R2 configuration checked successfully');\n            }\n        } catch (error) {\n            console.error('Error checking R2 config:', error);\n            toast.error('Failed to check R2 configuration: ' + error.message);\n        } finally {\n            setChecking(false);\n        }\n    };\n\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                    <RefreshCw className=\"w-5 h-5 text-blue-600\" />\n                    R2 Storage Configuration Check\n                </CardTitle>\n                <CardDescription>\n                    Verify that your Cloudflare R2 environment variables are properly configured\n                </CardDescription>\n            </CardHeader>\n            <CardContent>\n                <Button onClick={runDiagnostics} disabled={checking}>\n                    {checking ? (\n                        <><Loader2 className=\"w-4 h-4 animate-spin mr-2\" /> Checking...</>\n                    ) : (\n                        \"Check R2 Configuration\"\n                    )}\n                </Button>\n\n                {results && (\n                    <div className=\"mt-4 space-y-4\">\n                        <div className=\"border rounded-lg p-4\">\n                            <h3 className=\"font-semibold mb-2\">Environment Variables Status</h3>\n                            <div className=\"space-y-2 text-sm\">\n                                <div className=\"flex justify-between items-center\">\n                                    <span>CLOUDFLARE_ACCOUNT_ID:</span>\n                                    <StatusBadge status={results.current_env_status?.CLOUDFLARE_ACCOUNT_ID || 'MISSING'} />\n                                </div>\n                                <div className=\"flex justify-between items-center\">\n                                    <span>R2_ACCESS_KEY_ID:</span>\n                                    <StatusBadge status={results.current_env_status?.R2_ACCESS_KEY_ID || 'MISSING'} />\n                                </div>\n                                <div className=\"flex justify-between items-center\">\n                                    <span>R2_SECRET_ACCESS_KEY:</span>\n                                    <StatusBadge status={results.current_env_status?.R2_SECRET_ACCESS_KEY || 'MISSING'} />\n                                </div>\n                            </div>\n                        </div>\n\n                        {results.current_env_status?.CLOUDFLARE_ACCOUNT_ID === 'MISSING' && (\n                            <Alert variant=\"destructive\">\n                                <AlertTriangle className=\"h-4 w-4\" />\n                                <AlertDescription>\n                                    <strong>Missing R2 Configuration!</strong>\n                                    <br />\n                                    Please add the missing environment variables in your Base44 Dashboard ΓåÆ App Settings ΓåÆ Environment Variables.\n                                    <br />\n                                    <strong>Message:</strong> {results.message}\n                                </AlertDescription>\n                            </Alert>\n                        )}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\SecuritySettings.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setEndpoints' is assigned a value but never used.","line":8,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"setEndpoints"},"fix":{"range":[398,412],"text":""},"desc":"Remove unused variable 'setEndpoints'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":19,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[906,1032],"text":"\n          All API endpoints are protected by Base44&apos;s built-in authentication and RLS (Row-Level Security) policies.\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[906,1032],"text":"\n          All API endpoints are protected by Base44&lsquo;s built-in authentication and RLS (Row-Level Security) policies.\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[906,1032],"text":"\n          All API endpoints are protected by Base44&#39;s built-in authentication and RLS (Row-Level Security) policies.\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[906,1032],"text":"\n          All API endpoints are protected by Base44&rsquo;s built-in authentication and RLS (Row-Level Security) policies.\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, CheckCircle2, AlertCircle, Lock } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nexport default function SecuritySettings() {\n  const [endpoints, setEndpoints] = useState([\n    { path: '/api/entities', method: 'ALL', protected: true, auth: 'Row-Level Security' },\n    { path: '/api/functions', method: 'POST', protected: true, auth: 'User Token' },\n    { path: '/api/webhooks', method: 'POST', protected: true, auth: 'API Key Header' },\n  ]);\n\n  return (\n    <div className=\"space-y-6\">\n      <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n        <Shield className=\"h-4 w-4 text-blue-400\" />\n        <AlertDescription className=\"text-blue-300\">\n          All API endpoints are protected by Base44's built-in authentication and RLS (Row-Level Security) policies.\n        </AlertDescription>\n      </Alert>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Lock className=\"w-5 h-5 text-green-400\" />\n            API Endpoint Protection\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Overview of authentication methods for your API endpoints\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {endpoints.map((endpoint, idx) => (\n              <div key={idx} className=\"flex items-center justify-between p-4 bg-slate-900 rounded-lg border border-slate-700\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3\">\n                    <Badge variant=\"outline\" className=\"bg-slate-700 text-slate-300 border-slate-600\">\n                      {endpoint.method}\n                    </Badge>\n                    <code className=\"text-sm text-slate-200 font-mono\">{endpoint.path}</code>\n                  </div>\n                  <p className=\"text-xs text-slate-400 mt-1\">Auth: {endpoint.auth}</p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {endpoint.protected ? (\n                    <>\n                      <CheckCircle2 className=\"w-5 h-5 text-green-500\" />\n                      <span className=\"text-sm text-green-400 font-medium\">Protected</span>\n                    </>\n                  ) : (\n                    <>\n                      <AlertCircle className=\"w-5 h-5 text-amber-500\" />\n                      <span className=\"text-sm text-amber-400 font-medium\">Public</span>\n                    </>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\StripeSettings.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[61,66],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[65,78],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":2,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardHeader"},"fix":{"range":[78,90],"text":""},"desc":"Remove unused variable 'CardHeader'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":2,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardTitle"},"fix":{"range":[90,101],"text":""},"desc":"Remove unused variable 'CardTitle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used.","line":2,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardDescription"},"fix":{"range":[101,118],"text":""},"desc":"Remove unused variable 'CardDescription'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { TenantIntegration } from '@/api/entities';\nimport { User } from '@/api/entities';\nimport { testStripeConnection } from '@/api/functions';\nimport { toast } from \"sonner\";\nimport {\n  Loader2,\n  CheckCircle,\n  AlertCircle,\n  Save,\n  Plug,\n  Eye,\n  EyeOff\n} from 'lucide-react';\n\nexport default function StripeSettings() {\n  const [user, setUser] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [integration, setIntegration] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isTesting, setIsTesting] = useState(false);\n  const [testStatus, setTestStatus] = useState('untested');\n  const [testMessage, setTestMessage] = useState('');\n  const [showKey, setShowKey] = useState(false);\n\n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n      try {\n        const currentUser = await User.me();\n        setUser(currentUser);\n\n        if (currentUser.tenant_id) {\n          const integrations = await TenantIntegration.filter({\n            tenant_id: currentUser.tenant_id,\n            integration_type: 'stripe'\n          });\n\n          if (integrations.length > 0) {\n            const stripeIntegration = integrations[0];\n            setIntegration(stripeIntegration);\n            setApiKey(stripeIntegration.api_credentials?.stripe_api_key || '');\n            if (stripeIntegration.sync_status === 'connected') {\n              setTestStatus('success');\n              setTestMessage('Connection is active.');\n            }\n          }\n        }\n      } catch (error) {\n        toast.error(\"Failed to load integration settings\");\n        console.error(\"Error loading data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadData();\n  }, []);\n\n  const handleSave = async () => {\n    if (!user?.tenant_id) {\n      toast.error(\"User is not associated with a tenant.\");\n      return;\n    }\n    if (!apiKey.trim()) {\n      toast.error(\"Stripe API key is required.\");\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      const integrationData = {\n        tenant_id: user.tenant_id,\n        integration_type: 'stripe',\n        integration_name: 'Stripe',\n        api_credentials: { stripe_api_key: apiKey },\n        is_active: true,\n        sync_status: integration?.sync_status || 'pending',\n      };\n\n      if (integration) {\n        await TenantIntegration.update(integration.id, integrationData);\n        setIntegration(prev => ({ ...prev, ...integrationData }));\n      } else {\n        const newIntegration = await TenantIntegration.create(integrationData);\n        setIntegration(newIntegration);\n      }\n      toast.success(\"Stripe settings saved successfully.\");\n    } catch (error) {\n      toast.error(\"Failed to save Stripe settings.\");\n      console.error(\"Error saving Stripe settings:\", error);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleTestConnection = async () => {\n    if (!apiKey) {\n      toast.error(\"Please enter an API key before testing.\");\n      return;\n    }\n    setIsTesting(true);\n    setTestStatus('testing');\n    try {\n      const { data } = await testStripeConnection({ apiKey });\n      if (data.success) {\n        setTestStatus('success');\n        setTestMessage(data.message);\n        toast.success(\"Stripe connection successful!\");\n        if (integration) {\n          await TenantIntegration.update(integration.id, { sync_status: 'connected' });\n          setIntegration(prev => ({ ...prev, sync_status: 'connected' }));\n        }\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error) {\n      setTestStatus('error');\n      setTestMessage(error.message || \"An unknown error occurred.\");\n      toast.error(`Stripe Connection Failed: ${error.message}`);\n      if (integration) {\n        await TenantIntegration.update(integration.id, { sync_status: 'error', error_message: error.message });\n        setIntegration(prev => ({ ...prev, sync_status: 'error' }));\n      }\n    } finally {\n      setIsTesting(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-6\">\n        <Loader2 className=\"w-6 h-6 animate-spin text-slate-400\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"stripe-api-key\" className=\"text-slate-200\">Stripe Secret API Key</Label>\n        <div className=\"flex items-center gap-2\">\n          <Input\n            id=\"stripe-api-key\"\n            type={showKey ? 'text' : 'password'}\n            value={apiKey}\n            onChange={(e) => {\n              setApiKey(e.target.value);\n              setTestStatus('untested');\n              setTestMessage('');\n            }}\n            placeholder=\"sk_test_...\"\n            className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n          />\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => setShowKey(!showKey)} className=\"text-slate-400 hover:text-slate-200 hover:bg-slate-600\">\n            {showKey ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n          </Button>\n        </div>\n        <p className=\"text-xs text-slate-500\">\n          Find your API keys in your Stripe Dashboard under Developers &gt; API Keys.\n        </p>\n      </div>\n\n      <div>\n        {testStatus === 'untested' && (\n          <Alert className=\"bg-slate-700/50 border-slate-600\">\n            <AlertDescription className=\"text-slate-400\">\n              Connection status is unknown. Save your key and test the connection.\n            </AlertDescription>\n          </Alert>\n        )}\n        {testStatus === 'testing' && (\n          <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n            <Loader2 className=\"h-4 w-4 animate-spin text-blue-400\" />\n            <AlertDescription className=\"text-blue-300\">\n              Testing connection...\n            </AlertDescription>\n          </Alert>\n        )}\n        {testStatus === 'success' && (\n          <Alert className=\"bg-green-900/30 border-green-700/50\">\n            <CheckCircle className=\"h-4 w-4 text-green-400\" />\n            <AlertDescription className=\"text-green-300\">\n              {testMessage || \"Stripe connection is active and valid.\"}\n            </AlertDescription>\n          </Alert>\n        )}\n        {testStatus === 'error' && (\n          <Alert variant=\"destructive\" className=\"bg-red-900/30 border-red-700/50\">\n            <AlertCircle className=\"h-4 w-4 text-red-400\" />\n            <AlertDescription className=\"text-red-300\">\n              <strong>Connection Failed:</strong> {testMessage}\n            </AlertDescription>\n          </Alert>\n        )}\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-2\">\n        <Button onClick={handleSave} disabled={isSaving || !apiKey} className=\"w-full sm:w-auto bg-blue-600 hover:bg-blue-700\">\n          {isSaving ? (\n            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n          ) : (\n            <Save className=\"w-4 h-4 mr-2\" />\n          )}\n          {integration ? 'Save Changes' : 'Save Connection'}\n        </Button>\n        <Button onClick={handleTestConnection} disabled={isTesting || !apiKey} variant=\"outline\" className=\"w-full sm:w-auto bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n          {isTesting ? (\n            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n          ) : (\n            <Plug className=\"w-4 h-4 mr-2\" />\n          )}\n          Test Connection\n        </Button>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\SyncHealthMonitor.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[296,312],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Clock"},"fix":{"range":[328,338],"text":""},"desc":"Remove unused variable 'Clock'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[338,353],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'formatDistanceToNow' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatDistanceToNow"},"fix":{"range":[470,517],"text":""},"desc":"Remove unused variable 'formatDistanceToNow'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'LineChart' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"LineChart"},"fix":{"range":[529,539],"text":""},"desc":"Remove unused variable 'LineChart'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Line' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Line"},"fix":{"range":[538,546],"text":""},"desc":"Remove unused variable 'Line'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'XAxis' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"XAxis"},"fix":{"range":[546,555],"text":""},"desc":"Remove unused variable 'XAxis'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'YAxis' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"YAxis"},"fix":{"range":[555,564],"text":""},"desc":"Remove unused variable 'YAxis'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CartesianGrid' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"CartesianGrid"},"fix":{"range":[564,581],"text":""},"desc":"Remove unused variable 'CartesianGrid'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[581,592],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ResponsiveContainer' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"ResponsiveContainer"},"fix":{"range":[592,615],"text":""},"desc":"Remove unused variable 'ResponsiveContainer'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'BarChart' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"BarChart"},"fix":{"range":[615,627],"text":""},"desc":"Remove unused variable 'BarChart'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Bar' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Bar"},"fix":{"range":[627,634],"text":""},"desc":"Remove unused variable 'Bar'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Activity, \n  CheckCircle, \n  AlertCircle, \n  Clock, \n  TrendingUp,\n  RefreshCw,\n  Loader2 // Added Loader2 import\n} from \"lucide-react\";\nimport { SyncHealth } from \"@/api/entities\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar\n} from \"recharts\";\n\nexport default function SyncHealthMonitor({ tenantId = null }) {\n  const [healthLogs, setHealthLogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  // Removed stats state as it's no longer used in the new UI\n\n  const loadHealthData = useCallback(async () => {\n    setLoading(true);\n    try {\n      // Load last 30 sync health records\n      const filter = tenantId ? { tenant_id: tenantId } : {};\n      const logs = await SyncHealth.filter(filter, '-start_time', 30);\n      setHealthLogs(logs);\n\n      // Removed statistics calculation as it's no longer used\n    } catch (error) {\n      console.error(\"Failed to load sync health data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, [tenantId]);\n\n  useEffect(() => {\n    loadHealthData();\n  }, [loadHealthData]);\n\n  const getStatusBadge = (status) => {\n    let classes = \"\";\n    switch (status) {\n      case 'completed': classes = 'bg-emerald-900/30 text-emerald-400 border-emerald-700/50'; break;\n      case 'partial': classes = 'bg-yellow-900/30 text-yellow-400 border-yellow-700/50'; break;\n      case 'failed': classes = 'bg-red-900/30 text-red-400 border-red-700/50'; break;\n      case 'running': classes = 'bg-blue-900/30 text-blue-400 border-blue-700/50'; break;\n      default: classes = 'bg-slate-700 text-slate-300 border-slate-600'; break;\n    }\n    return <Badge variant=\"outline\" className={classes}>{status}</Badge>;\n  };\n\n  // Removed chartData preparation as charts are no longer used\n\n  return (\n    <div className=\"space-y-6\">\n      <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n        <Activity className=\"h-4 w-4 text-blue-400\" />\n        <AlertDescription className=\"text-blue-300\">\n          Monitor automated data synchronization jobs and their health status across all tenants.\n        </AlertDescription>\n      </Alert>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <RefreshCw className=\"w-5 h-5 text-emerald-400\" />\n            Recent Sync Operations\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Last 10 synchronization jobs\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex justify-center p-8\">\n              <Loader2 className=\"w-6 h-6 animate-spin text-blue-400\" />\n            </div>\n          ) : healthLogs.length === 0 ? (\n            <div className=\"text-center p-8 text-slate-400\">\n              No sync operations recorded yet\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {healthLogs.slice(0, 10).map((log) => ( // Limiting to last 10 as per CardDescription\n                <div key={log.id} className=\"p-4 bg-slate-900 rounded-lg border border-slate-700\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <Badge variant=\"outline\" className=\"bg-slate-700 text-slate-300 border-slate-600\">\n                          {log.mode || \"N/A\"} {/* Using log.mode instead of log.sync_type */}\n                        </Badge>\n                        {getStatusBadge(log.status)}\n                      </div>\n                      <div className=\"mt-2 text-sm text-slate-300\">\n                        {log.records_updated || 0} records updated\n                        {/* Assuming records_processed maps to records_updated as per entity structure */}\n                      </div>\n                      <div className=\"mt-1 text-xs text-slate-500\">\n                        Duration: {log.duration_ms ? `${log.duration_ms}ms` : 'N/A'} | {new Date(log.start_time).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                  {log.error_count > 0 && (\n                    <Alert className=\"mt-3 bg-red-900/30 border-red-700/50\">\n                      <AlertCircle className=\"h-4 w-4 text-red-400\" />\n                      <AlertDescription className=\"text-red-300\">\n                        {log.error_count} error(s) occurred during sync\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\SysAdminGuide.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":49,"column":86,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be &quot;Power User\" or \"Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be &ldquo;Power User\" or \"Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be &#34;Power User\" or \"Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be &rdquo;Power User\" or \"Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":49,"column":97,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User&quot; or \"Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User&ldquo; or \"Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User&#34; or \"Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User&rdquo; or \"Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":49,"column":102,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User\" or &quot;Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User\" or &ldquo;Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User\" or &#34;Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User\" or &rdquo;Superadmin\" - these do not exist in Base44. Only "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":49,"column":113,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User\" or \"Superadmin&quot; - these do not exist in Base44. Only "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User\" or \"Superadmin&ldquo; - these do not exist in Base44. Only "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User\" or \"Superadmin&#34; - these do not exist in Base44. Only "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2725,2827],"text":" The Base44 platform role cannot be \"Power User\" or \"Superadmin&rdquo; - these do not exist in Base44. Only "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":109,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6856,6869],"text":"&quot;Invite User\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6856,6869],"text":"&ldquo;Invite User\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6856,6869],"text":"&#34;Invite User\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6856,6869],"text":"&rdquo;Invite User\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":109,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6856,6869],"text":"\"Invite User&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6856,6869],"text":"\"Invite User&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6856,6869],"text":"\"Invite User&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6856,6869],"text":"\"Invite User&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":112,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7021,7060],"text":" The user&apos;s work email (used for login)"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7021,7060],"text":" The user&lsquo;s work email (used for login)"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7021,7060],"text":" The user&#39;s work email (used for login)"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7021,7060],"text":" The user&rsquo;s work email (used for login)"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":128,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7959,8023],"text":"\n              To modify an existing user&apos;s access:\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7959,8023],"text":"\n              To modify an existing user&lsquo;s access:\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7959,8023],"text":"\n              To modify an existing user&#39;s access:\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7959,8023],"text":"\n              To modify an existing user&rsquo;s access:\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":146,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8983,9081],"text":"\n              To temporarily disable a user&apos;s access without deleting their account:\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8983,9081],"text":"\n              To temporarily disable a user&lsquo;s access without deleting their account:\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8983,9081],"text":"\n              To temporarily disable a user&#39;s access without deleting their account:\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8983,9081],"text":"\n              To temporarily disable a user&rsquo;s access without deleting their account:\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":150,"column":34,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9256,9264],"text":"&quot;Active\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9256,9264],"text":"&ldquo;Active\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9256,9264],"text":"&#34;Active\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9256,9264],"text":"&rdquo;Active\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":150,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9256,9264],"text":"\"Active&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9256,9264],"text":"\"Active&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9256,9264],"text":"\"Active&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9256,9264],"text":"\"Active&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":165,"column":33,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10065,10077],"text":"&quot;Add Client\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10065,10077],"text":"&ldquo;Add Client\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10065,10077],"text":"&#34;Add Client\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10065,10077],"text":"&rdquo;Add Client\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":165,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10065,10077],"text":"\"Add Client&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10065,10077],"text":"\"Add Client&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10065,10077],"text":"\"Add Client&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10065,10077],"text":"\"Add Client&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":193,"column":144,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11606,11713],"text":" Periodically review user permissions in Settings &gt; User Management to ensure they&apos;re still appropriate."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11606,11713],"text":" Periodically review user permissions in Settings &gt; User Management to ensure they&lsquo;re still appropriate."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11606,11713],"text":" Periodically review user permissions in Settings &gt; User Management to ensure they&#39;re still appropriate."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11606,11713],"text":" Periodically review user permissions in Settings &gt; User Management to ensure they&rsquo;re still appropriate."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":196,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12052,12077],"text":"Deactivate, Don&apos;t Delete:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12052,12077],"text":"Deactivate, Don&lsquo;t Delete:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12052,12077],"text":"Deactivate, Don&#39;t Delete:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12052,12077],"text":"Deactivate, Don&rsquo;t Delete:"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Book, Cog, Shield, Users, Database, Lock } from \"lucide-react\";\n\nexport default function SysAdminGuide() {\n  return (\n    <div className=\"space-y-6\">\n      <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n        <Cog className=\"h-4 w-4 text-blue-400\" />\n        <AlertDescription className=\"text-blue-300\">\n          Comprehensive documentation for system administrators to manage and maintain the CRM.\n        </AlertDescription>\n      </Alert>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Book className=\"w-5 h-5 text-indigo-400\" />\n            System Administrator Guide\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Essential knowledge for CRM administration\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"prose prose-invert prose-slate max-w-none\">\n          <div className=\"space-y-6 text-slate-300\">\n            \n            <h2 className=\"text-slate-100 text-xl font-semibold flex items-center gap-2\">\n              <Shield className=\"w-5 h-5 text-purple-400\" />\n              1. Understanding Roles and Permissions\n            </h2>\n            \n            <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4 space-y-4\">\n              <h3 className=\"text-slate-200 text-lg font-medium\">Two-Tier Role System</h3>\n              \n              <div className=\"space-y-3\">\n                <div className=\"border-l-4 border-blue-500 pl-4\">\n                  <h4 className=\"text-blue-400 font-semibold\">Layer 1: Base44 Platform Role</h4>\n                  <p className=\"text-sm mt-2\">\n                    The Base44 platform provides two built-in roles:\n                  </p>\n                  <ul className=\"list-disc list-inside space-y-1 text-sm mt-2\">\n                    <li><strong className=\"text-blue-300\">admin</strong>: Platform administrators (typically the app owner/developer). Full access to all data across all tenants, all settings, and system configuration.</li>\n                    <li><strong className=\"text-blue-300\">user</strong>: Standard Base44 users. This is the default role for anyone logging into the app who is not a platform admin.</li>\n                  </ul>\n                  <div className=\"bg-yellow-900/20 border border-yellow-700/50 rounded p-2 mt-2\">\n                    <p className=\"text-yellow-300 text-xs\">\n                      <strong>Important:</strong> The Base44 platform role cannot be \"Power User\" or \"Superadmin\" - these do not exist in Base44. Only <code>admin</code> and <code>user</code> are valid.\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"border-l-4 border-green-500 pl-4\">\n                  <h4 className=\"text-green-400 font-semibold\">Layer 2: CRM Application Employee Role</h4>\n                  <p className=\"text-sm mt-2\">\n                    The CRM application uses a custom <code>employee_role</code> field to define internal access levels:\n                  </p>\n                  <ul className=\"list-disc list-inside space-y-1 text-sm mt-2\">\n                    <li><strong className=\"text-green-300\">manager</strong>: Team leads, supervisors, or department heads. Can view and edit <strong>all</strong> CRM data within their assigned tenant (full tenant visibility).</li>\n                    <li><strong className=\"text-green-300\">employee</strong>: Individual contributors (sales reps, CSRs). Can only view and edit records they created or that are assigned to them (restricted to own records).</li>\n                  </ul>\n                  <div className=\"bg-green-900/20 border border-green-700/50 rounded p-2 mt-2\">\n                    <p className=\"text-green-300 text-xs\">\n                      <strong>Best Practice:</strong> Use <code>employee_role</code> to control CRM data visibility. Most users will be Base44 <code>user</code>s with either <code>manager</code> or <code>employee</code> as their employee_role.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <h3 className=\"text-slate-200 text-lg font-medium mt-6\">1.1 How Permissions are Evaluated</h3>\n            <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4\">\n              <p className=\"text-sm\">\n                When a user attempts to access CRM data (Leads, Contacts, Accounts, Opportunities, Activities):\n              </p>\n              <ol className=\"list-decimal list-inside space-y-2 text-sm mt-3\">\n                <li><strong>If user.role is <code>admin</code>:</strong> Full access to all data across all tenants. No restrictions.</li>\n                <li><strong>If user.role is <code>user</code>:</strong> Check their <code>employee_role</code>:\n                  <ul className=\"list-disc list-inside ml-6 mt-1 space-y-1\">\n                    <li><strong>If employee_role is <code>manager</code>:</strong> Can see all records within their <code>tenant_id</code>.</li>\n                    <li><strong>If employee_role is <code>employee</code>:</strong> Can only see records where <code>created_by</code> or <code>assigned_to</code> equals their email, within their <code>tenant_id</code>.</li>\n                  </ul>\n                </li>\n              </ol>\n            </div>\n\n            <h3 className=\"text-slate-200 text-lg font-medium mt-6\">1.2 Row-Level Security (RLS)</h3>\n            <p>\n              RLS rules are defined on each entity (Lead, Contact, Account, Opportunity, Activity, Employee) and enforce these permissions at the database level. This ensures:\n            </p>\n            <ul className=\"list-disc list-inside space-y-1\">\n              <li>Managers see tenant-wide data in dashboards, reports, and lists</li>\n              <li>Employees only see their assigned data, even when viewing shared dashboards</li>\n              <li>Data isolation is automatic and cannot be bypassed through the UI</li>\n            </ul>\n\n            <h2 className=\"text-slate-100 text-xl font-semibold mt-8 flex items-center gap-2\">\n              <Users className=\"w-5 h-5 text-cyan-400\" />\n              2. User Management\n            </h2>\n            \n            <h3 className=\"text-slate-200 text-lg font-medium\">2.1 Creating and Inviting Users</h3>\n            <p>\n              To add new users to the CRM:\n            </p>\n            <ol className=\"list-decimal list-inside space-y-2\">\n              <li>Navigate to <strong>Settings &gt; User Management</strong></li>\n              <li>Click <strong>\"Invite User\"</strong></li>\n              <li>Fill in:\n                <ul className=\"list-disc list-inside ml-6 mt-1\">\n                  <li><strong>Email:</strong> The user's work email (used for login)</li>\n                  <li><strong>Full Name:</strong> Display name</li>\n                  <li><strong>Client:</strong> Assign them to a tenant organization</li>\n                  <li><strong>Employee Role:</strong> Choose <code>Manager</code> or <code>Employee</code></li>\n                </ul>\n              </li>\n              <li>The user will receive an invitation email to set up their account</li>\n            </ol>\n            <div className=\"bg-orange-900/20 border border-orange-700/50 rounded-lg p-3 mt-2\">\n              <p className=\"text-orange-300 text-sm\">\n                <strong>Note:</strong> New users are automatically assigned Base44 role <code>user</code>. Only the app owner should have Base44 role <code>admin</code>.\n              </p>\n            </div>\n\n            <h3 className=\"text-slate-200 text-lg font-medium mt-6\">2.2 Editing User Permissions</h3>\n            <p>\n              To modify an existing user's access:\n            </p>\n            <ol className=\"list-decimal list-inside space-y-2\">\n              <li>Go to <strong>Settings &gt; User Management</strong></li>\n              <li>Click the <strong>Edit</strong> button (pencil icon) next to the user</li>\n              <li>Adjust their settings:\n                <ul className=\"list-disc list-inside ml-6 mt-1\">\n                  <li><strong>Employee Role:</strong> Change between Manager and Employee</li>\n                  <li><strong>Access Level:</strong> Read or Read/Write</li>\n                  <li><strong>CRM Access:</strong> Toggle whether they can access the CRM at all</li>\n                  <li><strong>Navigation Permissions:</strong> Control which menu items they see</li>\n                </ul>\n              </li>\n              <li>Click <strong>Save</strong> to apply changes</li>\n            </ol>\n\n            <h3 className=\"text-slate-200 text-lg font-medium mt-6\">2.3 Deactivating Users</h3>\n            <p>\n              To temporarily disable a user's access without deleting their account:\n            </p>\n            <ol className=\"list-decimal list-inside space-y-2\">\n              <li>Edit the user in <strong>User Management</strong></li>\n              <li>Toggle <strong>\"Active\"</strong> to OFF</li>\n              <li>The user will no longer be able to log in, but their data and history remain intact</li>\n            </ol>\n\n            <h2 className=\"text-slate-100 text-xl font-semibold mt-8 flex items-center gap-2\">\n              <Database className=\"w-5 h-5 text-emerald-400\" />\n              3. Tenant (Client) Management\n            </h2>\n            \n            <h3 className=\"text-slate-200 text-lg font-medium\">3.1 Creating Tenants</h3>\n            <p>\n              Tenants represent separate client organizations within your CRM. To create a new tenant:\n            </p>\n            <ol className=\"list-decimal list-inside space-y-2\">\n              <li>Navigate to <strong>Settings &gt; Client Management</strong> (admins only)</li>\n              <li>Click <strong>\"Add Client\"</strong></li>\n              <li>Provide:\n                <ul className=\"list-disc list-inside ml-6 mt-1\">\n                  <li>Client Name</li>\n                  <li>Industry</li>\n                  <li>Branding settings (logo, colors)</li>\n                </ul>\n              </li>\n              <li>Each tenant gets isolated data storage and custom branding</li>\n            </ol>\n\n            <h3 className=\"text-slate-200 text-lg font-medium mt-6\">3.2 Assigning Users to Tenants</h3>\n            <p>\n              Users must be assigned to a tenant to access CRM data:\n            </p>\n            <ul className=\"list-disc list-inside space-y-1\">\n              <li>Set the <strong>Client</strong> field when inviting or editing a user</li>\n              <li>Users with <code>employee_role: manager</code> will see all data for that tenant</li>\n              <li>Users with <code>employee_role: employee</code> will see only their assigned records within that tenant</li>\n            </ul>\n\n            <h2 className=\"text-slate-100 text-xl font-semibold mt-8 flex items-center gap-2\">\n              <Lock className=\"w-5 h-5 text-red-400\" />\n              4. Security Best Practices\n            </h2>\n            \n            <ul className=\"list-disc list-inside space-y-2\">\n              <li><strong>Principle of Least Privilege:</strong> Assign users the minimum role needed for their job. Most users should be <code>employee</code>, not <code>manager</code>.</li>\n              <li><strong>Regular Access Reviews:</strong> Periodically review user permissions in Settings &gt; User Management to ensure they're still appropriate.</li>\n              <li><strong>Audit Logging:</strong> Check Settings &gt; Diagnostics &gt; QA Test Runner and monitor the Audit Log for unusual activity.</li>\n              <li><strong>Tenant Isolation:</strong> Never assign users to multiple tenants unless they genuinely need cross-client access (rare).</li>\n              <li><strong>Deactivate, Don't Delete:</strong> When users leave, deactivate their accounts instead of deleting them to preserve data integrity and audit trails.</li>\n            </ul>\n\n            <h2 className=\"text-slate-100 text-xl font-semibold mt-8\">5. Common Administrative Tasks</h2>\n            \n            <h3 className=\"text-slate-200 text-lg font-medium\">5.1 Bulk User Updates</h3>\n            <p className=\"text-sm\">\n              Currently, bulk user updates must be done individually through the User Management interface. For large changes, contact support or use the API.\n            </p>\n\n            <h3 className=\"text-slate-200 text-lg font-medium mt-4\">5.2 Data Cleanup</h3>\n            <p className=\"text-sm\">\n              Use <strong>Settings &gt; Diagnostics &gt; Test Data Manager</strong> to remove test records. Always back up data before cleanup operations.\n            </p>\n\n            <h3 className=\"text-slate-200 text-lg font-medium mt-4\">5.3 Performance Monitoring</h3>\n            <p className=\"text-sm\">\n              Monitor system health via <strong>Settings &gt; Performance</strong> and <strong>Integration Usage</strong> tabs.\n            </p>\n\n            <div className=\"bg-blue-900/20 border border-blue-700/50 rounded-lg p-4 mt-8\">\n              <p className=\"text-blue-300 text-sm\">\n                <strong>Need Help?</strong> Contact your system administrator or refer to the base44 platform documentation for additional support.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\SystemAnnouncements.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'newAnn' is assigned a value but never used.","line":67,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"newAnn"},"fix":{"range":[2744,2791],"text":""},"desc":"Remove unused variable 'newAnn'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Announcement, Tenant, User, Notification } from \"@/api/entities\"; // Added User and Notification\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Plus, Edit, Trash2, Megaphone, Loader2, Info, AlertTriangle, ShieldAlert } from \"lucide-react\";\n\nexport default function SystemAnnouncements() {\n    const [announcements, setAnnouncements] = useState([]);\n    const [tenants, setTenants] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [showForm, setShowForm] = useState(false);\n    const [editingAnnouncement, setEditingAnnouncement] = useState(null);\n    const [newAnnouncement, setNewAnnouncement] = useState({\n        title: \"\",\n        message: \"\",\n        type: \"info\",\n        target_tenant_id: \"all\",\n        is_active: true,\n    });\n    const { toast } = useToast();\n\n    const loadData = useCallback(async () => {\n        setLoading(true);\n        try {\n            const [announcementsData, tenantsData] = await Promise.all([\n                Announcement.list(\"-created_date\"),\n                Tenant.list()\n            ]);\n            setAnnouncements(announcementsData);\n            setTenants(tenantsData);\n        } catch (error) {\n            toast({ variant: \"destructive\", title: \"Failed to load data\", description: error.message });\n        } finally {\n            setLoading(false);\n        }\n    }, [toast]);\n\n    useEffect(() => {\n        loadData();\n    }, [loadData]);\n\n    const handleInputChange = (field, value) => {\n        if (editingAnnouncement) {\n            setEditingAnnouncement(prev => ({ ...prev, [field]: value }));\n        } else {\n            setNewAnnouncement(prev => ({ ...prev, [field]: value }));\n        }\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const data = editingAnnouncement || newAnnouncement;\n        try {\n            if (editingAnnouncement) {\n                await Announcement.update(editingAnnouncement.id, data);\n                toast({ title: \"Success\", description: \"Announcement updated.\" });\n            } else {\n                const newAnn = await Announcement.create(data);\n                toast({ title: \"Success\", description: \"Announcement created.\" });\n\n                // After creating the announcement, create notifications for users\n                try {\n                    let targetUsers = [];\n                    if (data.target_tenant_id === 'all') {\n                        targetUsers = await User.list();\n                    } else {\n                        targetUsers = await User.filter({ tenant_id: data.target_tenant_id });\n                    }\n\n                    if (targetUsers.length > 0) {\n                        const notificationRecords = targetUsers.map(user => ({\n                            user_email: user.email,\n                            title: `≡ƒôó ${data.title}`,\n                            description: data.message.substring(0, 100) + (data.message.length > 100 ? '...' : ''),\n                            link: '/Dashboard', // Link to dashboard when clicked\n                            icon: 'Megaphone'\n                        }));\n                        await Notification.bulkCreate(notificationRecords);\n                        console.log(`Created ${notificationRecords.length} notifications for announcement.`);\n                    }\n                } catch (notificationError) {\n                    console.error(\"Failed to create notifications for announcement:\", notificationError);\n                    // Don't block the main success message, but log the error.\n                    toast({\n                        variant: \"destructive\",\n                        title: \"Notification Failure\",\n                        description: \"The announcement was created, but failed to send notifications to users.\"\n                    });\n                }\n            }\n            resetForm();\n            loadData();\n        } catch (error) {\n            toast({ variant: \"destructive\", title: \"Operation Failed\", description: error.message });\n        }\n    };\n\n    const handleEdit = (announcement) => {\n        setEditingAnnouncement(announcement);\n        setShowForm(true);\n    };\n\n    const handleDelete = async (id) => {\n        if (confirm(\"Are you sure you want to delete this announcement?\")) {\n            try {\n                await Announcement.delete(id);\n                toast({ title: \"Success\", description: \"Announcement deleted.\" });\n                loadData();\n            } catch (error) {\n                toast({ variant: \"destructive\", title: \"Delete Failed\", description: error.message });\n            }\n        }\n    };\n    \n    const handleToggleActive = async (announcement) => {\n        try {\n            await Announcement.update(announcement.id, { is_active: !announcement.is_active });\n            toast({ title: \"Status Updated\" });\n            loadData();\n        } catch(error) {\n            toast({ variant: \"destructive\", title: \"Update Failed\", description: error.message });\n        }\n    };\n\n    const resetForm = () => {\n        setShowForm(false);\n        setEditingAnnouncement(null);\n        setNewAnnouncement({ title: \"\", message: \"\", type: \"info\", target_tenant_id: \"all\", is_active: true });\n    };\n\n    const typeConfig = {\n        info: { color: \"bg-blue-100 text-blue-800\", icon: Info },\n        warning: { color: \"bg-yellow-100 text-yellow-800\", icon: AlertTriangle },\n        critical: { color: \"bg-red-100 text-red-800\", icon: ShieldAlert },\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n                        <Megaphone className=\"w-6 h-6 text-blue-400\" />\n                        System Announcements\n                    </CardTitle>\n                    <CardDescription className=\"text-slate-400\">Create and manage global or tenant-specific announcements.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <Button onClick={() => { setShowForm(!showForm); setEditingAnnouncement(null); }} className=\"bg-blue-600 hover:bg-blue-700\">\n                        <Plus className=\"w-4 h-4 mr-2\" /> {showForm ? \"Cancel\" : \"Create New Announcement\"}\n                    </Button>\n\n                    {showForm && (\n                        <form onSubmit={handleSubmit} className=\"mt-6 space-y-4 p-4 border rounded-lg bg-slate-700/50 border-slate-600\">\n                            <h3 className=\"font-medium text-lg text-slate-100\">{editingAnnouncement ? \"Edit Announcement\" : \"New Announcement\"}</h3>\n                            <div>\n                                <Label htmlFor=\"title\" className=\"text-slate-200\">Title</Label>\n                                <Input id=\"title\" value={editingAnnouncement?.title || newAnnouncement.title} onChange={(e) => handleInputChange('title', e.target.value)} required className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\" />\n                            </div>\n                            <div>\n                                <Label htmlFor=\"message\" className=\"text-slate-200\">Message</Label>\n                                <Textarea id=\"message\" value={editingAnnouncement?.message || newAnnouncement.message} onChange={(e) => handleInputChange('message', e.target.value)} required className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\" />\n                            </div>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                <div>\n                                    <Label htmlFor=\"type\" className=\"text-slate-200\">Type</Label>\n                                    <Select value={editingAnnouncement?.type || newAnnouncement.type} onValueChange={(value) => handleInputChange('type', value)}>\n                                        <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                                            <SelectValue />\n                                        </SelectTrigger>\n                                        <SelectContent className=\"bg-slate-800 border-slate-700\">\n                                            <SelectItem value=\"info\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Info</SelectItem>\n                                            <SelectItem value=\"warning\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Warning</SelectItem>\n                                            <SelectItem value=\"critical\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Critical</SelectItem>\n                                        </SelectContent>\n                                    </Select>\n                                </div>\n                                <div>\n                                    <Label htmlFor=\"target\" className=\"text-slate-200\">Target</Label>\n                                    <Select value={editingAnnouncement?.target_tenant_id || newAnnouncement.target_tenant_id} onValueChange={(value) => handleInputChange('target_tenant_id', value)}>\n                                        <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                                            <SelectValue />\n                                        </SelectTrigger>\n                                        <SelectContent className=\"bg-slate-800 border-slate-700\">\n                                            <SelectItem value=\"all\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">All Tenants</SelectItem>\n                                            {tenants.map(t => <SelectItem key={t.id} value={t.id} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">{t.name}</SelectItem>)}\n                                        </SelectContent>\n                                    </Select>\n                                </div>\n                            </div>\n                            <div className=\"flex items-center justify-between\">\n                                <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700\">{editingAnnouncement ? \"Update Announcement\" : \"Create Announcement\"}</Button>\n                                <div className=\"flex items-center space-x-2\">\n                                    <Label htmlFor=\"is_active\" className=\"text-slate-200\">Active</Label>\n                                    <Switch id=\"is_active\" checked={editingAnnouncement?.is_active ?? newAnnouncement.is_active} onCheckedChange={(checked) => handleInputChange('is_active', checked)} />\n                                </div>\n                            </div>\n                        </form>\n                    )}\n                </CardContent>\n            </Card>\n\n            <Card className=\"shadow-lg bg-slate-800 border-slate-700\">\n                <CardHeader><CardTitle className=\"text-slate-100\">Existing Announcements</CardTitle></CardHeader>\n                <CardContent>\n                    {loading ? (\n                        <div className=\"flex justify-center items-center py-8\"><Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" /></div>\n                    ) : (\n                        <Table>\n                            <TableHeader>\n                                <TableRow className=\"border-slate-700\">\n                                    <TableHead className=\"text-slate-300\">Status</TableHead>\n                                    <TableHead className=\"text-slate-300\">Type</TableHead>\n                                    <TableHead className=\"text-slate-300\">Title</TableHead>\n                                    <TableHead className=\"text-slate-300\">Target</TableHead>\n                                    <TableHead className=\"text-slate-300\">Actions</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {announcements.map(ann => {\n                                    const TypeIcon = typeConfig[ann.type].icon;\n                                    return (\n                                        <TableRow key={ann.id} className=\"border-slate-700\">\n                                            <TableCell>\n                                                <Switch checked={ann.is_active} onCheckedChange={() => handleToggleActive(ann)} />\n                                            </TableCell>\n                                            <TableCell>\n                                                <Badge className={typeConfig[ann.type].color}>\n                                                    <TypeIcon className=\"w-4 h-4 mr-1.5\" />\n                                                    {ann.type}\n                                                </Badge>\n                                            </TableCell>\n                                            <TableCell>\n                                                <p className=\"font-medium text-slate-200\">{ann.title}</p>\n                                                <p className=\"text-sm text-slate-400 truncate max-w-xs\">{ann.message}</p>\n                                            </TableCell>\n                                            <TableCell className=\"text-slate-200\">{ann.target_tenant_id === 'all' ? 'All Tenants' : tenants.find(t => t.id === ann.target_tenant_id)?.name || 'N/A'}</TableCell>\n                                            <TableCell className=\"space-x-2\">\n                                                <Button variant=\"ghost\" size=\"icon\" onClick={() => handleEdit(ann)} className=\"text-slate-400 hover:text-slate-200 hover:bg-slate-700\"><Edit className=\"w-4 h-4\" /></Button>\n                                                <Button variant=\"ghost\" size=\"icon\" className=\"text-red-400 hover:text-red-300 hover:bg-slate-700\" onClick={() => handleDelete(ann.id)}><Trash2 className=\"w-4 h-4\" /></Button>\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    )}\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\SystemHealthDashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[394,408],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { \n  Activity, \n  AlertCircle, \n  CheckCircle2, \n  XCircle, \n  Clock,\n  RefreshCw,\n  TrendingUp,\n  Database\n} from \"lucide-react\";\nimport { useErrorLog } from \"../shared/ErrorLogger\";\n\nconst BACKEND_URL = import.meta.env.VITE_BACKEND_URL || 'http://localhost:3001';\n\nexport default function SystemHealthDashboard() {\n  const { errors, getRecentErrors, getCriticalErrors, clearErrors } = useErrorLog();\n  const [backendStatus, setBackendStatus] = useState('checking');\n  const [lastCheck, setLastCheck] = useState(null);\n\n  const checkHealth = async () => {\n    setBackendStatus('checking');\n    try {\n      const response = await fetch(`${BACKEND_URL}/health`);\n      if (response.ok) {\n        const data = await response.json();\n        setBackendStatus(data.status === 'ok' ? 'healthy' : 'unhealthy');\n      } else {\n        setBackendStatus('unhealthy');\n      }\n      setLastCheck(new Date());\n    } catch (error) {\n      console.error('Backend health check failed:', error);\n      setBackendStatus('unhealthy');\n      setLastCheck(new Date());\n    }\n  };\n\n  useEffect(() => {\n    checkHealth();\n    const interval = setInterval(checkHealth, 60000); // Check every minute\n    return () => clearInterval(interval);\n  }, []);\n\n  const recentErrors = getRecentErrors(5);\n  const criticalErrors = getCriticalErrors();\n\n  const statusIcon = {\n    healthy: <CheckCircle2 className=\"w-5 h-5 text-green-500\" />,\n    checking: <Clock className=\"w-5 h-5 text-yellow-500 animate-spin\" />,\n    unhealthy: <XCircle className=\"w-5 h-5 text-red-500\" />\n  };\n\n  const statusColor = {\n    healthy: 'bg-green-100 text-green-800 border-green-300',\n    checking: 'bg-yellow-100 text-yellow-800 border-yellow-300',\n    unhealthy: 'bg-red-100 text-red-800 border-red-300'\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-slate-100\">System Health</h2>\n        <Button \n          onClick={checkHealth} \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"bg-slate-700 border-slate-600 text-slate-200\"\n          disabled={backendStatus === 'checking'}\n        >\n          <RefreshCw className={`w-4 h-4 mr-2 ${backendStatus === 'checking' ? 'animate-spin' : ''}`} />\n          {backendStatus === 'checking' ? 'Checking...' : 'Refresh'}\n        </Button>\n      </div>\n\n      {/* System Status */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-slate-300 flex items-center gap-2\">\n              <Database className=\"w-4 h-4\" />\n              Backend Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-2\">\n              {statusIcon[backendStatus]}\n              <Badge className={statusColor[backendStatus]}>\n                {backendStatus === 'healthy' ? 'Operational' : \n                 backendStatus === 'checking' ? 'Checking...' : 'Issues Detected'}\n              </Badge>\n            </div>\n            {lastCheck && (\n              <p className=\"text-xs text-slate-400 mt-2\">\n                Last checked: {lastCheck.toLocaleTimeString()}\n              </p>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-slate-300 flex items-center gap-2\">\n              <Activity className=\"w-4 h-4\" />\n              Error Rate\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-slate-100\">\n              {errors.length}\n            </div>\n            <p className=\"text-xs text-slate-400 mt-1\">\n              errors in last hour\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-slate-300 flex items-center gap-2\">\n              <AlertCircle className=\"w-4 h-4\" />\n              Critical Issues\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-400\">\n              {criticalErrors.length}\n            </div>\n            <p className=\"text-xs text-slate-400 mt-1\">\n              require attention\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Critical Errors */}\n      {criticalErrors.length > 0 && (\n        <Alert variant=\"destructive\" className=\"bg-red-900/20 border-red-700\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertTitle>Critical Issues Detected</AlertTitle>\n          <AlertDescription>\n            {criticalErrors.length} critical error(s) require immediate attention.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Recent Errors */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-slate-100\">Recent Errors</CardTitle>\n            {errors.length > 0 && (\n              <Button onClick={clearErrors} variant=\"outline\" size=\"sm\" className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                Clear All\n              </Button>\n            )}\n          </div>\n        </CardHeader>\n        <CardContent>\n          {recentErrors.length === 0 ? (\n            <div className=\"text-center py-8 text-slate-400\">\n              <CheckCircle2 className=\"w-12 h-12 mx-auto mb-2 text-green-500\" />\n              <p>No errors logged</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {recentErrors.map((error) => (\n                <div key={error.id} className=\"p-3 bg-slate-700/50 rounded-lg border border-slate-600\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <Badge className={\n                          error.severity === 'critical' ? 'bg-red-600' :\n                          error.severity === 'warning' ? 'bg-yellow-600' :\n                          'bg-slate-600'\n                        }>\n                          {error.severity}\n                        </Badge>\n                        <span className=\"text-sm font-medium text-slate-200\">{error.component}</span>\n                      </div>\n                      <p className=\"text-sm text-slate-300\">{error.message}</p>\n                      {error.actionable && (\n                        <p className=\"text-xs text-blue-400 mt-1\">\n                          ΓåÆ {error.actionable}\n                        </p>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-slate-500\">\n                      {new Date(error.timestamp).toLocaleTimeString()}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\SystemLogsViewer.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":3,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardHeader"},"fix":{"range":[122,134],"text":""},"desc":"Remove unused variable 'CardHeader'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":3,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardTitle"},"fix":{"range":[134,145],"text":""},"desc":"Remove unused variable 'CardTitle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Filter' is defined but never used.","line":8,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"Filter"},"fix":{"range":[467,475],"text":""},"desc":"Remove unused variable 'Filter'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadLogs'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [filterLevel, filterSource, loadLogs, searchTerm]","fix":{"range":[2655,2694],"text":"[filterLevel, filterSource, loadLogs, searchTerm]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { SystemLog } from '@/api/entities';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Loader2, RefreshCw, Trash2, Search, Filter } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nconst BACKEND_URL = import.meta.env.VITE_AISHACRM_BACKEND_URL || 'http://localhost:3001';\n\nexport default function SystemLogsViewer() {\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [clearing, setClearing] = useState(false);\n  const [filterLevel, setFilterLevel] = useState('all');\n  const [filterSource, setFilterSource] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [uniqueSources, setUniqueSources] = useState([]);\n\n  const loadLogs = async () => {\n    setLoading(true);\n    try {\n      // Try backend first (for local dev with Supabase Cloud)\n      const response = await fetch(`${BACKEND_URL}/api/system/logs?tenant_id=test-tenant&limit=200`);\n      \n      if (!response.ok) {\n        throw new Error('Backend not available, trying Base44...');\n      }\n      \n      const data = await response.json();\n      let allLogs = data.data || data;\n      \n      // If backend returns empty, try Base44 as fallback\n      if (!allLogs || allLogs.length === 0) {\n        console.log('No logs from backend, trying Base44...');\n        allLogs = await SystemLog.list('-created_date', 200);\n      }\n      \n      // Extract unique sources\n      const sources = [...new Set(allLogs.map(log => log.source).filter(Boolean))];\n      setUniqueSources(sources);\n\n      // Apply filters\n      if (filterLevel !== 'all') {\n        allLogs = allLogs.filter(log => log.level === filterLevel);\n      }\n      \n      if (filterSource !== 'all') {\n        allLogs = allLogs.filter(log => log.source === filterSource);\n      }\n\n      if (searchTerm) {\n        const term = searchTerm.toLowerCase();\n        allLogs = allLogs.filter(log => \n          log.message?.toLowerCase().includes(term) ||\n          log.source?.toLowerCase().includes(term) ||\n          log.user_email?.toLowerCase().includes(term)\n        );\n      }\n\n      setLogs(allLogs);\n    } catch (error) {\n      console.error('Failed to load logs:', error);\n      toast.error('Failed to load system logs');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadLogs();\n  }, [filterLevel, filterSource, searchTerm]);\n\n  const handleClearLogs = async () => {\n    if (!confirm('Are you sure you want to delete all logs? This action cannot be undone.')) {\n      return;\n    }\n\n    setClearing(true);\n    try {\n      // Delete all logs (you might want to add a backend function for this)\n      for (const log of logs) {\n        await SystemLog.delete(log.id);\n      }\n      toast.success('All logs cleared');\n      loadLogs();\n    } catch (error) {\n      console.error('Failed to clear logs:', error);\n      toast.error('Failed to clear logs');\n    } finally {\n      setClearing(false);\n    }\n  };\n\n  const getLevelBadgeColor = (level) => {\n    switch (level) {\n      case 'ERROR': return 'bg-red-600 text-white hover:bg-red-700';\n      case 'WARNING': return 'bg-yellow-600 text-white hover:bg-yellow-700';\n      case 'INFO': return 'bg-blue-600 text-white hover:bg-blue-700';\n      case 'DEBUG': return 'bg-gray-600 text-white hover:bg-gray-700';\n      default: return 'bg-slate-600 text-white hover:bg-slate-700';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Filters */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-wrap gap-4 items-end\">\n            <div className=\"flex-1 min-w-[200px]\">\n              <label className=\"text-sm text-slate-300 mb-2 block\">Search</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400\" />\n                <Input\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  placeholder=\"Search logs...\"\n                  className=\"pl-10 bg-slate-700 border-slate-600 text-slate-200\"\n                />\n              </div>\n            </div>\n\n            <div className=\"w-[180px]\">\n              <label className=\"text-sm text-slate-300 mb-2 block\">Level</label>\n              <Select value={filterLevel} onValueChange={setFilterLevel}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"All levels\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"all\">All Levels</SelectItem>\n                  <SelectItem value=\"ERROR\">Error</SelectItem>\n                  <SelectItem value=\"WARNING\">Warning</SelectItem>\n                  <SelectItem value=\"INFO\">Info</SelectItem>\n                  <SelectItem value=\"DEBUG\">Debug</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"w-[200px]\">\n              <label className=\"text-sm text-slate-300 mb-2 block\">Source</label>\n              <Select value={filterSource} onValueChange={setFilterSource}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"All sources\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"all\">All Sources</SelectItem>\n                  {uniqueSources.map(source => (\n                    <SelectItem key={source} value={source}>{source}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              variant=\"outline\"\n              onClick={loadLogs}\n              disabled={loading}\n              className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n            >\n              {loading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : <RefreshCw className=\"w-4 h-4\" />}\n            </Button>\n\n            <Button\n              variant=\"destructive\"\n              onClick={handleClearLogs}\n              disabled={loading || clearing || logs.length === 0}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              {clearing ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Clearing...\n                </>\n              ) : (\n                <>\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Clear All\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Log Count */}\n      <div className=\"flex items-center justify-between text-sm text-slate-400\">\n        <span>{logs.length} log{logs.length !== 1 ? 's' : ''} found</span>\n        {(filterLevel !== 'all' || filterSource !== 'all' || searchTerm) && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => {\n              setFilterLevel('all');\n              setFilterSource('all');\n              setSearchTerm('');\n            }}\n            className=\"text-blue-400 hover:text-blue-300\"\n          >\n            Clear Filters\n          </Button>\n        )}\n      </div>\n\n      {/* Logs List */}\n      <div className=\"space-y-2\">\n        {loading ? (\n          <div className=\"flex items-center justify-center p-12\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n            <span className=\"ml-3 text-slate-300\">Loading logs...</span>\n          </div>\n        ) : logs.length === 0 ? (\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardContent className=\"p-12 text-center\">\n              <p className=\"text-slate-400\">No logs found</p>\n              <p className=\"text-sm text-slate-500 mt-2\">\n                Logs will appear here as events occur in the application\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          logs.map((log) => (\n            <Card key={log.id} className=\"bg-slate-800 border-slate-700 hover:border-slate-600 transition-colors\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Badge className={getLevelBadgeColor(log.level)}>\n                        {log.level}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"bg-slate-700 text-slate-300 border-slate-600\">\n                        {log.source}\n                      </Badge>\n                      <span className=\"text-xs text-slate-500\">\n                        {new Date(log.created_date).toLocaleString()}\n                      </span>\n                    </div>\n\n                    <p className=\"text-slate-200 text-sm mb-2\">{log.message}</p>\n\n                    <div className=\"flex flex-wrap gap-x-4 gap-y-1 text-xs text-slate-400\">\n                      {log.user_email && (\n                        <span>User: {log.user_email}</span>\n                      )}\n                      {log.tenant_id && (\n                        <span>Tenant: {log.tenant_id.substring(0, 8)}...</span>\n                      )}\n                    </div>\n\n                    {log.metadata && Object.keys(log.metadata).length > 0 && (\n                      <details className=\"mt-2\">\n                        <summary className=\"text-xs text-blue-400 cursor-pointer hover:text-blue-300\">\n                          Show metadata\n                        </summary>\n                        <pre className=\"mt-2 p-2 bg-slate-900 rounded text-xs text-slate-300 overflow-x-auto\">\n                          {JSON.stringify(log.metadata, null, 2)}\n                        </pre>\n                      </details>\n                    )}\n\n                    {log.stack_trace && (\n                      <details className=\"mt-2\">\n                        <summary className=\"text-xs text-red-400 cursor-pointer hover:text-red-300\">\n                          Show stack trace\n                        </summary>\n                        <pre className=\"mt-2 p-2 bg-slate-900 rounded text-xs text-red-300 overflow-x-auto\">\n                          {log.stack_trace}\n                        </pre>\n                      </details>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\TenantIntegrationSettings.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\TenantManagement.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used.","line":11,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":62,"suggestions":[{"messageId":"removeVar","data":{"varName":"AlertCircle"},"fix":{"range":[644,657],"text":""},"desc":"Remove unused variable 'AlertCircle'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'formData.country'. Either include it or remove the dependency array.","line":129,"column":6,"nodeType":"ArrayExpression","endLine":129,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [formData.geographic_focus, availableCountries, formData.country]","fix":{"range":[10548,10595],"text":"[formData.geographic_focus, availableCountries, formData.country]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'formData.major_city'. Either include it or remove the dependency array.","line":137,"column":6,"nodeType":"ArrayExpression","endLine":137,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [formData.country, availableCities, formData.major_city]","fix":{"range":[10936,10971],"text":"[formData.country, availableCities, formData.major_city]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Tenant } from '@/api/entities';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Building2, Plus, Edit, Save, X, Loader2, AlertCircle, Copy } from 'lucide-react';\nimport { toast } from \"sonner\";\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\n// Geographic data structures\nconst COUNTRIES_BY_REGION = {\n  north_america: ['United States', 'Canada', 'Mexico'],\n  europe: ['United Kingdom', 'Germany', 'France', 'Spain', 'Italy', 'Netherlands', 'Poland', 'Sweden', 'Norway', 'Denmark', 'Finland', 'Belgium', 'Austria', 'Switzerland', 'Ireland', 'Portugal', 'Greece', 'Czech Republic', 'Romania', 'Hungary'],\n  asia: ['China', 'Japan', 'India', 'South Korea', 'Singapore', 'Malaysia', 'Thailand', 'Indonesia', 'Philippines', 'Vietnam', 'Taiwan', 'Hong Kong', 'UAE', 'Saudi Arabia', 'Israel', 'Turkey'],\n  south_america: ['Brazil', 'Argentina', 'Chile', 'Colombia', 'Peru', 'Venezuela', 'Ecuador', 'Uruguay', 'Paraguay', 'Bolivia'],\n  africa: ['South Africa', 'Nigeria', 'Egypt', 'Kenya', 'Morocco', 'Ghana', 'Ethiopia', 'Tanzania', 'Uganda', 'Rwanda'],\n  oceania: ['Australia', 'New Zealand', 'Fiji', 'Papua New Guinea'],\n  global: [] // 'Global' geographic_focus means no specific country/city filter\n};\n\nconst MAJOR_CITIES_BY_COUNTRY = {\n  'United States': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose', 'Austin', 'Jacksonville', 'Fort Worth', 'Columbus', 'Charlotte', 'San Francisco', 'Indianapolis', 'Seattle', 'Denver', 'Boston', 'Miami', 'Atlanta', 'Las Vegas', 'Portland', 'Detroit'],\n  'Canada': ['Toronto', 'Montreal', 'Vancouver', 'Calgary', 'Edmonton', 'Ottawa', 'Winnipeg', 'Quebec City', 'Hamilton', 'Kitchener'],\n  'Mexico': ['Mexico City', 'Guadalajara', 'Monterrey', 'Puebla', 'Tijuana', 'Le├│n', 'Ju├írez', 'Zapopan', 'M├⌐rida', 'Canc├║n'],\n  'United Kingdom': ['London', 'Birmingham', 'Manchester', 'Glasgow', 'Liverpool', 'Edinburgh', 'Leeds', 'Bristol', 'Cardiff', 'Belfast'],\n  'Germany': ['Berlin', 'Munich', 'Hamburg', 'Cologne', 'Frankfurt', 'Stuttgart', 'D├╝sseldorf', 'Dortmund', 'Essen', 'Leipzig'],\n  'France': ['Paris', 'Marseille', 'Lyon', 'Toulouse', 'Nice', 'Nantes', 'Strasbourg', 'Montpellier', 'Bordeaux', 'Lille'],\n  'Spain': ['Madrid', 'Barcelona', 'Valencia', 'Seville', 'Zaragoza', 'M├ílaga', 'Murcia', 'Palma', 'Bilbao', 'Alicante'],\n  'Italy': ['Rome', 'Milan', 'Naples', 'Turin', 'Palermo', 'Genoa', 'Bologna', 'Florence', 'Bari', 'Venice'],\n  'Netherlands': ['Amsterdam', 'Rotterdam', 'The Hague', 'Utrecht', 'Eindhoven', 'Tilburg', 'Groningen', 'Almere', 'Breda', 'Nijmegen'],\n  'Poland': ['Warsaw', 'Krak├│w', '┼ü├│d┼║', 'Wroc┼éaw', 'Pozna┼ä', 'Gda┼äsk', 'Szczecin', 'Bydgoszcz', 'Lublin', 'Katowice'],\n  'Sweden': ['Stockholm', 'Gothenburg', 'Malm├╢', 'Uppsala', 'V├ñster├Ñs', '├ûrebro', 'Link├╢ping', 'Helsingborg'],\n  'Norway': ['Oslo', 'Bergen', 'Stavanger', 'Trondheim', 'Drammen', 'Fredrikstad', 'Kristiansand', 'Sandnes'],\n  'Denmark': ['Copenhagen', 'Aarhus', 'Odense', 'Aalborg', 'Esbjerg', 'Randers', 'Kolding', 'Horsens'],\n  'Finland': ['Helsinki', 'Espoo', 'Tampere', 'Vantaa', 'Oulu', 'Turku', 'Jyv├ñskyl├ñ', 'Lahti'],\n  'Belgium': ['Brussels', 'Antwerp', 'Ghent', 'Charleroi', 'Li├¿ge', 'Bruges', 'Namur', 'Leuven'],\n  'Austria': ['Vienna', 'Graz', 'Linz', 'Salzburg', 'Innsbruck', 'Klagenfurt', 'Villach', 'Wels'],\n  'Switzerland': ['Zurich', 'Geneva', 'Basel', 'Lausanne', 'Bern', 'Winterthur', 'Lucerne', 'St. Gallen'],\n  'Ireland': ['Dublin', 'Cork', 'Limerick', 'Galway', 'Waterford', 'Drogheda', 'Dundalk', 'Swords'],\n  'Portugal': ['Lisbon', 'Porto', 'Braga', 'Funchal', 'Coimbra', 'Set├║bal', 'Almada', 'Aveiro'],\n  'Greece': ['Athens', 'Thessaloniki', 'Patras', 'Heraklion', 'Larissa', 'Volos', 'Rhodes', 'Ioannina'],\n  'Czech Republic': ['Prague', 'Brno', 'Ostrava', 'Plze┼ê', 'Liberec', 'Olomouc', '─îesk├⌐ Bud─¢jovice', 'Hradec Kr├ílov├⌐'],\n  'Romania': ['Bucharest', 'Cluj-Napoca', 'Timi╚Öoara', 'Ia╚Öi', 'Constan╚¢a', 'Craiova', 'Bra╚Öov', 'Gala╚¢i'],\n  'Hungary': ['Budapest', 'Debrecen', 'Szeged', 'Miskolc', 'P├⌐cs', 'Gy┼ær', 'Ny├¡regyh├íza', 'Kecskem├⌐t'],\n  'China': ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu', 'Hangzhou', 'Wuhan', 'Xi\\'an', 'Chongqing', 'Tianjin'],\n  'Japan': ['Tokyo', 'Osaka', 'Yokohama', 'Nagoya', 'Sapporo', 'Fukuoka', 'Kobe', 'Kyoto', 'Kawasaki', 'Saitama'],\n  'India': ['Mumbai', 'Delhi', 'Bangalore', 'Hyderabad', 'Chennai', 'Kolkata', 'Pune', 'Ahmedabad', 'Jaipur', 'Lucknow'],\n  'South Korea': ['Seoul', 'Busan', 'Incheon', 'Daegu', 'Daejeon', 'Gwangju', 'Suwon', 'Ulsan', 'Changwon', 'Goyang'],\n  'Singapore': ['Singapore'],\n  'Malaysia': ['Kuala Lumpur', 'George Town', 'Ipoh', 'Johor Bahru', 'Malacca', 'Kota Kinabalu', 'Shah Alam', 'Petaling Jaya'],\n  'Thailand': ['Bangkok', 'Chiang Mai', 'Phuket', 'Pattaya', 'Hat Yai', 'Nakhon Ratchasima', 'Khon Kaen', 'Udon Thani'],\n  'Indonesia': ['Jakarta', 'Surabaya', 'Bandung', 'Medan', 'Semarang', 'Makassar', 'Palembang', 'Tangerang'],\n  'Philippines': ['Manila', 'Quezon City', 'Davao', 'Cebu City', 'Zamboanga', 'Antipolo', 'Pasig', 'Cagayan de Oro'],\n  'Vietnam': ['Ho Chi Minh City', 'Hanoi', 'Da Nang', 'Hai Phong', 'Can Tho', 'Bien Hoa', 'Nha Trang', 'Hue'],\n  'Taiwan': ['Taipei', 'Kaohsiung', 'Taichung', 'Tainan', 'Hsinchu', 'Taoyuan', 'Keelung', 'Chiayi'],\n  'Hong Kong': ['Hong Kong'],\n  'UAE': ['Dubai', 'Abu Dhabi', 'Sharjah', 'Al Ain', 'Ajman', 'Ras Al Khaimah', 'Fujairah', 'Umm Al Quwain'],\n  'Saudi Arabia': ['Riyadh', 'Jeddah', 'Mecca', 'Medina', 'Dammam', 'Khobar', 'Tabuk', 'Buraidah'],\n  'Israel': ['Tel Aviv', 'Jerusalem', 'Haifa', 'Rishon LeZion', 'Petah Tikva', 'Ashdod', 'Netanya', 'Beersheba'],\n  'Turkey': ['Istanbul', 'Ankara', 'Izmir', 'Bursa', 'Adana', 'Gaziantep', 'Konya', 'Antalya'],\n  'Brazil': ['S├úo Paulo', 'Rio de Janeiro', 'Bras├¡lia', 'Salvador', 'Fortaleza', 'Belo Horizonte', 'Manaus', 'Curitiba', 'Recife', 'Porto Alegre'],\n  'Argentina': ['Buenos Aires', 'C├│rdoba', 'Rosario', 'Mendoza', 'San Miguel de Tucum├ín', 'La Plata', 'Mar del Plata', 'Salta'],\n  'Chile': ['Santiago', 'Valpara├¡so', 'Concepci├│n', 'La Serena', 'Antofagasta', 'Temuco', 'Rancagua', 'Talca'],\n  'Colombia': ['Bogot├í', 'Medell├¡n', 'Cali', 'Barranquilla', 'Cartagena', 'C├║cuta', 'Bucaramanga', 'Pereira'],\n  'Peru': ['Lima', 'Arequipa', 'Trujillo', 'Chiclayo', 'Piura', 'Iquitos', 'Cusco', 'Huancayo'],\n  'Venezuela': ['Caracas', 'Maracaibo', 'Valencia', 'Barquisimeto', 'Maracay', 'Ciudad Guayana', 'Barcelona', 'Matur├¡n'],\n  'Ecuador': ['Guayaquil', 'Quito', 'Cuenca', 'Santo Domingo', 'Machala', 'Manta', 'Portoviejo', 'Loja'],\n  'Uruguay': ['Montevideo', 'Salto', 'Paysand├║', 'Las Piedras', 'Rivera', 'Maldonado', 'Tacuaremb├│', 'Melo'],\n  'Paraguay': ['Asunci├│n', 'Ciudad del Este', 'San Lorenzo', 'Luque', 'Capiat├í', 'Lambar├⌐', 'Fernando de la Mora', 'Limpio'],\n  'Bolivia': ['La Paz', 'Santa Cruz', 'Cochabamba', 'Sucre', 'Oruro', 'Tarija', 'Potos├¡', 'Trinidad'],\n  'South Africa': ['Johannesburg', 'Cape Town', 'Durban', 'Pretoria', 'Port Elizabeth', 'Bloemfontein', 'East London', 'Nelspruit'],\n  'Nigeria': ['Lagos', 'Kano', 'Ibadan', 'Abuja', 'Port Harcourt', 'Benin City', 'Kaduna', 'Maiduguri'],\n  'Egypt': ['Cairo', 'Alexandria', 'Giza', 'Shubra El Kheima', 'Port Said', 'Suez', 'Luxor', 'Aswan'],\n  'Kenya': ['Nairobi', 'Mombasa', 'Kisumu', 'Nakuru', 'Eldoret', 'Ruiru', 'Kikuyu', 'Kangundo-Tala'],\n  'Morocco': ['Casablanca', 'Rabat', 'Fez', 'Marrakesh', 'Agadir', 'Tangier', 'Mekn├¿s', 'Oujda'],\n  'Ghana': ['Accra', 'Kumasi', 'Tamale', 'Takoradi', 'Ashaiman', 'Tema', 'Teshi Old Town', 'Cape Coast'],\n  'Ethiopia': ['Addis Ababa', 'Dire Dawa', 'Mek\\'ele', 'Gondar', 'Bahir Dar', 'Hawassa', 'Dessie', 'Jimma'],\n  'Tanzania': ['Dar es Salaam', 'Mwanza', 'Arusha', 'Dodoma', 'Mbeya', 'Morogoro', 'Tanga', 'Zanzibar City'],\n  'Uganda': ['Kampala', 'Gulu', 'Lira', 'Mbarara', 'Jinja', 'Bwizibwera', 'Mbale', 'Mukono'],\n  'Rwanda': ['Kigali', 'Butare', 'Gitarama', 'Ruhengeri', 'Gisenyi', 'Byumba', 'Cyangugu', 'Kibuye'],\n  'Australia': ['Sydney', 'Melbourne', 'Brisbane', 'Perth', 'Adelaide', 'Gold Coast', 'Canberra', 'Newcastle', 'Wollongong', 'Hobart'],\n  'New Zealand': ['Auckland', 'Wellington', 'Christchurch', 'Hamilton', 'Tauranga', 'Dunedin', 'Palmerston North', 'Napier'],\n  'Fiji': ['Suva', 'Lautoka', 'Nadi', 'Labasa', 'Ba', 'Sigatoka', 'Tavua', 'Nausori'],\n  'Papua New Guinea': ['Port Moresby', 'Lae', 'Arawa', 'Mount Hagen', 'Madang', 'Wewak', 'Goroka', 'Popondetta']\n};\n\nconst TenantForm = ({ tenant, onSave, onCancel }) => {\n  const [formData, setFormData] = useState({\n    name: tenant?.name || '',\n    domain: tenant?.domain || '',\n    logo_url: tenant?.logo_url || '',\n    primary_color: tenant?.primary_color || '#3b82f6',\n    accent_color: tenant?.accent_color || '#f59e0b',\n    industry: tenant?.industry || 'other',\n    business_model: tenant?.business_model || 'b2b',\n    geographic_focus: tenant?.geographic_focus || 'north_america',\n    country: tenant?.country || '',\n    major_city: tenant?.major_city || '',\n    elevenlabs_agent_id: tenant?.elevenlabs_agent_id || '',\n    display_order: tenant?.display_order || 0\n  });\n  const [saving, setSaving] = useState(false);\n\n  // Filter countries based on geographic focus\n  const availableCountries = formData.geographic_focus === 'global'\n    ? []\n    : COUNTRIES_BY_REGION[formData.geographic_focus] || [];\n\n  // Filter cities based on selected country\n  const availableCities = formData.country\n    ? MAJOR_CITIES_BY_COUNTRY[formData.country] || []\n    : [];\n\n  // Reset country and city when geographic focus changes\n  useEffect(() => {\n    // If geographic focus is 'global', country and city should be cleared\n    if (formData.geographic_focus === 'global') {\n      setFormData(prev => ({ ...prev, country: '', major_city: '' }));\n    }\n    // If a country is selected but is no longer valid for the new geographic focus, clear it\n    else if (formData.country && !availableCountries.includes(formData.country)) {\n      setFormData(prev => ({ ...prev, country: '', major_city: '' }));\n    }\n  }, [formData.geographic_focus, availableCountries]); // Added availableCountries to dependency array\n\n  // Reset city when country changes\n  useEffect(() => {\n    // If a city is selected but is no longer valid for the new country, clear it\n    if (formData.major_city && !availableCities.includes(formData.major_city)) {\n      setFormData(prev => ({ ...prev, major_city: '' }));\n    }\n  }, [formData.country, availableCities]); // Added availableCities to dependency array\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setSaving(true);\n    try {\n      await onSave(formData);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const copyToClipboard = (text, label) => {\n    navigator.clipboard.writeText(text);\n    toast.success(`${label} copied to clipboard`);\n  };\n\n  return (\n    <Dialog open={!!tenant} onOpenChange={onCancel}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{tenant?.id ? 'Edit Tenant' : 'Create New Tenant'}</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"name\">Tenant Name *</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData({...formData, name: e.target.value})}\n                placeholder=\"Acme Corp\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"domain\">Domain</Label>\n              <Input\n                id=\"domain\"\n                value={formData.domain}\n                onChange={(e) => setFormData({...formData, domain: e.target.value})}\n                placeholder=\"acme.com\"\n              />\n            </div>\n          </div>\n\n          {tenant?.id && (\n            <div className=\"bg-blue-900/20 p-3 rounded border border-blue-700/50\">\n              <Label className=\"text-blue-300 font-medium\">Tenant ID</Label>\n              <div className=\"flex items-center gap-2 mt-1\">\n                <Input\n                  readOnly\n                  value={tenant.id}\n                  className=\"bg-slate-800 border-slate-700 text-cyan-300 font-mono text-sm\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => copyToClipboard(tenant.id, 'Tenant ID')}\n                >\n                  <Copy className=\"w-4 h-4 text-slate-400\" />\n                </Button>\n              </div>\n              <p className=\"text-xs text-blue-400 mt-1\">Use this ID in your ElevenLabs webhook URL</p>\n            </div>\n          )}\n\n          <div>\n            <Label htmlFor=\"elevenlabs_agent_id\">ElevenLabs Agent ID</Label>\n            <Input\n              id=\"elevenlabs_agent_id\"\n              value={formData.elevenlabs_agent_id}\n              onChange={(e) => setFormData({...formData, elevenlabs_agent_id: e.target.value})}\n              placeholder=\"se8ujo4HwtLbAg1GMvuX\"\n            />\n            <p className=\"text-xs text-slate-400 mt-1\">The unique Agent ID from your ElevenLabs conversational AI</p>\n          </div>\n\n          <div>\n            <Label htmlFor=\"logo_url\">Logo URL</Label>\n            <Input\n              id=\"logo_url\"\n              value={formData.logo_url}\n              onChange={(e) => setFormData({...formData, logo_url: e.target.value})}\n              placeholder=\"https://example.com/logo.png\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"primary_color\">Primary Color</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  type=\"color\"\n                  value={formData.primary_color}\n                  onChange={(e) => setFormData({...formData, primary_color: e.target.value})}\n                  className=\"w-16 h-10\"\n                />\n                <Input\n                  value={formData.primary_color}\n                  onChange={(e) => setFormData({...formData, primary_color: e.target.value})}\n                  placeholder=\"#3b82f6\"\n                  className=\"flex-1\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"accent_color\">Accent Color</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  type=\"color\"\n                  value={formData.accent_color}\n                  onChange={(e) => setFormData({...formData, accent_color: e.target.value})}\n                  className=\"w-16 h-10\"\n                />\n                <Input\n                  value={formData.accent_color}\n                  onChange={(e) => setFormData({...formData, accent_color: e.target.value})}\n                  placeholder=\"#f59e0b\"\n                  className=\"flex-1\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"industry\">Industry</Label>\n              <Select value={formData.industry} onValueChange={(value) => setFormData({...formData, industry: value})}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"accounting_and_finance\">Accounting & Finance</SelectItem>\n                  <SelectItem value=\"aerospace_and_defense\">Aerospace & Defense</SelectItem>\n                  <SelectItem value=\"agriculture_and_farming\">Agriculture & Farming</SelectItem>\n                  <SelectItem value=\"automotive_and_transportation\">Automotive & Transportation</SelectItem>\n                  <SelectItem value=\"banking_and_financial_services\">Banking & Financial Services</SelectItem>\n                  <SelectItem value=\"biotechnology_and_pharmaceuticals\">Biotechnology & Pharmaceuticals</SelectItem>\n                  <SelectItem value=\"chemicals_and_materials\">Chemicals & Materials</SelectItem>\n                  <SelectItem value=\"construction_and_engineering\">Construction & Engineering</SelectItem>\n                  <SelectItem value=\"consulting_and_professional_services\">Consulting & Professional Services</SelectItem>\n                  <SelectItem value=\"consumer_goods_and_retail\">Consumer Goods & Retail</SelectItem>\n                  <SelectItem value=\"cybersecurity\">Cybersecurity</SelectItem>\n                  <SelectItem value=\"data_analytics_and_business_intelligence\">Data Analytics & Business Intelligence</SelectItem>\n                  <SelectItem value=\"education_and_training\">Education & Training</SelectItem>\n                  <SelectItem value=\"energy_oil_and_gas\">Energy, Oil & Gas</SelectItem>\n                  <SelectItem value=\"entertainment_and_media\">Entertainment & Media</SelectItem>\n                  <SelectItem value=\"environmental_services\">Environmental Services</SelectItem>\n                  <SelectItem value=\"event_management\">Event Management</SelectItem>\n                  <SelectItem value=\"fashion_and_apparel\">Fashion & Apparel</SelectItem>\n                  <SelectItem value=\"food_and_beverage\">Food & Beverage</SelectItem>\n                  <SelectItem value=\"franchising\">Franchising</SelectItem>\n                  <SelectItem value=\"gaming_and_esports\">Gaming & Esports</SelectItem>\n                  <SelectItem value=\"government_and_public_sector\">Government & Public Sector</SelectItem>\n                  <SelectItem value=\"green_energy_and_solar\">Green Energy & Solar</SelectItem>\n                  <SelectItem value=\"healthcare_and_medical_services\">Healthcare & Medical Services</SelectItem>\n                  <SelectItem value=\"hospitality_and_tourism\">Hospitality & Tourism</SelectItem>\n                  <SelectItem value=\"human_resources_and_staffing\">Human Resources & Staffing</SelectItem>\n                  <SelectItem value=\"information_technology_and_software\">Information Technology & Software</SelectItem>\n                  <SelectItem value=\"insurance\">Insurance</SelectItem>\n                  <SelectItem value=\"interior_design_and_architecture\">Interior Design & Architecture</SelectItem>\n                  <SelectItem value=\"legal_services\">Legal Services</SelectItem>\n                  <SelectItem value=\"logistics_and_supply_chain\">Logistics & Supply Chain</SelectItem>\n                  <SelectItem value=\"manufacturing_industrial\">Manufacturing (Industrial)</SelectItem>\n                  <SelectItem value=\"marketing_advertising_and_pr\">Marketing, Advertising & PR</SelectItem>\n                  <SelectItem value=\"mining_and_metals\">Mining & Metals</SelectItem>\n                  <SelectItem value=\"nonprofit_and_ngos\">Nonprofit & NGOs</SelectItem>\n                  <SelectItem value=\"packaging_and_printing\">Packaging & Printing</SelectItem>\n                  <SelectItem value=\"pharmaceuticals\">Pharmaceuticals</SelectItem>\n                  <SelectItem value=\"real_estate_and_property_management\">Real Estate & Property Management</SelectItem>\n                  <SelectItem value=\"renewable_energy\">Renewable Energy</SelectItem>\n                  <SelectItem value=\"research_and_development\">Research & Development</SelectItem>\n                  <SelectItem value=\"retail_and_wholesale\">Retail & Wholesale</SelectItem>\n                  <SelectItem value=\"robotics_and_automation\">Robotics & Automation</SelectItem>\n                  <SelectItem value=\"saas_and_cloud_services\">SaaS & Cloud Services</SelectItem>\n                  <SelectItem value=\"security_services\">Security Services</SelectItem>\n                  <SelectItem value=\"social_media_and_influencer\">Social Media & Influencer</SelectItem>\n                  <SelectItem value=\"sports_and_recreation\">Sports & Recreation</SelectItem>\n                  <SelectItem value=\"telecommunications\">Telecommunications</SelectItem>\n                  <SelectItem value=\"textiles_and_apparel\">Textiles & Apparel</SelectItem>\n                  <SelectItem value=\"transportation_and_delivery\">Transportation & Delivery</SelectItem>\n                  <SelectItem value=\"utilities_water_and_waste\">Utilities (Water & Waste)</SelectItem>\n                  <SelectItem value=\"veterinary_services\">Veterinary Services</SelectItem>\n                  <SelectItem value=\"warehousing_and_distribution\">Warehousing & Distribution</SelectItem>\n                  <SelectItem value=\"wealth_management\">Wealth Management</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"business_model\">Business Model</Label>\n              <Select value={formData.business_model} onValueChange={(value) => setFormData({...formData, business_model: value})}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"b2b\">B2B</SelectItem>\n                  <SelectItem value=\"b2c\">B2C</SelectItem>\n                  <SelectItem value=\"hybrid\">Hybrid</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"geographic_focus\">Geographic Focus</Label>\n              <Select value={formData.geographic_focus} onValueChange={(value) => setFormData({...formData, geographic_focus: value})}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"north_america\">North America</SelectItem>\n                  <SelectItem value=\"europe\">Europe</SelectItem>\n                  <SelectItem value=\"asia\">Asia</SelectItem>\n                  <SelectItem value=\"south_america\">South America</SelectItem>\n                  <SelectItem value=\"africa\">Africa</SelectItem>\n                  <SelectItem value=\"oceania\">Oceania</SelectItem>\n                  <SelectItem value=\"global\">Global</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Country and Major City - only show if not Global */}\n          {formData.geographic_focus !== 'global' && (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"country\">Country</Label>\n                <Select\n                  value={formData.country}\n                  onValueChange={(value) => setFormData({...formData, country: value, major_city: ''})} // Clear city when country changes\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select country\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"max-h-[300px]\">\n                    {availableCountries.length > 0 ? (\n                      availableCountries.map(country => (\n                        <SelectItem key={country} value={country}>{country}</SelectItem>\n                      ))\n                    ) : (\n                      <SelectItem value={null} disabled>No countries available for this region</SelectItem>\n                    )}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"major_city\">Major City</Label>\n                <Select\n                  value={formData.major_city}\n                  onValueChange={(value) => setFormData({...formData, major_city: value})}\n                  disabled={!formData.country || availableCities.length === 0} // Disable if no country selected or no cities available\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={formData.country ? (availableCities.length > 0 ? \"Select city\" : \"No major cities listed for this country\") : \"Select country first\"} />\n                  </SelectTrigger>\n                  <SelectContent className=\"max-h-[300px]\">\n                    {availableCities.length > 0 ? (\n                      availableCities.map(city => (\n                        <SelectItem key={city} value={city}>{city}</SelectItem>\n                      ))\n                    ) : (\n                      <SelectItem value={null} disabled>No major cities listed</SelectItem>\n                    )}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n              <X className=\"w-4 h-4 mr-2\" />\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={saving}>\n              {saving ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : <Save className=\"w-4 h-4 mr-2\" />}\n              {saving ? 'Saving...' : 'Save Tenant'}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default function TenantManagement() {\n  const [tenants, setTenants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [editingTenant, setEditingTenant] = useState(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n\n  const loadTenants = async () => {\n    try {\n      const fetchedTenants = await Tenant.list();\n      setTenants(fetchedTenants.sort((a, b) => (a.display_order || 0) - (b.display_order || 0)));\n    } catch (error) {\n      console.error('Failed to load tenants:', error);\n      toast.error('Failed to load tenants');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTenants();\n  }, []);\n\n  const handleSave = async (formData) => {\n    try {\n      if (editingTenant) {\n        await Tenant.update(editingTenant.id, formData);\n        toast.success('Tenant updated successfully');\n      } else {\n        await Tenant.create(formData);\n        toast.success('Tenant created successfully');\n      }\n      setEditingTenant(null);\n      setShowCreateDialog(false);\n      loadTenants();\n    } catch (error) {\n      console.error('Failed to save tenant:', error);\n      toast.error('Failed to save tenant');\n    }\n  };\n\n  const handleCancel = () => {\n    setEditingTenant(null);\n    setShowCreateDialog(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n        <span className=\"ml-3 text-slate-400\">Loading tenants...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-slate-100\">Client Organizations</h3>\n          <p className=\"text-sm text-slate-400\">Manage your client tenants and their AI agent configurations</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)} className=\"bg-blue-600 hover:bg-blue-700\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Tenant\n        </Button>\n      </div>\n\n      {tenants.length === 0 ? (\n        <Alert className=\"bg-slate-800 border-slate-700\">\n          <Building2 className=\"h-4 w-4 text-slate-400\" />\n          <AlertDescription className=\"text-slate-300\">\n            No tenants configured yet. Create your first client organization to get started.\n          </AlertDescription>\n        </Alert>\n      ) : (\n        <div className=\"bg-slate-800 border border-slate-700 rounded-lg overflow-hidden\">\n          <Table>\n            <TableHeader>\n              <TableRow className=\"border-slate-700\">\n                <TableHead className=\"text-slate-300\">Name</TableHead>\n                <TableHead className=\"text-slate-300\">Industry</TableHead>\n                <TableHead className=\"text-slate-300\">Location</TableHead> {/* New column */}\n                <TableHead className=\"text-slate-300\">AI Agent</TableHead>\n                <TableHead className=\"text-slate-300\">Business Model</TableHead>\n                <TableHead className=\"text-slate-300\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {tenants.map((tenant) => (\n                <TableRow key={tenant.id} className=\"border-slate-700\">\n                  <TableCell>\n                    <div className=\"flex items-center gap-3\">\n                      {tenant.logo_url ? (\n                        <img src={tenant.logo_url} alt={tenant.name} className=\"w-8 h-8 rounded object-contain bg-white\" />\n                      ) : (\n                        <div className=\"w-8 h-8 bg-slate-700 rounded flex items-center justify-center\">\n                          <Building2 className=\"w-4 h-4 text-slate-400\" />\n                        </div>\n                      )}\n                      <div>\n                        <p className=\"font-medium text-slate-200\">{tenant.name}</p>\n                        {tenant.domain && (\n                          <p className=\"text-xs text-slate-500\">{tenant.domain}</p>\n                        )}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"text-slate-300 border-slate-600\">\n                      {tenant.industry?.replace(/_/g, ' ')}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm text-slate-300\">\n                      {tenant.major_city && tenant.country ? (\n                        <div>\n                          <p className=\"font-medium\">{tenant.major_city}</p>\n                          <p className=\"text-xs text-slate-500\">{tenant.country}</p>\n                        </div>\n                      ) : tenant.country ? (\n                        <p>{tenant.country}</p>\n                      ) : tenant.geographic_focus && tenant.geographic_focus !== 'global' ? (\n                        <p className=\"text-slate-500\">{tenant.geographic_focus.replace(/_/g, ' ')}</p>\n                      ) : (\n                        <p className=\"text-slate-500\">Global</p>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {tenant.elevenlabs_agent_id ? (\n                      <Badge className=\"bg-green-900/50 text-green-300 border-green-700\">\n                        Configured\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"text-orange-300 border-orange-600\">\n                        Not Set\n                      </Badge>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"text-slate-300 border-slate-600\">\n                      {tenant.business_model?.toUpperCase()}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setEditingTenant(tenant)}\n                      className=\"text-slate-400 hover:text-slate-200\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      )}\n\n      {(editingTenant || showCreateDialog) && (\n        <TenantForm\n          tenant={editingTenant || {}}\n          onSave={handleSave}\n          onCancel={handleCancel}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\TestDataManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":102,"column":95,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4071,4231],"text":" During development, always create test records with the &quot;Test Data\" \n            checkbox enabled. This makes cleanup much easier before going live.\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4071,4231],"text":" During development, always create test records with the &ldquo;Test Data\" \n            checkbox enabled. This makes cleanup much easier before going live.\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4071,4231],"text":" During development, always create test records with the &#34;Test Data\" \n            checkbox enabled. This makes cleanup much easier before going live.\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4071,4231],"text":" During development, always create test records with the &rdquo;Test Data\" \n            checkbox enabled. This makes cleanup much easier before going live.\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":102,"column":105,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4071,4231],"text":" During development, always create test records with the \"Test Data&quot; \n            checkbox enabled. This makes cleanup much easier before going live.\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4071,4231],"text":" During development, always create test records with the \"Test Data&ldquo; \n            checkbox enabled. This makes cleanup much easier before going live.\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4071,4231],"text":" During development, always create test records with the \"Test Data&#34; \n            checkbox enabled. This makes cleanup much easier before going live.\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4071,4231],"text":" During development, always create test records with the \"Test Data&rdquo; \n            checkbox enabled. This makes cleanup much easier before going live.\n          "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Trash2, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { cleanupTestRecords } from \"@/api/functions\";\nimport { useApiManager } from \"../shared/ApiManager\";\n\nexport default function TestDataManager() {\n  const [cleaning, setCleaning] = useState(false);\n  const [lastCleanup, setLastCleanup] = useState(null);\n  const { clearCache } = useApiManager();\n\n  const handleCleanup = async () => {\n    if (!confirm(\"Are you sure you want to delete ALL test data? This action cannot be undone.\")) {\n      return;\n    }\n\n    setCleaning(true);\n    try {\n      const result = await cleanupTestRecords();\n      console.log(\"Cleanup result:\", result);\n\n      // Clear the frontend cache to force re-fetching on other pages\n      clearCache();\n      console.log(\"Frontend API cache cleared.\");\n\n      setLastCleanup(new Date().toISOString());\n      toast.success(\"Test data cleaned up successfully! Dashboard stats will refresh on next load.\");\n\n    } catch (error) {\n      console.error(\"Cleanup failed:\", error);\n      toast.error(\"Failed to cleanup test data. Please try again.\");\n    } finally {\n      setCleaning(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n          <Trash2 className=\"w-6 h-6 text-orange-600\" />\n          Test Data Management\n        </CardTitle>\n        <CardDescription className=\"text-slate-400\">\n          Cleanup test records from your system to ensure data accuracy for production.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Alert variant=\"destructive\" className=\"bg-red-900/30 border-red-700/50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-400\" />\n          <AlertDescription className=\"text-red-500 text-sm [&_p]:leading-relaxed\">\n            <strong>Production Deployment Warning:</strong> Before publishing your app to production, \n            make sure to clean up all test data. Test data can confuse real users and affect analytics.\n          </AlertDescription>\n        </Alert>\n\n        <div className=\"space-y-4\">\n          <div>\n            <h3 className=\"font-semibold mb-2 text-slate-200\">What gets cleaned up:</h3>\n            <ul className=\"list-disc list-inside text-sm text-slate-400 space-y-1\">\n              <li>All contacts marked as test data</li>\n              <li>All accounts marked as test data</li>\n              <li>All leads marked as test data</li>\n              <li>All opportunities marked as test data</li>\n              <li>All activities marked as test data</li>\n              <li>Associated notes and documents</li>\n            </ul>\n          </div>\n\n          {lastCleanup && (\n            <Alert className=\"bg-green-900/30 border-green-700/50\">\n              <CheckCircle className=\"h-4 w-4 text-green-400\" />\n              <AlertDescription className=\"text-green-300\">\n                Last cleanup performed: {new Date(lastCleanup).toLocaleString()}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <Button\n            onClick={handleCleanup}\n            disabled={cleaning}\n            variant=\"destructive\"\n            className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n          >\n            {cleaning ? (\n              <>\n                <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n                Cleaning up test data...\n              </>\n            ) : (\n              <>\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Clean Up All Test Data\n              </>\n            )}\n          </Button>\n\n          <div className=\"text-xs text-slate-400 bg-slate-700/50 p-3 rounded border border-slate-600\">\n            <strong>Pro Tip:</strong> During development, always create test records with the \"Test Data\" \n            checkbox enabled. This makes cleanup much easier before going live.\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\TimezoneSettings.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":53,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { User } from \"@/api/entities\";\nimport { Loader2, Save, Globe } from \"lucide-react\";\n\nconst COMMON_TIMEZONES = [\n  { value: 'America/New_York', label: 'Eastern Time (US & Canada)' },\n  { value: 'America/Chicago', label: 'Central Time (US & Canada)' },\n  { value: 'America/Denver', label: 'Mountain Time (US & Canada)' },\n  { value: 'America/Los_Angeles', label: 'Pacific Time (US & Canada)' },\n  { value: 'America/Phoenix', label: 'Arizona' },\n  { value: 'America/Anchorage', label: 'Alaska' },\n  { value: 'Pacific/Honolulu', label: 'Hawaii' },\n  { value: 'Europe/London', label: 'London' },\n  { value: 'Europe/Paris', label: 'Paris' },\n  { value: 'Europe/Berlin', label: 'Berlin' },\n  { value: 'Asia/Tokyo', label: 'Tokyo' },\n  { value: 'Asia/Shanghai', label: 'Shanghai' },\n  { value: 'Asia/Dubai', label: 'Dubai' },\n  { value: 'Australia/Sydney', label: 'Sydney' },\n];\n\nexport default function TimezoneSettings({ user, onUpdate }) {\n  const [settings, setSettings] = useState({\n    timezone: 'America/New_York',\n    date_format: 'MM/dd/yyyy',\n    time_format: '12h'\n  });\n  const [saving, setSaving] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    if (user) {\n      setSettings({\n        timezone: user.timezone || 'America/New_York',\n        date_format: user.date_format || 'MM/dd/yyyy',\n        time_format: user.time_format || '12h'\n      });\n    }\n  }, [user]);\n\n  const handleSave = async () => {\n    setSaving(true);\n    try {\n      await User.updateMyUserData(settings);\n      setMessage(\"Settings saved successfully!\");\n      setTimeout(() => setMessage(\"\"), 3000);\n      if (onUpdate) onUpdate();\n    } catch (error) {\n      setMessage(\"Failed to save settings\");\n      setTimeout(() => setMessage(\"\"), 3000);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {message && (\n        <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n          <AlertDescription className=\"text-blue-300\">{message}</AlertDescription>\n        </Alert>\n      )}\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Globe className=\"w-5 h-5 text-blue-400\" />\n            Regional Settings\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Configure your timezone and date/time display preferences\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label className=\"text-slate-200\">Timezone</Label>\n            <Select\n              value={settings.timezone}\n              onValueChange={(value) => setSettings({ ...settings, timezone: value })}\n            >\n              <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                <SelectValue placeholder=\"Select timezone\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-700\">\n                {COMMON_TIMEZONES.map(tz => (\n                  <SelectItem key={tz.value} value={tz.value} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">\n                    {tz.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label className=\"text-slate-200\">Date Format</Label>\n            <Select\n              value={settings.date_format}\n              onValueChange={(value) => setSettings({ ...settings, date_format: value })}\n            >\n              <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                <SelectValue placeholder=\"Select date format\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-700\">\n                <SelectItem value=\"MM/dd/yyyy\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">MM/dd/yyyy (US)</SelectItem>\n                <SelectItem value=\"dd/MM/yyyy\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">dd/MM/yyyy (UK/EU)</SelectItem>\n                <SelectItem value=\"yyyy-MM-dd\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">yyyy-MM-dd (ISO)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label className=\"text-slate-200\">Time Format</Label>\n            <Select\n              value={settings.time_format}\n              onValueChange={(value) => setSettings({ ...settings, time_format: value })}\n            >\n              <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                <SelectValue placeholder=\"Select time format\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-700\">\n                <SelectItem value=\"12h\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">12-hour (1:30 PM)</SelectItem>\n                <SelectItem value=\"24h\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">24-hour (13:30)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex justify-end pt-4\">\n            <Button\n              onClick={handleSave}\n              disabled={saving}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              {saving ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : <Save className=\"w-4 h-4 mr-2\" />}\n              Save Settings\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\UserDetailPanel.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\UserInfo.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { User } from \"@/api/entities\";\nimport { User as UserIcon, Loader2, RefreshCw, ShieldCheck } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { cleanupUserData } from \"@/api/functions\";\n\nexport default function UserInfo() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [cleaning, setCleaning] = useState(false);\n\n  useEffect(() => {\n    loadCurrentUser();\n  }, []);\n\n  const loadCurrentUser = async () => {\n    setLoading(true);\n    try {\n      const user = await User.me();\n      setCurrentUser(user);\n    } catch (error) {\n      console.error(\"Error loading user:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCleanupUserData = async () => {\n    if (!confirm(\"This will reset your custom branding and permission settings to fix display issues. Your role will NOT be changed. Continue?\")) {\n      return;\n    }\n\n    setCleaning(true);\n    try {\n      const response = await cleanupUserData();\n      const result = response.data;\n\n      if (result.status === 'success') {\n        alert(\"User data cleaned successfully! Please refresh the page.\");\n        loadCurrentUser();\n      } else {\n        alert(\"Error cleaning user data: \" + result.message);\n      }\n    } catch (error) {\n      console.error(\"Error calling cleanup function:\", error);\n      const errorMessage = error.response?.data?.message || error.message || \"An unknown error occurred.\";\n      alert(\"Error cleaning user data: \" + errorMessage);\n    } finally {\n      setCleaning(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-8 text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4 text-slate-400\" />\n          <p className=\"text-slate-300\">Loading Your Profile...</p>\n        </CardContent>\n      </Card>);\n\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <UserIcon className=\"w-5 h-5 text-blue-400\" />\n            My Profile\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <strong className=\"text-slate-200\">Name:</strong> \n            <span className=\"text-slate-300 ml-2\">{currentUser?.full_name || \"Not set\"}</span>\n          </div>\n          <div>\n            <strong className=\"text-slate-200\">Email:</strong> \n            <span className=\"text-slate-300 ml-2\">{currentUser?.email || \"Not set\"}</span>\n          </div>\n          <div>\n            <strong className=\"text-slate-200\">Role:</strong> \n            <Badge variant=\"destructive\" className=\"ml-2 capitalize bg-red-600 text-white hover:bg-red-700\">\n              {currentUser?.role === 'power-user' ? 'Power User' : currentUser?.role || 'user'}\n            </Badge>\n          </div>\n          \n          {currentUser?.role === 'admin' &&\n          <Alert variant=\"default\" className=\"bg-green-900/30 border-green-700/50\">\n                <ShieldCheck className=\"h-4 w-4 text-green-400\" />\n                <AlertDescription className=\"text-emerald-600 text-sm [&_p]:leading-relaxed\">\n                    <strong>You are the App Owner.</strong> Your Admin role is protected and gives you full control over the CRM. You can assign Power-User and User roles to your team members.\n                </AlertDescription>\n            </Alert>\n          }\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n            <CardTitle className=\"text-slate-100\">Data Maintenance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n            <RefreshCw className=\"h-4 w-4 text-blue-400\" />\n            <AlertDescription className=\"text-blue-300\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-blue-600\">Fix display issues or errors in the base44 dashboard by cleaning your user data:</span>\n                <Button\n                  onClick={handleCleanupUserData}\n                  size=\"sm\"\n                  disabled={cleaning}\n                  className=\"bg-blue-600 hover:bg-blue-700 whitespace-nowrap\">\n\n                  {cleaning ? <Loader2 className=\"w-4 h-4 animate-spin mr-2\" /> : <RefreshCw className=\"w-4 h-4 mr-2\" />}\n                  {cleaning ? 'Cleaning...' : 'Clean My Data'}\n                </Button>\n              </div>\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    </div>);\n\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\UserManagement.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Loader2, PlusCircle, ShieldCheck, Users } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { inviteUser } from \"@/api/functions\";\nimport { Tenant } from \"@/api/entities\";\n\nconst InviteUserModal = ({ tenants, onInvite, onCancel }) => {\n    const [fullName, setFullName] = useState('');\n    const [email, setEmail] = useState('');\n    const [role, setRole] = useState('user');\n    const [tenantId, setTenantId] = useState('');\n    const [sending, setSending] = useState(false);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (!email || !fullName) {\n            toast.error(\"Full Name and Email are required.\");\n            return;\n        }\n        setSending(true);\n        try {\n            await onInvite({ fullName, email, role, tenantId: tenantId || null });\n            onCancel(); // Close modal on success\n        } catch (error) {\n            console.error(\"Invite error from modal:\", error);\n            // Error is already toasted in the parent component\n        } finally {\n            setSending(false);\n        }\n    };\n\n    return (\n        <Dialog open={true} onOpenChange={onCancel}>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>Invite New User</DialogTitle>\n                    <DialogDescription>\n                        An invitation email will be sent to the user to set up their account.\n                    </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleSubmit} className=\"space-y-4 pt-4\">\n                    <div>\n                        <Label htmlFor=\"full-name\">Full Name</Label>\n                        <Input \n                            id=\"full-name\" \n                            value={fullName} \n                            onChange={(e) => setFullName(e.target.value)} \n                            required \n                        />\n                    </div>\n                    <div>\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input \n                            id=\"email\" \n                            type=\"email\" \n                            value={email} \n                            onChange={(e) => setEmail(e.target.value)} \n                            required \n                        />\n                    </div>\n                    <div>\n                        <Label htmlFor=\"role\">Role</Label>\n                        <Select value={role} onValueChange={setRole}>\n                            <SelectTrigger id=\"role\">\n                                <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value=\"user\">User</SelectItem>\n                                <SelectItem value=\"power-user\">Power User</SelectItem>\n                                <SelectItem value=\"admin\">Admin</SelectItem>\n                            </SelectContent>\n                        </Select>\n                    </div>\n                    <div>\n                        <Label htmlFor=\"tenant\">Assign to Tenant (optional)</Label>\n                        <Select value={tenantId} onValueChange={setTenantId}>\n                            <SelectTrigger id=\"tenant\">\n                                <SelectValue placeholder=\"No specific tenant\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value={null}>No specific tenant</SelectItem>\n                                {tenants.map(t => <SelectItem key={t.id} value={t.id}>{t.name}</SelectItem>)}\n                            </SelectContent>\n                        </Select>\n                    </div>\n                    <DialogFooter>\n                        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>Cancel</Button>\n                        <Button type=\"submit\" disabled={sending}>\n                            {sending ? (\n                                <>\n                                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                    Sending...\n                                </>\n                            ) : 'Send Invitation'}\n                        </Button>\n                    </DialogFooter>\n                </form>\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nexport default function UserManagement() {\n    const [showInviteModal, setShowInviteModal] = useState(false);\n    const [tenants, setTenants] = useState([]);\n\n    useEffect(() => {\n        const loadTenants = async () => {\n            try {\n                const tenantsData = await Tenant.list();\n                setTenants(tenantsData);\n            } catch (error) {\n                console.error(\"Failed to load tenants:\", error);\n                toast.error(\"Could not load tenant list for invitations.\");\n            }\n        };\n        loadTenants();\n    }, []);\n\n    const handleInvite = async (invitationData) => {\n        try {\n            const { error } = await inviteUser(invitationData);\n            if (error) {\n                throw new Error(error);\n            }\n            toast.success(`Invitation sent to ${invitationData.email}`);\n        } catch (err) {\n            console.error(\"Failed to send invitation:\", err);\n            toast.error(`Invitation failed: ${err.message}`);\n            // Re-throw to keep modal open on failure\n            throw err;\n        }\n    };\n\n    return (\n        <>\n            <Card>\n                <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                        <div>\n                            <CardTitle className=\"flex items-center gap-2\">\n                                <Users className=\"w-6 h-6 text-blue-600\" />\n                                Invite Users\n                            </CardTitle>\n                            <CardDescription>\n                                Add new users to the platform by sending an email invitation.\n                            </CardDescription>\n                        </div>\n                        <Button onClick={() => setShowInviteModal(true)}>\n                            <PlusCircle className=\"mr-2 h-4 w-4\" />\n                            Invite User\n                        </Button>\n                    </div>\n                </CardHeader>\n                <CardContent>\n                     <div className=\"p-4 bg-slate-50 border rounded-lg\">\n                        <div className=\"flex items-start gap-3\">\n                            <ShieldCheck className=\"w-5 h-5 text-slate-500 mt-1\" />\n                            <div>\n                                <h4 className=\"font-semibold text-slate-800\">Role Information</h4>\n                                <ul className=\"list-disc pl-5 mt-1 text-sm text-slate-600 space-y-1\">\n                                    <li><strong>Admin:</strong> Can manage users, tenants, and all system settings.</li>\n                                    <li><strong>Power User:</strong> Can view and manage all data within their assigned tenant.</li>\n                                    <li><strong>User:</strong> Has standard access to CRM features based on assigned permissions.</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </CardContent>\n            </Card>\n            {showInviteModal && (\n                <InviteUserModal\n                    tenants={tenants}\n                    onInvite={handleInvite}\n                    onCancel={() => setShowInviteModal(false)}\n                />\n            )}\n        </>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\UserPermissions.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Shield' is defined but never used.","line":12,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"Shield"},"fix":{"range":[648,656],"text":""},"desc":"Remove unused variable 'Shield'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'selectedTenantId' is assigned a value but never used.","line":23,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedTenantId"},"fix":{"range":[1136,1177],"text":""},"desc":"Remove unused variable 'selectedTenantId'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":374,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[14203,14306],"text":"\n                A manager will be able to view this employee&apos;s data and their own team.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[14203,14306],"text":"\n                A manager will be able to view this employee&lsquo;s data and their own team.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[14203,14306],"text":"\n                A manager will be able to view this employee&#39;s data and their own team.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[14203,14306],"text":"\n                A manager will be able to view this employee&rsquo;s data and their own team.\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { User } from \"@/api/entities\";\nimport { Tenant } from \"@/api/entities\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Save, AlertCircle, Users2, Shield, Eye, PencilLine } from \"lucide-react\";\nimport { useTenant } from \"../shared/tenantContext\";\nimport NavigationPermissions from \"./NavigationPermissions\";\nimport TagInput from \"../shared/TagInput\";\nimport { toast } from \"sonner\";\n\nexport default function UserPermissions({ userEmail, onClose }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const { selectedTenantId } = useTenant();\n\n  const [displayName, setDisplayName] = useState(\"\");\n  const [selectedTenant, setSelectedTenant] = useState(\"\");\n  const [tenants, setTenants] = useState([]);\n  const [role, setRole] = useState(\"user\");\n  const [employeeRole, setEmployeeRole] = useState(\"\");\n  const [accessLevel, setAccessLevel] = useState(\"read_write\");\n  const [crmAccess, setCrmAccess] = useState(true);\n  const [canUseSoftphone, setCanUseSoftphone] = useState(false);\n  const [dashboardScope, setDashboardScope] = useState(\"own\");\n  const [tags, setTags] = useState([]);\n  const [assignedManager, setAssignedManager] = useState(\"\");\n  const [managers, setManagers] = useState([]);\n\n  const [navigationPermissions, setNavigationPermissions] = useState({\n    Dashboard: true,\n    Contacts: true,\n    Accounts: true,\n    Leads: true,\n    Opportunities: true,\n    Activities: true,\n    Calendar: true,\n    BizDevSources: true,\n    CashFlow: true,\n    Employees: false,\n    Reports: false,\n    Integrations: true,\n    Settings: false,\n    Documentation: true,\n    AICampaigns: false,\n    Agent: true,\n    DocumentProcessing: false,\n    DocumentManagement: false,\n    PaymentPortal: false,\n    Utilities: false\n  });\n\n  const loadUserData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const users = await User.list();\n      const foundUser = users.find(u => u.email === userEmail);\n      \n      if (!foundUser) {\n        setError(\"User not found\");\n        return;\n      }\n\n      console.log(\"Loaded user:\", foundUser);\n      console.log(\"User's stored navigation_permissions:\", foundUser.navigation_permissions);\n\n      setUser(foundUser);\n      setDisplayName(foundUser.display_name || foundUser.full_name || \"\");\n      setSelectedTenant(foundUser.tenant_id || \"\");\n      setRole(foundUser.role || \"user\");\n      setEmployeeRole(foundUser.employee_role || \"\");\n      setAccessLevel(foundUser.access_level || \"read_write\");\n      setCrmAccess(foundUser.crm_access !== false);\n      setCanUseSoftphone(foundUser.permissions?.can_use_softphone || false);\n      setDashboardScope(foundUser.permissions?.dashboard_scope || \"own\");\n      setTags(foundUser.tags || []);\n      setAssignedManager(foundUser.assigned_manager || \"\");\n      \n      if (foundUser.navigation_permissions) {\n        console.log(\"Setting navigation permissions from user:\", foundUser.navigation_permissions);\n        setNavigationPermissions(prev => ({\n          ...prev,\n          ...foundUser.navigation_permissions\n        }));\n      }\n    } catch (err) {\n      console.error(\"Failed to load user:\", err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userEmail]);\n\n  const loadTenants = useCallback(async () => {\n    try {\n      const fetchedTenants = await Tenant.list();\n      setTenants(fetchedTenants || []);\n    } catch (err) {\n      console.warn(\"Could not load tenants:\", err);\n    }\n  }, []);\n\n  const loadManagers = useCallback(async () => {\n    try {\n      const users = await User.list();\n      const managerUsers = users.filter(u => \n        u.employee_role === 'manager' || \n        u.role === 'admin' || \n        u.role === 'superadmin'\n      );\n      setManagers(managerUsers);\n    } catch (err) {\n      console.warn(\"Could not load managers:\", err);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadUserData();\n    loadTenants();\n    loadManagers();\n  }, [loadUserData, loadTenants, loadManagers]);\n\n  const handleSave = async () => {\n    if (!user) return;\n\n    setSaving(true);\n    setError(null);\n\n    try {\n      console.log(\"Saving navigation_permissions:\", navigationPermissions);\n\n      const updates = {\n        display_name: displayName,\n        tenant_id: selectedTenant || null,\n        role,\n        employee_role: employeeRole || null,\n        access_level: accessLevel,\n        crm_access: crmAccess,\n        tags,\n        assigned_manager: assignedManager || null,\n        permissions: {\n          ...(user.permissions || {}),\n          can_use_softphone: canUseSoftphone,\n          dashboard_scope: dashboardScope\n        },\n        navigation_permissions: navigationPermissions\n      };\n\n      console.log(\"Full update payload:\", JSON.stringify(updates, null, 2));\n\n      await User.update(user.id, updates);\n      \n      // Reload the user to verify the save\n      const updatedUsers = await User.list();\n      const updatedUser = updatedUsers.find(u => u.email === userEmail);\n      console.log(\"After save, user navigation_permissions:\", updatedUser?.navigation_permissions);\n\n      toast.success(\"User permissions updated successfully\");\n      \n      if (onClose) {\n        onClose();\n      }\n    } catch (err) {\n      console.error(\"Failed to save user permissions:\", err);\n      setError(err.message);\n      toast.error(\"Failed to update permissions: \" + err.message);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-500\" />\n      </div>\n    );\n  }\n\n  if (error && !user) {\n    return (\n      <Alert variant=\"destructive\" className=\"m-4\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>{error}</AlertDescription>\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 p-6 bg-slate-900\">\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* User Info Header */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n            <Users2 className=\"w-5 h-5\" />\n            User Access Settings ΓÇö {userEmail}\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Configure user roles, access levels, and permissions\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Display Name */}\n          <div>\n            <Label className=\"text-slate-200\">Display Name</Label>\n            <Input\n              value={displayName}\n              onChange={(e) => setDisplayName(e.target.value)}\n              placeholder=\"e.g., John Doe\"\n              className=\"bg-slate-900 border-slate-700 text-slate-100\"\n            />\n          </div>\n\n          {/* Client/Tenant */}\n          <div>\n            <Label className=\"text-slate-200\">Client</Label>\n            <Select value={selectedTenant} onValueChange={setSelectedTenant}>\n              <SelectTrigger className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                <SelectValue placeholder=\"Select tenant\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                <SelectItem value={null}>No Tenant (System Admin)</SelectItem>\n                {tenants.map((t) => (\n                  <SelectItem key={t.id} value={t.id}>\n                    {t.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Role & Employee Role Row */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"text-slate-200\">Base44 Role</Label>\n              <Select value={role} onValueChange={setRole}>\n                <SelectTrigger className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                  <SelectItem value=\"superadmin\">Super Admin</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                  <SelectItem value=\"power-user\">Power User</SelectItem>\n                  <SelectItem value=\"user\">User</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-slate-200\">Employee Role</Label>\n              <Select value={employeeRole || 'none'} onValueChange={(val) => setEmployeeRole(val === 'none' ? '' : val)}>\n                <SelectTrigger className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                  <SelectValue placeholder=\"Select employee role\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                  <SelectItem value=\"none\">None (Use Base44 Role)</SelectItem>\n                  <SelectItem value=\"manager\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-semibold\">Manager</span>\n                      <span className=\"text-xs text-slate-400\">Full tenant visibility</span>\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"employee\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-semibold\">Employee</span>\n                      <span className=\"text-xs text-slate-400\">Own records only</span>\n                    </div>\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-slate-400 mt-1\">\n                Two-tier RBAC: Managers see all team data, Employees see only their own records.\n              </p>\n            </div>\n          </div>\n\n          {/* Tags */}\n          <div>\n            <Label className=\"text-slate-200\">Tags</Label>\n            <TagInput\n              tags={tags}\n              onChange={setTags}\n              placeholder=\"e.g., Sales, Manager\"\n              className=\"bg-slate-900 border-slate-700 text-slate-100\"\n            />\n          </div>\n\n          {/* Softphone */}\n          <div className=\"flex items-center justify-between p-3 bg-slate-900 rounded-lg border border-slate-700\">\n            <Label className=\"text-slate-200\">Can use Softphone</Label>\n            <Switch\n              checked={canUseSoftphone}\n              onCheckedChange={setCanUseSoftphone}\n            />\n          </div>\n\n          {/* CRM Access */}\n          <div className=\"flex items-center justify-between p-3 bg-slate-900 rounded-lg border border-slate-700\">\n            <Label className=\"text-slate-200\">CRM Access</Label>\n            <Switch\n              checked={crmAccess}\n              onCheckedChange={setCrmAccess}\n            />\n          </div>\n\n          {/* Access Level & Dashboard Scope Row */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"text-slate-200 flex items-center gap-2\">\n                <Eye className=\"w-4 h-4\" />\n                Access Level\n              </Label>\n              <Select value={accessLevel} onValueChange={setAccessLevel}>\n                <SelectTrigger className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                  <SelectItem value=\"read\">Read</SelectItem>\n                  <SelectItem value=\"read_write\">Read/Write</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-slate-200 flex items-center gap-2\">\n                <PencilLine className=\"w-4 h-4\" />\n                Dashboard Data Scope\n              </Label>\n              <Select value={dashboardScope} onValueChange={setDashboardScope}>\n                <SelectTrigger className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                  <SelectItem value=\"own\">Own Records Only</SelectItem>\n                  <SelectItem value=\"aggregated\">Aggregated (tenant)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Manager Assignment */}\n          {employeeRole && (\n            <div>\n              <Label className=\"text-slate-200\">Manager</Label>\n              <Select value={assignedManager} onValueChange={setAssignedManager}>\n                <SelectTrigger className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                  <SelectValue placeholder=\"Select manager\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-900 border-slate-700 text-slate-200\">\n                  <SelectItem value={null}>No Manager</SelectItem>\n                  {managers.map((m) => (\n                    <SelectItem key={m.id} value={m.email}>\n                      {m.display_name || m.full_name || m.email}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-slate-400 mt-1\">\n                A manager will be able to view this employee's data and their own team.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Navigation Permissions */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Navigation Permissions</CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            {navigationPermissions ? Object.keys(navigationPermissions).filter(k => navigationPermissions[k]).length : 0} enabled\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <NavigationPermissions\n            value={navigationPermissions}\n            onChange={(newPerms) => {\n              console.log(\"NavigationPermissions onChange called with:\", newPerms);\n              setNavigationPermissions(newPerms);\n            }}\n          />\n        </CardContent>\n      </Card>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end gap-3\">\n        <Button\n          variant=\"outline\"\n          onClick={onClose}\n          className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={handleSave}\n          disabled={saving}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n        >\n          {saving ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              Saving...\n            </>\n          ) : (\n            <>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Changes\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\UserRecordDiagnostic.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":46,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1481,1557],"text":"\n          Check what&apos;s actually stored in a User's database record\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1481,1557],"text":"\n          Check what&lsquo;s actually stored in a User's database record\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1481,1557],"text":"\n          Check what&#39;s actually stored in a User's database record\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1481,1557],"text":"\n          Check what&rsquo;s actually stored in a User's database record\n        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":46,"column":49,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1481,1557],"text":"\n          Check what's actually stored in a User&apos;s database record\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1481,1557],"text":"\n          Check what's actually stored in a User&lsquo;s database record\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1481,1557],"text":"\n          Check what's actually stored in a User&#39;s database record\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1481,1557],"text":"\n          Check what's actually stored in a User&rsquo;s database record\n        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":116,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4556,4592],"text":"Is Power User (role = &quot;power-user\"):"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4556,4592],"text":"Is Power User (role = &ldquo;power-user\"):"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4556,4592],"text":"Is Power User (role = &#34;power-user\"):"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4556,4592],"text":"Is Power User (role = &rdquo;power-user\"):"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":116,"column":85,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4556,4592],"text":"Is Power User (role = \"power-user&quot;):"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4556,4592],"text":"Is Power User (role = \"power-user&ldquo;):"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4556,4592],"text":"Is Power User (role = \"power-user&#34;):"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4556,4592],"text":"Is Power User (role = \"power-user&rdquo;):"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":167,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=&quot;admin/superadmin/power-user\" OR employee_role=\"manager\"\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=&ldquo;admin/superadmin/power-user\" OR employee_role=\"manager\"\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=&#34;admin/superadmin/power-user\" OR employee_role=\"manager\"\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=&rdquo;admin/superadmin/power-user\" OR employee_role=\"manager\"\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":167,"column":73,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user&quot; OR employee_role=\"manager\"\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user&ldquo; OR employee_role=\"manager\"\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user&#34; OR employee_role=\"manager\"\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user&rdquo; OR employee_role=\"manager\"\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":167,"column":92,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user\" OR employee_role=&quot;manager\"\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user\" OR employee_role=&ldquo;manager\"\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user\" OR employee_role=&#34;manager\"\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user\" OR employee_role=&rdquo;manager\"\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":167,"column":100,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user\" OR employee_role=\"manager&quot;\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user\" OR employee_role=\"manager&ldquo;\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user\" OR employee_role=\"manager&#34;\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7037,7157],"text":"\n                    User needs one of: role=\"admin/superadmin/power-user\" OR employee_role=\"manager&rdquo;\n                  "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Search, CheckCircle2, XCircle, AlertTriangle } from \"lucide-react\";\nimport { checkUserRecord } from \"@/api/functions\";\nimport { toast } from \"sonner\";\n\nexport default function UserRecordDiagnostic() {\n  const [email, setEmail] = useState(\"andrei.byfield@gmail.com\");\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null);\n\n  const handleCheck = async () => {\n    if (!email) {\n      toast.error(\"Please enter an email\");\n      return;\n    }\n\n    setLoading(true);\n    setResult(null);\n\n    try {\n      const response = await checkUserRecord({ email });\n      \n      if (response.data) {\n        setResult(response.data);\n      } else {\n        toast.error(\"Failed to check user record\");\n      }\n    } catch (error) {\n      console.error(\"Error checking user:\", error);\n      toast.error(error.message || \"Failed to check user\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"text-slate-100\">User Record Diagnostic</CardTitle>\n        <p className=\"text-sm text-slate-400\">\n          Check what's actually stored in a User's database record\n        </p>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <Label className=\"text-slate-300\">Email Address</Label>\n          <Input\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            placeholder=\"user@example.com\"\n            className=\"bg-slate-700 border-slate-600 text-slate-200\"\n          />\n        </div>\n\n        <Button\n          onClick={handleCheck}\n          disabled={loading}\n          className=\"bg-blue-600 hover:bg-blue-700 w-full\"\n        >\n          {loading ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              Checking...\n            </>\n          ) : (\n            <>\n              <Search className=\"w-4 h-4 mr-2\" />\n              Check\n            </>\n          )}\n        </Button>\n\n        {result && (\n          <div className=\"space-y-4 mt-4\">\n            {/* User Database Record */}\n            <div className=\"bg-slate-700/50 p-4 rounded\">\n              <h4 className=\"font-semibold text-slate-200 mb-3\">User Database Record</h4>\n              <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                <span className=\"text-slate-400\">Email:</span>\n                <span className=\"text-slate-200 font-mono text-xs\">{result.user_record.email}</span>\n                \n                <span className=\"text-slate-400\">Full Name:</span>\n                <span className=\"text-slate-200\">{result.user_record.full_name}</span>\n                \n                <span className=\"text-slate-400\">Role:</span>\n                <span className=\"text-cyan-400 font-mono font-bold\">{result.user_record.role}</span>\n                \n                <span className=\"text-slate-400\">Employee Role:</span>\n                <span className=\"text-cyan-400 font-mono\">{result.user_record.employee_role || 'null'}</span>\n                \n                <span className=\"text-slate-400\">Tenant ID:</span>\n                <span className=\"text-slate-200 font-mono text-xs\">{result.user_record.tenant_id}</span>\n                \n                <span className=\"text-slate-400\">Access Level:</span>\n                <span className=\"text-slate-200\">{result.user_record.access_level || 'N/A'}</span>\n              </div>\n            </div>\n\n            {/* RLS Evaluation */}\n            <div className=\"bg-slate-700/50 p-4 rounded\">\n              <h4 className=\"font-semibold text-slate-200 mb-3\">RLS Evaluation</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-slate-400\">Is Admin/Superadmin:</span>\n                  {result.rls_evaluation.is_admin ? \n                    <CheckCircle2 className=\"w-4 h-4 text-green-400\" /> : \n                    <XCircle className=\"w-4 h-4 text-red-400\" />\n                  }\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-slate-400\">Is Power User (role = \"power-user\"):</span>\n                  {result.rls_evaluation.is_power_user ? \n                    <CheckCircle2 className=\"w-4 h-4 text-green-400\" /> : \n                    <XCircle className=\"w-4 h-4 text-red-400\" />\n                  }\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-slate-400\">Is Manager (employee_role):</span>\n                  {result.rls_evaluation.is_manager ? \n                    <CheckCircle2 className=\"w-4 h-4 text-green-400\" /> : \n                    <XCircle className=\"w-4 h-4 text-red-400\" />\n                  }\n                </div>\n              </div>\n            </div>\n\n            {/* Tenant Leads */}\n            <div className=\"bg-slate-700/50 p-4 rounded\">\n              <h4 className=\"font-semibold text-slate-200 mb-3\">\n                Leads in Tenant ({result.tenant_leads_count})\n              </h4>\n              {result.tenant_leads.length > 0 ? (\n                <div className=\"space-y-2\">\n                  {result.tenant_leads.map((lead) => (\n                    <div key={lead.id} className=\"bg-slate-800/50 p-2 rounded text-xs\">\n                      <div className=\"font-semibold text-slate-200\">{lead.name}</div>\n                      <div className=\"text-slate-400\">ID: {lead.unique_id}</div>\n                      <div className=\"text-slate-400\">Assigned: {lead.assigned_to || 'Unassigned'}</div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-slate-400 text-xs\">No leads in this tenant</p>\n              )}\n            </div>\n\n            {/* Verdict */}\n            <Alert className={result.should_see_leads ? \"bg-green-900/20 border-green-700\" : \"bg-red-900/20 border-red-700\"}>\n              {result.should_see_leads ? \n                <CheckCircle2 className=\"h-4 w-4 text-green-400\" /> : \n                <AlertTriangle className=\"h-4 w-4 text-red-400\" />\n              }\n              <AlertDescription className={result.should_see_leads ? \"text-green-300\" : \"text-red-300\"}>\n                <div className=\"font-semibold mb-1\">\n                  {result.should_see_leads ? \n                    \"Γ£à User SHOULD see all tenant leads\" : \n                    \"Γ¥î User CANNOT see tenant leads\"\n                  }\n                </div>\n                {!result.should_see_leads && (\n                  <div className=\"text-xs mt-2\">\n                    User needs one of: role=\"admin/superadmin/power-user\" OR employee_role=\"manager\"\n                  </div>\n                )}\n              </AlertDescription>\n            </Alert>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\WebhookEmailSettings.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\WebhookForm.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":143,"column":126,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4548,4712],"text":"\n          Webhooks are secured with your N8N_SHARED_SECRET. Make sure your receiving endpoint validates the signature in the &apos;x-webhook-signature' header.\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4548,4712],"text":"\n          Webhooks are secured with your N8N_SHARED_SECRET. Make sure your receiving endpoint validates the signature in the &lsquo;x-webhook-signature' header.\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4548,4712],"text":"\n          Webhooks are secured with your N8N_SHARED_SECRET. Make sure your receiving endpoint validates the signature in the &#39;x-webhook-signature' header.\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4548,4712],"text":"\n          Webhooks are secured with your N8N_SHARED_SECRET. Make sure your receiving endpoint validates the signature in the &rsquo;x-webhook-signature' header.\n        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":143,"column":146,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4548,4712],"text":"\n          Webhooks are secured with your N8N_SHARED_SECRET. Make sure your receiving endpoint validates the signature in the 'x-webhook-signature&apos; header.\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4548,4712],"text":"\n          Webhooks are secured with your N8N_SHARED_SECRET. Make sure your receiving endpoint validates the signature in the 'x-webhook-signature&lsquo; header.\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4548,4712],"text":"\n          Webhooks are secured with your N8N_SHARED_SECRET. Make sure your receiving endpoint validates the signature in the 'x-webhook-signature&#39; header.\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4548,4712],"text":"\n          Webhooks are secured with your N8N_SHARED_SECRET. Make sure your receiving endpoint validates the signature in the 'x-webhook-signature&rsquo; header.\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Webhook } from \"@/api/entities\";\nimport { AlertCircle, Loader2 } from \"lucide-react\";\n\nconst WEBHOOK_EVENTS = [\n  { value: \"contact.created\", label: \"Contact Created\" },\n  { value: \"contact.updated\", label: \"Contact Updated\" },\n  { value: \"contact.deleted\", label: \"Contact Deleted\" },\n  { value: \"account.created\", label: \"Account Created\" },\n  { value: \"account.updated\", label: \"Account Updated\" },\n  { value: \"account.deleted\", label: \"Account Deleted\" },\n  { value: \"lead.created\", label: \"Lead Created\" },\n  { value: \"lead.updated\", label: \"Lead Updated\" },\n  { value: \"lead.deleted\", label: \"Lead Deleted\" },\n  { value: \"opportunity.created\", label: \"Opportunity Created\" },\n  { value: \"opportunity.updated\", label: \"Opportunity Updated\" },\n  { value: \"opportunity.deleted\", label: \"Opportunity Deleted\" },\n  { value: \"activity.created\", label: \"Activity Created\" },\n  { value: \"activity.updated\", label: \"Activity Updated\" },\n  { value: \"activity.deleted\", label: \"Activity Deleted\" },\n];\n\nexport default function WebhookForm({ webhook, onSubmitSuccess, onCancel }) {\n  const [formData, setFormData] = useState({\n    event_name: \"\",\n    target_url: \"\",\n    description: \"\",\n    is_active: true,\n  });\n  \n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    if (webhook) {\n      setFormData({\n        event_name: webhook.event_name || \"\",\n        target_url: webhook.target_url || \"\",\n        description: webhook.description || \"\",\n        is_active: webhook.is_active !== false,\n      });\n    }\n  }, [webhook]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    setError(\"\");\n\n    try {\n      // Validate URL format\n      try {\n        new URL(formData.target_url);\n      } catch {\n        throw new Error(\"Please enter a valid URL\");\n      }\n\n      if (webhook) {\n        await Webhook.update(webhook.id, formData);\n      } else {\n        await Webhook.create(formData);\n      }\n\n      onSubmitSuccess();\n    } catch (err) {\n      console.error(\"Webhook form error:\", err);\n      setError(err.message || \"Failed to save webhook\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleChange = (field) => (value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"event_name\">Event Type</Label>\n        <Select value={formData.event_name} onValueChange={handleChange(\"event_name\")}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select an event type\" />\n          </SelectTrigger>\n          <SelectContent>\n            {WEBHOOK_EVENTS.map((event) => (\n              <SelectItem key={event.value} value={event.value}>\n                {event.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"target_url\">Target URL</Label>\n        <Input\n          id=\"target_url\"\n          type=\"url\"\n          placeholder=\"https://your-n8n-instance.com/webhook/...\"\n          value={formData.target_url}\n          onChange={(e) => setFormData(prev => ({ ...prev, target_url: e.target.value }))}\n          required\n        />\n        <p className=\"text-sm text-slate-500\">\n          The webhook endpoint URL where events will be sent\n        </p>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"description\">Description</Label>\n        <Textarea\n          id=\"description\"\n          placeholder=\"Describe what this webhook is used for...\"\n          value={formData.description}\n          onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n          rows={3}\n        />\n      </div>\n\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          Webhooks are secured with your N8N_SHARED_SECRET. Make sure your receiving endpoint validates the signature in the 'x-webhook-signature' header.\n        </AlertDescription>\n      </Alert>\n\n      <div className=\"flex justify-end gap-3 pt-4\">\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <Button type=\"submit\" disabled={isSubmitting || !formData.event_name || !formData.target_url}>\n          {isSubmitting ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              {webhook ? \"Updating...\" : \"Creating...\"}\n            </>\n          ) : (\n            webhook ? \"Update Webhook\" : \"Create Webhook\"\n          )}\n        </Button>\n      </div>\n    </form>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\WebhookSettings.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Webhook } from \"@/api/entities\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Plus, Edit, Trash2, Webhook as WebhookIcon, Zap, Loader2, AlertCircle } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport WebhookForm from \"./WebhookForm\";\n\nexport default function WebhookSettings() {\n  const [webhooks, setWebhooks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [editingWebhook, setEditingWebhook] = useState(null);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const { toast } = useToast();\n\n  const loadWebhooks = useCallback(async () => {\n    setLoading(true);\n    try {\n      const data = await Webhook.list('-created_date');\n      setWebhooks(data);\n    } catch (error) {\n      console.error(\"Error loading webhooks:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error loading webhooks\",\n        description: error.message,\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  useEffect(() => {\n    loadWebhooks();\n  }, [loadWebhooks]);\n\n  const handleFormSubmit = async () => {\n    setIsFormOpen(false);\n    setEditingWebhook(null);\n    await loadWebhooks();\n    toast({\n      title: \"Success\",\n      description: `Webhook ${editingWebhook ? 'updated' : 'created'} successfully.`,\n      className: \"bg-green-100 text-green-800\",\n    });\n  };\n\n  const handleDelete = async (webhookId) => {\n    try {\n      await Webhook.delete(webhookId);\n      await loadWebhooks();\n      toast({\n        title: \"Webhook Deleted\",\n        description: \"The webhook has been successfully deleted.\",\n      });\n    } catch (error) {\n      console.error(\"Error deleting webhook:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error deleting webhook\",\n        description: error.message,\n      });\n    }\n  };\n\n  const handleToggle = async (webhook) => {\n    try {\n      await Webhook.update(webhook.id, { is_active: !webhook.is_active });\n      await loadWebhooks();\n      toast({\n        title: `Webhook ${!webhook.is_active ? 'Activated' : 'Deactivated'}`,\n      });\n    } catch (error) {\n       console.error(\"Error updating webhook status:\", error);\n       toast({\n        variant: \"destructive\",\n        title: \"Error updating webhook status\",\n        description: error.message,\n      });\n    }\n  };\n\n  const getAppId = () => {\n    if (typeof window !== 'undefined' && window.location.hostname.includes('base44.app')) {\n      const pathParts = window.location.pathname.split('/');\n      // Assuming URL structure like /app/YOUR_APP_ID/settings or /app/YOUR_APP_ID/webhooks\n      // The app ID should be the third part in this case.\n      // A more robust solution might involve context or an environment variable.\n      if (pathParts.length > 2) {\n        return pathParts[2];\n      }\n    }\n    return 'YOUR_APP_ID'; // Placeholder if app ID cannot be determined or not on base44.app\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Incoming Webhooks Section */}\n      <Card className=\"shadow-lg border-0 bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <WebhookIcon className=\"w-6 h-6 text-green-600\" />\n            Incoming Data Webhooks (Inbound)\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Use these URLs to send data TO your CRM from external systems like Zapier, Make.com, n8n, or custom applications.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Alert className=\"mb-6 bg-blue-900/30 border-blue-700/50\">\n            <AlertCircle className=\"h-4 w-4 text-blue-400\" />\n            <AlertDescription className=\"text-blue-300\">\n              All incoming webhooks require your `N8N_API_KEY` in the `x-api-key` header for authentication.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"space-y-4\">\n            <div className=\"border rounded-lg p-4 bg-slate-700/30 border-slate-600\">\n              <h4 className=\"font-medium mb-2 text-slate-200\">General Incoming Webhook</h4>\n              <p className=\"text-sm text-slate-400 mb-3\">\n                Send any CRM data (contacts, leads, accounts, activities) using a unified endpoint. Supports both creating and updating records.\n              </p>\n              <div className=\"bg-slate-700 p-3 rounded border font-mono text-sm break-all text-slate-200\">\n                POST https://base44.app/api/apps/{getAppId()}/functions/incomingWebhook\n              </div>\n              <details className=\"mt-2\">\n                <summary className=\"cursor-pointer text-blue-400 text-sm hover:text-blue-300\">View payload examples</summary>\n                <div className=\"bg-slate-600 p-2 rounded text-xs mt-2 overflow-x-auto\">\n                  <h5 className=\"font-semibold mb-1 text-slate-200\">Create a new Contact:</h5>\n                  <pre className=\"mb-4 text-slate-300\">\n{`{\n  \"entity_type\": \"contact\",\n  \"tenant_id\": \"your_client_id\",\n  \"action\": \"create\",\n  \"record_data\": {\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"email\": \"john@example.com\"\n  }\n}`}\n                  </pre>\n                  <h5 className=\"font-semibold mb-1 text-slate-200\">Update an existing Contact:</h5>\n                  <pre className=\"text-slate-300\">\n{`{\n  \"entity_type\": \"contact\",\n  \"tenant_id\": \"your_client_id\",\n  \"action\": \"update\",\n  \"record_id\": \"ID_OF_THE_CONTACT_TO_UPDATE\",\n  \"record_data\": {\n    \"phone\": \"+1-555-0123\",\n    \"status\": \"customer\"\n  }\n}`}\n                  </pre>\n                </div>\n              </details>\n            </div>\n\n            <div className=\"border rounded-lg p-4 bg-slate-700/30 border-slate-600\">\n              <h4 className=\"font-medium mb-2 text-slate-200\">Specialized Endpoints</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between items-center py-1\">\n                  <span className=\"text-slate-300\">Create Contacts:</span>\n                  <code className=\"text-xs bg-slate-600 px-2 py-1 rounded text-slate-200\">/functions/n8nCreateContact</code>\n                </div>\n                <div className=\"flex justify-between items-center py-1\">\n                  <span className=\"text-slate-300\">Create Leads:</span>\n                  <code className=\"text-xs bg-slate-600 px-2 py-1 rounded text-slate-200\">/functions/n8nCreateLead</code>\n                </div>\n                <div className=\"flex justify-between items-center py-1\">\n                  <span className=\"text-slate-300\">Call Results:</span>\n                  <code className=\"text-xs bg-slate-600 px-2 py-1 rounded text-slate-200\">/functions/thoughtlyCallResults</code>\n                </div>\n                <div className=\"flex justify-between items-center py-1\">\n                  <span className=\"text-slate-300\">Call Transcripts:</span>\n                  <code className=\"text-xs bg-slate-600 px-2 py-1 rounded text-slate-200\">/functions/thoughtlyTranscripts</code>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Outgoing Webhooks Section */}\n      <Card className=\"shadow-lg border-0 bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <WebhookIcon className=\"w-6 h-6 text-blue-600\" />\n            Outgoing Event Webhooks (Outbound)\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Notify external systems when events happen in the CRM. Use this to trigger workflows in Pabbly, Zapier, Make.com, or n8n when a contact is created, lead is updated, etc.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Alert className=\"mb-6 bg-blue-900/30 border-blue-700/50\">\n              <AlertCircle className=\"h-4 w-4 text-blue-400\" />\n              <AlertDescription className=\"text-blue-300\">\n                  All webhooks are digitally signed using your `N8N_SHARED_SECRET` for security (despite the name, this works with any webhook service). The signature is sent in the `x-webhook-signature` header for optional validation.\n              </AlertDescription>\n          </Alert>\n\n          <div className=\"flex justify-end mb-4\">\n            <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => setEditingWebhook(null)} className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" /> Add New Webhook\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl bg-slate-800 border-slate-700\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-slate-100\">{editingWebhook ? \"Edit Webhook\" : \"Create New Webhook\"}</DialogTitle>\n                </DialogHeader>\n                <WebhookForm\n                  webhook={editingWebhook}\n                  onSubmitSuccess={handleFormSubmit}\n                  onCancel={() => setIsFormOpen(false)}\n                />\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {loading ? (\n            <div className=\"flex justify-center items-center py-8\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-blue-600\" />\n              <p className=\"ml-3 text-slate-400\">Loading webhooks...</p>\n            </div>\n          ) : webhooks.length === 0 ? (\n            <div className=\"text-center py-12 border-2 border-dashed rounded-lg border-slate-600\">\n              <Zap className=\"mx-auto h-12 w-12 text-slate-500\" />\n              <h3 className=\"mt-2 text-sm font-semibold text-slate-300\">No webhooks configured</h3>\n              <p className=\"mt-1 text-sm text-slate-400\">Get started by creating a new webhook.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {webhooks.map((webhook) => (\n                <Card key={webhook.id} className=\"flex items-center justify-between p-4 bg-slate-700 border-slate-600\">\n                  <div className=\"flex items-center gap-4\">\n                    <WebhookIcon className={`w-6 h-6 ${webhook.is_active ? 'text-green-500' : 'text-slate-500'}`} />\n                    <div>\n                      <p className=\"font-semibold text-slate-200\">{webhook.description || \"No Description\"}</p>\n                      <div className=\"flex items-center gap-2 text-sm text-slate-400\">\n                        <Badge variant=\"outline\" className=\"bg-slate-600 border-slate-500 text-slate-300\">{webhook.event_name}</Badge>\n                        <span>ΓåÆ</span>\n                        <code className=\"text-xs bg-slate-600 p-1 rounded max-w-64 truncate text-slate-300\">\n                          {webhook.target_url}\n                        </code>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-4\">\n                    <Switch\n                      checked={webhook.is_active}\n                      onCheckedChange={() => handleToggle(webhook)}\n                      aria-label={`Toggle webhook ${webhook.is_active ? 'off' : 'on'}`}\n                    />\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => { setEditingWebhook(webhook); setIsFormOpen(true); }} className=\"text-slate-300 hover:text-slate-100 hover:bg-slate-600\">\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" className=\"text-red-400 hover:text-red-300 hover:bg-slate-600\">\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent className=\"bg-slate-800 border-slate-700\">\n                        <AlertDialogHeader>\n                          <AlertDialogTitle className=\"text-slate-100\">Are you sure?</AlertDialogTitle>\n                          <AlertDialogDescription className=\"text-slate-400\">\n                            This action cannot be undone. This will permanently delete the webhook configuration.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">Cancel</AlertDialogCancel>\n                          <AlertDialogAction onClick={() => handleDelete(webhook.id)} className=\"bg-red-600 hover:bg-red-700\">\n                            Delete\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\WebhookSetupGuide.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { KeyRound, FileJson, Beaker, CheckCircle } from \"lucide-react\";\n\nexport default function WebhookSetupGuide() {\n  return (\n    <Accordion type=\"single\" collapsible className=\"w-full\">\n      <AccordionItem value=\"item-1\" className=\"border-slate-700\">\n        <AccordionTrigger className=\"text-slate-200 hover:no-underline\">\n          <div className=\"flex items-center gap-3\">\n            <KeyRound className=\"w-5 h-5 text-amber-400\" />\n            <span>Step 1: Authentication</span>\n          </div>\n        </AccordionTrigger>\n        <AccordionContent className=\"text-slate-400 prose prose-sm prose-invert max-w-none\">\n          <p>Your webhooks must be authenticated using an API key sent as a request header.</p>\n          <ul className=\"list-disc pl-5 space-y-1\">\n            <li>Go to <code className=\"bg-slate-900 rounded px-1.5 py-0.5 font-mono text-cyan-400\">Settings ΓåÆ System ΓåÆ API Key Manager</code>.</li>\n            <li>Create a new key and copy its value.</li>\n            <li>In your external service (like n8n or Zapier), add a request header:</li>\n            <li className=\"ml-4\"><strong className=\"text-slate-300\">Header Name:</strong> <code className=\"bg-slate-900 rounded px-1.5 py-0.5 font-mono text-cyan-400\">api_key</code></li>\n            <li className=\"ml-4\"><strong className=\"text-slate-300\">Header Value:</strong> Your generated API key.</li>\n          </ul>\n        </AccordionContent>\n      </AccordionItem>\n      \n      <AccordionItem value=\"item-2\" className=\"border-slate-700\">\n        <AccordionTrigger className=\"text-slate-200 hover:no-underline\">\n          <div className=\"flex items-center gap-3\">\n            <FileJson className=\"w-5 h-5 text-blue-400\" />\n            <span>Step 2: Request Body & Payload</span>\n          </div>\n        </AccordionTrigger>\n        <AccordionContent className=\"text-slate-400 prose prose-sm prose-invert max-w-none\">\n          <p>Your request must be a <code className=\"bg-slate-900 rounded px-1.5 py-0.5 font-mono text-cyan-400\">POST</code> request with a JSON body. The specific fields required depend on the webhook you are calling.</p>\n          <p>For example, to create a lead using the <code className=\"bg-slate-900 rounded px-1.5 py-0.5 font-mono text-cyan-400\">n8nCreateLead</code> webhook, your payload should look like this:</p>\n          <pre className=\"bg-slate-900 text-slate-300 p-3 rounded-md text-xs mt-1 font-mono overflow-x-auto\">{`{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"company\": \"Example Inc.\"\n}`}</pre>\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value=\"item-3\" className=\"border-slate-700\">\n        <AccordionTrigger className=\"text-slate-200 hover:no-underline\">\n          <div className=\"flex items-center gap-3\">\n            <Beaker className=\"w-5 h-5 text-green-400\" />\n            <span>Step 3: Testing</span>\n          </div>\n        </AccordionTrigger>\n        <AccordionContent className=\"text-slate-400 prose prose-sm prose-invert max-w-none\">\n          <p>Use a tool like Postman or Insomnia to test your webhook before integrating it with your service. This helps you quickly diagnose any issues with authentication or the request body.</p>\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value=\"item-4\" className=\"border-b-0 border-slate-700\">\n        <AccordionTrigger className=\"text-slate-200 hover:no-underline\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-5 h-5 text-fuchsia-400\" />\n            <span>Step 4: Final URL</span>\n          </div>\n        </AccordionTrigger>\n        <AccordionContent className=\"text-slate-400 prose prose-sm prose-invert max-w-none\">\n          <p>Make sure you are using the full, correct webhook URL provided in the sections above, including the full domain.</p>\n          <p>Example URL structure: <code className=\"bg-slate-900 rounded px-1.5 py-0.5 font-mono text-cyan-400 break-all\">https://[your-app-domain].base44.app/api/apps/[app-id]/functions/[function-name]</code></p>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\settings\\performanceThresholds.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\AICallCenterWidget.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'UserIcon' is defined but never used.","line":9,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"UserIcon"},"fix":{"range":[413,431],"text":""},"desc":"Remove unused variable 'UserIcon'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'tenantName' is assigned a value but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"tenantName"},"fix":{"range":[661,692],"text":""},"desc":"Remove unused variable 'tenantName'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n// Removed Card components as they are replaced by custom divs with styling\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Phone, X, Bot, Loader2, User as UserIcon } from 'lucide-react';\nimport { callFluentWebhookV2 } from '@/api/functions';\nimport { toast } from 'sonner';\nimport { useTenant } from './tenantContext';\n\nexport default function AICallCenterWidget({\n  prefilledData = {},\n  user,\n  tenantName = \"your company\",\n  className // Added className prop to pass to the widget container\n}) {\n  const [isVisible, setIsVisible] = useState(false); // Changed isOpen to isVisible\n  const [isCalling, setIsCalling] = useState(false);\n  const [phoneNumber, setPhoneNumber] = useState(prefilledData.phoneNumber || '');\n  const [contactName, setContactName] = useState(prefilledData.contactName || '');\n  const [companyName, setCompanyName] = useState(prefilledData.companyName || '');\n  const [callObjective, setCallObjective] = useState(prefilledData.callPurpose || '');\n  const { selectedTenantId } = useTenant();\n\n  useEffect(() => {\n    setPhoneNumber(prefilledData.phoneNumber || '');\n    setContactName(prefilledData.contactName || '');\n    setCompanyName(prefilledData.companyName || '');\n    setCallObjective(prefilledData.callPurpose || '');\n  }, [prefilledData, isVisible]); // Changed isOpen to isVisible in dependency array\n\n  const handleStartCall = async () => {\n    if (!phoneNumber || !callObjective) {\n      toast.error(\"Phone number and call objective are required.\");\n      return;\n    }\n\n    const tenantIdForCall = user?.role === 'superadmin' ? selectedTenantId : user?.tenant_id;\n    \n    if (!tenantIdForCall) {\n        toast.error(\"Could not determine the tenant for this call. Please select a tenant if you are an administrator.\");\n        return;\n    }\n\n    setIsCalling(true);\n    try {\n      const payload = {\n        call_status: 'ai_call_initiated',\n        phone_number: phoneNumber,\n        client_id: tenantIdForCall,\n        contact_name: contactName,\n        company_name: companyName,\n        call_objective: callObjective,\n        assignee_name: user?.full_name || 'the team',\n      };\n      \n      const response = await callFluentWebhookV2(payload);\n\n      if (response.data?.status === 'success') {\n        toast.success(\"AI call initiated successfully!\");\n        setIsVisible(false); // Changed setIsOpen to setIsVisible\n      } else {\n        throw new Error(response.data?.message || 'Failed to initiate call.');\n      }\n    } catch (error) {\n      toast.error(`Error: ${error.message}`);\n    } finally {\n      setIsCalling(false);\n    }\n  };\n\n  if (!user) return null;\n  if (user.role === 'superadmin' && !selectedTenantId) {\n    return null; // Don't render for superadmin if no tenant is selected\n  }\n  if (user.role !== 'superadmin' && !user.tenant_id) {\n    return null; // Don't render for other roles if they have no tenant\n  }\n\n  return (\n    <div className={`fixed bottom-4 right-4 z-[9999] ${className}`} onPointerDown={(e) => e.stopPropagation()}>\n      <AnimatePresence>\n        {/* Render the card when isVisible is true */}\n        {isVisible && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 20 }}\n            className=\"bg-gradient-to-br from-blue-600 to-purple-600 text-white p-4 rounded-xl shadow-2xl border-2 border-white max-w-sm\"\n            style={{ zIndex: 9999 }} // Ensures card is correctly layered if other elements are in the same stacking context\n          >\n            {/* Mimic CardHeader with new styling */}\n            <div className=\"flex justify-between items-center pb-2 border-b border-white/30 mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <Bot className=\"w-6 h-6\" />\n                <h2 className=\"text-lg font-semibold\">AI Call Center</h2> {/* Replaced CardTitle */}\n              </div>\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => setIsVisible(false)} className=\"text-white hover:bg-blue-500\">\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n            <p className=\"text-blue-100 mb-4\">Initiate an AI-powered call.</p> {/* Replaced CardDescription */}\n\n            {/* Mimic CardContent with new styling */}\n            <div className=\"space-y-4\">\n              <div className=\"space-y-1\">\n                <Label htmlFor=\"contactName\" className=\"text-white\">Contact Name</Label>\n                <Input id=\"contactName\" value={contactName} onChange={(e) => setContactName(e.target.value)} placeholder=\"John Doe\" className=\"bg-white/10 border-white/30 text-white placeholder-white/70\" />\n              </div>\n              <div className=\"space-y-1\">\n                <Label htmlFor=\"phoneNumber\" className=\"text-white\">Phone Number *</Label>\n                <Input id=\"phoneNumber\" value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} placeholder=\"(555) 123-4567\" required className=\"bg-white/10 border-white/30 text-white placeholder-white/70\" />\n              </div>\n              <div className=\"space-y-1\">\n                <Label htmlFor=\"callObjective\" className=\"text-white\">Call Objective *</Label>\n                <Textarea id=\"callObjective\" value={callObjective} onChange={(e) => setCallObjective(e.target.value)} placeholder=\"e.g., Follow up on quote, schedule demo\" required className=\"bg-white/10 border-white/30 text-white placeholder-white/70\" />\n              </div>\n              <Button onClick={handleStartCall} disabled={isCalling} className=\"w-full bg-white text-blue-600 hover:bg-blue-100\">\n                {isCalling ? (\n                  <><Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> Calling...</>\n                ) : (\n                  <><Phone className=\"w-4 h-4 mr-2\" /> Start AI Call</>\n                )}\n              </Button>\n            </div>\n          </motion.div>\n        )}\n\n        {/* Floating trigger button, rendered only when card is not visible */}\n        {!isVisible && (\n          <motion.button\n            initial={{ scale: 0, y: 50 }}\n            animate={{ scale: 1, y: 0 }}\n            exit={{ scale: 0, y: 50 }}\n            transition={{ type: 'spring', stiffness: 260, damping: 20 }}\n            onClick={() => setIsVisible(true)} // Opens the card\n            className=\"bg-gradient-to-br from-green-500 to-blue-600 text-white p-4 rounded-full shadow-lg hover:shadow-xl border-2 border-white\"\n            style={{ zIndex: 10000 }} // Ensures button is on top of other content if it were to overlap\n            title=\"AI Call Center\"\n          >\n            <Phone className=\"w-6 h-6\" />\n          </motion.button>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\AIEmailComposer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\AccountSelector.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useEffect } from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function AccountSelector({\n  accounts = [], // Optional preloaded accounts list\n  value, // Selected account_id\n  onValueChange, // (id) => void\n  placeholder = \"Select account...\",\n  className = \"\",\n  required = false,\n  disabled = false,\n}) {\n  // Debug log\n  useEffect(() => {\n    console.log('[ACCOUNT_SELECTOR_DEBUG] Accounts received:', accounts?.length || 0);\n  }, [accounts]);\n\n  // Ensure accounts is always an array\n  const safeAccounts = Array.isArray(accounts) ? accounts : [];\n\n  return (\n    <Select\n      value={value || ''}\n      onValueChange={onValueChange}\n      disabled={disabled || safeAccounts.length === 0}\n      required={required}\n    >\n      <SelectTrigger className={`${className} ${disabled || safeAccounts.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}>\n        <SelectValue placeholder={safeAccounts.length === 0 ? \"No accounts available\" : placeholder} />\n      </SelectTrigger>\n      <SelectContent className=\"bg-slate-800 border-slate-700 text-white max-h-[300px]\">\n        {!required && <SelectItem value={null}>-- No Account --</SelectItem>}\n        {safeAccounts.length === 0 ? (\n          <div className=\"px-2 py-4 text-center text-slate-400 text-sm\">\n            No accounts found. Create one first.\n          </div>\n        ) : (\n          safeAccounts.map((account) => (\n            <SelectItem key={account.id} value={account.id} className=\"hover:bg-slate-700\">\n              {account.name}\n            </SelectItem>\n          ))\n        )}\n      </SelectContent>\n    </Select>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\AddressFields.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { states } from \"./statesData\";\nimport { countries } from \"./countriesData\";\n\nexport default function AddressFields({ formData, handleChange, darkMode = false }) {\n  const inputClassName = darkMode \n    ? \"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n    : \"\";\n  \n  const labelClassName = darkMode ? \"text-slate-200\" : \"\";\n\n  const handleStateChange = (value) => {\n    console.log('AddressFields: State selected:', value);\n    const selectedState = states.find(state => state.code === value);\n    if (value && selectedState) {\n      handleChange('state', value);\n    }\n  };\n\n  const handleCountryChange = (value) => {\n    console.log('AddressFields: Country selected:', value);\n    const selectedCountry = countries.find(country => country.code === value);\n    if (value && selectedCountry) {\n      handleChange('country', selectedCountry.name);\n    }\n  };\n\n  // Find the current country by name to set the correct value\n  const currentCountry = countries.find(country => country.name === formData.country);\n\n  return (\n    <>\n      <div className=\"md:col-span-2\">\n        <Label htmlFor=\"address_1\" className={labelClassName}>Address Line 1</Label>\n        <Input\n          id=\"address_1\"\n          value={formData.address_1 || ''}\n          onChange={(e) => handleChange('address_1', e.target.value)}\n          placeholder=\"Street address\"\n          className={`mt-1 ${inputClassName}`}\n        />\n      </div>\n      \n      <div className=\"md:col-span-2\">\n        <Label htmlFor=\"address_2\" className={labelClassName}>Address Line 2</Label>\n        <Input\n          id=\"address_2\"\n          value={formData.address_2 || ''}\n          onChange={(e) => handleChange('address_2', e.target.value)}\n          placeholder=\"Apt, suite, floor (optional)\"\n          className={`mt-1 ${inputClassName}`}\n        />\n      </div>\n      \n      <div>\n        <Label htmlFor=\"city\" className={labelClassName}>City</Label>\n        <Input\n          id=\"city\"\n          value={formData.city || ''}\n          onChange={(e) => handleChange('city', e.target.value)}\n          className={`mt-1 ${inputClassName}`}\n        />\n      </div>\n      \n      <div>\n        <Label htmlFor=\"state\" className={labelClassName}>State/Province</Label>\n        <Select \n          value={formData.state || ''} \n          onValueChange={handleStateChange}\n          key={formData.state || 'empty'}\n        >\n          <SelectTrigger className={`mt-1 ${darkMode ? 'bg-slate-700 border-slate-600 text-slate-200' : ''}`}>\n            <SelectValue placeholder=\"Select state...\" />\n          </SelectTrigger>\n          <SelectContent className={darkMode ? \"bg-slate-800 border-slate-700 text-slate-200\" : \"\"}>\n            {states.map((state) => (\n              <SelectItem \n                key={state.code}\n                value={state.code}\n                className={darkMode ? \"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\" : \"\"}\n              >\n                {state.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n      \n      <div>\n        <Label htmlFor=\"zip\" className={labelClassName}>ZIP/Postal Code</Label>\n        <Input\n          id=\"zip\"\n          value={formData.zip || ''}\n          onChange={(e) => handleChange('zip', e.target.value)}\n          className={`mt-1 ${inputClassName}`}\n        />\n      </div>\n      \n      <div>\n        <Label htmlFor=\"country\" className={labelClassName}>Country</Label>\n        <Select \n          value={currentCountry?.code || ''} \n          onValueChange={handleCountryChange}\n          key={currentCountry?.code || 'empty'}\n        >\n          <SelectTrigger className={`mt-1 ${darkMode ? 'bg-slate-700 border-slate-600 text-slate-200' : ''}`}>\n            <SelectValue placeholder=\"Select country...\" />\n          </SelectTrigger>\n          <SelectContent className={darkMode ? \"bg-slate-800 border-slate-700 text-slate-200\" : \"\"}>\n            {countries.map((country) => (\n              <SelectItem \n                key={country.code}\n                value={country.code}\n                className={darkMode ? \"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\" : \"\"}\n              >\n                {country.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ApiCache.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ApiManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":62,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":62,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useCallback, useRef } from 'react';\n\nconst ApiContext = createContext(null);\n\nexport const ApiProvider = ({ children }) => {\n  const cacheRef = useRef(new Map());\n  const pendingRequestsRef = useRef(new Map());\n\n  const cachedRequest = useCallback(async (entityName, methodName, params, fetcher) => {\n    const cacheKey = `${entityName}.${methodName}:${JSON.stringify(params)}`;\n    \n    if (cacheRef.current.has(cacheKey)) {\n      const cached = cacheRef.current.get(cacheKey);\n      const age = Date.now() - cached.timestamp;\n      if (age < 30000) {\n        return cached.data;\n      }\n    }\n\n    if (pendingRequestsRef.current.has(cacheKey)) {\n      return pendingRequestsRef.current.get(cacheKey);\n    }\n\n    const promise = fetcher()\n      .then(data => {\n        cacheRef.current.set(cacheKey, { data, timestamp: Date.now() });\n        pendingRequestsRef.current.delete(cacheKey);\n        return data;\n      })\n      .catch(error => {\n        pendingRequestsRef.current.delete(cacheKey);\n        throw error;\n      });\n\n    pendingRequestsRef.current.set(cacheKey, promise);\n    return promise;\n  }, []);\n\n  const clearCache = useCallback((pattern) => {\n    if (!pattern) {\n      cacheRef.current.clear();\n      pendingRequestsRef.current.clear();\n      return;\n    }\n\n    const keysToDelete = [];\n    for (const key of cacheRef.current.keys()) {\n      if (key.includes(pattern)) {\n        keysToDelete.push(key);\n      }\n    }\n    keysToDelete.forEach(key => cacheRef.current.delete(key));\n  }, []);\n\n  return (\n    <ApiContext.Provider value={{ cachedRequest, clearCache }}>\n      {children}\n    </ApiContext.Provider>\n  );\n};\n\nexport const useApiManager = () => {\n  const context = useContext(ApiContext);\n  if (!context) {\n    throw new Error('useApiManager must be used within ApiProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ApiOptimizer.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'processQueue'. Either include it or remove the dependency array.","line":22,"column":6,"nodeType":"ArrayExpression","endLine":22,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [processQueue]","fix":{"range":[668,670],"text":"[processQueue]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":55,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":55,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useRef, useCallback } from 'react';\n\nconst ApiOptimizerContext = createContext(null);\n\nexport const ApiOptimizerProvider = ({ children }) => {\n  const requestQueueRef = useRef([]);\n  const processingRef = useRef(false);\n  const batchTimeoutRef = useRef(null);\n\n  const queueRequest = useCallback((request) => {\n    return new Promise((resolve, reject) => {\n      requestQueueRef.current.push({ request, resolve, reject });\n      \n      if (batchTimeoutRef.current) {\n        clearTimeout(batchTimeoutRef.current);\n      }\n\n      batchTimeoutRef.current = setTimeout(() => {\n        processQueue();\n      }, 50);\n    });\n  }, []);\n\n  const processQueue = useCallback(async () => {\n    if (processingRef.current || requestQueueRef.current.length === 0) {\n      return;\n    }\n\n    processingRef.current = true;\n    const batch = requestQueueRef.current.splice(0, 5);\n\n    for (const { request, resolve, reject } of batch) {\n      try {\n        const result = await request();\n        resolve(result);\n      } catch (error) {\n        reject(error);\n      }\n    }\n\n    processingRef.current = false;\n\n    if (requestQueueRef.current.length > 0) {\n      setTimeout(processQueue, 100);\n    }\n  }, []);\n\n  return (\n    <ApiOptimizerContext.Provider value={{ queueRequest }}>\n      {children}\n    </ApiOptimizerContext.Provider>\n  );\n};\n\nexport const useApiOptimizer = () => {\n  const context = useContext(ApiOptimizerContext);\n  if (!context) {\n    return { queueRequest: (req) => req() };\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\BackfillUniqueIdsClient.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'generateUniqueId' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"generateUniqueId"},"fix":{"range":[373,424],"text":""},"desc":"Remove unused variable 'generateUniqueId'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, CheckCircle, AlertTriangle, FileDigit } from 'lucide-react';\nimport { Account } from '@/api/entities';\nimport { Contact } from '@/api/entities';\nimport { Lead } from '@/api/entities';\nimport { generateUniqueId } from '@/api/functions';\n\nexport default function BackfillUniqueIdsClient({ tenantId }) {\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null);\n  const [progress, setProgress] = useState({ current: 0, total: 0 });\n\n  const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n  const updateWithRetry = async (EntityClass, recordId, data, maxRetries = 3) => {\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\n      try {\n        await EntityClass.update(recordId, data);\n        return { success: true };\n      } catch (error) {\n        const isRateLimit = error?.response?.status === 429 || error?.status === 429;\n        \n        if (isRateLimit && attempt < maxRetries - 1) {\n          // Exponential backoff: 5s, 10s, 20s\n          const waitTime = 5000 * Math.pow(2, attempt);\n          console.log(`Rate limited. Waiting ${waitTime/1000}s before retry ${attempt + 1}...`);\n          await sleep(waitTime);\n          continue;\n        }\n        \n        return { success: false, error: error.message };\n      }\n    }\n    return { success: false, error: 'Max retries exceeded' };\n  };\n\n  const backfillEntity = async (EntityClass, entityType, prefix) => {\n    try {\n      setProgress({ current: 0, total: 0 });\n      \n      // Get all records for tenant\n      const allRecords = await EntityClass.filter({ tenant_id: tenantId });\n      const recordsWithoutId = allRecords.filter(r => !r.unique_id);\n\n      if (recordsWithoutId.length === 0) {\n        return {\n          success: true,\n          message: `All ${entityType} records already have unique_ids`,\n          updated: 0\n        };\n      }\n\n      setProgress({ current: 0, total: recordsWithoutId.length });\n\n      // Find highest existing number\n      const existingIds = allRecords\n        .filter(r => r.unique_id && r.unique_id.startsWith(`${prefix}-`))\n        .map(r => {\n          const parts = r.unique_id.split('-');\n          const num = parseInt(parts[parts.length - 1]);\n          return isNaN(num) ? 0 : num;\n        });\n\n      let nextNumber = existingIds.length > 0 ? Math.max(...existingIds) + 1 : 1;\n      let updated = 0;\n      let failed = 0;\n\n      // Process ONE record at a time with LONG delays\n      for (const record of recordsWithoutId) {\n        const unique_id = `${prefix}-${String(nextNumber).padStart(6, '0')}`;\n        \n        const updateResult = await updateWithRetry(EntityClass, record.id, { unique_id });\n        \n        if (updateResult.success) {\n          updated++;\n          nextNumber++;\n        } else {\n          failed++;\n          console.error(`Failed to update ${entityType} ${record.id}:`, updateResult.error);\n        }\n        \n        setProgress({ current: updated + failed, total: recordsWithoutId.length });\n        \n        // CRITICAL: 3 second delay between EVERY update to avoid rate limits\n        await sleep(3000);\n      }\n\n      return {\n        success: true,\n        message: `Successfully backfilled ${updated} ${entityType} records${failed > 0 ? ` (${failed} failed)` : ''}`,\n        updated,\n        failed,\n        next_id: `${prefix}-${String(nextNumber).padStart(6, '0')}`\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  const handleBackfill = async (entityType) => {\n    setLoading(true);\n    setResult(null);\n    setProgress({ current: 0, total: 0 });\n\n    try {\n      let res;\n      switch (entityType) {\n        case 'Account':\n          res = await backfillEntity(Account, 'Account', 'ACCT');\n          break;\n        case 'Contact':\n          res = await backfillEntity(Contact, 'Contact', 'CONT');\n          break;\n        case 'Lead':\n          res = await backfillEntity(Lead, 'Lead', 'LEAD');\n          break;\n      }\n\n      setResult(res);\n    } catch (error) {\n      setResult({\n        success: false,\n        message: error.message\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n          <FileDigit className=\"w-5 h-5 text-blue-400\" />\n          Backfill Unique IDs\n        </CardTitle>\n        <p className=\"text-slate-400 text-sm\">\n          Generate unique IDs (CONT-000001, ACCT-000001, LEAD-000001) for records that are missing them\n        </p>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex flex-wrap gap-3\">\n          <Button\n            onClick={() => handleBackfill('Account')}\n            disabled={loading}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            {loading ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Processing...\n              </>\n            ) : (\n              'Backfill Accounts'\n            )}\n          </Button>\n          \n          <Button\n            onClick={() => handleBackfill('Contact')}\n            disabled={loading}\n            className=\"bg-green-600 hover:bg-green-700\"\n          >\n            {loading ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Processing...\n              </>\n            ) : (\n              'Backfill Contacts'\n            )}\n          </Button>\n          \n          <Button\n            onClick={() => handleBackfill('Lead')}\n            disabled={loading}\n            className=\"bg-yellow-600 hover:bg-yellow-700\"\n          >\n            {loading ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Processing...\n              </>\n            ) : (\n              'Backfill Leads'\n            )}\n          </Button>\n        </div>\n\n        {loading && progress.total > 0 && (\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm text-slate-400\">\n              <span>Progress: {progress.current} / {progress.total}</span>\n              <span>{Math.round((progress.current / progress.total) * 100)}%</span>\n            </div>\n            <div className=\"w-full bg-slate-700 rounded-full h-2\">\n              <div \n                className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${(progress.current / progress.total) * 100}%` }}\n              />\n            </div>\n            <p className=\"text-xs text-slate-500 italic\">\n              Processing slowly to avoid rate limits (3 seconds per record)...\n            </p>\n          </div>\n        )}\n\n        {result && (\n          <div className={`rounded-lg p-4 ${\n            result.success \n              ? 'bg-green-900/20 border border-green-700/50' \n              : 'bg-red-900/20 border border-red-700/50'\n          }`}>\n            <div className=\"flex items-start gap-3\">\n              {result.success ? (\n                <CheckCircle className=\"w-5 h-5 text-green-400 flex-shrink-0 mt-0.5\" />\n              ) : (\n                <AlertTriangle className=\"w-5 h-5 text-red-400 flex-shrink-0 mt-0.5\" />\n              )}\n              <div className=\"flex-1\">\n                <p className={result.success ? 'text-green-100' : 'text-red-100'}>\n                  {result.message}\n                </p>\n                {result.updated > 0 && (\n                  <p className=\"text-slate-400 text-sm mt-1\">\n                    Updated {result.updated} records. Next ID: <code className=\"bg-slate-700 px-2 py-0.5 rounded\">{result.next_id}</code>\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\Clock.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\n\nexport default function Clock() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => setCurrentDate(new Date()), 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div className=\"text-center p-3 rounded-lg\">\n        <p className=\"text-sky-400 text-sm font-semibold\">AI-Powered Business Growth Platform</p>\n        <p className=\"text-yellow-500 mt-1 text-sm font-extrabold\">{format(currentDate, \"MMM dd, yyyy\")}</p>\n        <p className=\"text-green-400 text-base font-bold\">{format(currentDate, \"hh:mm:ss a\")}</p>\n    </div>);\n\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ConfirmDialog.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":102,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":102,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n} from '@/components/ui/alert-dialog';\r\nimport { AlertTriangle } from 'lucide-react';\r\n\r\n/**\r\n * Reusable confirmation dialog component\r\n * \r\n * Usage:\r\n * const [confirmDialog, setConfirmDialog] = useState(null);\r\n * \r\n * <ConfirmDialog\r\n *   open={confirmDialog !== null}\r\n *   onConfirm={() => { confirmDialog?.onConfirm(); setConfirmDialog(null); }}\r\n *   onCancel={() => setConfirmDialog(null)}\r\n *   title={confirmDialog?.title}\r\n *   description={confirmDialog?.description}\r\n *   variant={confirmDialog?.variant}\r\n * />\r\n * \r\n * // To show dialog:\r\n * setConfirmDialog({\r\n *   title: \"Delete Item?\",\r\n *   description: \"This action cannot be undone.\",\r\n *   variant: \"destructive\",\r\n *   onConfirm: () => { // perform action }\r\n * });\r\n */\r\nexport default function ConfirmDialog({\r\n  open,\r\n  onConfirm,\r\n  onCancel,\r\n  title = \"Are you sure?\",\r\n  description = \"This action cannot be undone.\",\r\n  variant = \"default\", // \"default\" | \"destructive\"\r\n  confirmText = \"Confirm\",\r\n  cancelText = \"Cancel\"\r\n}) {\r\n  return (\r\n    <AlertDialog open={open} onOpenChange={(isOpen) => !isOpen && onCancel()}>\r\n      <AlertDialogContent>\r\n        <AlertDialogHeader>\r\n          <AlertDialogTitle className=\"flex items-center gap-2\">\r\n            {variant === \"destructive\" && (\r\n              <AlertTriangle className=\"h-5 w-5 text-destructive\" />\r\n            )}\r\n            {title}\r\n          </AlertDialogTitle>\r\n          <AlertDialogDescription>\r\n            {description}\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter>\r\n          <AlertDialogCancel onClick={onCancel}>\r\n            {cancelText}\r\n          </AlertDialogCancel>\r\n          <AlertDialogAction\r\n            onClick={onConfirm}\r\n            className={variant === \"destructive\" ? \"bg-destructive hover:bg-destructive/90\" : \"\"}\r\n          >\r\n            {confirmText}\r\n          </AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n\r\n/**\r\n * Hook for easier confirmation dialog management\r\n * \r\n * Usage:\r\n * const { ConfirmDialog, confirm } = useConfirmDialog();\r\n * \r\n * const handleDelete = async () => {\r\n *   const confirmed = await confirm({\r\n *     title: \"Delete Item?\",\r\n *     description: \"This action cannot be undone.\",\r\n *     variant: \"destructive\"\r\n *   });\r\n *   \r\n *   if (confirmed) {\r\n *     // perform delete\r\n *   }\r\n * };\r\n * \r\n * return (\r\n *   <>\r\n *     <ConfirmDialog />\r\n *     <Button onClick={handleDelete}>Delete</Button>\r\n *   </>\r\n * );\r\n */\r\nexport function useConfirmDialog() {\r\n  const [dialogState, setDialogState] = React.useState(null);\r\n\r\n  const confirm = React.useCallback((options) => {\r\n    return new Promise((resolve) => {\r\n      setDialogState({\r\n        ...options,\r\n        onConfirm: () => {\r\n          setDialogState(null);\r\n          resolve(true);\r\n        },\r\n        onCancel: () => {\r\n          setDialogState(null);\r\n          resolve(false);\r\n        }\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const ConfirmDialogComponent = React.useCallback(() => {\r\n    if (!dialogState) return null;\r\n\r\n    return (\r\n      <ConfirmDialog\r\n        open={true}\r\n        onConfirm={dialogState.onConfirm}\r\n        onCancel={dialogState.onCancel}\r\n        title={dialogState.title}\r\n        description={dialogState.description}\r\n        variant={dialogState.variant}\r\n        confirmText={dialogState.confirmText}\r\n        cancelText={dialogState.cancelText}\r\n      />\r\n    );\r\n  }, [dialogState]);\r\n\r\n  return { ConfirmDialog: ConfirmDialogComponent, confirm };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ContactSelector.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":5,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"Plus"},"fix":{"range":[339,345],"text":""},"desc":"Remove unused variable 'Plus'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":69,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2572,2600],"text":"No contacts found matching &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2572,2600],"text":"No contacts found matching &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2572,2600],"text":"No contacts found matching &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2572,2600],"text":"No contacts found matching &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":69,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2613,2614],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2613,2614],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2613,2614],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2613,2614],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Button } from \"@/components/ui/button\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Check, ChevronsUpDown, User, Plus } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function ContactSelector({ \n  contacts = [], \n  value, \n  onValueChange, \n  placeholder = \"Select contact...\", \n  disabled = false, \n  className = \"\", \n  contentClassName = \"\", \n  itemClassName = \"\",\n  required = false\n}) {\n  const [open, setOpen] = useState(false);\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const selectedContact = contacts.find((contact) => contact.id === value);\n\n  // Filter contacts based on search\n  const filteredContacts = contacts.filter(contact => {\n    const fullName = `${contact.first_name || ''} ${contact.last_name || ''}`.trim();\n    const email = contact.email || '';\n    const searchLower = searchValue.toLowerCase();\n    return fullName.toLowerCase().includes(searchLower) || \n           email.toLowerCase().includes(searchLower);\n  });\n\n  const getDisplayName = (contact) => {\n    const fullName = `${contact.first_name || ''} ${contact.last_name || ''}`.trim();\n    return fullName || contact.email || 'Unnamed Contact';\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          disabled={disabled}\n          className={cn(\"w-full justify-between\", className)}\n        >\n          {selectedContact ? (\n            <div className=\"flex items-center gap-2 truncate\">\n              <User className=\"w-4 h-4 text-slate-500 flex-shrink-0\" />\n              <span className=\"truncate\">{getDisplayName(selectedContact)}</span>\n            </div>\n          ) : (\n            <span className=\"text-slate-500\">{placeholder}</span>\n          )}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className={cn(\"w-[--radix-popover-trigger-width] p-0\", contentClassName)}>\n        <Command>\n          <CommandInput \n            placeholder=\"Search contacts...\" \n            value={searchValue}\n            onValueChange={setSearchValue}\n          />\n          <CommandList>\n            <CommandEmpty>\n              <div className=\"py-6 text-center text-sm\">\n                <p>No contacts found matching \"{searchValue}\"</p>\n              </div>\n            </CommandEmpty>\n            <CommandGroup>\n              {!required && (\n                <CommandItem\n                  value=\"__none__\"\n                  onSelect={() => {\n                    onValueChange(null);\n                    setOpen(false);\n                  }}\n                  className={cn(\"cursor-pointer\", itemClassName)}\n                >\n                  <Check className={cn(\"mr-2 h-4 w-4\", !value ? \"opacity-100\" : \"opacity-0\")} />\n                  <span className=\"text-muted-foreground\">No contact</span>\n                </CommandItem>\n              )}\n              {filteredContacts.map((contact) => (\n                <CommandItem\n                  key={contact.id}\n                  value={getDisplayName(contact)}\n                  onSelect={() => {\n                    onValueChange(contact.id === value ? null : contact.id);\n                    setOpen(false);\n                  }}\n                  className={cn(\"cursor-pointer\", itemClassName)}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === contact.id ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  <div className=\"flex items-center gap-2\">\n                    <User className=\"w-4 h-4 text-slate-500\" />\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">{getDisplayName(contact)}</span>\n                      {contact.email && (\n                        <span className=\"text-xs text-muted-foreground\">\n                          {contact.email}\n                        </span>\n                      )}\n                      {contact.company && (\n                        <span className=\"text-xs text-muted-foreground\">\n                          {contact.company}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\CronHeartbeat.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from 'react';\nimport { cronJobRunner } from '@/api/functions';\nimport { User } from '@/api/entities';\nimport { useErrorLog, handleApiError, createError } from './ErrorLogger';\n\nexport default function CronHeartbeat() {\n  const lastRunRef = useRef(null);\n  const isRunningRef = useRef(false);\n  const failureCountRef = useRef(0);\n  const MAX_FAILURES = 3;\n  const { logError } = useErrorLog();\n\n  useEffect(() => {\n    const checkAndRunCronJobs = async () => {\n      if (isRunningRef.current || failureCountRef.current >= MAX_FAILURES) {\n        return;\n      }\n\n      const now = Date.now();\n      if (lastRunRef.current && now - lastRunRef.current < 5 * 60 * 1000) {\n        return;\n      }\n\n      try {\n        const user = await User.me();\n        \n        if (user?.role !== 'admin' && user?.role !== 'superadmin') {\n          return;\n        }\n\n        isRunningRef.current = true;\n        lastRunRef.current = now;\n\n        const timeoutPromise = new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Cron execution timeout')), 30000)\n        );\n        \n        const cronPromise = cronJobRunner({}).catch(err => {\n          throw err;\n        });\n\n        await Promise.race([cronPromise, timeoutPromise]);\n        \n        failureCountRef.current = 0;\n\n      } catch (error) {\n        failureCountRef.current++;\n        \n        if (failureCountRef.current >= MAX_FAILURES && logError) {\n          logError(createError('Cron System', 'Cron jobs disabled after multiple failures', {\n            severity: 'critical',\n            actionable: 'Check Settings ΓåÆ System Health. Page refresh required to resume.',\n            details: error?.message\n          }));\n        } else if (logError) {\n          logError(handleApiError('Cron System', error));\n        }\n      } finally {\n        isRunningRef.current = false;\n      }\n    };\n\n    const initialTimeout = setTimeout(checkAndRunCronJobs, 10000);\n    const interval = setInterval(checkAndRunCronJobs, 5 * 60 * 1000);\n\n    return () => {\n      clearTimeout(initialTimeout);\n      clearInterval(interval);\n    };\n  }, [logError]);\n\n  return null;\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\CsvExportButton.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\CsvImportDialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\DataManagementDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Download, Upload, Loader2 } from 'lucide-react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport CsvImportDialog from './CsvImportDialog';\nimport * as Entities from \"@/api/entities\";\n\nconst EXPORTABLE_ENTITIES = [\"Lead\", \"Contact\", \"Account\", \"Opportunity\", \"Activity\", \"Employee\"];\nconst IMPORTABLE_ENTITIES = [\"Lead\", \"Contact\", \"Account\", \"Opportunity\", \"Activity\", \"Employee\"];\n\nfunction ExportTab() {\n  const [isExporting, setIsExporting] = useState(null);\n\n  const downloadCsv = async (entityName) => {\n    setIsExporting(entityName);\n    try {\n      const Entity = Entities[entityName];\n      if (!Entity) throw new Error(`Invalid entity: ${entityName}`);\n      \n      const data = await Entity.list();\n      \n      if (!data || data.length === 0) {\n        alert(`No data available to export for ${entityName}.`);\n        return;\n      }\n      \n      const headers = Object.keys(data[0]);\n      const replacer = (key, value) => value === null ? '' : value;\n      \n      const csvContent = [\n        headers.join(','),\n        ...data.map(row => headers.map(header => JSON.stringify(row[header], replacer).replace(/,/g, 'ΓÇÜ')).join(','))\n      ].join('\\n');\n\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `${entityName.toLowerCase()}-export.csv`);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error(\"Error exporting to CSV:\", error);\n      alert(`An error occurred during export: ${error.message}`);\n    } finally {\n      setIsExporting(null);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <p className=\"text-sm text-slate-600\">\n        Select a data type to download a CSV file of all its records.\n      </p>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {EXPORTABLE_ENTITIES.map(entityName => (\n          <Button\n            key={entityName}\n            variant=\"outline\"\n            onClick={() => downloadCsv(entityName)}\n            disabled={isExporting}\n            className=\"justify-start\"\n          >\n            {isExporting === entityName ? (\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n            ) : (\n              <Download className=\"w-4 h-4 mr-2\" />\n            )}\n            Export All {entityName}s\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction ImportTab() {\n  const [selectedEntity, setSelectedEntity] = useState('');\n  const [showImportDialog, setShowImportDialog] = useState(false);\n\n  const handleStartImport = () => {\n    if (selectedEntity) {\n      setShowImportDialog(true);\n    } else {\n      alert(\"Please select a data type to import.\");\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <p className=\"text-sm text-slate-600\">\n        Select the type of data you want to import, then you will be prompted to upload your CSV file.\n      </p>\n      <div className=\"flex items-end gap-4\">\n        <div className=\"flex-grow\">\n          <Label htmlFor=\"entity-select\">Data Type</Label>\n          <Select value={selectedEntity} onValueChange={setSelectedEntity}>\n            <SelectTrigger id=\"entity-select\">\n              <SelectValue placeholder=\"Choose data type...\" />\n            </SelectTrigger>\n            <SelectContent>\n              {IMPORTABLE_ENTITIES.map(name => (\n                <SelectItem key={name} value={name}>{name}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <Button onClick={handleStartImport} disabled={!selectedEntity}>\n          <Upload className=\"w-4 h-4 mr-2\" />\n          Start Import\n        </Button>\n      </div>\n\n      {showImportDialog && selectedEntity && (\n        <CsvImportDialog\n          open={showImportDialog}\n          onOpenChange={setShowImportDialog}\n          entity={Entities[selectedEntity]}\n          schema={Entities[selectedEntity]?.schema()}\n          onSuccess={() => {\n            alert(`${selectedEntity}s imported successfully! The page will now refresh to show the new data.`);\n            window.location.reload();\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function DataManagementDialog({ children }) {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>{children}</DialogTrigger>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Data Management</DialogTitle>\n          <DialogDescription>\n            Import data from a CSV file or export existing data.\n          </DialogDescription>\n        </DialogHeader>\n        <Tabs defaultValue=\"import\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"import\">Import</TabsTrigger>\n            <TabsTrigger value=\"export\">Export</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"import\" className=\"pt-4\">\n            <ImportTab />\n          </TabsContent>\n          <TabsContent value=\"export\" className=\"pt-4\">\n            <ExportTab />\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\DatabaseArchitectureGuide.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":37,"column":86,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1884,1953],"text":" Base44/MongoDB doesn&apos;t enforce foreign key constraints automatically"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1884,1953],"text":" Base44/MongoDB doesn&lsquo;t enforce foreign key constraints automatically"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1884,1953],"text":" Base44/MongoDB doesn&#39;t enforce foreign key constraints automatically"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1884,1953],"text":" Base44/MongoDB doesn&rsquo;t enforce foreign key constraints automatically"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":70,"column":102,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB&apos;s document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB&lsquo;s document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB&#39;s document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB&rsquo;s document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":71,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become &quot;fact tables\" while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become &ldquo;fact tables\" while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become &#34;fact tables\" while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become &rdquo;fact tables\" while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":71,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables&quot; while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables&ldquo; while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables&#34; while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables&rdquo; while reference data becomes \"dimension tables.\"\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":71,"column":88,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes &quot;dimension tables.\"\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes &ldquo;dimension tables.\"\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes &#34;dimension tables.\"\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes &rdquo;dimension tables.\"\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":71,"column":106,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes \"dimension tables.&quot;\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes \"dimension tables.&ldquo;\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes \"dimension tables.&#34;\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3517,3764],"text":"\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes \"dimension tables.&rdquo;\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":350,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[19521,19569],"text":"Add &quot;View Archive\" option for historical lookups"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[19521,19569],"text":"Add &ldquo;View Archive\" option for historical lookups"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[19521,19569],"text":"Add &#34;View Archive\" option for historical lookups"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[19521,19569],"text":"Add &rdquo;View Archive\" option for historical lookups"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":350,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[19521,19569],"text":"Add \"View Archive&quot; option for historical lookups"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[19521,19569],"text":"Add \"View Archive&ldquo; option for historical lookups"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[19521,19569],"text":"Add \"View Archive&#34; option for historical lookups"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[19521,19569],"text":"Add \"View Archive&rdquo; option for historical lookups"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":443,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[25287,25356],"text":"Dashboard reads from cache (instant load) with &quot;as of date\" timestamp"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[25287,25356],"text":"Dashboard reads from cache (instant load) with &ldquo;as of date\" timestamp"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[25287,25356],"text":"Dashboard reads from cache (instant load) with &#34;as of date\" timestamp"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[25287,25356],"text":"Dashboard reads from cache (instant load) with &rdquo;as of date\" timestamp"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":443,"column":79,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[25287,25356],"text":"Dashboard reads from cache (instant load) with \"as of date&quot; timestamp"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[25287,25356],"text":"Dashboard reads from cache (instant load) with \"as of date&ldquo; timestamp"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[25287,25356],"text":"Dashboard reads from cache (instant load) with \"as of date&#34; timestamp"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[25287,25356],"text":"Dashboard reads from cache (instant load) with \"as of date&rdquo; timestamp"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":455,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[26091,26148],"text":"Add user preference: &quot;Keep read notifications for X days\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[26091,26148],"text":"Add user preference: &ldquo;Keep read notifications for X days\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[26091,26148],"text":"Add user preference: &#34;Keep read notifications for X days\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[26091,26148],"text":"Add user preference: &rdquo;Keep read notifications for X days\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":455,"column":77,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[26091,26148],"text":"Add user preference: \"Keep read notifications for X days&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[26091,26148],"text":"Add user preference: \"Keep read notifications for X days&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[26091,26148],"text":"Add user preference: \"Keep read notifications for X days&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[26091,26148],"text":"Add user preference: \"Keep read notifications for X days&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":606,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":606,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Database, GitBranch, Archive, Zap, Shield, TrendingUp } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\n/**\n * DATABASE ARCHITECTURE OPTIMIZATION GUIDE\n * Comprehensive strategy for optimizing Ai-SHA CRM database structure\n */\nexport default function DatabaseArchitectureGuide() {\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-6 bg-slate-50\">\n      <div className=\"flex items-center gap-3 mb-8\">\n        <Database className=\"w-8 h-8 text-blue-600\" />\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900\">Database Architecture Optimization</h1>\n          <p className=\"text-slate-600\">Strategic plan for improving data structure and performance</p>\n        </div>\n      </div>\n\n      {/* Current State Analysis */}\n      <Card className=\"border-slate-200\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-900\">Current Architecture Analysis</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"bg-slate-50 p-4 rounded-lg border border-slate-200\">\n            <h3 className=\"font-semibold text-slate-800 mb-3\">Current Structure</h3>\n            <ul className=\"space-y-2 text-sm text-slate-700\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-orange-500 mt-1\">ΓùÅ</span>\n                <span><strong>Flat Entity Model:</strong> Each entity (Contact, Account, Lead, etc.) is independent with loose relationships via ID references</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-orange-500 mt-1\">ΓùÅ</span>\n                <span><strong>No Referential Integrity:</strong> Base44/MongoDB doesn't enforce foreign key constraints automatically</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-orange-500 mt-1\">ΓùÅ</span>\n                <span><strong>Mixed Normalization:</strong> Some denormalization (caching names/emails) but inconsistent</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-orange-500 mt-1\">ΓùÅ</span>\n                <span><strong>Single Tenant Filtering:</strong> All queries filter by tenant_id at application level</span>\n              </li>\n            </ul>\n          </div>\n\n          <Alert className=\"bg-amber-50 border-amber-200\">\n            <AlertDescription className=\"text-slate-700\">\n              <strong>Key Issues:</strong> Orphaned records, expensive JOIN-like operations, no historical tracking, slow aggregate queries\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n\n      {/* Recommended Architecture: Hybrid Star Schema */}\n      <Card className=\"border-slate-200\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-900 flex items-center gap-2\">\n            <GitBranch className=\"w-5 h-5 text-blue-600\" />\n            Recommended: Hybrid Star Schema Approach\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n            <h3 className=\"font-semibold text-slate-900 mb-2\">What is a Hybrid Star Schema?</h3>\n            <p className=\"text-sm text-slate-700 mb-3\">\n              Combines traditional star schema patterns (fact tables + dimension tables) with MongoDB's document flexibility. \n              Core business entities become \"fact tables\" while reference data becomes \"dimension tables.\"\n            </p>\n            <div className=\"text-sm text-slate-700\">\n              <strong>Benefits:</strong> Faster queries, better data integrity, easier analytics, cleaner separation of concerns\n            </div>\n          </div>\n\n          {/* Fact Tables */}\n          <div>\n            <h3 className=\"font-semibold text-slate-900 mb-3 flex items-center gap-2\">\n              <Database className=\"w-4 h-4 text-green-600\" />\n              Fact Tables (Core Business Entities)\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-slate-800\">Contact (Fact)</h4>\n                  <Badge className=\"bg-green-100 text-green-700\">Primary</Badge>\n                </div>\n                <div className=\"text-sm text-slate-600 space-y-1\">\n                  <p><strong>Purpose:</strong> Store all contact interactions and attributes</p>\n                  <p><strong>Key Fields:</strong> id, tenant_id, unique_id, first_name, last_name, email, phone</p>\n                  <p><strong>References:</strong> account_id ΓåÆ Account, assigned_to ΓåÆ Employee</p>\n                  <p><strong>Optimization:</strong> Index on [tenant_id, status, assigned_to, created_date]</p>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-slate-800\">Lead (Fact)</h4>\n                  <Badge className=\"bg-green-100 text-green-700\">Primary</Badge>\n                </div>\n                <div className=\"text-sm text-slate-600 space-y-1\">\n                  <p><strong>Purpose:</strong> Track sales pipeline and conversion funnel</p>\n                  <p><strong>Key Fields:</strong> id, tenant_id, unique_id, status, score, source</p>\n                  <p><strong>References:</strong> converted_contact_id ΓåÆ Contact, account_id ΓåÆ Account</p>\n                  <p><strong>Optimization:</strong> Index on [tenant_id, status, score, created_date]</p>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-slate-800\">Opportunity (Fact)</h4>\n                  <Badge className=\"bg-green-100 text-green-700\">Primary</Badge>\n                </div>\n                <div className=\"text-sm text-slate-600 space-y-1\">\n                  <p><strong>Purpose:</strong> Revenue tracking and forecasting</p>\n                  <p><strong>Key Fields:</strong> id, tenant_id, amount, stage, probability, close_date</p>\n                  <p><strong>References:</strong> account_id ΓåÆ Account, contact_id ΓåÆ Contact</p>\n                  <p><strong>Optimization:</strong> Index on [tenant_id, stage, close_date, amount]</p>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-slate-800\">Activity (Fact)</h4>\n                  <Badge className=\"bg-green-100 text-green-700\">Transaction</Badge>\n                </div>\n                <div className=\"text-sm text-slate-600 space-y-1\">\n                  <p><strong>Purpose:</strong> Time-series interaction tracking</p>\n                  <p><strong>Key Fields:</strong> id, tenant_id, type, due_date, status, related_to, related_id</p>\n                  <p><strong>Optimization:</strong> Index on [tenant_id, due_date, status, related_to+related_id]</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Dimension Tables */}\n          <div>\n            <h3 className=\"font-semibold text-slate-900 mb-3 flex items-center gap-2\">\n              <GitBranch className=\"w-4 h-4 text-blue-600\" />\n              Dimension Tables (Reference Data)\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-slate-800\">Account (Dimension)</h4>\n                  <Badge className=\"bg-blue-100 text-blue-700\">Reference</Badge>\n                </div>\n                <div className=\"text-sm text-slate-600 space-y-1\">\n                  <p><strong>Purpose:</strong> Company/organization master data</p>\n                  <p><strong>Key Fields:</strong> id, tenant_id, unique_id, name, industry, type</p>\n                  <p><strong>Optimization:</strong> Index on [tenant_id, name], unique constraint on [tenant_id, unique_id]</p>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-slate-800\">Employee (Dimension)</h4>\n                  <Badge className=\"bg-blue-100 text-blue-700\">Reference</Badge>\n                </div>\n                <div className=\"text-sm text-slate-600 space-y-1\">\n                  <p><strong>Purpose:</strong> User assignment and ownership tracking</p>\n                  <p><strong>Key Fields:</strong> id, tenant_id, email, user_email, first_name, last_name</p>\n                  <p><strong>Optimization:</strong> Index on [tenant_id, email], [tenant_id, is_active]</p>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-slate-800\">Tenant (Dimension)</h4>\n                  <Badge className=\"bg-blue-100 text-blue-700\">Master</Badge>\n                </div>\n                <div className=\"text-sm text-slate-600 space-y-1\">\n                  <p><strong>Purpose:</strong> Multi-tenant isolation and branding</p>\n                  <p><strong>Key Fields:</strong> id, name, domain, branding_settings</p>\n                  <p><strong>Optimization:</strong> Small table, full cache acceptable</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Auxiliary/Junction Tables */}\n          <div>\n            <h3 className=\"font-semibold text-slate-900 mb-3 flex items-center gap-2\">\n              <Zap className=\"w-4 h-4 text-purple-600\" />\n              Auxiliary Tables (Linking & Metadata)\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-slate-800\">Note (Auxiliary)</h4>\n                  <Badge className=\"bg-purple-100 text-purple-700\">1:Many</Badge>\n                </div>\n                <div className=\"text-sm text-slate-600 space-y-1\">\n                  <p><strong>Purpose:</strong> Attach notes to any entity</p>\n                  <p><strong>Pattern:</strong> Polymorphic relationship via related_to + related_id</p>\n                  <p><strong>Optimization:</strong> Composite index on [tenant_id, related_to, related_id, created_date]</p>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-slate-800\">Notification (Auxiliary)</h4>\n                  <Badge className=\"bg-purple-100 text-purple-700\">User-Scoped</Badge>\n                </div>\n                <div className=\"text-sm text-slate-600 space-y-1\">\n                  <p><strong>Purpose:</strong> User-specific alerts and updates</p>\n                  <p><strong>Optimization:</strong> Index on [user_email, is_read, created_date], auto-archive after 30 days</p>\n                </div>\n              </div>\n\n              <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-slate-800\">AuditLog (Auxiliary)</h4>\n                  <Badge className=\"bg-purple-100 text-purple-700\">Append-Only</Badge>\n                </div>\n                <div className=\"text-sm text-slate-600 space-y-1\">\n                  <p><strong>Purpose:</strong> Historical change tracking</p>\n                  <p><strong>Pattern:</strong> Write-heavy, read-light (admin only)</p>\n                  <p><strong>Optimization:</strong> Partition by date, archive quarterly, index on [user_email, action_type, created_date]</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Implementation Recommendations */}\n      <Card className=\"border-slate-200\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-900 flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5 text-green-600\" />\n            Implementation Roadmap\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            {/* Phase 1 */}\n            <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Badge className=\"bg-green-600 text-white\">Phase 1</Badge>\n                <h3 className=\"font-semibold text-slate-900\">Referential Integrity Layer</h3>\n              </div>\n              <ul className=\"space-y-2 text-sm text-slate-700\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-600 mt-1\">Γ£ô</span>\n                  <span>Create validation functions to check foreign key relationships before writes</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-600 mt-1\">Γ£ô</span>\n                  <span>Add cascade delete handlers (e.g., deleting Account should handle related Contacts)</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-600 mt-1\">Γ£ô</span>\n                  <span>Implement orphan detection and cleanup utilities</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-600 mt-1\">Γ£ô</span>\n                  <span>Add data consistency checks in Settings ΓåÆ Utilities</span>\n                </li>\n              </ul>\n              <div className=\"mt-3 text-sm text-slate-600\">\n                <strong>Timeline:</strong> 1 week | <strong>Impact:</strong> High - prevents data corruption\n              </div>\n            </div>\n\n            {/* Phase 2 */}\n            <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Badge className=\"bg-blue-600 text-white\">Phase 2</Badge>\n                <h3 className=\"font-semibold text-slate-900\">Denormalization Strategy</h3>\n              </div>\n              <ul className=\"space-y-2 text-sm text-slate-700\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-blue-600 mt-1\">Γ£ô</span>\n                  <span>Add cached fields to fact tables: account_name, assigned_to_name, contact_name</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-blue-600 mt-1\">Γ£ô</span>\n                  <span>Create update triggers to maintain cached values when dimensions change</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-blue-600 mt-1\">Γ£ô</span>\n                  <span>Add computed fields: contact_age_days, opportunity_age_days, activity_overdue</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-blue-600 mt-1\">Γ£ô</span>\n                  <span>Implement nightly sync job to refresh cached data</span>\n                </li>\n              </ul>\n              <div className=\"mt-3 text-sm text-slate-600\">\n                <strong>Timeline:</strong> 2 weeks | <strong>Impact:</strong> Medium - 40% faster list views\n              </div>\n            </div>\n\n            {/* Phase 3 */}\n            <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Badge className=\"bg-purple-600 text-white\">Phase 3</Badge>\n                <h3 className=\"font-semibold text-slate-900\">Aggregation Tables</h3>\n              </div>\n              <ul className=\"space-y-2 text-sm text-slate-700\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-purple-600 mt-1\">Γ£ô</span>\n                  <span>Create DailyStat entity: tenant_id, date, entity_type, metric_type, value</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-purple-600 mt-1\">Γ£ô</span>\n                  <span>Pre-compute dashboard metrics nightly (contact count, lead count, revenue)</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-purple-600 mt-1\">Γ£ô</span>\n                  <span>Add EmployeePerformance summary table for team reports</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-purple-600 mt-1\">Γ£ô</span>\n                  <span>Create materialized views for complex reports</span>\n                </li>\n              </ul>\n              <div className=\"mt-3 text-sm text-slate-600\">\n                <strong>Timeline:</strong> 2 weeks | <strong>Impact:</strong> High - 90% faster dashboard/reports\n              </div>\n            </div>\n\n            {/* Phase 4 */}\n            <div className=\"bg-amber-50 p-4 rounded-lg border border-amber-200\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Badge className=\"bg-amber-600 text-white\">Phase 4</Badge>\n                <h3 className=\"font-semibold text-slate-900 flex items-center gap-2\">\n                  <Archive className=\"w-4 h-4\" />\n                  Historical & Archive Strategy\n                </h3>\n              </div>\n              <ul className=\"space-y-2 text-sm text-slate-700\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-amber-600 mt-1\">Γ£ô</span>\n                  <span>Create archive entities: ArchivedActivity, ArchivedOpportunity, ArchivedLead</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-amber-600 mt-1\">Γ£ô</span>\n                  <span>Move completed activities older than 90 days to archive</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-amber-600 mt-1\">Γ£ô</span>\n                  <span>Move closed opportunities older than 365 days to archive</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-amber-600 mt-1\">Γ£ô</span>\n                  <span>Add \"View Archive\" option for historical lookups</span>\n                </li>\n              </ul>\n              <div className=\"mt-3 text-sm text-slate-600\">\n                <strong>Timeline:</strong> 1 week | <strong>Impact:</strong> High - reduces main table size by 60%\n              </div>\n            </div>\n\n            {/* Phase 5 */}\n            <div className=\"bg-slate-50 p-4 rounded-lg border border-slate-300\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Badge className=\"bg-slate-600 text-white\">Phase 5</Badge>\n                <h3 className=\"font-semibold text-slate-900 flex items-center gap-2\">\n                  <Shield className=\"w-4 h-4\" />\n                  Advanced Indexing & Partitioning\n                </h3>\n              </div>\n              <ul className=\"space-y-2 text-sm text-slate-700\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-slate-600 mt-1\">Γ£ô</span>\n                  <span>Add compound indexes for common query patterns</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-slate-600 mt-1\">Γ£ô</span>\n                  <span>Implement text search indexes for name/email fields</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-slate-600 mt-1\">Γ£ô</span>\n                  <span>Partition large tables by tenant_id for better isolation</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-slate-600 mt-1\">Γ£ô</span>\n                  <span>Add performance monitoring to identify slow queries</span>\n                </li>\n              </ul>\n              <div className=\"mt-3 text-sm text-slate-600\">\n                <strong>Timeline:</strong> 2 weeks | <strong>Impact:</strong> Medium - 30% overall performance boost\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Specific Optimizations */}\n      <Card className=\"border-slate-200\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-900\">Specific Optimization Recommendations</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-4 text-sm text-slate-700\">\n            <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n              <h4 className=\"font-semibold text-slate-800 mb-2\">1. ContactAccount Relationship</h4>\n              <p className=\"text-slate-600 mb-2\"><strong>Current:</strong> Contact.account_id ΓåÆ Account.id (string reference, no validation)</p>\n              <p className=\"text-slate-600 mb-2\"><strong>Proposed:</strong></p>\n              <ul className=\"list-disc list-inside space-y-1 ml-2 text-slate-600\">\n                <li>Add Contact.account_name (cached) for fast display without joins</li>\n                <li>Add validation function: validateAccountExists(account_id)</li>\n                <li>Create orphan cleanup utility: findContactsWithInvalidAccounts()</li>\n                <li>Add cascade option: when Account deleted, set contacts to account_id=null or transfer to new account</li>\n              </ul>\n            </div>\n\n            <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n              <h4 className=\"font-semibold text-slate-800 mb-2\">2. Activity Polymorphic References</h4>\n              <p className=\"text-slate-600 mb-2\"><strong>Current:</strong> Activity.related_to + Activity.related_id (polymorphic pattern)</p>\n              <p className=\"text-slate-600 mb-2\"><strong>Proposed:</strong></p>\n              <ul className=\"list-disc list-inside space-y-1 ml-2 text-slate-600\">\n                <li>Add compound index: [tenant_id, related_to, related_id, due_date]</li>\n                <li>Cache entity name: Activity.related_name for display</li>\n                <li>Add validation: ensure related entity exists before activity creation</li>\n                <li>Implement soft-delete: archive activities when parent entity deleted</li>\n              </ul>\n            </div>\n\n            <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n              <h4 className=\"font-semibold text-slate-800 mb-2\">3. Employee Assignment</h4>\n              <p className=\"text-slate-600 mb-2\"><strong>Current:</strong> Contact/Lead.assigned_to (email string, inconsistent with Employee.email vs Employee.user_email)</p>\n              <p className=\"text-slate-600 mb-2\"><strong>Proposed:</strong></p>\n              <ul className=\"list-disc list-inside space-y-1 ml-2 text-slate-600\">\n                <li>Standardize on Employee.email as canonical identifier</li>\n                <li>Add Employee.is_active filter to selectors (hide inactive employees)</li>\n                <li>Cache Employee name: Contact.assigned_to_name, Lead.assigned_to_name</li>\n                <li>Add reassignment utility when Employee deactivated</li>\n              </ul>\n            </div>\n\n            <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n              <h4 className=\"font-semibold text-slate-800 mb-2\">4. Dashboard Aggregations</h4>\n              <p className=\"text-slate-600 mb-2\"><strong>Current:</strong> Real-time count queries on every dashboard load (slow for large datasets)</p>\n              <p className=\"text-slate-600 mb-2\"><strong>Proposed:</strong></p>\n              <ul className=\"list-disc list-inside space-y-1 ml-2 text-slate-600\">\n                <li>Create DashboardMetric entity with pre-computed stats</li>\n                <li>Run nightly cron job to calculate: total contacts, active leads, pipeline value, etc.</li>\n                <li>Dashboard reads from cache (instant load) with \"as of date\" timestamp</li>\n                <li>Add real-time delta updates for critical metrics</li>\n              </ul>\n            </div>\n\n            <div className=\"bg-white p-4 rounded-lg border border-slate-200\">\n              <h4 className=\"font-semibold text-slate-800 mb-2\">5. Notification Cleanup</h4>\n              <p className=\"text-slate-600 mb-2\"><strong>Current:</strong> Notifications accumulate indefinitely</p>\n              <p className=\"text-slate-600 mb-2\"><strong>Proposed:</strong></p>\n              <ul className=\"list-disc list-inside space-y-1 ml-2 text-slate-600\">\n                <li>Auto-archive notifications older than 30 days</li>\n                <li>Move to ArchivedNotification entity for history</li>\n                <li>Add user preference: \"Keep read notifications for X days\"</li>\n                <li>Reduce notification table size by 90%</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Migration Strategy */}\n      <Card className=\"border-slate-200\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-900\">Safe Migration Strategy</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Alert className=\"bg-blue-50 border-blue-200\">\n            <AlertDescription className=\"text-slate-700\">\n              <strong>Zero-Downtime Approach:</strong> All changes will be backward-compatible. No data loss risk.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"space-y-3 text-sm text-slate-700\">\n            <div className=\"flex items-start gap-3\">\n              <Badge className=\"bg-blue-600 text-white shrink-0\">Step 1</Badge>\n              <div>\n                <p className=\"font-semibold text-slate-800\">Add New Fields (Additive Only)</p>\n                <p className=\"text-slate-600\">Add cached fields like account_name, assigned_to_name to existing entities. Old code continues working.</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3\">\n              <Badge className=\"bg-blue-600 text-white shrink-0\">Step 2</Badge>\n              <div>\n                <p className=\"font-semibold text-slate-800\">Backfill Cached Data</p>\n                <p className=\"text-slate-600\">Run utility to populate new fields for existing records. Can be done in batches during off-hours.</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3\">\n              <Badge className=\"bg-blue-600 text-white shrink-0\">Step 3</Badge>\n              <div>\n                <p className=\"font-semibold text-slate-800\">Update Application Code</p>\n                <p className=\"text-slate-600\">Modify forms/lists to read from cached fields instead of lookups. Performance improves immediately.</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3\">\n              <Badge className=\"bg-blue-600 text-white shrink-0\">Step 4</Badge>\n              <div>\n                <p className=\"font-semibold text-slate-800\">Add Validation Layer</p>\n                <p className=\"text-slate-600\">Implement referential integrity checks in create/update functions. Prevents future orphans.</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3\">\n              <Badge className=\"bg-blue-600 text-white shrink-0\">Step 5</Badge>\n              <div>\n                <p className=\"font-semibold text-slate-800\">Create Archive Entities</p>\n                <p className=\"text-slate-600\">Set up archive tables and migration logic. Move old data gradually over 30 days.</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3\">\n              <Badge className=\"bg-blue-600 text-white shrink-0\">Step 6</Badge>\n              <div>\n                <p className=\"font-semibold text-slate-800\">Monitor & Optimize</p>\n                <p className=\"text-slate-600\">Track query performance, adjust indexes, fine-tune cache TTLs based on real usage patterns.</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Expected Outcomes */}\n      <Card className=\"border-slate-200\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-900 flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5 text-green-600\" />\n            Expected Outcomes\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n              <h4 className=\"font-semibold text-slate-800 mb-2\">Performance Gains</h4>\n              <ul className=\"space-y-1 text-sm text-slate-700\">\n                <li>ΓÇó Dashboard load: <strong>3s ΓåÆ 0.5s</strong> (83% faster)</li>\n                <li>ΓÇó List views: <strong>2s ΓåÆ 0.8s</strong> (60% faster)</li>\n                <li>ΓÇó Form loads: <strong>1.5s ΓåÆ 0.3s</strong> (80% faster)</li>\n                <li>ΓÇó Reports: <strong>10s ΓåÆ 1s</strong> (90% faster)</li>\n              </ul>\n            </div>\n\n            <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n              <h4 className=\"font-semibold text-slate-800 mb-2\">Data Quality</h4>\n              <ul className=\"space-y-1 text-sm text-slate-700\">\n                <li>ΓÇó Zero orphaned records</li>\n                <li>ΓÇó Referential integrity enforced</li>\n                <li>ΓÇó Consistent assignment tracking</li>\n                <li>ΓÇó Complete audit trail</li>\n              </ul>\n            </div>\n\n            <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n              <h4 className=\"font-semibold text-slate-800 mb-2\">Scalability</h4>\n              <ul className=\"space-y-1 text-sm text-slate-700\">\n                <li>ΓÇó Support 100K+ contacts per tenant</li>\n                <li>ΓÇó Handle 1M+ activities efficiently</li>\n                <li>ΓÇó Linear performance scaling</li>\n                <li>ΓÇó Reduced storage costs (archival)</li>\n              </ul>\n            </div>\n\n            <div className=\"bg-amber-50 p-4 rounded-lg border border-amber-200\">\n              <h4 className=\"font-semibold text-slate-800 mb-2\">Developer Experience</h4>\n              <ul className=\"space-y-1 text-sm text-slate-700\">\n                <li>ΓÇó Clearer data relationships</li>\n                <li>ΓÇó Easier to write reports</li>\n                <li>ΓÇó Less duplicate code</li>\n                <li>ΓÇó Better debugging tools</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Next Steps */}\n      <Card className=\"border-green-200 bg-green-50\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-900\">Recommended Next Steps</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3 text-slate-700\">\n          <p className=\"font-semibold\">To begin implementation:</p>\n          <ol className=\"list-decimal list-inside space-y-2 ml-2\">\n            <li>Review and approve this architecture plan</li>\n            <li>Start with Phase 1 (Referential Integrity) - lowest risk, high impact</li>\n            <li>Run data consistency audit to identify existing issues</li>\n            <li>Create backup before any schema changes</li>\n            <li>Implement one phase at a time with testing between each</li>\n          </ol>\n          <Alert className=\"bg-white border-green-300 mt-4\">\n            <AlertDescription className=\"text-slate-700\">\n              <strong>Estimated Total Timeline:</strong> 8-10 weeks for full implementation across all phases\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Export for documentation/reference\nexport const DATABASE_OPTIMIZATION_SUMMARY = {\n  currentIssues: [\n    \"No referential integrity enforcement\",\n    \"Orphaned records accumulating\",\n    \"Expensive lookup operations\",\n    \"Slow aggregate queries\",\n    \"No historical tracking\"\n  ],\n  proposedSolution: \"Hybrid Star Schema\",\n  phases: 5,\n  estimatedTimeline: \"8-10 weeks\",\n  expectedPerformanceGain: \"60-90% faster queries\",\n  riskLevel: \"Low (backward compatible changes)\"\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\DenormalizationHelper.jsx","messages":[{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":222,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":222,"endColumn":72,"suggestions":[{"messageId":"addBrackets","fix":{"range":[6541,6798],"text":"{ const contact = await Contact.get(activityData.related_id);\n            if (contact) {\n              enriched.related_name = `${contact.first_name} ${contact.last_name}`;\n              enriched.related_email = contact.email;\n            }\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":229,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":229,"endColumn":72,"suggestions":[{"messageId":"addBrackets","fix":{"range":[6837,7008],"text":"{ const account = await Account.get(activityData.related_id);\n            if (account) {\n              enriched.related_name = account.name;\n            }\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":235,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":235,"endColumn":66,"suggestions":[{"messageId":"addBrackets","fix":{"range":[7044,7283],"text":"{ const lead = await Lead.get(activityData.related_id);\n            if (lead) {\n              enriched.related_name = `${lead.first_name} ${lead.last_name}`;\n              enriched.related_email = lead.email;\n            }\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":242,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":242,"endColumn":72,"suggestions":[{"messageId":"addBrackets","fix":{"range":[7326,7489],"text":"{ const opp = await Opportunity.get(activityData.related_id);\n            if (opp) {\n              enriched.related_name = opp.name;\n            }\n            break; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Denormalization Helper\n * Automatically enriches entity data with denormalized fields before save\n * Used by all forms to maintain data consistency\n */\n\nimport { Account, Employee, Contact, Lead, Opportunity } from \"@/api/entities\";\n\nexport class DenormalizationHelper {\n  \n  /**\n   * Enrich contact data with denormalized fields\n   */\n  static async enrichContact(contactData, tenantId) {\n    const enriched = { ...contactData };\n    \n    // Enrich account information\n    if (contactData.account_id) {\n      try {\n        const account = await Account.get(contactData.account_id);\n        if (account) {\n          enriched.account_name = account.name;\n          enriched.account_industry = account.industry;\n        }\n      } catch (error) {\n        console.warn(\"Could not enrich account data:\", error);\n      }\n    } else {\n      // Clear denormalized fields if account is removed\n      enriched.account_name = null;\n      enriched.account_industry = null;\n    }\n    \n    // Enrich assigned employee information\n    if (contactData.assigned_to) {\n      try {\n        const employees = await Employee.filter({\n          tenant_id: tenantId,\n          $or: [\n            { email: contactData.assigned_to },\n            { user_email: contactData.assigned_to }\n          ]\n        });\n        if (employees && employees.length > 0) {\n          const emp = employees[0];\n          enriched.assigned_to_name = `${emp.first_name} ${emp.last_name}`;\n        }\n      } catch (error) {\n        console.warn(\"Could not enrich employee data:\", error);\n      }\n    } else {\n      enriched.assigned_to_name = null;\n    }\n    \n    enriched.last_synced = new Date().toISOString();\n    return enriched;\n  }\n\n  /**\n   * Enrich lead data with denormalized fields\n   */\n  static async enrichLead(leadData, tenantId) {\n    const enriched = { ...leadData };\n    \n    // Enrich account information\n    if (leadData.account_id) {\n      try {\n        const account = await Account.get(leadData.account_id);\n        if (account) {\n          enriched.account_name = account.name;\n        }\n      } catch (error) {\n        console.warn(\"Could not enrich account data:\", error);\n      }\n    } else {\n      enriched.account_name = null;\n    }\n    \n    // Enrich assigned employee information\n    if (leadData.assigned_to) {\n      try {\n        const employees = await Employee.filter({\n          tenant_id: tenantId,\n          $or: [\n            { email: leadData.assigned_to },\n            { user_email: leadData.assigned_to }\n          ]\n        });\n        if (employees && employees.length > 0) {\n          const emp = employees[0];\n          enriched.assigned_to_name = `${emp.first_name} ${emp.last_name}`;\n        }\n      } catch (error) {\n        console.warn(\"Could not enrich employee data:\", error);\n      }\n    } else {\n      enriched.assigned_to_name = null;\n    }\n    \n    // Enrich converted contact/account if present\n    if (leadData.converted_contact_id) {\n      try {\n        const contact = await Contact.get(leadData.converted_contact_id);\n        if (contact) {\n          enriched.converted_contact_name = `${contact.first_name} ${contact.last_name}`;\n        }\n      } catch (error) {\n        console.warn(\"Could not enrich converted contact data:\", error);\n      }\n    }\n    \n    if (leadData.converted_account_id) {\n      try {\n        const account = await Account.get(leadData.converted_account_id);\n        if (account) {\n          enriched.converted_account_name = account.name;\n        }\n      } catch (error) {\n        console.warn(\"Could not enrich converted account data:\", error);\n      }\n    }\n    \n    enriched.last_synced = new Date().toISOString();\n    return enriched;\n  }\n\n  /**\n   * Enrich opportunity data with denormalized fields\n   */\n  static async enrichOpportunity(oppData, tenantId) {\n    const enriched = { ...oppData };\n    \n    // Enrich account information\n    if (oppData.account_id) {\n      try {\n        const account = await Account.get(oppData.account_id);\n        if (account) {\n          enriched.account_name = account.name;\n          enriched.account_industry = account.industry;\n        }\n      } catch (error) {\n        console.warn(\"Could not enrich account data:\", error);\n      }\n    } else {\n      enriched.account_name = null;\n      enriched.account_industry = null;\n    }\n    \n    // Enrich contact information\n    if (oppData.contact_id) {\n      try {\n        const contact = await Contact.get(oppData.contact_id);\n        if (contact) {\n          enriched.contact_name = `${contact.first_name} ${contact.last_name}`;\n          enriched.contact_email = contact.email;\n        }\n      } catch (error) {\n        console.warn(\"Could not enrich contact data:\", error);\n      }\n    } else {\n      enriched.contact_name = null;\n      enriched.contact_email = null;\n    }\n    \n    // Enrich assigned employee information\n    if (oppData.assigned_to) {\n      try {\n        const employees = await Employee.filter({\n          tenant_id: tenantId,\n          $or: [\n            { email: oppData.assigned_to },\n            { user_email: oppData.assigned_to }\n          ]\n        });\n        if (employees && employees.length > 0) {\n          const emp = employees[0];\n          enriched.assigned_to_name = `${emp.first_name} ${emp.last_name}`;\n        }\n      } catch (error) {\n        console.warn(\"Could not enrich employee data:\", error);\n      }\n    } else {\n      enriched.assigned_to_name = null;\n    }\n    \n    enriched.last_synced = new Date().toISOString();\n    return enriched;\n  }\n\n  /**\n   * Enrich activity data with denormalized fields\n   */\n  static async enrichActivity(activityData, tenantId) {\n    const enriched = { ...activityData };\n    \n    // Enrich assigned employee information\n    if (activityData.assigned_to) {\n      try {\n        const employees = await Employee.filter({\n          tenant_id: tenantId,\n          $or: [\n            { email: activityData.assigned_to },\n            { user_email: activityData.assigned_to }\n          ]\n        });\n        if (employees && employees.length > 0) {\n          const emp = employees[0];\n          enriched.assigned_to_name = `${emp.first_name} ${emp.last_name}`;\n        }\n      } catch (error) {\n        console.warn(\"Could not enrich employee data:\", error);\n      }\n    } else {\n      enriched.assigned_to_name = null;\n    }\n    \n    // Enrich related entity information\n    if (activityData.related_to && activityData.related_id) {\n      try {\n        switch (activityData.related_to) {\n          case 'contact':\n            const contact = await Contact.get(activityData.related_id);\n            if (contact) {\n              enriched.related_name = `${contact.first_name} ${contact.last_name}`;\n              enriched.related_email = contact.email;\n            }\n            break;\n          case 'account':\n            const account = await Account.get(activityData.related_id);\n            if (account) {\n              enriched.related_name = account.name;\n            }\n            break;\n          case 'lead':\n            const lead = await Lead.get(activityData.related_id);\n            if (lead) {\n              enriched.related_name = `${lead.first_name} ${lead.last_name}`;\n              enriched.related_email = lead.email;\n            }\n            break;\n          case 'opportunity':\n            const opp = await Opportunity.get(activityData.related_id);\n            if (opp) {\n              enriched.related_name = opp.name;\n            }\n            break;\n        }\n      } catch (error) {\n        console.warn(\"Could not enrich related entity data:\", error);\n      }\n    } else {\n      enriched.related_name = null;\n      enriched.related_email = null;\n    }\n    \n    enriched.last_synced = new Date().toISOString();\n    return enriched;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\DeploymentGuide.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\DocumentPicker.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\EmailTemplateManager.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\EmployeeScopeContext.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":52,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":52,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst EmployeeScopeContext = createContext(null);\n\nexport const EmployeeScopeProvider = ({ children }) => {\n  const [selectedEmployeeEmail, setSelectedEmployeeEmail] = useState(null);\n\n  useEffect(() => {\n    try {\n      const saved = localStorage.getItem('employee_scope_filter');\n      if (saved && saved !== 'null' && saved !== 'undefined') {\n        setSelectedEmployeeEmail(saved);\n      }\n    } catch (error) {\n      console.warn('Failed to load employee scope filter:', error);\n    }\n  }, []);\n\n  const setEmployeeScope = (email) => {\n    setSelectedEmployeeEmail(email);\n    try {\n      if (email) {\n        localStorage.setItem('employee_scope_filter', email);\n      } else {\n        localStorage.removeItem('employee_scope_filter');\n      }\n    } catch (error) {\n      console.warn('Failed to save employee scope filter:', error);\n    }\n  };\n\n  const clearEmployeeScope = () => {\n    setSelectedEmployeeEmail(null);\n    try {\n      localStorage.removeItem('employee_scope_filter');\n    } catch (error) {\n      console.warn('Failed to clear employee scope filter:', error);\n    }\n  };\n\n  return (\n    <EmployeeScopeContext.Provider value={{\n      selectedEmployeeEmail,\n      setEmployeeScope,\n      clearEmployeeScope\n    }}>\n      {children}\n    </EmployeeScopeContext.Provider>\n  );\n};\n\nexport const useEmployeeScope = () => {\n  const context = useContext(EmployeeScopeContext);\n  if (!context) {\n    return {\n      selectedEmployeeEmail: null,\n      setEmployeeScope: () => {},\n      clearEmployeeScope: () => {}\n    };\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\EmployeeScopeFilter.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Users } from \"lucide-react\";\nimport { Employee } from \"@/api/entities\";\nimport { useEmployeeScope } from './EmployeeScopeContext';\n\nexport default function EmployeeScopeFilter({ user, selectedTenantId }) {\n  const [employees, setEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const { selectedEmployeeEmail, setSelectedEmployeeEmail } = useEmployeeScope();\n\n  // Determine if user should see this filter\n  const isManager = user?.employee_role === 'manager';\n  const isAdmin = user?.role === 'admin' || user?.role === 'superadmin';\n  const hasAggregatedScope = user?.permissions?.dashboard_scope === 'aggregated';\n\n  const shouldShowFilter = isManager || isAdmin || hasAggregatedScope;\n\n  useEffect(() => {\n    const loadEmployees = async () => {\n      if (!user || !shouldShowFilter) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        \n        // Build filter based on tenant\n        const filter = {};\n        \n        // For admins managing a specific tenant\n        if (isAdmin && selectedTenantId) {\n          filter.tenant_id = selectedTenantId;\n        }\n        // For managers and power users, use their own tenant\n        else if (user.tenant_id) {\n          filter.tenant_id = user.tenant_id;\n        }\n\n        console.log('[EmployeeScopeFilter] Loading employees with filter:', filter);\n\n        // Load all active employees for this tenant\n        const employeeList = await Employee.filter({ \n          ...filter,\n          is_active: true \n        });\n\n        console.log('[EmployeeScopeFilter] Loaded employees:', employeeList?.length || 0);\n\n        // Filter to only employees with CRM access\n        const crmEmployees = (employeeList || []).filter(emp => {\n          // Only show employees who have CRM access\n          return emp.has_crm_access === true && emp.user_email;\n        });\n\n        console.log('[EmployeeScopeFilter] CRM-enabled employees:', crmEmployees.length);\n\n        setEmployees(crmEmployees);\n      } catch (error) {\n        console.error('[EmployeeScopeFilter] Failed to load employees:', error);\n        setEmployees([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadEmployees();\n  }, [user, selectedTenantId, shouldShowFilter, isAdmin]);\n\n  // Don't render if user shouldn't see this filter\n  if (!shouldShowFilter) {\n    return null;\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center gap-2 text-sm text-slate-400\">\n        <Users className=\"w-4 h-4\" />\n        <span>Loading employees...</span>\n      </div>\n    );\n  }\n\n  // If no employees found, show a message\n  if (employees.length === 0) {\n    return (\n      <div className=\"flex items-center gap-2 text-sm text-slate-400\">\n        <Users className=\"w-4 h-4\" />\n        <span>No employees with CRM access</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Users className=\"w-4 h-4 text-slate-400\" />\n      <Select\n        value={selectedEmployeeEmail || \"all\"}\n        onValueChange={(value) => setSelectedEmployeeEmail(value === \"all\" ? null : value)}\n      >\n        <SelectTrigger className=\"w-[200px] bg-slate-800 border-slate-700 text-slate-200\">\n          <SelectValue placeholder=\"All Employees\" />\n        </SelectTrigger>\n        <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <SelectItem value=\"all\" className=\"hover:bg-slate-700\">\n            All Records\n          </SelectItem>\n          <SelectItem value=\"unassigned\" className=\"hover:bg-slate-700\">\n            Unassigned\n          </SelectItem>\n          {employees.map((emp) => (\n            <SelectItem \n              key={emp.id} \n              value={emp.user_email}\n              className=\"hover:bg-slate-700\"\n            >\n              {emp.first_name} {emp.last_name}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\EmployeeSelector.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport { Employee } from '@/api/entities';\nimport { User } from '@/api/entities';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Loader2 } from 'lucide-react';\n\nexport default function EmployeeSelector({\n  value,\n  onValueChange,\n  placeholder = \"Select employee...\",\n  className = \"\",\n  disabled = false,\n  includeUnassigned = true,\n  ...props\n}) {\n  const [employees, setEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const currentUser = await User.me();\n\n        // Build filter based on user's tenant\n        let filter = {};\n        if (currentUser.tenant_id) {\n          filter.tenant_id = currentUser.tenant_id;\n        }\n\n        // Load active employees\n        filter.is_active = true;\n\n        const employeesData = await Employee.filter(filter);\n        setEmployees(employeesData || []);\n      } catch (error) {\n        console.error('Failed to load employees:', error);\n        setEmployees([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  // Sort employees by name\n  const sortedEmployees = useMemo(() => {\n    return [...employees].sort((a, b) => {\n      const nameA = `${a.first_name} ${a.last_name}`.toLowerCase();\n      const nameB = `${b.first_name} ${b.last_name}`.toLowerCase();\n      return nameA.localeCompare(nameB);\n    });\n  }, [employees]);\n\n  if (loading) {\n    return (\n      <div className={`flex items-center gap-2 p-2 bg-slate-700 border border-slate-600 rounded-md ${className}`}>\n        <Loader2 className=\"w-4 h-4 animate-spin text-slate-400\" />\n        <span className=\"text-sm text-slate-400\">Loading employees...</span>\n      </div>\n    );\n  }\n\n  return (\n    <Select value={value || ''} onValueChange={onValueChange} disabled={disabled} {...props}>\n      <SelectTrigger className={className}>\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent className=\"bg-slate-800 border-slate-700 z-[2147483010]\">\n        {includeUnassigned && (\n          <SelectItem value={null} className=\"text-slate-200 hover:bg-slate-700\">\n            Unassigned\n          </SelectItem>\n        )}\n        {sortedEmployees.map((employee) => (\n          <SelectItem \n            key={employee.id} \n            value={employee.email || employee.user_email} \n            className=\"text-slate-200 hover:bg-slate-700\"\n          >\n            {employee.first_name} {employee.last_name}\n            {employee.job_title && <span className=\"text-slate-400 text-xs ml-2\">({employee.job_title})</span>}\n          </SelectItem>\n        ))}\n        {sortedEmployees.length === 0 && (\n          <SelectItem value=\"__no_employees__\" disabled className=\"text-slate-500\">\n            No employees found\n          </SelectItem>\n        )}\n      </SelectContent>\n    </Select>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\EntityAPI.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[46,57],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Code' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Code"},"fix":{"range":[203,208],"text":""},"desc":"Remove unused variable 'Code'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":109,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4814,5023],"text":"\n            Ai-SHA CRM uses the base44 platform&apos;s built-in entity SDK for all data operations. \n            Each entity provides a consistent API for CRUD operations with built-in tenant isolation.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4814,5023],"text":"\n            Ai-SHA CRM uses the base44 platform&lsquo;s built-in entity SDK for all data operations. \n            Each entity provides a consistent API for CRUD operations with built-in tenant isolation.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4814,5023],"text":"\n            Ai-SHA CRM uses the base44 platform&#39;s built-in entity SDK for all data operations. \n            Each entity provides a consistent API for CRUD operations with built-in tenant isolation.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4814,5023],"text":"\n            Ai-SHA CRM uses the base44 platform&rsquo;s built-in entity SDK for all data operations. \n            Each entity provides a consistent API for CRUD operations with built-in tenant isolation.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":233,"column":151,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11325,11513],"text":"\n                      API credentials are encrypted at rest and isolated per tenant. Only Power Users within each tenant can manage their organization&apos;s integrations.\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11325,11513],"text":"\n                      API credentials are encrypted at rest and isolated per tenant. Only Power Users within each tenant can manage their organization&lsquo;s integrations.\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11325,11513],"text":"\n                      API credentials are encrypted at rest and isolated per tenant. Only Power Users within each tenant can manage their organization&#39;s integrations.\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11325,11513],"text":"\n                      API credentials are encrypted at rest and isolated per tenant. Only Power Users within each tenant can manage their organization&rsquo;s integrations.\n                    "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n// Entity API Documentation Component\nimport React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Code, Database, Shield, Zap } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function EntityAPI() {\n  const entities = [\n    {\n      name: \"Contact\",\n      description: \"Individual contacts and their details\",\n      required: [\"first_name\", \"last_name\", \"email\"],\n      endpoints: [\n        { method: \"GET\", path: \"Contact.list()\", description: \"List all contacts\" },\n        { method: \"POST\", path: \"Contact.create(data)\", description: \"Create new contact\" },\n        { method: \"PUT\", path: \"Contact.update(id, data)\", description: \"Update contact\" },\n        { method: \"DELETE\", path: \"Contact.delete(id)\", description: \"Delete contact\" }\n      ]\n    },\n    {\n      name: \"Account\", \n      description: \"Companies and organizations\",\n      required: [\"name\"],\n      endpoints: [\n        { method: \"GET\", path: \"Account.list()\", description: \"List all accounts\" },\n        { method: \"POST\", path: \"Account.create(data)\", description: \"Create new account\" },\n        { method: \"PUT\", path: \"Account.update(id, data)\", description: \"Update account\" },\n        { method: \"DELETE\", path: \"Account.delete(id)\", description: \"Delete account\" }\n      ]\n    },\n    {\n      name: \"Lead\",\n      description: \"Potential customers and prospects\", \n      required: [\"first_name\", \"last_name\", \"email\"],\n      endpoints: [\n        { method: \"GET\", path: \"Lead.list()\", description: \"List all leads\" },\n        { method: \"POST\", path: \"Lead.create(data)\", description: \"Create new lead\" },\n        { method: \"PUT\", path: \"Lead.update(id, data)\", description: \"Update lead\" },\n        { method: \"DELETE\", path: \"Lead.delete(id)\", description: \"Delete lead\" }\n      ]\n    },\n    {\n      name: \"Opportunity\",\n      description: \"Sales opportunities and pipeline\",\n      required: [\"name\", \"amount\", \"close_date\"],\n      endpoints: [\n        { method: \"GET\", path: \"Opportunity.list()\", description: \"List all opportunities\" },\n        { method: \"POST\", path: \"Opportunity.create(data)\", description: \"Create new opportunity\" },\n        { method: \"PUT\", path: \"Opportunity.update(id, data)\", description: \"Update opportunity\" },\n        { method: \"DELETE\", path: \"Opportunity.delete(id)\", description: \"Delete opportunity\" }\n      ]\n    },\n    {\n      name: \"Activity\",\n      description: \"Tasks, meetings, calls, and activities\",\n      required: [\"type\", \"subject\", \"due_date\"],\n      endpoints: [\n        { method: \"GET\", path: \"Activity.list()\", description: \"List all activities\" },\n        { method: \"POST\", path: \"Activity.create(data)\", description: \"Create new activity\" },\n        { method: \"PUT\", path: \"Activity.update(id, data)\", description: \"Update activity\" },\n        { method: \"DELETE\", path: \"Activity.delete(id)\", description: \"Delete activity\" }\n      ]\n    },\n    {\n      name: \"TenantIntegration\",\n      description: \"Tenant-specific integrations with external services\",\n      required: [\"tenant_id\", \"integration_type\", \"integration_name\"],\n      endpoints: [\n        { method: \"GET\", path: \"TenantIntegration.list()\", description: \"List tenant integrations\" },\n        { method: \"POST\", path: \"TenantIntegration.create(data)\", description: \"Create new integration\" },\n        { method: \"PUT\", path: \"TenantIntegration.update(id, data)\", description: \"Update integration\" },\n        { method: \"DELETE\", path: \"TenantIntegration.delete(id)\", description: \"Delete integration\" }\n      ]\n    },\n    {\n      name: \"TestReport\",\n      description: \"Stores the results of comprehensive system integrity tests\",\n      required: [\"test_date\", \"status\", \"report_data\", \"triggered_by\"],\n      endpoints: [\n        { method: \"GET\", path: \"TestReport.list()\", description: \"List all test reports\" },\n        { method: \"POST\", path: \"TestReport.create(data)\", description: \"Create a new test report (system use)\" },\n      ]\n    }\n  ];\n\n  const getMethodColor = (method) => {\n    switch(method) {\n      case 'GET': return 'bg-green-100 text-green-800';\n      case 'POST': return 'bg-blue-100 text-blue-800';\n      case 'PUT': return 'bg-yellow-100 text-yellow-800';\n      case 'DELETE': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"border-0 shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Database className=\"w-5 h-5\" />\n            Ai-SHA CRM API Documentation\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-slate-600 mb-4\">\n            Ai-SHA CRM uses the base44 platform's built-in entity SDK for all data operations. \n            Each entity provides a consistent API for CRUD operations with built-in tenant isolation.\n          </p>\n          \n          <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n            <TabsList>\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"authentication\">Authentication</TabsTrigger>\n              <TabsTrigger value=\"integrations\">Integrations</TabsTrigger>\n              <TabsTrigger value=\"webhooks\">Webhooks</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-4\">\n              {entities.map((entity) => (\n                <Card key={entity.name} className=\"border\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">{entity.name}</CardTitle>\n                    <p className=\"text-sm text-slate-600\">{entity.description}</p>\n                  </CardHeader>\n                  <CardContent>\n                    <h4 className=\"font-semibold text-sm mb-2\">Endpoints:</h4>\n                    <div className=\"space-y-2\">\n                      {entity.endpoints.map((endpoint, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-2 border rounded-md bg-slate-50/50\">\n                          <div className=\"flex items-center gap-3\">\n                            <Badge className={getMethodColor(endpoint.method)}>\n                              {endpoint.method}\n                            </Badge>\n                            <code className=\"text-sm bg-slate-200/50 px-2 py-1 rounded\">\n                              {endpoint.path}\n                            </code>\n                          </div>\n                          <span className=\"text-sm text-slate-600 hidden md:inline\">{endpoint.description}</span>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"mt-4\">\n                      <h4 className=\"font-semibold text-sm mb-2\">Required Fields for Creation:</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {entity.required.map((field) => (\n                          <Badge key={field} variant=\"outline\" className=\"font-mono\">{field}</Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </TabsContent>\n\n            <TabsContent value=\"authentication\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Shield className=\"w-5 h-5\" />\n                    Authentication & Authorization\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Authentication Method</h4>\n                    <p className=\"text-slate-600\">\n                      Ai-SHA CRM uses Google OAuth 2.0 for authentication, managed by the base44 platform.\n                      No custom JWT implementation needed.\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold mb-2\">User Roles</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\">admin</Badge>\n                        <span className=\"text-sm\">Full access to all CRM features and settings across all tenants</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\">power-user</Badge>\n                        <span className=\"text-sm\">Manages all data within an assigned tenant, including integrations</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\">user</Badge>\n                        <span className=\"text-sm\">Standard access; can only manage their own assigned records within their tenant</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Multi-Tenant Data Isolation</h4>\n                     <p className=\"text-slate-600\">\n                      All data is strictly segregated by <code className=\"bg-slate-100 p-1 rounded\">tenant_id</code>. Users can only access data belonging to their assigned tenant. The Admin role is the only exception, having cross-tenant visibility for management purposes.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"integrations\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Tenant-Specific Integrations\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-slate-600\">\n                    Each tenant maintains their own private integrations with external services, ensuring complete data isolation and security.\n                  </p>\n                  \n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Supported Integrations</h4>\n                    <div className=\"grid gap-3 md:grid-cols-2\">\n                      <div className=\"p-3 border rounded-lg\">\n                        <h5 className=\"font-medium\">Google Services</h5>\n                        <p className=\"text-sm text-slate-600\">Drive, Calendar, and Gmail integration with OAuth authentication</p>\n                      </div>\n                      <div className=\"p-3 border rounded-lg\">\n                        <h5 className=\"font-medium\">Zapier</h5>\n                        <p className=\"text-sm text-slate-600\">Connect to 1000+ apps with webhook-based automation</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Security</h4>\n                    <p className=\"text-sm text-slate-600\">\n                      API credentials are encrypted at rest and isolated per tenant. Only Power Users within each tenant can manage their organization's integrations.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"webhooks\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Webhook Integration\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-slate-600\">\n                    Webhooks can be configured in <Badge variant=\"outline\">Settings ΓåÆ Webhooks</Badge> to send real-time data to external services like Zapier or n8n when events occur in the CRM (e.g., a new contact is created).\n                  </p>\n                  \n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Supported Events</h4>\n                    <p className=\"text-sm text-slate-600\">\n                      You can create webhooks for create, update, and delete events for Contacts, Accounts, Leads, Opportunities, and Activities.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ErrorBoundary.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":15,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[357,362],"text":""},"desc":"Remove unused variable 'error'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":63,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1784,1879],"text":"\r\n              We&apos;re sorry, but something unexpected happened. Please try again.\r\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1784,1879],"text":"\r\n              We&lsquo;re sorry, but something unexpected happened. Please try again.\r\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1784,1879],"text":"\r\n              We&#39;re sorry, but something unexpected happened. Please try again.\r\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1784,1879],"text":"\r\n              We&rsquo;re sorry, but something unexpected happened. Please try again.\r\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { AlertTriangle } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      hasError: false, \r\n      error: null, \r\n      errorInfo: null \r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // Log error to console in development\r\n    if (import.meta.env.DEV) {\r\n      console.error('ErrorBoundary caught an error:', error, errorInfo);\r\n    }\r\n    \r\n    // Store error details in state\r\n    this.setState({\r\n      error,\r\n      errorInfo\r\n    });\r\n\r\n    // You can also log the error to an error reporting service here\r\n    // Example: logErrorToService(error, errorInfo);\r\n  }\r\n\r\n  handleReset = () => {\r\n    this.setState({ \r\n      hasError: false, \r\n      error: null, \r\n      errorInfo: null \r\n    });\r\n  };\r\n\r\n  handleReload = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // Custom fallback UI\r\n      return (\r\n        <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\r\n          <div className=\"max-w-md w-full bg-white shadow-lg rounded-lg p-6\">\r\n            <div className=\"flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full\">\r\n              <AlertTriangle className=\"w-6 h-6 text-red-600\" />\r\n            </div>\r\n            \r\n            <h2 className=\"mt-4 text-xl font-semibold text-center text-gray-900\">\r\n              Something went wrong\r\n            </h2>\r\n            \r\n            <p className=\"mt-2 text-sm text-center text-gray-600\">\r\n              We're sorry, but something unexpected happened. Please try again.\r\n            </p>\r\n\r\n            {import.meta.env.DEV && this.state.error && (\r\n              <div className=\"mt-4 p-3 bg-gray-100 rounded text-xs overflow-auto max-h-40\">\r\n                <p className=\"font-semibold text-red-600\">{this.state.error.toString()}</p>\r\n                {this.state.errorInfo && (\r\n                  <pre className=\"mt-2 text-gray-700 whitespace-pre-wrap\">\r\n                    {this.state.errorInfo.componentStack}\r\n                  </pre>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"mt-6 flex gap-3\">\r\n              <Button \r\n                onClick={this.handleReset}\r\n                variant=\"outline\"\r\n                className=\"flex-1\"\r\n              >\r\n                Try Again\r\n              </Button>\r\n              <Button \r\n                onClick={this.handleReload}\r\n                className=\"flex-1\"\r\n              >\r\n                Reload Page\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ErrorLogger.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":10,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":10,"endColumn":28},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":73,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":73,"endColumn":28},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":85,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":85,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, createContext, useContext } from 'react';\nimport { User } from '@/api/entities';\n\n// Client-side error log storage\nconst errorLog = [];\nconst MAX_ERRORS = 100;\n\nconst ErrorLogContext = createContext();\n\nexport function useErrorLog() {\n  return useContext(ErrorLogContext);\n}\n\nexport function ErrorLogProvider({ children }) {\n  const [errors, setErrors] = useState([]);\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    User.me().then(setUser).catch(() => {});\n  }, []);\n\n  const logError = (error) => {\n    const errorEntry = {\n      id: Date.now() + Math.random(),\n      timestamp: new Date().toISOString(),\n      message: error.message || 'Unknown error',\n      component: error.component || 'Unknown',\n      status: error.status,\n      userEmail: user?.email,\n      severity: error.severity || 'error',\n      actionable: error.actionable || null,\n      details: error.details || null\n    };\n\n    errorLog.unshift(errorEntry);\n    if (errorLog.length > MAX_ERRORS) {\n      errorLog.pop();\n    }\n\n    setErrors([...errorLog]);\n\n    // Also log to console for developers\n    console.error(`[${errorEntry.component}]`, errorEntry.message, errorEntry.details);\n  };\n\n  const clearErrors = () => {\n    errorLog.length = 0;\n    setErrors([]);\n  };\n\n  const getRecentErrors = (count = 10) => {\n    return errorLog.slice(0, count);\n  };\n\n  const getCriticalErrors = () => {\n    return errorLog.filter(e => e.severity === 'critical');\n  };\n\n  return (\n    <ErrorLogContext.Provider value={{ \n      errors, \n      logError, \n      clearErrors, \n      getRecentErrors,\n      getCriticalErrors\n    }}>\n      {children}\n    </ErrorLogContext.Provider>\n  );\n}\n\n// Helper to create structured errors\nexport function createError(component, message, options = {}) {\n  return {\n    component,\n    message,\n    status: options.status,\n    severity: options.severity || 'error',\n    actionable: options.actionable,\n    details: options.details\n  };\n}\n\n// HTTP status code helpers\nexport function handleApiError(component, error) {\n  const status = error?.response?.status || error?.status;\n  \n  const errorMap = {\n    403: {\n      message: 'Permission denied',\n      severity: 'warning',\n      actionable: 'Check user permissions in Settings ΓåÆ User Management'\n    },\n    429: {\n      message: 'Rate limit exceeded',\n      severity: 'warning',\n      actionable: 'System is busy. Wait a moment and try again.'\n    },\n    500: {\n      message: 'Server error',\n      severity: 'critical',\n      actionable: 'System error occurred. Contact support if this persists.'\n    },\n    502: {\n      message: 'Backend unavailable',\n      severity: 'critical',\n      actionable: 'Backend service is down. Try again in a few minutes.'\n    },\n    504: {\n      message: 'Request timeout',\n      severity: 'warning',\n      actionable: 'Operation took too long. Try again or contact support.'\n    }\n  };\n\n  const errorInfo = errorMap[status] || {\n    message: error?.message || 'Operation failed',\n    severity: 'error',\n    actionable: 'An unexpected error occurred. Please try again.'\n  };\n\n  return createError(component, errorInfo.message, {\n    status,\n    severity: errorInfo.severity,\n    actionable: errorInfo.actionable,\n    details: error?.message\n  });\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\FooterBrand.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ForceRefreshButton.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'entityName' is defined but never used.","line":7,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"entityName"},"fix":{"range":[242,253],"text":""},"desc":"Remove unused variable 'entityName'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { RefreshCw } from \"lucide-react\";\nimport { useApiManager } from \"./ApiManager\";\nimport { toast } from \"sonner\";\n\nexport default function ForceRefreshButton({ entityName, onRefresh }) {\n  const { clearCache } = useApiManager();\n\n  const handleRefresh = () => {\n    // Clear all caches\n    clearCache();\n    localStorage.clear();\n    sessionStorage.clear();\n    \n    toast.success(\"Cache cleared! Refreshing...\");\n    \n    // Call parent refresh if provided\n    if (onRefresh) {\n      onRefresh();\n    }\n    \n    // Force hard reload after a moment\n    setTimeout(() => {\n      window.location.reload(true);\n    }, 500);\n  };\n\n  return (\n    <Button\n      onClick={handleRefresh}\n      variant=\"outline\"\n      size=\"sm\"\n      className=\"gap-2\"\n    >\n      <RefreshCw className=\"w-4 h-4\" />\n      Force Refresh\n    </Button>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\FormFields.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'required' is assigned a value but never used.","line":130,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"required"},"fix":{"range":[3539,3560],"text":""},"desc":"Remove unused variable 'required'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport PhoneInput from \"./PhoneInput\";\nimport AddressFields from \"./AddressFields\";\nimport TagInput from \"./TagInput\";\nimport LazyAccountSelector from \"./LazyAccountSelector\";\nimport LazyEmployeeSelector from \"./LazyEmployeeSelector\";\n\n// Reusable form field components to eliminate duplication\n\nexport const TextField = ({ \n  id, \n  label, \n  value, \n  onChange, \n  required = false, \n  placeholder = \"\",\n  disabled = false,\n  type = \"text\",\n  darkMode = true,\n  helpText = null\n}) => (\n  <div>\n    <Label htmlFor={id} className={darkMode ? \"text-slate-200\" : \"text-slate-700\"}>\n      {label} {required && <span className=\"text-red-400\">*</span>}\n    </Label>\n    <Input\n      id={id}\n      type={type}\n      value={value || \"\"}\n      onChange={(e) => onChange(e.target.value)}\n      required={required}\n      placeholder={placeholder}\n      disabled={disabled}\n      className={`mt-1 ${darkMode ? \"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400\" : \"\"}`}\n    />\n    {helpText && (\n      <p className={`text-xs mt-1 ${darkMode ? \"text-slate-500\" : \"text-slate-600\"}`}>\n        {helpText}\n      </p>\n    )}\n  </div>\n);\n\nexport const TextAreaField = ({ \n  id, \n  label, \n  value, \n  onChange, \n  required = false, \n  placeholder = \"\",\n  disabled = false,\n  rows = 3,\n  darkMode = true,\n  helpText = null\n}) => (\n  <div>\n    <Label htmlFor={id} className={darkMode ? \"text-slate-200\" : \"text-slate-700\"}>\n      {label} {required && <span className=\"text-red-400\">*</span>}\n    </Label>\n    <Textarea\n      id={id}\n      value={value || \"\"}\n      onChange={(e) => onChange(e.target.value)}\n      required={required}\n      placeholder={placeholder}\n      disabled={disabled}\n      rows={rows}\n      className={`mt-1 ${darkMode ? \"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400\" : \"\"}`}\n    />\n    {helpText && (\n      <p className={`text-xs mt-1 ${darkMode ? \"text-slate-500\" : \"text-slate-600\"}`}>\n        {helpText}\n      </p>\n    )}\n  </div>\n);\n\nexport const SelectField = ({ \n  id, \n  label, \n  value, \n  onChange, \n  options = [],\n  required = false, \n  placeholder = \"Select...\",\n  disabled = false,\n  darkMode = true,\n  helpText = null\n}) => (\n  <div>\n    <Label htmlFor={id} className={darkMode ? \"text-slate-200\" : \"text-slate-700\"}>\n      {label} {required && <span className=\"text-red-400\">*</span>}\n    </Label>\n    <Select value={value || \"\"} onValueChange={onChange} disabled={disabled}>\n      <SelectTrigger \n        id={id}\n        className={`mt-1 ${darkMode ? \"bg-slate-700 border-slate-600 text-slate-200\" : \"\"}`}\n      >\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent className={darkMode ? \"bg-slate-800 border-slate-700\" : \"\"}>\n        {options.map(opt => (\n          <SelectItem \n            key={opt.value} \n            value={opt.value}\n            className={darkMode ? \"text-slate-200 hover:bg-slate-700\" : \"\"}\n          >\n            {opt.label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n    {helpText && (\n      <p className={`text-xs mt-1 ${darkMode ? \"text-slate-500\" : \"text-slate-600\"}`}>\n        {helpText}\n      </p>\n    )}\n  </div>\n);\n\nexport const PhoneField = ({ \n  id, \n  label, \n  value, \n  onChange, \n  required = false, \n  placeholder = \"\",\n  darkMode = true,\n  showPrefixPicker = true,\n  helpText = null\n}) => (\n  <div>\n    <PhoneInput\n      id={id}\n      label={label}\n      value={value}\n      onChange={onChange}\n      placeholder={placeholder}\n      className={darkMode ? \"bg-slate-700 border-slate-600 text-slate-200\" : \"\"}\n      labelClassName={darkMode ? \"text-slate-200\" : \"text-slate-700\"}\n      darkMode={darkMode}\n      showPrefixPicker={showPrefixPicker}\n    />\n    {helpText && (\n      <p className={`text-xs mt-1 ${darkMode ? \"text-slate-500\" : \"text-slate-600\"}`}>\n        {helpText}\n      </p>\n    )}\n  </div>\n);\n\nexport const AccountField = ({\n  label = \"Associated Account\",\n  value,\n  onChange,\n  onCreateNew,\n  darkMode = true,\n  helpText = null\n}) => (\n  <div>\n    <Label className={darkMode ? \"text-slate-200\" : \"text-slate-700\"}>\n      {label}\n    </Label>\n    <LazyAccountSelector\n      value={value}\n      onValueChange={onChange}\n      onCreateNew={onCreateNew}\n      placeholder=\"Link to an existing account...\"\n      className={`mt-1 ${darkMode ? \"bg-slate-700 border-slate-600 text-slate-200\" : \"\"}`}\n      contentClassName={darkMode ? \"bg-slate-800 border-slate-700\" : \"\"}\n      itemClassName={darkMode ? \"text-slate-200 hover:bg-slate-700\" : \"\"}\n    />\n    {helpText && (\n      <p className={`text-xs mt-1 ${darkMode ? \"text-slate-500\" : \"text-slate-600\"}`}>\n        {helpText}\n      </p>\n    )}\n  </div>\n);\n\nexport const EmployeeField = ({\n  label = \"Assigned To\",\n  value,\n  onChange,\n  allowUnassigned = true,\n  darkMode = true,\n  helpText = null\n}) => (\n  <div>\n    <Label className={darkMode ? \"text-slate-200\" : \"text-slate-700\"}>\n      {label}\n    </Label>\n    <LazyEmployeeSelector\n      value={value}\n      onValueChange={onChange}\n      placeholder={allowUnassigned ? \"Unassigned\" : \"Select employee...\"}\n      className={`w-full mt-1 ${darkMode ? \"bg-slate-700 border-slate-600 text-slate-200\" : \"\"}`}\n      contentClassName={darkMode ? \"bg-slate-800 border-slate-700\" : \"\"}\n      itemClassName={darkMode ? \"text-slate-200 hover:bg-slate-700\" : \"\"}\n      allowUnassigned={allowUnassigned}\n      showLoadingState={true}\n    />\n    {helpText && (\n      <p className={`text-xs mt-1 ${darkMode ? \"text-slate-500\" : \"text-slate-600\"}`}>\n        {helpText}\n      </p>\n    )}\n  </div>\n);\n\nexport const TagsField = ({\n  label = \"Tags\",\n  value,\n  onChange,\n  allTags = [],\n  darkMode = true,\n  helpText = null\n}) => (\n  <div>\n    <Label className={`${darkMode ? \"text-slate-200\" : \"text-slate-700\"} block mb-2`}>\n      {label}\n    </Label>\n    <TagInput\n      selectedTags={value || []}\n      onTagsChange={onChange}\n      allTags={allTags}\n      placeholder=\"Add or search for tags...\"\n      darkMode={darkMode}\n    />\n    {helpText && (\n      <p className={`text-xs mt-1 ${darkMode ? \"text-slate-500\" : \"text-slate-600\"}`}>\n        {helpText}\n      </p>\n    )}\n  </div>\n);\n\nexport const AddressSection = ({\n  formData,\n  onChange,\n  darkMode = true\n}) => (\n  <div className={`border-t pt-6 ${darkMode ? \"border-slate-600\" : \"border-slate-300\"}`}>\n    <h4 className={`text-lg font-semibold mb-4 ${darkMode ? \"text-slate-100\" : \"text-slate-900\"}`}>\n      Address Information\n    </h4>\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n      <AddressFields formData={formData} handleChange={onChange} darkMode={darkMode} />\n    </div>\n  </div>\n);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\GlobalDetailViewer.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[50,55],"text":""},"desc":"Remove unused variable 'Card'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { X, User, Building, Briefcase, Star, Edit3, Save, RotateCcw } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { Contact, Lead, Account, Opportunity } from '@/api/entities';\n\nconst entityIcons = {\n  Contact: <User className=\"w-5 h-5 text-blue-400\" />,\n  Lead: <Star className=\"w-5 h-5 text-yellow-400\" />,\n  Account: <Building className=\"w-5 h-5 text-green-400\" />,\n  Opportunity: <Briefcase className=\"w-5 h-5 text-purple-400\" />,\n};\n\nconst DetailRow = ({ label, value, field, editMode, onValueChange }) => {\n  if (!value && !editMode) return null;\n  \n  return (\n    <div className=\"grid grid-cols-3 gap-2 py-2 border-b border-slate-700/50\">\n      <dt className=\"text-sm font-medium text-slate-400\">{label}</dt>\n      <dd className=\"col-span-2\">\n        {editMode ? (\n          <Input\n            value={value || ''}\n            onChange={(e) => onValueChange(field, e.target.value)}\n            className=\"h-8 bg-slate-700 border-slate-600 text-slate-200 text-sm\"\n          />\n        ) : (\n          <span className=\"text-sm text-slate-200\">{value}</span>\n        )}\n      </dd>\n    </div>\n  );\n};\n\nexport default function GlobalDetailViewer({ recordInfo, open, onClose }) {\n  const [editMode, setEditMode] = useState(false);\n  const [editedRecord, setEditedRecord] = useState({});\n  const [saving, setSaving] = useState(false);\n\n  if (!open || !recordInfo) return null;\n\n  const { record, entityType } = recordInfo;\n  \n  const title = record.name || `${record.first_name || ''} ${record.last_name || ''}`.trim();\n  const Icon = entityIcons[entityType] || <User className=\"w-5 h-5\" />;\n\n  const formatDate = (dateString) => {\n    try {\n      return format(new Date(dateString), 'PPp');\n    } catch {\n      return dateString;\n    }\n  };\n\n  const handleEdit = () => {\n    setEditMode(true);\n    setEditedRecord({ ...record });\n  };\n\n  const handleCancel = () => {\n    setEditMode(false);\n    setEditedRecord({});\n  };\n\n  const handleValueChange = (field, value) => {\n    setEditedRecord(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSave = async () => {\n    setSaving(true);\n    try {\n      const Model = entityType === 'Contact' ? Contact :\n                   entityType === 'Lead' ? Lead :\n                   entityType === 'Account' ? Account :\n                   Opportunity;\n      \n      // Only send changed fields\n      const changes = {};\n      Object.keys(editedRecord).forEach(key => {\n        if (editedRecord[key] !== record[key] && !key.startsWith('_') && key !== 'id' && key !== 'created_date' && key !== 'updated_date') {\n          changes[key] = editedRecord[key];\n        }\n      });\n\n      if (Object.keys(changes).length > 0) {\n        await Model.update(record.id, changes);\n        // Update the record in the viewer\n        Object.assign(record, changes);\n        console.log(`Updated ${entityType}:`, changes);\n      }\n      \n      setEditMode(false);\n    } catch (error) {\n      console.error('Failed to update record:', error);\n      alert(`Failed to update record: ${error.message}`);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const currentRecord = editMode ? editedRecord : record;\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black/60 z-50 flex justify-end\"\n      onClick={onClose}\n    >\n      <div \n        className=\"w-full max-w-md h-full bg-slate-800 shadow-2xl border-l border-slate-700 flex flex-col\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <CardHeader className=\"flex flex-row items-center justify-between p-4 border-b border-slate-700\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 flex items-center justify-center rounded-lg bg-slate-700\">\n              {Icon}\n            </div>\n            <div>\n              <CardTitle className=\"text-lg text-slate-100\">{title}</CardTitle>\n              <Badge variant=\"secondary\" className=\"mt-1 bg-slate-900 border-slate-700 text-slate-300\">{entityType}</Badge>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {!editMode ? (\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleEdit} className=\"text-slate-400 hover:text-slate-100\">\n                <Edit3 className=\"w-4 h-4\" />\n              </Button>\n            ) : (\n              <>\n                <Button variant=\"ghost\" size=\"sm\" onClick={handleCancel} className=\"text-slate-400 hover:text-slate-100\">\n                  <RotateCcw className=\"w-4 h-4\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\" onClick={handleSave} disabled={saving} className=\"text-green-400 hover:text-green-300\">\n                  <Save className=\"w-4 h-4\" />\n                </Button>\n              </>\n            )}\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose} className=\"text-slate-400 hover:text-slate-100\">\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-4 overflow-y-auto flex-1\">\n          <dl className=\"space-y-1\">\n            <DetailRow label=\"First Name\" value={currentRecord.first_name} field=\"first_name\" editMode={editMode} onValueChange={handleValueChange} />\n            <DetailRow label=\"Last Name\" value={currentRecord.last_name} field=\"last_name\" editMode={editMode} onValueChange={handleValueChange} />\n            <DetailRow label=\"Name\" value={currentRecord.name} field=\"name\" editMode={editMode} onValueChange={handleValueChange} />\n            <DetailRow label=\"Email\" value={currentRecord.email} field=\"email\" editMode={editMode} onValueChange={handleValueChange} />\n            <DetailRow label=\"Phone\" value={currentRecord.phone} field=\"phone\" editMode={editMode} onValueChange={handleValueChange} />\n            <DetailRow label=\"Company\" value={currentRecord.company} field=\"company\" editMode={editMode} onValueChange={handleValueChange} />\n            <DetailRow label=\"Job Title\" value={currentRecord.job_title} field=\"job_title\" editMode={editMode} onValueChange={handleValueChange} />\n            <DetailRow label=\"Status\" value={currentRecord.status} field=\"status\" editMode={editMode} onValueChange={handleValueChange} />\n            <DetailRow label=\"Source\" value={currentRecord.source} field=\"source\" editMode={editMode} onValueChange={handleValueChange} />\n            <DetailRow label=\"Score\" value={currentRecord.score} field=\"score\" editMode={editMode} onValueChange={handleValueChange} />\n            <DetailRow label=\"Amount\" value={currentRecord.amount ? `$${Number(currentRecord.amount).toLocaleString()}` : currentRecord.amount} field=\"amount\" editMode={editMode} onValueChange={handleValueChange} />\n            {currentRecord.close_date && <DetailRow label=\"Close Date\" value={formatDate(currentRecord.close_date)} />}\n            {currentRecord.created_date && <DetailRow label=\"Created\" value={formatDate(currentRecord.created_date)} />}\n            {currentRecord.updated_date && <DetailRow label=\"Updated\" value={formatDate(currentRecord.updated_date)} />}\n          </dl>\n        </CardContent>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\GlobalDomPatches.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\LazyAccountSelector.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":137,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4151,4178],"text":"\n                  Create &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4151,4178],"text":"\n                  Create &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4151,4178],"text":"\n                  Create &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4151,4178],"text":"\n                  Create &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":137,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4190,4208],"text":"&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4190,4208],"text":"&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4190,4208],"text":"&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4190,4208],"text":"&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from \"react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Account, User } from \"@/api/entities\";\nimport { Loader2, Plus } from \"lucide-react\";\nimport { useApiManager } from \"./ApiManager\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function LazyAccountSelector({\n  value,\n  onValueChange,\n  onCreateNew,\n  placeholder = \"Select account...\",\n  className = \"\",\n  contentClassName = \"\",\n  itemClassName = \"\",\n  disabled = false\n}) {\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const { cachedRequest } = useApiManager();\n\n  // Only load when dropdown opens\n  const loadAccounts = useCallback(async () => {\n    if (loaded) return; // Already loaded\n    \n    setLoading(true);\n    setError(null);\n\n    try {\n      const user = await cachedRequest('User', 'me', {}, () => User.me());\n      \n      if (!user?.tenant_id) {\n        setError(\"No tenant assigned\");\n        setAccounts([]);\n        setLoaded(true);\n        return;\n      }\n\n      // Load only first 50 accounts, sorted by name\n      const accData = await cachedRequest(\n        'Account',\n        'filter',\n        { filter: { tenant_id: user.tenant_id }, sort: 'name', limit: 50 },\n        () => Account.filter({ tenant_id: user.tenant_id }, 'name', 50)\n      );\n\n      setAccounts(accData || []);\n      setLoaded(true);\n    } catch (err) {\n      console.warn(\"Failed to load accounts:\", err);\n      setError(err.message || \"Failed to load\");\n      setAccounts([]);\n      setLoaded(true);\n    } finally {\n      setLoading(false);\n    }\n  }, [loaded, cachedRequest]);\n\n  const handleOpenChange = (isOpen) => {\n    setOpen(isOpen);\n    if (isOpen && !loaded) {\n      loadAccounts();\n    }\n  };\n\n  const filteredAccounts = searchTerm\n    ? accounts.filter(acc => \n        acc.name?.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    : accounts;\n\n  const displayValue = value \n    ? accounts.find(a => a.id === value)?.name || \"Unknown Account\"\n    : placeholder;\n\n  return (\n    <Select\n      value={value || ''}\n      onValueChange={onValueChange}\n      disabled={disabled}\n      open={open}\n      onOpenChange={handleOpenChange}\n    >\n      <SelectTrigger className={className}>\n        <SelectValue placeholder={placeholder}>\n          {displayValue}\n        </SelectValue>\n      </SelectTrigger>\n      <SelectContent className={contentClassName} position=\"popper\" sideOffset={4}>\n        {loading ? (\n          <div className=\"flex items-center justify-center py-6\">\n            <Loader2 className=\"w-5 h-5 animate-spin text-slate-400\" />\n          </div>\n        ) : error ? (\n          <div className=\"px-2 py-6 text-center text-sm text-red-400\">\n            {error}\n          </div>\n        ) : (\n          <>\n            {/* Search Box */}\n            <div className=\"p-2 border-b border-slate-700\">\n              <Input\n                placeholder=\"Search accounts...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"h-8 bg-slate-700 border-slate-600 text-slate-200\"\n                onClick={(e) => e.stopPropagation()}\n              />\n            </div>\n\n            {/* Create New Option */}\n            {onCreateNew && searchTerm && (\n              <div className=\"p-2 border-b border-slate-700\">\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"w-full justify-start text-blue-400 hover:text-blue-300 hover:bg-slate-700\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onCreateNew(searchTerm);\n                    setOpen(false);\n                  }}\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create \"{searchTerm}\"\n                </Button>\n              </div>\n            )}\n\n            {/* Accounts List */}\n            <div className=\"max-h-[300px] overflow-y-auto\">\n              <SelectItem value={null} className={itemClassName}>\n                <span className=\"italic text-slate-500\">No account</span>\n              </SelectItem>\n              \n              {filteredAccounts.length === 0 ? (\n                <div className=\"px-2 py-6 text-center text-sm text-slate-500\">\n                  {searchTerm ? \"No accounts found\" : \"No accounts available\"}\n                </div>\n              ) : (\n                filteredAccounts.map((acc) => (\n                  <SelectItem\n                    key={acc.id}\n                    value={acc.id}\n                    className={itemClassName}\n                  >\n                    <div className=\"flex flex-col\">\n                      <span>{acc.name}</span>\n                      {acc.industry && (\n                        <span className=\"text-xs text-slate-500\">\n                          {acc.industry.replace(/_/g, ' ')}\n                        </span>\n                      )}\n                    </div>\n                  </SelectItem>\n                ))\n              )}\n            </div>\n\n            {accounts.length >= 50 && (\n              <div className=\"p-2 text-xs text-center text-slate-500 border-t border-slate-700\">\n                Showing first 50 accounts. Use search to find more.\n              </div>\n            )}\n          </>\n        )}\n      </SelectContent>\n    </Select>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\LazyEmployeeSelector.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\LazyPageLoader.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your component(s) to a separate file.","line":6,"column":7,"nodeType":"Identifier","messageId":"localComponents","endLine":6,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Suspense } from 'react';\nimport { Loader2 } from 'lucide-react';\nimport { Card, CardContent } from \"@/components/ui/card\";\n\n// Loading fallback component\nconst PageLoadingFallback = ({ pageName }) => (\n  <div className=\"flex items-center justify-center min-h-[400px]\">\n    <Card className=\"shadow-lg\">\n      <CardContent className=\"flex items-center gap-4 p-8\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-600\" />\n        <div>\n          <p className=\"font-semibold text-slate-900\">Loading {pageName}...</p>\n          <p className=\"text-sm text-slate-500\">Optimizing performance...</p>\n        </div>\n      </CardContent>\n    </Card>\n  </div>\n);\n\n// HOC for lazy loading pages with performance tracking\nexport const withLazyLoading = (importFn, pageName) => {\n  const LazyComponent = React.lazy(() => {\n    const startTime = performance.now();\n    return importFn().then(module => {\n      const loadTime = performance.now() - startTime;\n      console.log(`${pageName} loaded in ${loadTime.toFixed(2)}ms`);\n      return module;\n    });\n  });\n\n  const LazyWrapped = React.forwardRef((props, ref) => (\n    <Suspense fallback={<PageLoadingFallback pageName={pageName} />}>\n      <LazyComponent {...props} ref={ref} />\n    </Suspense>\n  ));\n\n  // Friendly display name for debugging / dev tools and to satisfy lint rules\n  LazyWrapped.displayName = `Lazy(${pageName || 'Component'})`;\n\n  return LazyWrapped;\n};\n\n// Preload page on hover (optional optimization)\nexport const preloadPage = (importFn) => {\n  let preloaded = false;\n  return () => {\n    if (!preloaded) {\n      preloaded = true;\n      importFn().catch(() => {\n        preloaded = false; // Reset on error\n      });\n    }\n  };\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\LinkContactDialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\LoadingManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":39,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":39,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback } from 'react';\nimport { Loader2 } from 'lucide-react';\n\nconst LoadingContext = createContext();\n\nexport const LoadingProvider = ({ children }) => {\n    const [loadingStates, setLoadingStates] = useState({});\n\n    const setLoading = useCallback((key, isLoading) => {\n        setLoadingStates(prev => ({\n            ...prev,\n            [key]: isLoading\n        }));\n    }, []);\n\n    const isLoading = useCallback((key) => {\n        return loadingStates[key] || false;\n    }, [loadingStates]);\n\n    const hasAnyLoading = useCallback(() => {\n        return Object.values(loadingStates).some(Boolean);\n    }, [loadingStates]);\n\n    return (\n        <LoadingContext.Provider value={{ setLoading, isLoading, hasAnyLoading }}>\n            {children}\n            {hasAnyLoading() && (\n                <div className=\"fixed top-4 right-4 z-50\">\n                    <div className=\"bg-white rounded-lg shadow-lg p-3 flex items-center gap-2\">\n                        <Loader2 className=\"w-4 h-4 animate-spin text-blue-600\" />\n                        <span className=\"text-sm text-slate-600\">Loading...</span>\n                    </div>\n                </div>\n            )}\n        </LoadingContext.Provider>\n    );\n};\n\nexport const useLoading = () => {\n    const context = useContext(LoadingContext);\n    if (!context) {\n        throw new Error('useLoading must be used within a LoadingProvider');\n    }\n    return context;\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\Logger.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":114,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":114,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useCallback } from 'react';\nimport { SystemLog } from '@/api/entities';\nimport { User } from '@/api/entities';\n\nconst LoggerContext = createContext(null);\n\nconst LOG_LEVELS = {\n  DEBUG: 'DEBUG',\n  INFO: 'INFO',\n  WARNING: 'WARNING',\n  ERROR: 'ERROR'\n};\n\n// In-memory buffer to batch logs\nlet logBuffer = [];\nlet flushTimeout = null;\nconst FLUSH_INTERVAL = 5000; // Flush every 5 seconds\nconst MAX_BUFFER_SIZE = 50;\n\nasync function flushLogs() {\n  if (logBuffer.length === 0) return;\n  \n  const logsToSend = [...logBuffer];\n  logBuffer = [];\n  \n  try {\n    // Bulk create logs\n    await SystemLog.bulkCreate(logsToSend);\n  } catch (error) {\n    console.error('Failed to flush logs to database:', error);\n  }\n}\n\nfunction scheduleFlush() {\n  if (flushTimeout) {\n    clearTimeout(flushTimeout);\n  }\n  flushTimeout = setTimeout(flushLogs, FLUSH_INTERVAL);\n}\n\nexport const LoggerProvider = ({ children }) => {\n  const log = useCallback(async (level, message, source, metadata = {}) => {\n    try {\n      const user = await User.me().catch(() => null);\n      \n      const logEntry = {\n        level,\n        message: String(message),\n        source,\n        user_email: user?.email || 'anonymous',\n        tenant_id: user?.tenant_id || null,\n        metadata: metadata || {},\n        user_agent: navigator.userAgent,\n        url: window.location.href,\n        stack_trace: level === 'ERROR' && metadata?.error ? metadata.error.stack : null\n      };\n\n      // Add to buffer\n      logBuffer.push(logEntry);\n\n      // Also log to console in development - FIX: ensure method exists\n      const consoleMethodMap = {\n        DEBUG: 'debug',\n        INFO: 'info',\n        WARNING: 'warn',\n        ERROR: 'error'\n      };\n      \n      const methodName = consoleMethodMap[level] || 'log';\n      const consoleMethod = console[methodName];\n      \n      // Only call if the method exists and is a function\n      if (typeof consoleMethod === 'function') {\n        consoleMethod.call(console, `[${level}] [${source}]`, message, metadata);\n      } else {\n        // Fallback to console.log\n        console.log(`[${level}] [${source}]`, message, metadata);\n      }\n\n      // Flush if buffer is full\n      if (logBuffer.length >= MAX_BUFFER_SIZE) {\n        await flushLogs();\n      } else {\n        scheduleFlush();\n      }\n    } catch (error) {\n      console.error('Logging failed:', error);\n    }\n  }, []);\n\n  const debug = useCallback((message, source, metadata) => {\n    return log(LOG_LEVELS.DEBUG, message, source, metadata);\n  }, [log]);\n\n  const info = useCallback((message, source, metadata) => {\n    return log(LOG_LEVELS.INFO, message, source, metadata);\n  }, [log]);\n\n  const warning = useCallback((message, source, metadata) => {\n    return log(LOG_LEVELS.WARNING, message, source, metadata);\n  }, [log]);\n\n  const error = useCallback((message, source, metadata) => {\n    return log(LOG_LEVELS.ERROR, message, source, metadata);\n  }, [log]);\n\n  return (\n    <LoggerContext.Provider value={{ debug, info, warning, error, log }}>\n      {children}\n    </LoggerContext.Provider>\n  );\n};\n\nexport const useLogger = () => {\n  const context = useContext(LoggerContext);\n  if (!context) {\n    // Return no-op functions if used outside provider\n    return {\n      debug: () => {},\n      info: () => {},\n      warning: () => {},\n      error: () => {},\n      log: () => {}\n    };\n  }\n  return context;\n};\n\n// Auto-capture console errors and warnings\nif (typeof window !== 'undefined') {\n  const originalError = console.error;\n  const originalWarn = console.warn;\n\n  console.error = function(...args) {\n    originalError.apply(console, args);\n    \n    // Extract meaningful message\n    const message = args.map(arg => {\n      if (arg instanceof Error) return arg.message;\n      if (typeof arg === 'object') return JSON.stringify(arg);\n      return String(arg);\n    }).join(' ');\n\n    // Don't log if it's our own logging system\n    if (!message.includes('[ERROR]') && !message.includes('Logging failed')) {\n      SystemLog.create({\n        level: 'ERROR',\n        message,\n        source: 'console.error',\n        user_agent: navigator.userAgent,\n        url: window.location.href,\n        stack_trace: args.find(arg => arg instanceof Error)?.stack\n      }).catch(() => {});\n    }\n  };\n\n  console.warn = function(...args) {\n    originalWarn.apply(console, args);\n    \n    const message = args.map(arg => {\n      if (typeof arg === 'object') return JSON.stringify(arg);\n      return String(arg);\n    }).join(' ');\n\n    // Don't log if it's our own logging system or known noise\n    if (!message.includes('[WARNING]') && \n        !message.includes('Storage access failed') &&\n        !message.includes('Failed to save')) {\n      SystemLog.create({\n        level: 'WARNING',\n        message,\n        source: 'console.warn',\n        user_agent: navigator.userAgent,\n        url: window.location.href\n      }).catch(() => {});\n    }\n  };\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\MCPClient.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":31,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":31,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react'; // Removed unused React and useState\n\nexport function MCPManager() {\n  // const [isReady, setIsReady] = useState(false); // UNUSED: isReady state not used\n\n  useEffect(() => {\n    const initMCP = async () => {\n      try {\n        if (window.mcpClient) {\n          // setIsReady(true); // UNUSED: isReady state not used\n          return;\n        }\n\n        window.mcpClient = {\n          initialized: true,\n          ready: true\n        };\n        \n        // setIsReady(true); // UNUSED: isReady state not used\n      } catch (error) {\n        console.error('MCP initialization failed:', error);\n      }\n    };\n\n    initMCP();\n  }, []);\n\n  return null;\n}\n\nexport function useMCPClient() {\n  return {\n    isReady: !!window.mcpClient,\n    client: window.mcpClient\n  };\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ModalHost.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\n\nexport default function ModalHost({ id = \"app-modal-host\" }) {\n  useEffect(() => {\n    let el = document.getElementById(id);\n    if (!el) {\n      el = document.createElement(\"div\");\n      el.id = id;\n      // Neutral, invisible container\n      el.style.position = \"relative\";\n      el.style.zIndex = \"2147483000\"; // ensure modals can sit above app\n      document.body.appendChild(el);\n      console.log(\"[ModalHost] created:\", id, el);\n    } else {\n      console.log(\"[ModalHost] already present:\", id);\n    }\n  }, [id]);\n\n  return null;\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ModuleManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[238,286],"text":""},"desc":"Remove unused variable 'Button'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { ModuleSettings } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Users,\n  Building2,\n  TrendingUp,\n  Target,\n  Calendar,\n  BarChart3,\n  Settings,\n  Zap,\n  CheckCircle,\n  AlertCircle,\n  FileText,\n  DollarSign,\n  BrainCircuit,\n  LayoutDashboard,\n  CreditCard,\n  Wrench,\n  Database\n} from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { createAuditLog } from \"@/api/functions\";\nimport { toast } from \"sonner\";\n\nconst defaultModules = [\n  {\n    id: 'dashboard',\n    name: 'Dashboard',\n    description: 'Central hub for viewing key metrics and system activity.',\n    icon: LayoutDashboard,\n    features: ['Real-time Stats', 'Activity Feed', 'Sales Pipeline Overview', 'Lead Source Insights', 'Customizable Widgets']\n  },\n  {\n    id: 'contacts',\n    name: 'Contact Management',\n    description: 'Manage customer contacts and relationships',\n    icon: Users,\n    features: ['Create & Edit Contacts', 'CSV Import/Export', 'Search & Filter', 'Table & Card Views', 'Notes System']\n  },\n  {\n    id: 'accounts',\n    name: 'Account Management',\n    description: 'Manage companies and organizations',\n    icon: Building2,\n    features: ['Company Profiles', 'Industry Categorization', 'Contact Associations', 'Address Management', 'CSV Import/Export']\n  },\n  {\n    id: 'leads',\n    name: 'Lead Management',\n    description: 'Track and convert potential customers',\n    icon: TrendingUp,\n    features: ['Lead Creation & Editing', 'Status Tracking', 'Source Attribution', 'CSV Import/Export', 'Notes System']\n  },\n  {\n    id: 'opportunities',\n    name: 'Opportunities',\n    description: 'Manage sales opportunities and deals',\n    icon: Target,\n    features: ['Pipeline Stages', 'Kanban Board View', 'Deal Tracking', 'Account/Contact Links', 'Amount Tracking']\n  },\n  {\n    id: 'activities',\n    name: 'Activity Tracking',\n    description: 'Schedule and track tasks, meetings, calls',\n    icon: Calendar,\n    features: ['Task Creation', 'Due Date Management', 'Priority Levels', 'Status Tracking', 'CSV Import/Export']\n  },\n  {\n    id: 'calendar',\n    name: 'Calendar',\n    description: 'Manage and visualize scheduled events, tasks, and appointments within the CRM.',\n    icon: Calendar,\n    features: ['Event Scheduling', 'Task Reminders', 'Meeting Management', 'Multiple Calendar Views', 'Integration with Activities']\n  },\n  {\n    id: 'bizdev_sources',\n    name: 'BizDev Sources',\n    description: 'Import and manage business development leads from external directories',\n    icon: Database,\n    features: ['Bulk CSV Import', 'Promote to Account', 'Archive to R2 Cloud', 'Batch Management', 'License Tracking', 'Archive Retrieval']\n  },\n  {\n    id: 'cash_flow',\n    name: 'Cash Flow Management',\n    description: 'Track income, expenses, and cash flow trends',\n    icon: DollarSign,\n    features: ['Manual Transaction Entry', 'Income & Expense Tracking', 'Time Period Analysis', 'Recurring Transactions', 'CRM Integration']\n  },\n  {\n    id: 'document_processing',\n    name: 'Document Processing & Management',\n    description: 'AI-powered document extraction, business card scanning, and document management',\n    icon: FileText,\n    features: ['Business Card Scanning', 'Document Data Extraction', 'Auto-Contact Creation', 'Company Research', 'Mobile Photo Upload', 'Document Storage & Management', 'File Upload & Preview', 'Document Organization']\n  },\n  {\n    id: 'ai_campaigns',\n    name: 'AI Campaigns',\n    description: 'Create and manage AI-powered calling and outreach campaigns',\n    icon: BrainCircuit,\n    features: ['AI-powered Calling Lists', 'Automated Follow-ups', 'Campaign Performance Tracking', 'Custom Prompts']\n  },\n  {\n    id: 'reports',\n    name: 'Analytics & Reports',\n    description: 'Business intelligence and insights',\n    icon: BarChart3,\n    features: ['Dashboard Overview', 'Lead Source Charts', 'Sales Pipeline View', 'Activity Summary', 'Data Export']\n  },\n  {\n    id: 'employees',\n    name: 'Employee Management',\n    description: 'Manage team members and workforce',\n    icon: Users,\n    features: ['Employee Profiles', 'Department Organization', 'Skills Tracking', 'Emergency Contacts', 'CSV Import/Export']\n  },\n  {\n    id: 'integrations',\n    name: 'Integrations',\n    description: 'Connect with other tools and manage API settings',\n    icon: Zap,\n    features: ['Webhook Management', 'API Key Generation', 'Email Integration', 'Third-party Connectors']\n  },\n  {\n    id: 'payment_portal',\n    name: 'Payment Portal',\n    description: 'Manage payment provider connections like Stripe.',\n    icon: CreditCard,\n    features: ['Stripe Integration', 'Subscription Management', 'Billing Portal Access']\n  },\n  {\n    id: 'utilities',\n    name: 'Utilities',\n    description: 'System utilities and tools',\n    icon: Wrench,\n    features: ['Duplicate Detection', 'Data Quality Reports', 'System Diagnostics', 'Bulk Operations']\n  },\n  {\n    id: 'client_onboarding',\n    name: 'Client Onboarding',\n    description: 'Streamlined form for prospects to submit their requirements and request a demo',\n    icon: Users,\n    features: ['Project Requirements Form', 'Module Selection', 'Navigation Permissions Setup', 'Initial User Configuration', 'Admin Review & Approval']\n  }\n];\n\nexport default function ModuleManager() {\n  const [moduleSettings, setModuleSettings] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      const [currentUser] = await Promise.all([User.me()]);\n      setUser(currentUser);\n\n      let currentModuleSettings = [];\n      try {\n        currentModuleSettings = await ModuleSettings.list();\n        setModuleSettings(currentModuleSettings);\n      } catch (error) {\n        console.warn(\"Could not load module settings:\", error);\n        setModuleSettings([]);\n        currentModuleSettings = [];\n      }\n\n      // Initialize default settings for modules that don't exist\n      const existingModuleIds = currentModuleSettings.map((s) => s.module_id);\n      const missingModules = defaultModules.filter((m) => !existingModuleIds.includes(m.id));\n\n      if (missingModules.length > 0 && currentUser) {\n        try {\n          const newModuleRecords = missingModules.map((module) => ({\n            module_id: module.id,\n            module_name: module.name,\n            is_active: true,\n            user_email: currentUser.email\n          }));\n          await ModuleSettings.bulkCreate(newModuleRecords);\n\n          const updatedSettings = await ModuleSettings.list();\n          setModuleSettings(updatedSettings);\n        } catch (error) {\n          console.warn(\"Could not create default module settings:\", error);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error loading module data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleModule = async (moduleId, currentStatus) => {\n    if (!user) return;\n\n    try {\n      const setting = moduleSettings.find((s) => s.module_id === moduleId);\n      const module = defaultModules.find(m => m.id === moduleId);\n      const newStatus = !currentStatus;\n\n      if (setting) {\n        await ModuleSettings.update(setting.id, {\n          is_active: newStatus,\n          user_email: user.email\n        });\n\n        // Update local state\n        setModuleSettings((prev) =>\n          prev.map((s) =>\n            s.module_id === moduleId ? { ...s, is_active: newStatus } : s\n          )\n        );\n\n        // Create audit log\n        try {\n          await createAuditLog({\n            action_type: 'module_toggle',\n            entity_type: 'ModuleSettings',\n            entity_id: setting.id,\n            description: `${newStatus ? 'Enabled' : 'Disabled'} module: ${module?.name || moduleId}`,\n            old_values: { is_active: currentStatus },\n            new_values: { is_active: newStatus }\n          });\n        } catch (auditError) {\n          console.warn('Failed to create audit log:', auditError);\n        }\n\n        // Dispatch event to notify Layout and other components\n        window.dispatchEvent(new CustomEvent('module-settings-changed', {\n          detail: {\n            moduleId,\n            moduleName: module?.name || moduleId,\n            isActive: newStatus,\n            changedBy: user.email\n          }\n        }));\n\n        toast.success(`${module?.name || moduleId} ${newStatus ? 'enabled' : 'disabled'}`);\n      }\n    } catch (error) {\n      console.error(\"Error toggling module:\", error);\n      toast.error(\"Failed to update module setting\");\n    }\n  };\n\n  const getModuleStatus = (moduleId) => {\n    const setting = moduleSettings.find((s) => s.module_id === moduleId);\n    return setting?.is_active ?? true;\n  };\n\n  if (loading) {\n    return <div className=\"p-6 text-center text-slate-300\">Loading modules...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-slate-800 border-slate-700 shadow-lg\">\n        <CardHeader className=\"border-b border-slate-700\">\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Settings className=\"w-5 h-5 text-blue-400\" />\n            Ai-SHA CRM Module Management\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Enable or disable modules to customize your CRM experience. Only administrators can manage module settings.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-6 space-y-6\">\n          <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n            <AlertCircle className=\"h-4 w-4 text-blue-400\" />\n            <AlertDescription className=\"text-blue-300\">\n              <strong>Module settings are the final authority on visibility.</strong> Disabling a module here will hide it from all users, regardless of their individual permissions. Changes take effect immediately across the app.\n            </AlertDescription>\n          </Alert>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {defaultModules.map((module) => {\n              const isActive = getModuleStatus(module.id);\n              return (\n                <Card\n                  key={module.id}\n                  className={`transition-all duration-200 ${\n                    isActive\n                      ? 'border-green-600/50 bg-green-900/20 shadow-lg'\n                      : 'border-slate-600 bg-slate-700/50 hover:bg-slate-700/70'\n                  }`}\n                >\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div\n                          className={`w-12 h-12 rounded-lg flex items-center justify-center transition-colors ${\n                            isActive ? 'bg-green-600/20' : 'bg-slate-600/50'\n                          }`}\n                        >\n                          <module.icon\n                            className={`w-6 h-6 ${\n                              isActive ? 'text-green-400' : 'text-slate-400'\n                            }`}\n                          />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-slate-100\">{module.name}</h3>\n                          <Badge\n                            className={`mt-1 ${\n                              isActive\n                                ? 'bg-green-600 text-white hover:bg-green-700'\n                                : 'bg-slate-600 text-slate-300 hover:bg-slate-500'\n                            }`}\n                          >\n                            {isActive ? 'Active' : 'Inactive'}\n                          </Badge>\n                        </div>\n                      </div>\n                      <Switch\n                        checked={isActive}\n                        onCheckedChange={() => toggleModule(module.id, isActive)}\n                        className=\"data-[state=checked]:bg-green-600\"\n                      />\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <p className=\"text-sm text-slate-400 mb-4\">{module.description}</p>\n                    \n                    <div className=\"space-y-3\">\n                      <h4 className=\"text-sm font-medium text-slate-300\">Current Features:</h4>\n                      <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                        {module.features.map((feature, index) => (\n                          <div key={index} className=\"flex items-center gap-2 text-sm\">\n                            <CheckCircle\n                              className={`w-3 h-3 flex-shrink-0 ${\n                                isActive ? 'text-green-400' : 'text-slate-500'\n                              }`}\n                            />\n                            <span className={isActive ? 'text-slate-300' : 'text-slate-500'}>\n                              {feature}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n          \n          <Card className=\"border-amber-600/50 bg-amber-900/20\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start gap-3\">\n                <Zap className=\"w-6 h-6 text-amber-400 mt-0.5 flex-shrink-0\" />\n                <div>\n                  <h4 className=\"text-amber-400 mb-2 text-lg font-semibold\">Planned Enhancements</h4>\n                  <p className=\"text-amber-600 text-sm leading-relaxed\">\n                    Future releases will include: Advanced AI Scoring, Revenue Forecasting, Automated Workflows, Call Integration, Meeting Scheduler, Custom Reports, and advanced Analytics. These features will be automatically added to existing modules as they become available.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Module Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t border-slate-700\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-400\">\n                {defaultModules.filter((m) => getModuleStatus(m.id)).length}\n              </div>\n              <div className=\"text-sm text-slate-400\">Active Modules</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-slate-400\">\n                {defaultModules.filter((m) => !getModuleStatus(m.id)).length}\n              </div>\n              <div className=\"text-sm text-slate-400\">Inactive Modules</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-400\">\n                {defaultModules.length}\n              </div>\n              <div className=\"text-sm text-slate-400\">Total Available</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\NotesSection.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[153,158],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":5,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[157,170],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'userLoading' is assigned a value but never used.","line":42,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"userLoading"},"fix":{"range":[1568,1579],"text":""},"desc":"Remove unused variable 'userLoading'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Note } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  Plus,\n  StickyNote,\n  Trash2,\n  Clock,\n  User as UserIcon,\n  Loader2,\n  AlertCircle,\n  CheckCircle2\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { format } from \"date-fns\";\n\nconst noteTypes = [\n  { value: \"general\", label: \"General\", color: \"text-slate-400\" },\n  { value: \"call_log\", label: \"Call Log\", color: \"text-blue-400\" },\n  { value: \"meeting\", label: \"Meeting\", color: \"text-emerald-400\" },\n  { value: \"email\", label: \"Email\", color: \"text-purple-400\" },\n  { value: \"follow_up\", label: \"Follow-up\", color: \"text-yellow-400\" },\n  { value: \"important\", label: \"Important\", color: \"text-red-400\" },\n];\n\nconst getTypeColor = (type) => {\n  return noteTypes.find(t => t.value === type)?.color || \"text-slate-400\";\n};\n\nexport default function NotesSection({ relatedTo, relatedId, className = \"\" }) {\n  const [notes, setNotes] = useState([]);\n  const [loadingNotes, setLoadingNotes] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userLoading, setUserLoading] = useState(true);\n\n  const [newNote, setNewNote] = useState({\n    title: \"\",\n    content: \"\",\n    type: \"general\",\n  });\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [loading, setLoading] = useState(false); // For the add note button\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  const loadUser = async () => {\n    setUserLoading(true);\n    try {\n      const user = await User.me();\n      setCurrentUser(user);\n\n      if (!user.tenant_id) {\n        console.warn(\"User does not have a tenant_id assigned. Please contact your administrator.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading user:\", error);\n      setError(\"Failed to load user information.\");\n    } finally {\n      setUserLoading(false);\n    }\n  };\n\n  const loadNotes = useCallback(async () => {\n    if (!currentUser?.tenant_id) return;\n    setLoadingNotes(true);\n    setError(null);\n    try {\n      const notesList = await Note.filter(\n        { related_to: relatedTo, related_id: relatedId },\n        '-created_date'\n      );\n      setNotes(notesList);\n    } catch (error) {\n      console.error(\"Error loading notes:\", error);\n      setError(\"Failed to load notes. Please try again.\");\n    } finally {\n      setLoadingNotes(false);\n    }\n  }, [relatedTo, relatedId, currentUser?.tenant_id]);\n\n  useEffect(() => {\n    if (currentUser && currentUser.tenant_id) {\n      loadNotes();\n    }\n  }, [relatedId, currentUser, loadNotes]);\n\n  const handleAddNote = async () => {\n    setError(null);\n    setSuccess(null);\n\n    if (!currentUser?.tenant_id) {\n      setError(\"Error: User information not loaded or tenant not assigned. Please contact your administrator.\");\n      return;\n    }\n\n    if (!newNote.title.trim()) {\n      setError(\"Please enter a title for the note.\");\n      return;\n    }\n\n    if (!newNote.content.trim()) {\n      setError(\"Please enter content for the note.\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const notePayload = {\n        ...newNote,\n        title: newNote.title.trim(),\n        content: newNote.content.trim(),\n        tenant_id: currentUser.tenant_id,\n        related_to: relatedTo,\n        related_id: relatedId,\n        is_private: false, // Default value as the form doesn't support it\n        tags: [], // Default value as the form doesn't support it\n      };\n\n      await Note.create(notePayload);\n      setNewNote({ title: \"\", content: \"\", type: \"general\" });\n      setSuccess(\"Note added successfully!\");\n      await loadNotes();\n    } catch (error) {\n      console.error(\"Error adding note:\", error);\n      setError(`Error adding note: ${error.message || 'Please try again or contact support.'}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteNote = async (noteId) => {\n    if (confirm(\"Are you sure you want to delete this note?\")) {\n      setError(null);\n      setSuccess(null);\n      try {\n        await Note.delete(noteId);\n        setSuccess(\"Note deleted successfully!\");\n        await loadNotes();\n      } catch (error) {\n        console.error(\"Error deleting note:\", error);\n        setError(\"Error deleting note. Please try again.\");\n      }\n    }\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Add Note Form */}\n      <div className=\"bg-slate-700/30 p-4 rounded-lg border border-slate-600\">\n        <div className=\"space-y-3\">\n          <Input\n            placeholder=\"Note title...\"\n            value={newNote.title}\n            onChange={(e) => setNewNote(prev => ({ ...prev, title: e.target.value }))}\n            className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n          />\n          <Textarea\n            placeholder=\"Write your note here...\"\n            value={newNote.content}\n            onChange={(e) => setNewNote(prev => ({ ...prev, content: e.target.value }))}\n            rows={3}\n            className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n          />\n          <div className=\"flex justify-between items-center\">\n            <Select\n              value={newNote.type}\n              onValueChange={(value) => setNewNote(prev => ({ ...prev, type: value }))}\n            >\n              <SelectTrigger className=\"w-40 bg-slate-700 border-slate-600 text-slate-200\">\n                <SelectValue placeholder=\"Note type\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-700\">\n                {noteTypes.map(type => (\n                  <SelectItem key={type.value} value={type.value} className=\"text-slate-200 hover:bg-slate-700\">\n                    {type.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Button\n              onClick={handleAddNote}\n              disabled={!newNote.title.trim() || !newNote.content.trim() || loading || !currentUser?.tenant_id}\n              size=\"sm\"\n              className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n            >\n              {loading ? (\n                <Loader2 className=\"w-4 h-4 animate-spin mr-2\" />\n              ) : (\n                <Plus className=\"w-4 h-4 mr-2\" />\n              )}\n              Add Note\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Notes List */}\n      {loadingNotes ? (\n        <div className=\"space-y-3\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"bg-slate-700/30 rounded-lg p-4 border border-slate-600\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-slate-600 rounded w-1/3 mb-2\"></div>\n                <div className=\"h-3 bg-slate-600 rounded w-full mb-1\"></div>\n                <div className=\"h-3 bg-slate-600 rounded w-2/3\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : notes.length > 0 ? (\n        <div className=\"space-y-3\">\n          {notes.map(note => (\n            <motion.div\n              key={note.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"bg-slate-700/30 rounded-lg p-4 border border-slate-600 hover:bg-slate-700/50 transition-colors\"\n            >\n              <div className=\"flex justify-between items-start mb-2\">\n                <h4 className=\"font-medium text-slate-200\">{note.title}</h4>\n                <div className=\"flex items-center gap-2\">\n                  <Badge\n                    variant=\"outline\"\n                    className={`text-xs ${getTypeColor(note.type)} border-slate-600`}\n                  >\n                    {noteTypes.find(t => t.value === note.type)?.label || note.type}\n                  </Badge>\n                  {!note.is_private && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDeleteNote(note.id)}\n                      className=\"h-6 w-6 p-0 text-slate-400 hover:text-red-400 hover:bg-red-900/20\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  )}\n                </div>\n              </div>\n              <p className=\"text-sm text-slate-300 mb-2 whitespace-pre-wrap\">{note.content}</p>\n              <div className=\"flex justify-between items-center text-xs text-slate-500\">\n                <div className=\"flex items-center gap-1\">\n                  <UserIcon className=\"w-3 h-3\" />\n                  <span>\n                    {note.created_by === currentUser?.email ? 'You' : note.created_by}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Clock className=\"w-3 h-3\" />\n                  <span>\n                    {format(new Date(note.created_date), 'MMM d, yyyy h:mm a')}\n                  </span>\n                </div>\n              </div>\n            </motion.div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-8 bg-slate-700/30 rounded-lg border border-slate-600\">\n          <StickyNote className=\"w-8 h-8 mx-auto mb-2 text-slate-500\" />\n          <p className=\"text-slate-400\">No notes yet</p>\n          <p className=\"text-sm text-slate-500\">Add your first note above</p>\n        </div>\n      )}\n\n      {error && (\n        <Alert variant=\"destructive\" className=\"bg-red-900/20 border-red-700/50 text-red-300\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {success && (\n        <Alert className=\"bg-green-900/20 border-green-700/50 text-green-300\">\n          <CheckCircle2 className=\"h-4 w-4\" />\n          <AlertDescription>{success}</AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\NotificationPanel.jsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":125,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4340,4373],"text":"You&apos;ll see important updates here"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4340,4373],"text":"You&lsquo;ll see important updates here"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4340,4373],"text":"You&#39;ll see important updates here"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4340,4373],"text":"You&rsquo;ll see important updates here"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Loader2, Users, Star, Target, Calendar, AlertTriangle } from \"lucide-react\";\nimport { Notification } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nconst iconMap = {\n  bell: Bell,\n  users: Users,\n  star: Star,\n  target: Target,\n  calendar: Calendar,\n  alert: AlertTriangle,\n};\n\nexport default function NotificationPanel() {\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isOpen, setIsOpen] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  useEffect(() => {\n    loadNotifications();\n  }, []);\n\n  const loadNotifications = async () => {\n    try {\n      setLoading(true);\n      const user = await User.me();\n      const fetchedNotifications = await Notification.filter(\n        { recipient_id: user.id },\n        '-created_date',\n        50\n      );\n      setNotifications(fetchedNotifications);\n      \n      const unread = fetchedNotifications.filter(n => !n.is_read).length;\n      setUnreadCount(unread);\n    } catch (error) {\n      console.error(\"Failed to load notifications:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleNotificationClick = async (notification) => {\n    if (!notification.is_read) {\n      try {\n        await Notification.update(notification.id, { is_read: true });\n        setNotifications(prev => \n          prev.map(n => n.id === notification.id ? { ...n, is_read: true } : n)\n        );\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      } catch (error) {\n        console.error(\"Failed to mark notification as read:\", error);\n      }\n    }\n\n    if (notification.action_url) {\n      window.location.href = notification.action_url;\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      const unreadNotifications = notifications.filter(n => !n.is_read);\n      \n      await Promise.all(\n        unreadNotifications.map(n => \n          Notification.update(n.id, { is_read: true })\n        )\n      );\n\n      setNotifications(prev => \n        prev.map(n => ({ ...n, is_read: true }))\n      );\n      setUnreadCount(0);\n    } catch (error) {\n      console.error(\"Failed to mark all notifications as read:\", error);\n    }\n  };\n\n  return (\n    <Sheet open={isOpen} onOpenChange={setIsOpen}>\n      <SheetTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"relative text-slate-400 hover:text-slate-200 hover:bg-slate-800\">\n          <Bell className=\"w-5 h-5\" />\n          {unreadCount > 0 && (\n            <Badge className=\"absolute -top-1 -right-1 w-5 h-5 flex items-center justify-center p-0 text-xs bg-red-600 text-white border-2 border-slate-900\">\n              {unreadCount > 9 ? '9+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </SheetTrigger>\n      <SheetContent className=\"w-80 bg-slate-800 border-slate-700 text-slate-200\">\n        <SheetHeader className=\"border-b border-slate-700 pb-4\">\n          <SheetTitle className=\"flex items-center justify-between text-slate-100\">\n            <span>Notifications</span>\n            {unreadCount > 0 && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={markAllAsRead}\n                className=\"text-blue-400 hover:text-blue-300 hover:bg-slate-700\"\n              >\n                Mark all read\n              </Button>\n            )}\n          </SheetTitle>\n        </SheetHeader>\n\n        <div className=\"mt-4 space-y-2 max-h-[70vh] overflow-y-auto\">\n          {loading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"w-6 h-6 animate-spin text-blue-400\" />\n              <span className=\"ml-2 text-slate-400\">Loading notifications...</span>\n            </div>\n          ) : notifications.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-8 text-slate-500\">\n              <Bell className=\"w-12 h-12 mb-2 text-slate-600\" />\n              <p>No notifications yet</p>\n              <p className=\"text-sm\">You'll see important updates here</p>\n            </div>\n          ) : (\n            notifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`p-4 rounded-lg border cursor-pointer transition-colors ${\n                  notification.is_read\n                    ? 'bg-slate-700/50 border-slate-600 text-slate-300'\n                    : 'bg-blue-900/30 border-blue-700/50 text-slate-200'\n                }`}\n                onClick={() => handleNotificationClick(notification)}\n              >\n                <div className=\"flex items-start gap-3\">\n                  {notification.icon && (\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${\n                      notification.is_read \n                        ? 'bg-slate-600 text-slate-400' \n                        : 'bg-blue-600 text-white'\n                    }`}>\n                      {React.createElement(\n                        iconMap[notification.icon] || Bell,\n                        { className: \"w-4 h-4\" }\n                      )}\n                    </div>\n                  )}\n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"font-medium text-sm\">{notification.title}</h4>\n                    {notification.description && (\n                      <p className=\"text-sm text-slate-400 mt-1\">\n                        {notification.description}\n                      </p>\n                    )}\n                    <p className=\"text-xs text-slate-500 mt-2\">\n                      {formatDistanceToNow(new Date(notification.created_date))} ago\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\NotifyAdminOnInvite.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":99,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":109,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { SendEmail } from \"@/api/integrations\";\nimport { sendSms } from \"@/api/functions\";\nimport { User } from \"@/api/entities\";\nimport { Tenant } from \"@/api/entities\";\n\n// Tier reference (quick guide shown in the email)\nconst TIER_MAP = {\n  Tier1: {\n    label: \"Tier 1 ΓÇö Basic User\",\n    summary: \"Core CRM functions; can manage own records.\",\n    highlights: [\n      \"Create/update own Leads, Contacts, and Activities\",\n      \"Limited visibility to own data\",\n      \"No aggregated dashboards\",\n    ],\n  },\n  Tier2: {\n    label: \"Tier 2 ΓÇö Advanced User\",\n    summary: \"Includes Tier 1 plus access to select advanced modules.\",\n    highlights: [\n      \"May access Document Processing (if enabled)\",\n      \"Broader visibility per tenant rules\",\n      \"Ideal for senior ICs\",\n    ],\n  },\n  Tier3: {\n    label: \"Tier 3 ΓÇö Team Lead\",\n    summary: \"Includes Tier 2 plus aggregated dashboard views.\",\n    highlights: [\n      \"Aggregated views across team\",\n      \"Can assist with team pipeline and activities\",\n      \"Good for supervisors/lead roles\",\n    ],\n  },\n  Tier4: {\n    label: \"Tier 4 ΓÇö Power User\",\n    summary: \"Includes Tier 3 with broad data/reporting across tenant.\",\n    highlights: [\n      \"Broad visibility across tenant data (per RLS)\",\n      \"Advanced reporting and analytics\",\n      \"Ideal for operations managers and admins\",\n    ],\n  },\n};\n\n// Renders a small HTML block for the tier card\nfunction renderTierCard(tierKey) {\n  const t = TIER_MAP[tierKey];\n  if (!t) return \"\";\n  const li = t.highlights.map((h) => `<li style=\"margin: 0 0 6px;\">${h}</li>`).join(\"\");\n  return `\n    <div style=\"border:1px solid #e5e7eb;border-radius:10px;padding:12px 14px;background:#fff;margin:6px 0;\">\n      <div style=\"font-weight:700;color:#0f172a;margin-bottom:6px;\">${t.label}</div>\n      <div style=\"color:#334155;margin-bottom:8px;\">${t.summary}</div>\n      <ul style=\"padding-left:18px;margin:0;color:#475569;\">${li}</ul>\n    </div>\n  `;\n}\n\n// Renders a compact quick guide with all tiers\nfunction renderAllTiersGuide() {\n  return `\n    <div style=\"margin-top:10px;\">\n      ${[\"Tier1\",\"Tier2\",\"Tier3\",\"Tier4\"].map(renderTierCard).join(\"\")}\n    </div>\n  `;\n}\n\n// Send admin notifications (email + SMS) about a new invite.\n// Accepts optional tier and tenantId for richer context.\n// If adminEmail/Phone overrides are not provided, falls back to current user's data.\nexport async function notifyAdminOnInvite({\n  invitedEmail,\n  invitedName,\n  role,\n  tier,               // optional (Tier1 | Tier2 | Tier3 | Tier4)\n  tenantId,           // optional tenant context for the invite\n  adminEmailOverride, // optional override for admin email\n  adminPhoneOverride, // optional override for admin phone\n  canUseSoftphone,    // requested softphone flag (optional)\n  permissions         // granular requested permissions (optional)\n}) {\n  // Resolve admin contact (current user first)\n  let adminEmail = adminEmailOverride || null;\n  let adminPhone = adminPhoneOverride || null;\n  let currentUserMe = null;\n\n  try {\n    currentUserMe = await User.me();\n    if (!adminEmail && currentUserMe?.email) adminEmail = currentUserMe.email;\n    if (!adminPhone) {\n      adminPhone =\n        (currentUserMe?.phone_number && String(currentUserMe.phone_number).trim()) ||\n        (currentUserMe?.profile?.phone && String(currentUserMe.profile.phone).trim()) ||\n        (currentUserMe?.settings?.phone && String(currentUserMe.settings.phone).trim()) ||\n        null;\n    }\n  } catch (error) {\n    // ignore\n  }\n\n  // Get tenant name (for context only; no selection in UI)\n  let tenantName = null;\n  if (tenantId) {\n    try {\n      const t = await Tenant.get(tenantId);\n      tenantName = t?.name || null;\n    } catch (_e) {\n      // ignore\n    }\n  }\n\n  const cleanName = invitedName || invitedEmail || \"New User\";\n  const cleanRole = role || \"user\";\n  const cleanTier = tier || \"Not provided\";\n\n  const requestedByEmail = currentUserMe?.email || null;\n  const requestedByName = currentUserMe?.full_name || currentUserMe?.display_name || requestedByEmail || \"Requester\";\n  const requestedByRole = currentUserMe?.role || \"user\";\n  const requestedByTier = currentUserMe?.tier || \"Unknown\";\n\n  // Build requested access details\n  const requestedAccessItems = [];\n  if (typeof canUseSoftphone === 'boolean') {\n    requestedAccessItems.push(`Can use Softphone: <strong>${canUseSoftphone ? 'Yes' : 'No'}</strong>`);\n  }\n  if (permissions && typeof permissions === 'object') {\n    const labelMap = {\n      intended_role: 'Intended Role',\n      can_manage_users: 'Can manage users',\n      can_manage_settings: 'Can manage settings',\n      can_view_all_data: 'Can view all data',\n      can_export_data: 'Can export data',\n      can_manage_modules: 'Can manage modules',\n      can_impersonate_tenants: 'Can impersonate tenants',\n      can_use_softphone: 'Can use Softphone',\n      dashboard_scope: 'Dashboard scope'\n    };\n    Object.entries(permissions).forEach(([key, value]) => {\n      if (value === undefined || value === null || value === false) return;\n      const label = labelMap[key] || key.replace(/_/g, ' ');\n      const shown = typeof value === 'boolean' ? (value ? 'Yes' : 'No') : String(value);\n      requestedAccessItems.push(`${label}: <strong>${shown}</strong>`);\n    });\n  }\n\n  // Structured HTML email (dark/light friendly)\n  const html = `\n  <div style=\"font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; background:#0f172a; padding:18px;\">\n    <div style=\"max-width:680px;margin:0 auto;background:#ffffff;border-radius:14px;overflow:hidden;border:1px solid #e5e7eb;\">\n      <div style=\"background: linear-gradient(135deg, #06b6d4, #6366f1); padding:16px 20px;\">\n        <h1 style=\"margin:0;color:#ffffff;font-size:18px;letter-spacing:0.3px;\">Ai-SHA CRM ΓÇö New User Access Request</h1>\n      </div>\n\n      <div style=\"padding:16px 20px;\">\n        <p style=\"margin:0 0 12px;color:#0f172a;\">\n          A new user access request was submitted from the Employees page.\n        </p>\n\n        <div style=\"border:1px solid #e5e7eb;border-radius:10px;padding:12px 14px;background:#f8fafc;\">\n          <table cellpadding=\"0\" cellspacing=\"0\" style=\"width:100%;font-size:14px;color:#0f172a;\">\n            <tr>\n              <td style=\"width:180px;color:#475569;padding:6px 8px;\">Requested User</td>\n              <td style=\"padding:6px 8px;font-weight:600;\">${cleanName} &lt;${invitedEmail}&gt;</td>\n            </tr>\n            <tr>\n              <td style=\"color:#475569;padding:6px 8px;\">Role (requested)</td>\n              <td style=\"padding:6px 8px;\">${cleanRole}</td>\n            </tr>\n            <tr>\n              <td style=\"color:#475569;padding:6px 8px;\">Tier (requested)</td>\n              <td style=\"padding:6px 8px;\">${cleanTier}</td>\n            </tr>\n            ${tenantId ? `\n            <tr>\n              <td style=\"color:#475569;padding:6px 8px;\">Tenant (origin)</td>\n              <td style=\"padding:6px 8px;\">${tenantName ? `${tenantName} (${tenantId})` : tenantId}</td>\n            </tr>` : ``}\n            <tr>\n              <td style=\"color:#475569;padding:6px 8px;\">Requested by</td>\n              <td style=\"padding:6px 8px;\">${requestedByName} &lt;${requestedByEmail || 'unknown'}&gt;</td>\n            </tr>\n            <tr>\n              <td style=\"color:#475569;padding:6px 8px;\">Requester authorization</td>\n              <td style=\"padding:6px 8px;\">Role: <strong>${requestedByRole}</strong> ΓÇó Tier: <strong>${requestedByTier}</strong></td>\n            </tr>\n          </table>\n        </div>\n\n        ${requestedAccessItems.length ? `\n        <div style=\"margin-top:16px;\">\n          <h3 style=\"margin:0 0 8px;font-size:16px;color:#0f172a;\">Requested access details</h3>\n          <div style=\"border:1px solid #e5e7eb;border-radius:10px;padding:12px 14px;background:#ffffff;\">\n            <ul style=\"margin:0;padding-left:18px;color:#334155;\">\n              ${requestedAccessItems.map(i => `<li style=\"margin:0 0 6px;\">${i}</li>`).join('')}\n            </ul>\n          </div>\n        </div>` : ``}\n\n        <div style=\"margin-top:16px;\">\n          <h3 style=\"margin:0 0 8px;font-size:16px;color:#0f172a;\">Tier quick guide</h3>\n          ${TIER_MAP[cleanTier] ? renderTierCard(cleanTier) : renderAllTiersGuide()}\n        </div>\n\n        <div style=\"margin-top:16px;\">\n          <h3 style=\"margin:0 0 8px;font-size:16px;color:#0f172a;\">Suggested next steps</h3>\n          <ol style=\"margin:0;padding-left:18px;color:#334155;\">\n            <li style=\"margin:0 0 8px;\">Confirm the invitee can log in (or send platform invite).</li>\n            <li style=\"margin:0 0 8px;\">Set the userΓÇÖs Tier and Access Level as requested (adjust if needed).</li>\n            <li style=\"margin:0 0 8px;\">Ensure the user is linked to the corresponding Employee record.</li>\n          </ol>\n        </div>\n      </div>\n\n      <div style=\"background:#f1f5f9;border-top:1px solid #e5e7eb;padding:12px 20px;color:#475569;font-size:12px;\">\n        This message was generated automatically by Ai-SHA CRM.\n      </div>\n    </div>\n  </div>\n  `;\n\n  if (adminEmail) {\n    const subject = `User Access Request: ${cleanName} <${invitedEmail}>`;\n    try {\n      await SendEmail({\n        to: adminEmail,\n        subject,\n        body: html,\n        from_name: \"Ai-SHA CRM\"\n      });\n       \n      console.log(\"[NotifyAdminOnInvite] Admin email sent to:\", adminEmail);\n    } catch (e) {\n      console.warn(\"[NotifyAdminOnInvite] Admin email failed:\", e?.message || e);\n    }\n  } else {\n    console.warn(\"[NotifyAdminOnInvite] No admin email available; skipping email.\");\n  }\n\n  if (adminPhone) {\n    const sms = `Ai-SHA CRM: Access request for ${cleanName} <${invitedEmail}> by ${requestedByEmail || 'unknown'} [${requestedByTier}]`;\n    try {\n      await sendSms({ to: adminPhone, message: sms });\n       \n      console.log(\"[NotifyAdminOnInvite] Admin SMS sent to:\", adminPhone);\n    } catch (e) {\n      console.warn(\"[NotifyAdminOnInvite] Admin SMS failed:\", e?.message || e);\n    }\n  } else {\n    console.warn(\"[NotifyAdminOnInvite] No admin phone available; skipping SMS.\");\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\OperationOverlay.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,19],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { Loader2 } from \"lucide-react\";\n\nexport default function OperationOverlay({ open, title = \"Working...\", subtitle, details, progressCurrent, progressTotal }) {\n  if (!open) return null;\n\n  const hasProgress = typeof progressCurrent === \"number\" && typeof progressTotal === \"number\" && progressTotal > 0;\n  const percent = hasProgress ? Math.min(100, Math.round((progressCurrent / progressTotal) * 100)) : null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-slate-900/70 backdrop-blur-sm flex items-center justify-center p-4\">\n      <div className=\"bg-slate-800 border border-slate-700 rounded-xl p-6 max-w-md w-full text-center shadow-2xl\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <div className=\"h-12 w-12 rounded-full bg-slate-700/60 flex items-center justify-center\">\n            <Loader2 className={`h-6 w-6 text-blue-400 ${hasProgress ? \"\" : \"animate-spin\"}`} />\n          </div>\n        </div>\n        <h3 className=\"text-lg font-semibold text-slate-100\">{title}</h3>\n        {subtitle && <p className=\"mt-1 text-sm text-slate-400\">{subtitle}</p>}\n        {details && <p className=\"mt-2 text-xs text-slate-500\">{details}</p>}\n\n        <div className=\"mt-5\">\n          {hasProgress ? (\n            <div>\n              <div className=\"w-full h-2 bg-slate-700 rounded overflow-hidden\">\n                <div\n                  className=\"h-2 bg-blue-500 transition-all\"\n                  style={{ width: `${percent}%` }}\n                />\n              </div>\n              <div className=\"mt-2 text-xs text-slate-400\">\n                {progressCurrent} / {progressTotal} ({percent}%)\n              </div>\n            </div>\n          ) : (\n            <div className=\"h-1 w-full bg-slate-700 rounded overflow-hidden\">\n              <div className=\"h-1 w-full bg-blue-500/60 animate-pulse\" />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\Pagination.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\PerformanceCache.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'method' is defined but never used.","line":279,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":279,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"method"},"fix":{"range":[8423,8431],"text":""},"desc":"Remove unused variable 'method'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Enhanced Performance Cache with Local Storage Persistence\nclass PerformanceCache {\n  constructor() {\n    this.memoryCache = new Map();\n    this.requestQueue = [];\n    this.isProcessing = false;\n    this.rateLimitDelay = 150; // Slightly more conservative for production\n    this.maxCacheSize = 200;\n    \n    // Load persisted cache from localStorage on startup\n    this.loadPersistedCache();\n  }\n\n  // Cache key generation\n  getCacheKey(entityName, method, params) {\n    return `${entityName}-${method}-${JSON.stringify(params || {})}`;\n  }\n\n  // Check if cached data is valid (configurable TTL)\n  isCacheValid(timestamp, ttl = 5 * 60 * 1000) { // 5 minutes default\n    return Date.now() - timestamp < ttl;\n  }\n\n  // Load cache from localStorage\n  loadPersistedCache() {\n    try {\n      const persistedCache = localStorage.getItem('aiShaCrmCache');\n      if (persistedCache) {\n        const parsed = JSON.parse(persistedCache);\n        // Only load items that are still valid\n        Object.entries(parsed).forEach(([key, value]) => {\n          if (this.isCacheValid(value.timestamp, 10 * 60 * 1000)) { // 10 min for persisted\n            this.memoryCache.set(key, value);\n          }\n        });\n        // Removed console.log for production performance\n      }\n    } catch (error) {\n      // Silent fail for cache loading - non-critical error\n      if (import.meta.env.DEV) {\n        console.warn('Could not load persisted cache:', error);\n      }\n    }\n  }\n\n  // Persist cache to localStorage (async for performance)\n  persistCache() {\n    // Use requestIdleCallback for non-blocking persistence\n    if (typeof requestIdleCallback !== 'undefined') {\n      requestIdleCallback(() => {\n        this._doPersist();\n      });\n    } else {\n      // Fallback for browsers without requestIdleCallback\n      setTimeout(() => this._doPersist(), 0);\n    }\n  }\n\n  _doPersist() {\n    try {\n      const cacheObject = {};\n      this.memoryCache.forEach((value, key) => {\n        if (this.isCacheValid(value.timestamp)) {\n          cacheObject[key] = value;\n        }\n      });\n      localStorage.setItem('aiShaCrmCache', JSON.stringify(cacheObject));\n    } catch (error) {\n      // Silent fail for cache persistence - non-critical error\n      if (import.meta.env.DEV) {\n        console.warn('Could not persist cache:', error);\n      }\n    }\n  }\n\n  // Get from cache with configurable TTL\n  getFromCache(entityName, method, params = {}, ttl) {\n    const key = this.getCacheKey(entityName, method, params);\n    const cached = this.memoryCache.get(key);\n    \n    if (cached && this.isCacheValid(cached.timestamp, ttl)) {\n      // Cache hit - only log in dev mode\n      if (import.meta.env.DEV) {\n        console.log(`Cache hit: ${key}`);\n      }\n      return cached.data;\n    }\n    \n    return null;\n  }\n\n  // Store in cache with automatic cleanup\n  setCache(entityName, method, params = {}, data) {\n    const key = this.getCacheKey(entityName, method, params);\n    this.memoryCache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n    \n    // Automatic cache size management\n    if (this.memoryCache.size > this.maxCacheSize) {\n      this.cleanupCache();\n    }\n    \n    // Persist important data\n    if (['User', 'Contact', 'Account', 'Lead'].includes(entityName)) {\n      this.persistCache();\n    }\n  }\n\n  // Intelligent cache cleanup\n  cleanupCache() {\n    const entries = Array.from(this.memoryCache.entries());\n    \n    // Sort by timestamp (oldest first)\n    entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\n    \n    // Remove oldest 25% of entries\n    const toRemove = Math.floor(entries.length * 0.25);\n    for (let i = 0; i < toRemove; i++) {\n      this.memoryCache.delete(entries[i][0]);\n    }\n    \n    // Only log in dev mode\n    if (import.meta.env.DEV) {\n      console.log(`Cleaned up ${toRemove} cache entries`);\n    }\n  }\n\n  // Clear specific entity cache\n  clearEntityCache(entityName) {\n    const keysToDelete = [];\n    for (const key of this.memoryCache.keys()) {\n      if (key.startsWith(entityName)) {\n        keysToDelete.push(key);\n      }\n    }\n    keysToDelete.forEach(key => this.memoryCache.delete(key));\n    this.persistCache();\n    \n    // Only log in dev mode\n    if (import.meta.env.DEV) {\n      console.log(`Cleared ${keysToDelete.length} ${entityName} cache entries`);\n    }\n  }\n\n  // Enhanced rate-limited request with retry logic\n  async throttledRequest(requestFn, priority = 'normal') {\n    return new Promise((resolve, reject) => {\n      const request = { requestFn, resolve, reject, priority, retries: 0 };\n      \n      if (priority === 'high') {\n        this.requestQueue.unshift(request); // High priority to front\n      } else {\n        this.requestQueue.push(request);\n      }\n      \n      this.processQueue();\n    });\n  }\n\n  // Enhanced queue processing with priority and retry logic\n  async processQueue() {\n    if (this.isProcessing || this.requestQueue.length === 0) {\n      return;\n    }\n\n    this.isProcessing = true;\n\n    while (this.requestQueue.length > 0) {\n      const { requestFn, resolve, reject, priority, retries } = this.requestQueue.shift();\n      \n      try {\n        const result = await requestFn();\n        resolve(result);\n      } catch (error) {\n        if (error.response?.status === 429 && retries < 3) {\n          // Exponential backoff for rate limits\n          const delay = Math.min(2000 * Math.pow(2, retries), 10000);\n          \n          // Only log rate limiting in dev mode\n          if (import.meta.env.DEV) {\n            console.log(`Rate limited, retrying in ${delay}ms (attempt ${retries + 1})`);\n          }\n          \n          setTimeout(() => {\n            this.requestQueue.unshift({ requestFn, resolve, reject, priority, retries: retries + 1 });\n            this.processQueue();\n          }, delay);\n          \n          continue;\n        } else {\n          reject(error);\n        }\n      }\n      \n      // Adaptive delay based on queue size\n      const delay = this.requestQueue.length > 10 ? this.rateLimitDelay * 2 : this.rateLimitDelay;\n      await this.sleep(delay);\n    }\n\n    this.isProcessing = false;\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Preload critical data\n  async preloadCriticalData(user) {\n    if (!user) return;\n    \n    // Only log in dev mode\n    if (import.meta.env.DEV) {\n      console.log('Preloading critical data...');\n    }\n    \n    const preloadTasks = [\n      // Load user's assigned contacts (high priority)\n      () => this.cachedEntityCall('Contact', 'filter', { \n        filter: { assigned_to: user.email }, \n        limit: 50 \n      }, 'high'),\n      \n      // Load recent activities (normal priority)\n      () => this.cachedEntityCall('Activity', 'list', { \n        orderBy: '-created_date', \n        limit: 20 \n      }),\n      \n      // Load accounts (normal priority)\n      () => this.cachedEntityCall('Account', 'list', { \n        limit: 100 \n      }),\n    ];\n    \n    // Execute preload tasks without blocking\n    preloadTasks.forEach(task => {\n      task().catch(error => {\n        // Only log preload failures in dev mode\n        if (import.meta.env.DEV) {\n          console.warn('Preload task failed:', error);\n        }\n      });\n    });\n  }\n\n  // Enhanced cached entity call with TTL options\n  async cachedEntityCall(entityName, method, params = {}, priority = 'normal', ttl) {\n    // Try cache first with custom TTL for different data types\n    const defaultTTL = this.getDefaultTTL(entityName, method);\n    const cached = this.getFromCache(entityName, method, params, ttl || defaultTTL);\n    if (cached) {\n      return cached;\n    }\n\n    // Make rate-limited request\n    const data = await this.throttledRequest(async () => {\n      const { [entityName]: Entity } = await import('@/api/entities');\n      \n      switch (method) {\n        case 'list':\n          return await Entity.list(params.orderBy || '-created_date', params.limit || 50, params.offset || 0);\n        case 'filter':\n          return await Entity.filter(params.filter || {}, params.orderBy || '-created_date', params.limit || 50);\n        case 'get':\n          return await Entity.get(params.id);\n        default:\n          throw new Error(`Unsupported method: ${method}`);\n      }\n    }, priority);\n\n    // Cache the result\n    this.setCache(entityName, method, params, data);\n    return data;\n  }\n\n  // Get appropriate TTL based on data type\n  getDefaultTTL(entityName, method) {\n    const ttlConfig = {\n      'User': 10 * 60 * 1000, // 10 minutes - changes less frequently\n      'Contact': 3 * 60 * 1000, // 3 minutes - moderate updates\n      'Account': 5 * 60 * 1000, // 5 minutes - changes less frequently\n      'Lead': 2 * 60 * 1000, // 2 minutes - frequent updates\n      'Activity': 1 * 60 * 1000, // 1 minute - very dynamic\n      'Opportunity': 2 * 60 * 1000, // 2 minutes - frequent updates\n    };\n    \n    return ttlConfig[entityName] || 3 * 60 * 1000; // 3 minutes default\n  }\n\n  // Get cache statistics\n  getCacheStats() {\n    const stats = {\n      totalItems: this.memoryCache.size,\n      queueSize: this.requestQueue.length,\n      isProcessing: this.isProcessing,\n      memoryUsage: JSON.stringify(Array.from(this.memoryCache.entries())).length\n    };\n    return stats;\n  }\n}\n\n// Global performance cache instance\nexport const performanceCache = new PerformanceCache();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\PerformanceTracker.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[9,19],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":5,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":5,"endColumn":38},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":36,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":19},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":45,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":45,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":65,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'logError' is defined but never used.","line":81,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef } from 'react';\nimport { PerformanceLog } from '@/api/entities';\n\n// Track performance of function calls\nexport function usePerformanceTracker(functionName, enabled = true) {\n  const startTimeRef = useRef(null);\n\n  const start = () => {\n    if (!enabled) return;\n    startTimeRef.current = Date.now();\n  };\n\n  const end = async (status = 'success', errorMessage = null, additionalData = {}) => {\n    if (!enabled || !startTimeRef.current) return;\n\n    const responseTime = Date.now() - startTimeRef.current;\n    startTimeRef.current = null;\n\n    // Only log if significant time or error\n    if (responseTime < 100 && status === 'success') {\n      return;\n    }\n\n    try {\n      // Silently create performance log - don't throw if it fails\n      await PerformanceLog.create({\n        function_name: functionName,\n        response_time_ms: responseTime,\n        status,\n        error_message: errorMessage,\n        payload: additionalData.payload || {},\n        response: additionalData.response || {}\n      }).catch(() => {\n        // Silently ignore performance logging failures\n      });\n    } catch (error) {\n      // Silently ignore - performance logging shouldn't break the app\n    }\n  };\n\n  return { start, end };\n}\n\n// Higher-order function to wrap async functions with performance tracking\nexport function withPerformanceTracking(fn, functionName, enabled = true) {\n  return async (...args) => {\n    if (!enabled) {\n      return fn(...args);\n    }\n\n    const startTime = Date.now();\n    \n    try {\n      const result = await fn(...args);\n      const responseTime = Date.now() - startTime;\n      \n      // Only log slow operations (>1s) or errors\n      if (responseTime > 1000) {\n        try {\n          await PerformanceLog.create({\n            function_name: functionName,\n            response_time_ms: responseTime,\n            status: 'success'\n          }).catch(() => {});\n        } catch (error) {\n          // Silently ignore\n        }\n      }\n      \n      return result;\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      \n      try {\n        await PerformanceLog.create({\n          function_name: functionName,\n          response_time_ms: responseTime,\n          status: 'error',\n          error_message: error?.message || 'Unknown error'\n        }).catch(() => {});\n      } catch (logError) {\n        // Silently ignore\n      }\n      \n      throw error;\n    }\n  };\n}\n\nexport default function PerformanceTracker() {\n  // This component doesn't render anything, just provides the hooks\n  return null;\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\PhoneDisplay.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is defined but never used.","line":47,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1324,1329],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'contactName' is defined but never used.","line":49,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactName"},"fix":{"range":[1337,1352],"text":""},"desc":"Remove unused variable 'contactName'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'enableCalling' is assigned a value but never used.","line":50,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"enableCalling"},"fix":{"range":[1352,1377],"text":""},"desc":"Remove unused variable 'enableCalling'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'showCallingWidget' is assigned a value but never used.","line":51,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"showCallingWidget"},"fix":{"range":[1377,1406],"text":""},"desc":"Remove unused variable 'showCallingWidget'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\n\n// Utility to format phone numbers for display\nconst formatPhoneDisplay = (phoneNumber) => {\n  if (!phoneNumber) return '';\n  \n  // Clean the number\n  const cleaned = phoneNumber.replace(/[^\\d+]/g, '');\n  \n  // International format (starts with +)\n  if (cleaned.startsWith('+')) {\n    const digits = cleaned.slice(1);\n    \n    // US/Canada format (+1)\n    if (digits.startsWith('1') && digits.length === 11) {\n      const number = digits.slice(1);\n      return `+1 (${number.slice(0, 3)}) ${number.slice(3, 6)}-${number.slice(6)}`;\n    }\n    \n    // Generic international format\n    if (digits.length >= 7) {\n      const countryCode = digits.slice(0, 2);\n      const number = digits.slice(2);\n      if (number.length >= 8) {\n        return `+${countryCode} ${number.slice(0, 3)} ${number.slice(3, 6)} ${number.slice(6)}`;\n      }\n      return `+${countryCode} ${number}`;\n    }\n    \n    return cleaned;\n  }\n  \n  // US domestic format (10 digits)\n  if (cleaned.length === 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n  }\n  \n  // 7 digit number (local)\n  if (cleaned.length === 7) {\n    return `${cleaned.slice(0, 3)}-${cleaned.slice(3)}`;\n  }\n  \n  return phoneNumber; // Return as-is if no formatting applied\n};\n\nexport default function PhoneDisplay({\n  user,\n  phone,\n  contactName,\n  enableCalling = false,\n  showCallingWidget = false,\n  className = \"\",\n}) {\n  // If no phone number is provided, display a placeholder\n  if (!phone) {\n    return <span className=\"text-slate-500 italic\">No phone</span>;\n  }\n\n  // Format the phone number for display\n  const formattedPhone = formatPhoneDisplay(phone);\n  \n  // Simple tel: link display (softphone functionality removed)\n  return (\n    <a\n      href={`tel:${phone}`}\n      className={`crm-contact-link font-mono text-sm ${className}`}\n      title={`Call ${formattedPhone}`}\n    >\n      {formattedPhone}\n    </a>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\PhoneInput.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport PhonePrefixPicker from './PhonePrefixPicker';\n\nexport default function PhoneInput({ id, label, value, onChange, placeholder, className, labelClassName, darkMode = false, showPrefixPicker = false }) {\n  const [prefix, setPrefix] = useState('+1');\n  const [number, setNumber] = useState('');\n\n  useEffect(() => {\n    if (value) {\n      const parts = value.split(' ');\n      if (parts.length > 1 && parts[0].startsWith('+')) {\n        setPrefix(parts[0]);\n        setNumber(parts.slice(1).join(' '));\n      } else {\n        setNumber(value);\n      }\n    } else {\n      setNumber('');\n    }\n  }, [value]);\n\n  const handleInputChange = (e) => {\n    const newNumber = e.target.value;\n    setNumber(newNumber);\n    onChange(showPrefixPicker ? `${prefix} ${newNumber}` : newNumber);\n  };\n\n  const handlePrefixChange = (newPrefix) => {\n    setPrefix(newPrefix);\n    onChange(`${newPrefix} ${number}`);\n  };\n\n  return (\n    <div>\n      <Label htmlFor={id} className={labelClassName}>{label}</Label>\n      <div className=\"flex items-center mt-1\">\n        {showPrefixPicker && (\n          <PhonePrefixPicker\n            value={prefix}\n            onValueChange={handlePrefixChange}\n            darkMode={darkMode}\n          />\n        )}\n        <Input\n          id={id}\n          value={number}\n          onChange={handleInputChange}\n          placeholder={placeholder}\n          className={`${className} ${showPrefixPicker ? 'rounded-l-none border-l-0 focus:ring-0 focus:ring-offset-0' : ''}`}\n        />\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\PhonePrefixPicker.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { phoneCountries } from './phoneCountriesData';\n\nexport default function PhonePrefixPicker({ value, onValueChange, darkMode = false }) {\n  const selectedCountry = phoneCountries.find(c => c.prefix === value);\n\n  return (\n    <Select value={value} onValueChange={onValueChange}>\n      <SelectTrigger className={`w-28 rounded-r-none h-10 ${darkMode ? 'bg-slate-700 border-slate-600 text-slate-200 focus:ring-slate-500' : 'focus:ring-slate-400'}`}>\n        {selectedCountry ? (\n          <div className=\"flex items-center gap-2 text-sm\">\n            <span>{selectedCountry.flag}</span>\n            <span>{selectedCountry.prefix}</span>\n          </div>\n        ) : (\n          <SelectValue placeholder=\"Prefix\" />\n        )}\n      </SelectTrigger>\n      <SelectContent className={darkMode ? \"bg-slate-800 border-slate-700\" : \"\"}>\n        {phoneCountries.map(country => (\n          <SelectItem \n            key={country.code} \n            value={country.prefix}\n            className={darkMode ? \"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\" : \"\"}\n          >\n            <div className=\"flex items-center gap-2\">\n              <span>{country.flag}</span>\n              <span>{country.name} ({country.prefix})</span>\n            </div>\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\PortalRootManager.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ProductionOptimizations.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":2,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"useMemo"},"fix":{"range":[26,35],"text":""},"desc":"Remove unused variable 'useMemo'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":33,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":17},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":55,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":55,"endColumn":29},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":67,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":67,"endColumn":30},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":195,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":195,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useEffect, useMemo } from 'react';\nimport { performanceCache } from './PerformanceCache';\nimport { User } from '@/api/entities';\n\n// UI Imports (assuming Shadcn/ui and lucide-react)\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Database, X } from 'lucide-react';\n\n// Performance monitoring component\nexport const PerformanceMonitor = ({ children }) => {\n  useEffect(() => {\n    let observer; // Declare observer outside the if block so it's accessible in the cleanup function\n    \n    // Performance observer for Core Web Vitals\n    if ('PerformanceObserver' in window) {\n      observer = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          if (entry.entryType === 'navigation') {\n            console.log('Navigation timing:', {\n              domContentLoaded: entry.domContentLoadedEventEnd - entry.domContentLoadedEventStart,\n              loadComplete: entry.loadEventEnd - entry.loadEventStart,\n              totalTime: entry.loadEventEnd - entry.navigationStart\n            });\n          }\n        });\n      });\n      \n      try {\n        observer.observe({ entryTypes: ['navigation', 'paint'] });\n      } catch (e) {\n        console.warn('Performance observer not fully supported');\n      }\n    }\n\n    return () => {\n      // Disconnect observer only if it was successfully initialized\n      if (observer) { \n        try {\n          observer.disconnect();\n        } catch (e) {\n          // Observer already disconnected or other error during cleanup\n          console.warn('Error disconnecting PerformanceObserver:', e);\n        }\n      }\n    };\n  }, []);\n\n  return children;\n};\n\n// Data prefetching hook\nexport const useDataPrefetch = (user) => {\n  useEffect(() => {\n    if (user && user.tenant_id) {\n      // Prefetch critical data in the background\n      setTimeout(() => {\n        performanceCache.preloadCriticalData(user);\n      }, 1000); // Delay to avoid blocking initial render\n    }\n  }, [user?.tenant_id, user?.email, user]); // Added 'user' to dependency array for robustness\n};\n\n// Memoized user getter to avoid repeated API calls\nexport const useOptimizedUser = () => {\n  const [user, setUser] = React.useState(null);\n  const [loading, setLoading] = React.useState(true);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        // Try cache first\n        const cachedUser = performanceCache.getFromCache('User', 'me', {}, 10 * 60 * 1000); // 10 min cache\n        if (cachedUser) {\n          setUser(cachedUser);\n          setLoading(false);\n          return;\n        }\n\n        // Load from API\n        const userData = await performanceCache.throttledRequest(async () => {\n          return await User.me();\n        }, 'high');\n\n        performanceCache.setCache('User', 'me', {}, userData);\n        setUser(userData);\n      } catch (error) {\n        console.error('Failed to load user:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  return { user, loading };\n};\n\n// Component for displaying cache stats (admin only) - now inline instead of floating\nexport const CacheStats = ({ user }) => {\n  const [stats, setStats] = React.useState({ hitRate: 0, totalRequests: 0, memoryUsage: 0, cacheSize: 0 });\n  const [showDetails, setShowDetails] = React.useState(false);\n\n  React.useEffect(() => {\n    if (user?.role === 'admin') {\n      // Immediately get stats on mount to avoid initial empty state\n      setStats(performanceCache.getCacheStats());\n\n      const interval = setInterval(() => {\n        setStats(performanceCache.getCacheStats());\n      }, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [user?.role]);\n\n  if (user?.role !== 'admin') {\n    return null;\n  }\n\n  // Render as inline badge\n  if (!showDetails) {\n    return (\n      <Badge \n        variant=\"outline\"\n        className=\"cursor-pointer hover:bg-slate-100 text-xs\"\n        onClick={() => setShowDetails(true)}\n      >\n        <Database className=\"w-3 h-3 mr-1\" />\n        Cache {stats.hitRate}%\n      </Badge>\n    );\n  }\n\n  // Expanded details\n  return (\n    <div className=\"fixed top-20 right-[150px] z-40 w-72\"> {/* Changed right-150 to right-[150px] for explicit CSS */}\n      <Card className=\"shadow-lg border-0 bg-white/95 backdrop-blur-sm\">\n        <CardHeader className=\"pb-2\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              <Database className=\"w-4 h-4\" />\n              Cache Performance\n            </CardTitle>\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              onClick={() => setShowDetails(false)}\n              className=\"h-6 w-6\"\n            >\n              <X className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <p className=\"text-slate-600\">Hit Rate</p>\n              <p className=\"font-bold text-green-600\">{stats.hitRate}%</p>\n            </div>\n            <div>\n              <p className=\"text-slate-600\">Total Requests</p>\n              <p className=\"font-bold\">{stats.totalRequests}</p>\n            </div>\n            <div>\n              <p className=\"text-slate-600\">Memory Usage</p>\n              <p className=\"font-bold text-blue-600\">{stats.memoryUsage}%</p>\n            </div>\n            <div>\n              <p className=\"text-slate-600\">Cache Size</p>\n              <p className=\"font-bold\">{stats.cacheSize || 0}</p>\n            </div>\n          </div>\n          \n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={() => {\n              performanceCache.clearCache(); // Assuming performanceCache has a clearCache method\n              setStats(performanceCache.getCacheStats());\n            }}\n            className=\"w-full text-xs\"\n          >\n            Clear Cache\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Emergency cache clear function\nexport const clearAllCache = () => {\n  performanceCache.memoryCache.clear();\n  localStorage.removeItem('aiShaCrmCache');\n  console.log('All cache cleared');\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\RefactoringDocumentation.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CheckCircle, TrendingUp, FileText, Zap } from \"lucide-react\";\n\n/**\n * Refactoring Documentation Component\n * System-level documentation for admin reference only\n * Access via: /settings -> Developer Tools -> Refactoring Log\n */\nexport default function RefactoringDocumentation() {\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center gap-3 mb-8\">\n        <FileText className=\"w-8 h-8 text-blue-400\" />\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-100\">Refactoring Documentation</h1>\n          <p className=\"text-slate-400\">January 2025 - Major Codebase Optimization</p>\n        </div>\n      </div>\n\n      {/* Executive Summary */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Executive Summary</CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Comprehensive codebase refactoring addressing performance issues, eliminating redundancy, and improving maintainability\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"p-4 rounded-lg bg-slate-700/50\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Zap className=\"w-5 h-5 text-green-400\" />\n                <span className=\"font-semibold text-slate-200\">Performance</span>\n              </div>\n              <p className=\"text-2xl font-bold text-green-400\">80%</p>\n              <p className=\"text-sm text-slate-400\">Faster form loading</p>\n            </div>\n            <div className=\"p-4 rounded-lg bg-slate-700/50\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <TrendingUp className=\"w-5 h-5 text-blue-400\" />\n                <span className=\"font-semibold text-slate-200\">API Calls</span>\n              </div>\n              <p className=\"text-2xl font-bold text-blue-400\">80%</p>\n              <p className=\"text-sm text-slate-400\">Reduction in requests</p>\n            </div>\n            <div className=\"p-4 rounded-lg bg-slate-700/50\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <CheckCircle className=\"w-5 h-5 text-purple-400\" />\n                <span className=\"font-semibold text-slate-200\">Cache Hit Rate</span>\n              </div>\n              <p className=\"text-2xl font-bold text-purple-400\">70%</p>\n              <p className=\"text-sm text-slate-400\">Up from 20%</p>\n            </div>\n            <div className=\"p-4 rounded-lg bg-slate-700/50\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <FileText className=\"w-5 h-5 text-orange-400\" />\n                <span className=\"font-semibold text-slate-200\">Code Reduction</span>\n              </div>\n              <p className=\"text-2xl font-bold text-orange-400\">75%</p>\n              <p className=\"text-sm text-slate-400\">Less duplication</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Problems Identified */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Problems Identified</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4 text-slate-300\">\n          <div>\n            <h3 className=\"font-semibold text-slate-200 mb-2\">1. Performance Bottlenecks</h3>\n            <ul className=\"list-disc list-inside space-y-1 text-sm text-slate-400\">\n              <li>Forms loading 600+ records on mount</li>\n              <li>No lazy loading for dropdowns</li>\n              <li>Simultaneous API calls causing rate limit thrashing</li>\n              <li>Contact form becoming unresponsive on open</li>\n              <li>Dropdown positioning issues (top-left corner freeze)</li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-slate-200 mb-2\">2. Code Duplication</h3>\n            <ul className=\"list-disc list-inside space-y-1 text-sm text-slate-400\">\n              <li>4 separate detail panel components with 90% identical code</li>\n              <li>Multiple form components with repeated patterns</li>\n              <li>Duplicate phone display logic across components</li>\n              <li>Redundant selector components</li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-slate-200 mb-2\">3. API Management Issues</h3>\n            <ul className=\"list-disc list-inside space-y-1 text-sm text-slate-400\">\n              <li>Aggressive cache invalidation</li>\n              <li>No request deduplication</li>\n              <li>Short TTL causing unnecessary re-fetches</li>\n              <li>Poor rate limit handling</li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Actions Taken */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Refactoring Actions</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Phase 1 */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-3\">\n              <Badge className=\"bg-green-900/50 text-green-300\">Phase 1</Badge>\n              <h3 className=\"font-semibold text-slate-200\">Remove Obsolete Code</h3>\n            </div>\n            <div className=\"pl-4 border-l-2 border-slate-700 space-y-2\">\n              <p className=\"text-sm text-slate-400\"><strong>Files Removed:</strong></p>\n              <ul className=\"list-disc list-inside text-sm text-slate-500 space-y-1\">\n                <li>SignalWireSoftphone.jsx</li>\n                <li>CallFluentWidget.jsx & CallFluentSetup.jsx</li>\n                <li>MiddlewareClient.jsx & MiddlewareSetup.jsx</li>\n                <li>generateSignalWireJWT.js & generateTwilioToken.js</li>\n              </ul>\n              <p className=\"text-sm text-green-400 mt-2\"><strong>Impact:</strong> Reduced bundle size by 21%</p>\n            </div>\n          </div>\n\n          <Separator className=\"bg-slate-700\" />\n\n          {/* Phase 2 */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-3\">\n              <Badge className=\"bg-blue-900/50 text-blue-300\">Phase 2</Badge>\n              <h3 className=\"font-semibold text-slate-200\">Optimize Core Infrastructure</h3>\n            </div>\n            <div className=\"pl-4 border-l-2 border-slate-700 space-y-2\">\n              <p className=\"text-sm text-slate-400\"><strong>Enhanced ApiManager.jsx:</strong></p>\n              <ul className=\"list-disc list-inside text-sm text-slate-500 space-y-1\">\n                <li>Smart TTL: 2-30 minutes based on data volatility</li>\n                <li>Request deduplication prevents redundant API calls</li>\n                <li>Exponential backoff: 2s ΓåÆ 4s ΓåÆ 8s ΓåÆ 16s (capped at 30s)</li>\n                <li>Admin-only rate limit notifications</li>\n              </ul>\n              <p className=\"text-sm text-blue-400 mt-2\"><strong>Impact:</strong> 80% reduction in API calls</p>\n            </div>\n          </div>\n\n          <Separator className=\"bg-slate-700\" />\n\n          {/* Phase 3 */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-3\">\n              <Badge className=\"bg-purple-900/50 text-purple-300\">Phase 3</Badge>\n              <h3 className=\"font-semibold text-slate-200\">Create Shared Form Components</h3>\n            </div>\n            <div className=\"pl-4 border-l-2 border-slate-700 space-y-2\">\n              <p className=\"text-sm text-slate-400\"><strong>New FormFields.jsx Module:</strong></p>\n              <ul className=\"list-disc list-inside text-sm text-slate-500 space-y-1\">\n                <li>TextField, TextAreaField, SelectField</li>\n                <li>PhoneField, AccountField, EmployeeField</li>\n                <li>TagsField, AddressSection</li>\n              </ul>\n              <p className=\"text-sm text-purple-400 mt-2\"><strong>Impact:</strong> 40% reduction in form code</p>\n            </div>\n          </div>\n\n          <Separator className=\"bg-slate-700\" />\n\n          {/* Phase 4 */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-3\">\n              <Badge className=\"bg-orange-900/50 text-orange-300\">Phase 4</Badge>\n              <h3 className=\"font-semibold text-slate-200\">Universal Detail Panel</h3>\n            </div>\n            <div className=\"pl-4 border-l-2 border-slate-700 space-y-2\">\n              <p className=\"text-sm text-slate-400\"><strong>UniversalDetailPanel.jsx:</strong></p>\n              <ul className=\"list-disc list-inside text-sm text-slate-500 space-y-1\">\n                <li>Consolidates Contact, Account, Lead, Opportunity panels</li>\n                <li>Smart field detection (shows only relevant fields)</li>\n                <li>Configurable custom actions</li>\n                <li>Integrated notes section</li>\n              </ul>\n              <p className=\"text-sm text-orange-400 mt-2\"><strong>Impact:</strong> 75% code reduction (2,400 ΓåÆ 600 lines)</p>\n            </div>\n          </div>\n\n          <Separator className=\"bg-slate-700\" />\n\n          {/* Phase 5 */}\n          <div>\n            <div className=\"flex items-center gap-2 mb-3\">\n              <Badge className=\"bg-green-900/50 text-green-300\">Phase 5</Badge>\n              <h3 className=\"font-semibold text-slate-200\">Lazy Loading Optimization</h3>\n            </div>\n            <div className=\"pl-4 border-l-2 border-slate-700 space-y-2\">\n              <p className=\"text-sm text-slate-400\"><strong>Enhanced Selectors:</strong></p>\n              <ul className=\"list-disc list-inside text-sm text-slate-500 space-y-1\">\n                <li>LazyAccountSelector - loads only when dropdown opens</li>\n                <li>LazyEmployeeSelector - load-once pattern with caching</li>\n                <li>Limits initial load to 50 records with search</li>\n                <li>Fixed positioning issues</li>\n              </ul>\n              <p className=\"text-sm text-green-400 mt-2\"><strong>Impact:</strong> 90% reduction in initial data fetching</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Performance Metrics */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Performance Improvements</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead>\n                <tr className=\"border-b border-slate-700\">\n                  <th className=\"text-left py-2 text-slate-300\">Metric</th>\n                  <th className=\"text-left py-2 text-slate-300\">Before</th>\n                  <th className=\"text-left py-2 text-slate-300\">After</th>\n                  <th className=\"text-left py-2 text-slate-300\">Improvement</th>\n                </tr>\n              </thead>\n              <tbody className=\"text-slate-400\">\n                <tr className=\"border-b border-slate-700/50\">\n                  <td className=\"py-2\">Contact Form Load Time</td>\n                  <td className=\"py-2\">8-12s</td>\n                  <td className=\"py-2 text-green-400\">1-2s</td>\n                  <td className=\"py-2 text-green-400 font-semibold\">80% faster</td>\n                </tr>\n                <tr className=\"border-b border-slate-700/50\">\n                  <td className=\"py-2\">API Calls on Page Load</td>\n                  <td className=\"py-2\">15-25</td>\n                  <td className=\"py-2 text-green-400\">3-5</td>\n                  <td className=\"py-2 text-green-400 font-semibold\">80% reduction</td>\n                </tr>\n                <tr className=\"border-b border-slate-700/50\">\n                  <td className=\"py-2\">Cache Hit Rate</td>\n                  <td className=\"py-2\">~20%</td>\n                  <td className=\"py-2 text-green-400\">~70%</td>\n                  <td className=\"py-2 text-green-400 font-semibold\">250% improvement</td>\n                </tr>\n                <tr className=\"border-b border-slate-700/50\">\n                  <td className=\"py-2\">Rate Limit Errors</td>\n                  <td className=\"py-2\">Frequent</td>\n                  <td className=\"py-2 text-green-400\">Rare</td>\n                  <td className=\"py-2 text-green-400 font-semibold\">95% reduction</td>\n                </tr>\n                <tr>\n                  <td className=\"py-2\">Bundle Size</td>\n                  <td className=\"py-2\">~2.8MB</td>\n                  <td className=\"py-2 text-green-400\">~2.2MB</td>\n                  <td className=\"py-2 text-green-400 font-semibold\">21% smaller</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Future Recommendations */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Future Recommendations</CardTitle>\n          <CardDescription className=\"text-slate-400\">Not yet implemented</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"p-4 rounded-lg bg-slate-700/30 border border-slate-600\">\n            <h3 className=\"font-semibold text-slate-200 mb-2\">Phase 6: Form Consolidation</h3>\n            <p className=\"text-sm text-slate-400\">Create UniversalForm component to further reduce form code duplication</p>\n          </div>\n          <div className=\"p-4 rounded-lg bg-slate-700/30 border border-slate-600\">\n            <h3 className=\"font-semibold text-slate-200 mb-2\">Phase 7: Virtual Scrolling</h3>\n            <p className=\"text-sm text-slate-400\">Implement for large lists (600+ contacts) using react-window</p>\n          </div>\n          <div className=\"p-4 rounded-lg bg-slate-700/30 border border-slate-600\">\n            <h3 className=\"font-semibold text-slate-200 mb-2\">Phase 8: Advanced Caching</h3>\n            <p className=\"text-sm text-slate-400\">Cache warming, predictive prefetching, background refresh</p>\n          </div>\n          <div className=\"p-4 rounded-lg bg-slate-700/30 border border-slate-600\">\n            <h3 className=\"font-semibold text-slate-200 mb-2\">Phase 9: Bundle Optimization</h3>\n            <p className=\"text-sm text-slate-400\">Code splitting by route, lazy load heavy components</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Breaking Changes */}\n      <Card className=\"bg-slate-800 border-green-900/20 border-2\">\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <CheckCircle className=\"w-5 h-5 text-green-400\" />\n            <CardTitle className=\"text-green-400\">No Breaking Changes!</CardTitle>\n          </div>\n          <CardDescription className=\"text-slate-400\">\n            All refactoring was backwards-compatible\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"text-slate-300\">\n          <ul className=\"list-disc list-inside space-y-2 text-sm\">\n            <li>Old detail panels now wrap UniversalDetailPanel</li>\n            <li>Existing API calls still work (optimized internally)</li>\n            <li>All props and interfaces maintained</li>\n            <li>Zero breaking changes for existing code</li>\n          </ul>\n        </CardContent>\n      </Card>\n\n      {/* Conclusion */}\n      <Card className=\"bg-gradient-to-br from-blue-900/20 to-purple-900/20 border-blue-700/50\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Conclusion</CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-slate-300 space-y-4\">\n          <p>\n            This refactoring addresses the core architectural issues causing unresponsiveness \n            and lays the foundation for future scalability. The system can now:\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n            <div className=\"flex items-start gap-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-400 mt-0.5\" />\n              <span className=\"text-sm\">Handle multiple tenants efficiently</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-400 mt-0.5\" />\n              <span className=\"text-sm\">Respond quickly to user interactions</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-400 mt-0.5\" />\n              <span className=\"text-sm\">Gracefully handle API rate limits</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-400 mt-0.5\" />\n              <span className=\"text-sm\">Scale with growing data volumes</span>\n            </div>\n          </div>\n          <Separator className=\"bg-slate-700\" />\n          <div className=\"space-y-2\">\n            <p className=\"text-sm\">\n              <strong className=\"text-blue-400\">Estimated Development Time Saved:</strong> 40-60 hours over next 6 months\n            </p>\n            <p className=\"text-sm\">\n              <strong className=\"text-green-400\">System Stability:</strong> Increased from ~70% to 95%+ expected uptime\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Footer */}\n      <div className=\"text-center text-sm text-slate-500 pt-6\">\n        <p>Document Version 1.0 ΓÇó Last Updated: January 2025</p>\n        <p className=\"mt-1\">Maintained By: System Architect</p>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\ReferentialIntegrity.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\RefreshButton.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { RotateCw } from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nexport default function RefreshButton({ onClick, loading = false, className = \"\" }) {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={onClick}\n            disabled={loading}\n            className={`bg-slate-800 border-slate-700 text-slate-300 hover:bg-slate-700 hover:text-slate-100 ${className}`}\n          >\n            <RotateCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n          <p>Refresh data</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\RollbackManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":138,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":138,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { format } from 'date-fns';\n// Assuming these components and icons are from a UI library (e.g., Shadcn UI)\n// You may need to adjust these import paths based on your project structure.\nimport { Badge } from '@/components/ui/badge'; \nimport { Button } from '@/components/ui/button'; \nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'; \nimport { History, X } from 'lucide-react'; \n\n// Production Rollback Manager\nclass RollbackManager {\n  constructor() {\n    this.snapshots = new Map(); // Renamed from rollbackPoints\n    this.currentVersion = '1.0.0'; // You might want to update this dynamically\n    this.loadSnapshots(); // Renamed method call\n  }\n\n  /**\n   * Creates a new snapshot.\n   * @param {string} description - A user-friendly description for the snapshot.\n   * @param {object} [metadata={}] - Optional additional metadata about the snapshot (e.g., current page).\n   * @returns {string} The ID of the created snapshot.\n   */\n  createSnapshot(description, metadata = {}) { // Renamed from createRollbackPoint\n    const currentCache = localStorage.getItem('aiShaCrmCache'); // Capture current CRM cache state\n\n    const snapshot = { // Renamed variable\n      id: `snapshot_${Date.now()}`,\n      description,\n      timestamp: new Date().toISOString(),\n      version: this.currentVersion,\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      data: currentCache, // Store the stringified 'aiShaCrmCache' directly here\n      metadata: { // Store additional metadata directly on the snapshot object\n        ...metadata,\n        currentPage: window.location.pathname // Example: add current path\n      }\n    };\n\n    this.snapshots.set(snapshot.id, snapshot); // Renamed internal map\n    this.saveSnapshots(); // Renamed method call\n    console.log(`Snapshot created: ${description}`); // Updated log message\n    return snapshot.id;\n  }\n\n  // List available snapshots\n  getSnapshots() { // Renamed from getRollbackPoints\n    return Array.from(this.snapshots.values()) // Renamed internal map\n      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  }\n\n  /**\n   * Rolls back the system to a specified snapshot.\n   * @param {string} snapshotId - The ID of the snapshot to restore.\n   */\n  rollback(snapshotId) { // Renamed from restoreRollbackPoint\n    const snapshot = this.snapshots.get(snapshotId); // Renamed variable and internal map\n    if (!snapshot) {\n      throw new Error('Snapshot not found'); // Updated error message\n    }\n\n    try {\n      // Clear current cache\n      localStorage.removeItem('aiShaCrmCache');\n      \n      // Restore data if available in snapshot.data\n      if (snapshot.data) { \n        localStorage.setItem('aiShaCrmCache', snapshot.data);\n      }\n      \n      console.log(`System rolled back to: ${snapshot.description}`); // Updated log message\n      \n      // Force page reload to apply changes\n      window.location.reload();\n      \n    } catch (error) {\n      console.error('Rollback failed:', error);\n      throw error;\n    }\n  }\n\n  // Save snapshots to localStorage\n  saveSnapshots() { // Renamed from saveRollbackPoints\n    try {\n      const pointsArray = Array.from(this.snapshots.entries()); // Renamed internal map\n      // Keep only last 10 snapshots\n      if (pointsArray.length > 10) {\n        pointsArray.splice(0, pointsArray.length - 10);\n        this.snapshots = new Map(pointsArray); // Renamed internal map\n      }\n      \n      localStorage.setItem('aiShaSnapshots', JSON.stringify(pointsArray)); // Renamed localStorage key\n    } catch (error) {\n      console.warn('Could not save snapshots:', error); // Updated log message\n    }\n  }\n\n  // Load snapshots from localStorage\n  loadSnapshots() { // Renamed from loadRollbackPoints\n    try {\n      const saved = localStorage.getItem('aiShaSnapshots'); // Renamed localStorage key\n      if (saved) {\n        const pointsArray = JSON.parse(saved);\n        this.snapshots = new Map(pointsArray); // Renamed internal map\n      }\n    } catch (error) {\n      console.warn('Could not load snapshots:', error); // Updated log message\n      this.snapshots = new Map(); // Renamed internal map\n    }\n  }\n\n  /**\n   * Clears all stored snapshots.\n   */\n  clearSnapshots() { // Renamed from clearRollbackPoints\n    this.snapshots.clear(); // Renamed internal map\n    this.saveSnapshots(); // Renamed method call\n    console.log('All snapshots cleared.'); // Updated log message\n  }\n\n  // Emergency reset\n  emergencyReset() {\n    // Clear all local storage related to the application\n    ['aiShaCrmCache', 'aiShaSnapshots', 'lastLoginUpdate', 'dismissedAnnouncements'].forEach(key => { // Renamed localStorage key\n      localStorage.removeItem(key);\n    });\n    \n    // Clear session storage\n    sessionStorage.clear();\n    \n    console.log('Emergency reset completed');\n    window.location.reload();\n  }\n}\n\nexport const rollbackManager = new RollbackManager();\n\n// React component for rollback UI (admin only)\nexport const RollbackPanel = ({ user }) => { // Preserve user prop for admin check\n  const [snapshots, setSnapshots] = useState([]); // Renamed state variable\n  const [isOpen, setIsOpen] = useState(false);\n  const [isRollingBack, setIsRollingBack] = useState(false); // New state\n\n  useEffect(() => {\n    if (user?.role === 'admin') {\n      setSnapshots(rollbackManager.getSnapshots()); // Renamed method call\n    }\n  }, [user?.role]);\n\n  // New: handleRollback function\n  const handleRollback = useCallback(async (snapshotId) => {\n    setIsRollingBack(true);\n    try {\n      await rollbackManager.rollback(snapshotId); // Renamed method call\n      // window.location.reload() is handled by rollbackManager.rollback()\n    } catch (error) {\n      console.error('Rollback failed:', error);\n      alert('Rollback failed. Please try refreshing the page.');\n    } finally {\n      setIsRollingBack(false);\n    }\n  }, []); // Empty dependency array as setIsRollingBack and rollbackManager are stable\n\n  // Auto-trigger rollback to the most recent snapshot if available\n  useEffect(() => {\n    const autoRollback = async () => {\n      if (snapshots.length > 0 && !isRollingBack) {\n        // getSnapshots sorts descending (newest first), so the latest is at index 0\n        const latestSnapshot = snapshots[0]; \n        if (latestSnapshot.description.includes('Before Settings Billing Updates')) {\n          console.log('Auto-triggering rollback to working state...');\n          await handleRollback(latestSnapshot.id);\n        }\n      }\n    };\n\n    // Only auto-rollback if we detect the app is in a broken state\n    if (typeof window !== 'undefined' && !document.querySelector('[data-navigation-working]')) {\n      // Delay to ensure DOM is ready and to prevent race conditions\n      const timeoutId = setTimeout(autoRollback, 1000);\n      return () => clearTimeout(timeoutId); // Cleanup timeout on unmount or dependency change\n    }\n  }, [snapshots, isRollingBack, handleRollback]); // Added handleRollback to dependencies\n\n  // Only render for admin users\n  if (user?.role !== 'admin') {\n    return null;\n  }\n\n  // Render as inline badge in header instead of fixed positioning when closed\n  if (!isOpen) {\n    return (\n      <Badge \n        variant=\"outline\"\n        className=\"cursor-pointer hover:bg-slate-100 text-xs\"\n        onClick={() => setIsOpen(true)}\n      >\n        <History className=\"w-3 h-3 mr-1\" />\n        Rollback ({snapshots.length}) {/* Renamed state variable */}\n      </Badge>\n    );\n  }\n\n  // Expanded rollback panel (fixed position)\n  return (\n    <div className=\"fixed top-20 right-80 z-40 w-80\">\n      <Card className=\"shadow-lg border-0 bg-white/95 backdrop-blur-sm\">\n        <CardHeader className=\"pb-2\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <History className=\"w-5 h-5\" />\n              System Rollback\n            </CardTitle>\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              onClick={() => setIsOpen(false)}\n              className=\"h-6 w-6\"\n            >\n              <X className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {snapshots.length === 0 ? ( // Renamed state variable\n            <p className=\"text-sm text-slate-500 text-center py-4\">\n              No snapshots available {/* Updated text */}\n            </p>\n          ) : (\n            <>\n              <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                {snapshots.map((point) => ( // Using 'point' as a local variable name for a snapshot\n                  <div key={point.id} className=\"p-3 border rounded-lg hover:bg-slate-50\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">{point.description}</p>\n                        <p className=\"text-xs text-slate-500\">\n                          {format(new Date(point.timestamp), 'MMM d, HH:mm:ss')}\n                        </p>\n                        {point.metadata?.currentPage && (\n                          <p className=\"text-xs text-blue-600\">\n                            Page: {point.metadata.currentPage}\n                          </p>\n                        )}\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          if (confirm(`Restore system to: ${point.description}?`)) {\n                            handleRollback(point.id); // Call new handleRollback function\n                            setIsOpen(false); // Close panel after initiating rollback\n                          }\n                        }}\n                        className=\"ml-2 text-xs\"\n                        disabled={isRollingBack} // Disable during rollback\n                      >\n                        Restore\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    rollbackManager.createSnapshot('Manual checkpoint'); // Renamed method call\n                    setSnapshots(rollbackManager.getSnapshots()); // Renamed method call and state update\n                  }}\n                  className=\"flex-1 text-xs\"\n                  disabled={isRollingBack} // Disable during rollback\n                >\n                  Create Checkpoint\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    if (confirm('Are you sure you want to clear all snapshots? This action cannot be undone.')) { // Updated confirmation text\n                      rollbackManager.clearSnapshots(); // Renamed method call\n                      setSnapshots([]); // Renamed state update\n                    }\n                  }}\n                  className=\"text-xs text-red-600 hover:text-red-700\"\n                  disabled={isRollingBack} // Disable during rollback\n                >\n                  Clear All\n                </Button>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\RouteGuard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":80,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3149,3286],"text":"\n            You don&apos;t have permission to access this page. Please contact your administrator if you believe this is an error.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3149,3286],"text":"\n            You don&lsquo;t have permission to access this page. Please contact your administrator if you believe this is an error.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3149,3286],"text":"\n            You don&#39;t have permission to access this page. Please contact your administrator if you believe this is an error.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3149,3286],"text":"\n            You don&rsquo;t have permission to access this page. Please contact your administrator if you believe this is an error.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { AlertTriangle } from 'lucide-react';\n\nfunction hasPageAccess(user, pageName) {\n  if (!user) return false;\n\n  // CRM access gating\n  const pagesAllowedWithoutCRM = new Set(['Documentation', 'Agent', 'Settings', 'AuditLog', 'UnitTests', 'WorkflowGuide', 'ClientRequirements']);\n  if (user.crm_access === false) {\n    return pagesAllowedWithoutCRM.has(pageName);\n  }\n\n  // Check navigation_permissions first (explicit user settings)\n  if (user.navigation_permissions && typeof user.navigation_permissions === 'object') {\n    const hasCustomPermission = Object.prototype.hasOwnProperty.call(user.navigation_permissions, pageName);\n    if (hasCustomPermission) {\n      return user.navigation_permissions[pageName] === true;\n    }\n  }\n\n  // System pages for admins\n  if ((user.role === 'admin' || user.role === 'superadmin') &&\n    (pageName === 'Documentation' || pageName === 'Settings' || pageName === 'AuditLog' || \n     pageName === 'Tenants' || pageName === 'Agent' || pageName === 'UnitTests' || \n     pageName === 'WorkflowGuide' || pageName === 'ClientRequirements')) {\n    return true;\n  }\n\n  // Superadmins have full access\n  if (user.role === 'superadmin' || user.role === 'admin') {\n    return true;\n  }\n\n  // Default permissions based on role\n  const defaultPermissions = {\n    superadmin: { /* all pages */ },\n    admin: { /* all pages */ },\n    'power-user': {\n      Dashboard: true, Contacts: true, Accounts: true, Leads: true,\n      Opportunities: true, Activities: true, Calendar: true,\n      BizDevSources: true, CashFlow: true,\n      DocumentProcessing: true, DocumentManagement: true,\n      Employees: true, Reports: true, Integrations: true, \n      AICampaigns: true, Agent: true,\n      Settings: true, Documentation: true, AuditLog: true,\n      Utilities: true, WorkflowGuide: true, ClientOnboarding: true,\n      DuplicateContacts: true, DuplicateAccounts: true, DuplicateLeads: true,\n    },\n    user: {\n      Dashboard: true, Contacts: true, Leads: true,\n      Opportunities: true, Activities: true, Calendar: true,\n      Documentation: true, Agent: true, WorkflowGuide: true,\n    }\n  };\n\n  const rolePermissions = defaultPermissions[user.role] || defaultPermissions.user;\n  return rolePermissions[pageName] || false;\n}\n\nexport default function RouteGuard({ user, pageName, children }) {\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"w-12 h-12 text-yellow-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-slate-200 mb-2\">Authentication Required</h2>\n          <p className=\"text-slate-400\">Please log in to access this page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!hasPageAccess(user, pageName)) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center max-w-md\">\n          <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-slate-200 mb-2\">Access Denied</h2>\n          <p className=\"text-slate-400\">\n            You don't have permission to access this page. Please contact your administrator if you believe this is an error.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\SearchableAccountSelector.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Label' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Label"},"fix":{"range":[50,96],"text":""},"desc":"Remove unused variable 'Label'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CommandInput' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"CommandInput"},"fix":{"range":[300,316],"text":""},"desc":"Remove unused variable 'CommandInput'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from \"react\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, ChevronsUpDown, X } from \"lucide-react\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function SearchableAccountSelector({ value, onChange, accounts, placeholder = \"Search accounts...\", className = \"\" }) {\n  const [open, setOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const selectedAccount = useMemo(() => {\n    return accounts.find(a => a.id === value);\n  }, [accounts, value]);\n\n  const filteredAccounts = useMemo(() => {\n    if (!searchTerm) return accounts;\n    const term = searchTerm.toLowerCase();\n    return accounts.filter(a => \n      a.name?.toLowerCase().includes(term) ||\n      a.industry?.toLowerCase().includes(term)\n    );\n  }, [accounts, searchTerm]);\n\n  const handleSelect = (accountId) => {\n    onChange(accountId === value ? \"\" : accountId);\n    setOpen(false);\n    setSearchTerm(\"\");\n  };\n\n  const handleClear = (e) => {\n    e.stopPropagation();\n    onChange(\"\");\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\n            \"w-full justify-between bg-slate-700 border-slate-600 text-white hover:bg-slate-600\",\n            className\n          )}\n        >\n          {selectedAccount ? (\n            <span className=\"truncate\">{selectedAccount.name}</span>\n          ) : (\n            <span className=\"text-slate-400\">{placeholder}</span>\n          )}\n          <div className=\"flex items-center gap-1\">\n            {selectedAccount && (\n              <X\n                className=\"h-4 w-4 shrink-0 opacity-50 hover:opacity-100\"\n                onClick={handleClear}\n              />\n            )}\n            <ChevronsUpDown className=\"h-4 w-4 shrink-0 opacity-50\" />\n          </div>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent \n        className=\"w-[400px] p-0 bg-slate-800 border-slate-600\" \n        style={{ zIndex: 2147483647 }}\n        align=\"start\"\n      >\n        <Command className=\"bg-slate-800\">\n          <div className=\"flex items-center border-b border-slate-600 px-3\">\n            <Input\n              placeholder=\"Type to search...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"border-0 bg-transparent text-white placeholder:text-slate-400 focus-visible:ring-0\"\n            />\n          </div>\n          <CommandEmpty className=\"py-6 text-center text-sm text-slate-400\">\n            No accounts found.\n          </CommandEmpty>\n          <CommandGroup className=\"max-h-[300px] overflow-auto\">\n            {filteredAccounts.map((account) => (\n              <CommandItem\n                key={account.id}\n                value={account.id}\n                onSelect={() => handleSelect(account.id)}\n                className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 h-4 w-4\",\n                    value === account.id ? \"opacity-100\" : \"opacity-0\"\n                  )}\n                />\n                <div className=\"flex flex-col\">\n                  <span>{account.name}</span>\n                  {account.industry && (\n                    <span className=\"text-xs text-slate-400\">{account.industry}</span>\n                  )}\n                </div>\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\SearchableContactSelector.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Label' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Label"},"fix":{"range":[50,96],"text":""},"desc":"Remove unused variable 'Label'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CommandInput' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"CommandInput"},"fix":{"range":[300,316],"text":""},"desc":"Remove unused variable 'CommandInput'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from \"react\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, ChevronsUpDown, X } from \"lucide-react\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function SearchableContactSelector({ value, onChange, contacts, placeholder = \"Search contacts...\", className = \"\" }) {\n  const [open, setOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const selectedContact = useMemo(() => {\n    return contacts.find(c => c.id === value);\n  }, [contacts, value]);\n\n  const filteredContacts = useMemo(() => {\n    if (!searchTerm) return contacts;\n    const term = searchTerm.toLowerCase();\n    return contacts.filter(c => \n      `${c.first_name} ${c.last_name}`.toLowerCase().includes(term) ||\n      c.email?.toLowerCase().includes(term) ||\n      c.job_title?.toLowerCase().includes(term)\n    );\n  }, [contacts, searchTerm]);\n\n  const handleSelect = (contactId) => {\n    onChange(contactId === value ? \"\" : contactId);\n    setOpen(false);\n    setSearchTerm(\"\");\n  };\n\n  const handleClear = (e) => {\n    e.stopPropagation();\n    onChange(\"\");\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\n            \"w-full justify-between bg-slate-700 border-slate-600 text-white hover:bg-slate-600\",\n            className\n          )}\n        >\n          {selectedContact ? (\n            <span className=\"truncate\">\n              {selectedContact.first_name} {selectedContact.last_name}\n            </span>\n          ) : (\n            <span className=\"text-slate-400\">{placeholder}</span>\n          )}\n          <div className=\"flex items-center gap-1\">\n            {selectedContact && (\n              <X\n                className=\"h-4 w-4 shrink-0 opacity-50 hover:opacity-100\"\n                onClick={handleClear}\n              />\n            )}\n            <ChevronsUpDown className=\"h-4 w-4 shrink-0 opacity-50\" />\n          </div>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent \n        className=\"w-[400px] p-0 bg-slate-800 border-slate-600\" \n        style={{ zIndex: 2147483647 }}\n        align=\"start\"\n      >\n        <Command className=\"bg-slate-800\">\n          <div className=\"flex items-center border-b border-slate-600 px-3\">\n            <Input\n              placeholder=\"Type to search...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"border-0 bg-transparent text-white placeholder:text-slate-400 focus-visible:ring-0\"\n            />\n          </div>\n          <CommandEmpty className=\"py-6 text-center text-sm text-slate-400\">\n            No contacts found.\n          </CommandEmpty>\n          <CommandGroup className=\"max-h-[300px] overflow-auto\">\n            {filteredContacts.map((contact) => (\n              <CommandItem\n                key={contact.id}\n                value={contact.id}\n                onSelect={() => handleSelect(contact.id)}\n                className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 h-4 w-4\",\n                    value === contact.id ? \"opacity-100\" : \"opacity-0\"\n                  )}\n                />\n                <div className=\"flex flex-col\">\n                  <span>{contact.first_name} {contact.last_name}</span>\n                  {contact.job_title && (\n                    <span className=\"text-xs text-slate-400\">{contact.job_title}</span>\n                  )}\n                  {contact.email && (\n                    <span className=\"text-xs text-slate-400\">{contact.email}</span>\n                  )}\n                </div>\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\SimpleModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\n\nexport default function SimpleModal({\n  open,\n  onOpenChange,\n  title,\n  children,\n  size = 'md',\n  showCloseButton = true\n}) {\n  // Debug logging\n  useEffect(() => {\n    console.log('[SimpleModal] Props changed:', { open, title, size, hasChildren: !!children });\n    if (open) {\n      console.log('[SimpleModal] Modal SHOULD BE VISIBLE NOW');\n      document.body.style.overflow = 'hidden';\n    } else {\n      console.log('[SimpleModal] Modal hidden');\n      document.body.style.overflow = '';\n    }\n    \n    return () => {\n      document.body.style.overflow = '';\n    };\n  }, [open, title, size, children]);\n\n  // ESC to close\n  useEffect(() => {\n    if (!open) return;\n    const onKey = (e) => {\n      if (e.key === \"Escape\") {\n        console.log('[SimpleModal] ESC pressed, closing modal');\n        onOpenChange?.(false);\n      }\n    };\n    window.addEventListener(\"keydown\", onKey);\n    return () => window.removeEventListener(\"keydown\", onKey);\n  }, [open, onOpenChange]);\n\n  // Don't render if not open\n  if (!open) {\n    console.log('[SimpleModal] Returning null - modal not open');\n    return null;\n  }\n\n  const sizeClasses = {\n    sm: 'max-w-md',\n    md: 'max-w-2xl',\n    lg: 'max-w-4xl',\n    xl: 'max-w-6xl',\n    full: 'max-w-[95vw]'\n  };\n\n  const sizeClass = Object.prototype.hasOwnProperty.call(sizeClasses, size) ? sizeClasses[size] : sizeClasses.md;\n\n  console.log('[SimpleModal] RENDERING MODAL NOW:', { title, size, sizeClass });\n\n  return (\n    <div\n      data-modal-overlay\n      className=\"fixed inset-0 flex items-center justify-center p-4\"\n      style={{ \n        zIndex: 2147483000,\n        backgroundColor: 'rgba(0, 0, 0, 0.5)'\n      }}\n    >\n      {/* Background overlay that closes the modal on click */}\n      <div\n        data-modal-backdrop\n        className=\"fixed inset-0\"\n        style={{ \n          backgroundColor: 'rgba(0, 0, 0, 0.3)',\n          zIndex: 2147483000\n        }}\n        onClick={() => {\n          console.log('[SimpleModal] Background clicked, closing modal');\n          onOpenChange?.(false);\n        }}\n      />\n      \n      {/* Modal content container */}\n      <div\n        data-modal-content\n        className={`relative bg-slate-800 border border-slate-700 text-slate-200 rounded-xl shadow-2xl w-full ${sizeClass} max-h-[80vh] overflow-y-auto`}\n        style={{ zIndex: 2147483001 }}\n        onClick={(e) => {\n          console.log('[SimpleModal] Content clicked - stopping propagation');\n          e.stopPropagation();\n        }}\n      >\n        <div className=\"flex items-center justify-between px-6 py-4 border-b border-slate-700 sticky top-0 bg-slate-800 z-10\">\n          <h2 className=\"text-lg font-semibold text-slate-100\">{title}</h2>\n          {showCloseButton && (\n            <button\n              aria-label=\"Close\"\n              className=\"text-slate-400 hover:text-slate-200 text-2xl leading-none\"\n              onClick={() => {\n                console.log('[SimpleModal] Close button clicked');\n                onOpenChange?.(false);\n              }}\n            >\n              ├ù\n            </button>\n          )}\n        </div>\n        <div className=\"p-4\">\n          {console.log('[SimpleModal] Rendering children:', !!children)}\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\StatusHelper.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\SummaryButton.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Loader2, FileText, Sparkles } from 'lucide-react';\nimport { generateEntitySummary } from \"@/api/functions\";\nimport ReactMarkdown from 'react-markdown';\n\nexport default function SummaryButton({ entityType, entityId, entityName }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [summary, setSummary] = useState('');\n  const [summaryType, setSummaryType] = useState('overview');\n  const [error, setError] = useState('');\n\n  const summaryTypes = [\n    { value: 'overview', label: 'Overview', description: 'General summary of the record' },\n    { value: 'activity', label: 'Activity', description: 'Recent interactions and activities' },\n    { value: 'insights', label: 'Insights', description: 'AI analysis and recommendations' },\n    { value: 'relationship', label: 'Relationships', description: 'Connections to other records' }\n  ];\n\n  const handleGenerateSummary = async () => {\n    setLoading(true);\n    setError('');\n    setSummary('');\n\n    try {\n      const response = await generateEntitySummary({\n        entity_type: entityType,\n        entity_id: entityId,\n        summary_type: summaryType\n      });\n\n      if (response.data.success) {\n        setSummary(response.data.summary);\n      } else {\n        setError(response.data.error || 'Failed to generate summary');\n      }\n    } catch (err) {\n      console.error('Error generating summary:', err);\n      setError('Failed to generate summary. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setSummary('');\n    setError('');\n    setSummaryType('overview');\n  };\n\n  return (\n    <>\n      <Button\n        onClick={() => setIsOpen(true)}\n        size=\"sm\"\n        className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n      >\n        <FileText className=\"w-4 h-4 mr-1\" />\n        AI Summary\n      </Button>\n\n      <Dialog open={isOpen} onOpenChange={(open) => {if (!open) handleClose()}}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden bg-slate-800 border-slate-700 text-slate-100 flex flex-col\">\n          <DialogHeader className=\"border-b border-slate-700 pb-4\">\n            <DialogTitle className=\"text-xl font-semibold text-slate-100 flex items-center gap-2\">\n              <Sparkles className=\"w-6 h-6 text-purple-400\" />\n              AI Summary: {entityName}\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"flex-grow overflow-y-auto py-4 px-1\">\n            <div className=\"space-y-4\">\n              {/* Summary Type Selection */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n                {summaryTypes.map((type) => (\n                  <Button\n                    key={type.value}\n                    variant={summaryType === type.value ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSummaryType(type.value)}\n                    className={`${\n                      summaryType === type.value \n                        ? 'bg-purple-600 border-purple-500 text-white' \n                        : 'bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600'\n                    } text-xs p-2 h-auto flex flex-col items-center`}\n                    title={type.description}\n                  >\n                    <span className=\"font-medium\">{type.label}</span>\n                    <span className=\"text-xs opacity-75 text-center\">{type.description}</span>\n                  </Button>\n                ))}\n              </div>\n\n              {/* Generate Button */}\n              <div className=\"flex justify-center\">\n                <Button\n                  onClick={handleGenerateSummary}\n                  disabled={loading}\n                  className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n                >\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Generating {summaryTypes.find(t => t.value === summaryType)?.label} Summary...\n                    </>\n                  ) : (\n                    <>\n                      <Sparkles className=\"w-4 h-4 mr-2\" />\n                      Generate {summaryTypes.find(t => t.value === summaryType)?.label} Summary\n                    </>\n                  )}\n                </Button>\n              </div>\n\n              {/* Error Display */}\n              {error && (\n                <div className=\"bg-red-900/50 border border-red-500/50 rounded-lg p-4\">\n                  <p className=\"text-red-300 text-sm\">{error}</p>\n                </div>\n              )}\n\n              {/* Summary Display */}\n              {summary && (\n                <div className=\"bg-slate-700/50 border border-slate-600 rounded-lg p-6\">\n                  <div className=\"markdown-content\">\n                    <ReactMarkdown \n                      className=\"text-slate-200 [&>h1]:text-2xl [&>h1]:font-bold [&>h1]:text-slate-100 [&>h1]:mb-4 [&>h1]:border-b [&>h1]:border-slate-600 [&>h1]:pb-2 [&>h2]:text-xl [&>h2]:font-semibold [&>h2]:text-slate-200 [&>h2]:mb-3 [&>h2]:mt-6 [&>h3]:text-lg [&>h3]:font-medium [&>h3]:text-slate-200 [&>h3]:mb-2 [&>h3]:mt-4 [&>p]:text-slate-300 [&>p]:mb-3 [&>p]:leading-relaxed [&>ul]:text-slate-300 [&>ul]:mb-3 [&>ul]:pl-4 [&>ul]:space-y-1 [&>ol]:text-slate-300 [&>ol]:mb-3 [&>ol]:pl-4 [&>ol]:space-y-1 [&>li]:text-slate-300 [&>strong]:text-slate-100 [&>strong]:font-semibold [&>em]:text-slate-200 [&>em]:italic [&>code]:bg-slate-600 [&>code]:text-slate-100 [&>code]:px-1.5 [&>code]:py-0.5 [&>code]:rounded [&>code]:text-sm [&>code]:font-mono [&>blockquote]:border-l-4 [&>blockquote]:border-purple-500 [&>blockquote]:pl-4 [&>blockquote]:italic [&>blockquote]:text-slate-300\"\n                    >\n                      {summary}\n                    </ReactMarkdown>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\SystemStatusIndicator.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used.","line":3,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"Loader2"},"fix":{"range":[139,148],"text":""},"desc":"Remove unused variable 'Loader2'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":3,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[148,161],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertTriangle, Loader2, CheckCircle } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport default function SystemStatusIndicator({ user }) {\n  const [status, setStatus] = useState({ type: 'normal', message: null, cooldown: 0 });\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    // Only show for admins and superadmins\n    if (!user || (user.role !== 'admin' && user.role !== 'superadmin')) {\n      return;\n    }\n\n    const handleRateLimit = (event) => {\n      const { cooldownMs, queueLength } = event.detail;\n      setStatus({\n        type: 'rate-limit',\n        message: `Rate limit active. Cooldown: ${Math.ceil(cooldownMs / 1000)}s. Queue: ${queueLength}`,\n        cooldown: cooldownMs\n      });\n      setVisible(true);\n\n      // Auto-hide after cooldown + 2 seconds\n      setTimeout(() => {\n        setVisible(false);\n      }, cooldownMs + 2000);\n    };\n\n    window.addEventListener('ratelimit', handleRateLimit);\n\n    return () => {\n      window.removeEventListener('ratelimit', handleRateLimit);\n    };\n  }, [user]);\n\n  // Don't render anything if user is not admin/superadmin\n  if (!user || (user.role !== 'admin' && user.role !== 'superadmin')) {\n    return null;\n  }\n\n  return (\n    <AnimatePresence>\n      {visible && (\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -20 }}\n          className=\"fixed top-20 right-4 z-50 max-w-md\"\n        >\n          <Alert \n            variant=\"destructive\" \n            className=\"bg-yellow-900/90 border-yellow-700 text-yellow-100 backdrop-blur-sm\"\n          >\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-sm\">\n              <strong>System Status (Admin Only):</strong> {status.message}\n            </AlertDescription>\n          </Alert>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\TagFilter.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'placeholder' is assigned a value but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"placeholder"},"fix":{"range":[529,566],"text":""},"desc":"Remove unused variable 'placeholder'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { X, Filter, Search, Hash } from 'lucide-react';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nexport default function TagFilter({\n  allTags = [],\n  selectedTags = [],\n  onTagsChange,\n  placeholder = \"Filter by tags...\",\n  disabled = false,\n  className = \"\",\n  compact = false\n}) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n\n  const filteredTags = allTags.filter(tag =>\n    tag.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const toggleTag = (tagName) => {\n    const updatedTags = selectedTags.includes(tagName)\n      ? selectedTags.filter(tag => tag !== tagName)\n      : [...selectedTags, tagName];\n    onTagsChange(updatedTags);\n  };\n\n  const clearAllTags = () => {\n    onTagsChange([]);\n  };\n\n  return (\n    <TooltipProvider>\n      <div className={`flex items-center gap-2 ${className}`}>\n        <Popover open={isOpen} onOpenChange={setIsOpen}>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  disabled={disabled}\n                  className={`bg-slate-700 hover:bg-slate-600 text-slate-200 border-slate-600 ${compact ? 'h-7 text-xs px-3' : 'px-4'}`}\n                >\n                  <Filter className={`${compact ? 'w-3 h-3' : 'w-4 h-4'} mr-2`} />\n                  Tags\n                  {selectedTags.length > 0 && (\n                    <Badge variant=\"secondary\" className={`ml-2 bg-blue-600 text-white ${compact ? 'text-[10px] px-1 py-0' : ''}`}>\n                      {selectedTags.length}\n                    </Badge>\n                  )}\n                </Button>\n              </PopoverTrigger>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>Filter by tags</p>\n            </TooltipContent>\n          </Tooltip>\n          <PopoverContent className=\"w-80 bg-slate-800 border-slate-700 text-slate-200\" align=\"start\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-medium text-slate-100 flex items-center gap-2\">\n                  <Hash className=\"w-4 h-4\" />\n                  Filter by Tags\n                </h4>\n                {selectedTags.length > 0 && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={clearAllTags}\n                    className=\"h-6 px-2 text-slate-400 hover:text-slate-200 rounded-full\"\n                  >\n                    Clear all\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400\" />\n                <Input\n                  placeholder=\"Search tags...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 rounded-full\"\n                />\n              </div>\n\n              <div className=\"max-h-60 overflow-y-auto space-y-1\">\n                {filteredTags.length > 0 ? (\n                  filteredTags.map((tag) => (\n                    <div\n                      key={tag.name}\n                      className={`flex items-center justify-between p-2 rounded-full cursor-pointer transition-colors ${\n                        selectedTags.includes(tag.name)\n                          ? 'bg-blue-600/20 border border-blue-500/50'\n                          : 'hover:bg-slate-700'\n                      }`}\n                      onClick={() => toggleTag(tag.name)}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className={`w-3 h-3 rounded-full border ${\n                            selectedTags.includes(tag.name)\n                              ? 'bg-blue-600 border-blue-500'\n                              : 'border-slate-500'\n                          }`}\n                        />\n                        <span className=\"text-sm text-slate-200\">{tag.name}</span>\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs bg-slate-700 text-slate-300 border-slate-600 rounded-full\">\n                        {tag.count}\n                      </Badge>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-4 text-slate-400\">\n                    <Hash className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">\n                      {allTags.length === 0 ? 'No tags available' : 'No tags match your search'}\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </PopoverContent>\n        </Popover>\n\n        {selectedTags.length > 0 && !compact && (\n          <div className=\"flex items-center gap-2 flex-wrap\">\n            {selectedTags.map((tag) => (\n              <Badge\n                key={tag}\n                variant=\"secondary\"\n                className=\"bg-blue-600 text-white hover:bg-blue-700 cursor-pointer rounded-full\"\n                onClick={() => toggleTag(tag)}\n              >\n                {tag}\n                <X className=\"w-3 h-3 ml-1\" />\n              </Badge>\n            ))}\n          </div>\n        )}\n      </div>\n    </TooltipProvider>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\TagInput.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"useRef"},"fix":{"range":[24,32],"text":""},"desc":"Remove unused variable 'useRef'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":108,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3887,3916],"text":"\n                    Create &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3887,3916],"text":"\n                    Create &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3887,3916],"text":"\n                    Create &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3887,3916],"text":"\n                    Create &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":108,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3928,3948],"text":"&quot;\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3928,3948],"text":"&ldquo;\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3928,3948],"text":"&#34;\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3928,3948],"text":"&rdquo;\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":148,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5641,5670],"text":"\n                    Create &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5641,5670],"text":"\n                    Create &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5641,5670],"text":"\n                    Create &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5641,5670],"text":"\n                    Create &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":148,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5682,5702],"text":"&quot;\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5682,5702],"text":"&ldquo;\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5682,5702],"text":"&#34;\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5682,5702],"text":"&rdquo;\n                  "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { X, Plus, Hash, Tag } from 'lucide-react';\nimport { cn } from \"@/lib/utils\";\n\nexport default function TagInput({ \n  selectedTags = [], \n  onTagsChange, \n  allTags = [], \n  placeholder = \"Add or search for tags...\",\n  darkMode = false \n}) {\n  const [open, setOpen] = useState(false);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const addTag = (tagName) => {\n    const trimmedTag = tagName.trim();\n    if (trimmedTag && !selectedTags.includes(trimmedTag)) {\n      onTagsChange([...selectedTags, trimmedTag]);\n    }\n    setInputValue(\"\");\n    setOpen(false);\n  };\n\n  const removeTag = (tagToRemove) => {\n    onTagsChange(selectedTags.filter(tag => tag !== tagToRemove));\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' || e.key === ',') {\n      e.preventDefault();\n      if (inputValue.trim()) {\n        addTag(inputValue);\n      }\n    }\n  };\n\n  const availableTags = allTags.filter(tag => \n    !selectedTags.includes(tag.name) && \n    tag.name.toLowerCase().includes(inputValue.toLowerCase())\n  );\n\n  const triggerClasses = cn(\n    \"flex flex-wrap items-center gap-2 w-full min-h-10 px-3 py-2 text-sm text-left rounded-md border\",\n    darkMode ? \"bg-slate-700 border-slate-600 text-slate-200\" : \"bg-white border-input\",\n    \"hover:bg-accent hover:text-accent-foreground\"\n  );\n  \n  const popoverContentClasses = cn(\n    \"w-80 p-0\",\n    darkMode ? \"bg-slate-800 border-slate-700 text-slate-200\" : \"bg-popover text-popover-foreground\"\n  );\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <button type=\"button\" className={triggerClasses}>\n          {selectedTags.length > 0 ? (\n            selectedTags.map((tag) => (\n              <Badge \n                key={tag} \n                variant=\"secondary\" \n                className={cn(\n                  \"flex items-center gap-1\",\n                  darkMode ? \"bg-slate-600 text-slate-100 hover:bg-slate-500\" : \"bg-secondary text-secondary-foreground\"\n                )}\n              >\n                {tag}\n                <X \n                  className=\"w-3 h-3 cursor-pointer\" \n                  onClick={(e) => {\n                    e.stopPropagation(); // prevent popover from opening\n                    removeTag(tag);\n                  }}\n                />\n              </Badge>\n            ))\n          ) : (\n            <span className={cn(\"text-sm\", darkMode ? \"text-slate-400\" : \"text-muted-foreground\")}>\n              {placeholder}\n            </span>\n          )}\n        </button>\n      </PopoverTrigger>\n      \n      <PopoverContent className={popoverContentClasses} align=\"start\" side=\"bottom\">\n        <Command onKeyDown={handleKeyDown} className={darkMode ? \"bg-slate-800\" : \"\"}>\n          <CommandInput \n            placeholder=\"Search or create a tag...\" \n            value={inputValue}\n            onValueChange={setInputValue}\n            className={darkMode ? \"text-slate-200\" : \"\"}\n          />\n          <CommandList>\n            <CommandEmpty className={cn(\"py-6 text-center text-sm\", darkMode ? \"text-slate-400\" : \"text-muted-foreground\")}>\n              {inputValue ? (\n                <div className=\"space-y-2\">\n                  <Tag className=\"w-6 h-6 mx-auto opacity-50\" />\n                  <p>No existing tags found</p>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => addTag(inputValue)}\n                    className={cn(darkMode ? \"bg-blue-600 hover:bg-blue-700\" : \"bg-primary text-primary-foreground\")}\n                  >\n                    Create \"{inputValue}\"\n                  </Button>\n                </div>\n              ) : (\n                <p>Start typing to see existing tags</p>\n              )}\n            </CommandEmpty>\n            \n            {availableTags.length > 0 && (\n              <CommandGroup heading=\"Existing Tags\">\n                {availableTags.slice(0, 10).map((tag) => (\n                  <CommandItem\n                    key={tag.name}\n                    value={tag.name}\n                    onSelect={() => addTag(tag.name)}\n                    className={cn(\"cursor-pointer\", darkMode ? \"text-slate-200 aria-selected:bg-slate-700\" : \"\")}\n                  >\n                    <div className=\"flex items-center justify-between w-full\">\n                      <span className=\"flex items-center gap-2\">\n                        <Hash className=\"w-4 h-4 opacity-50\" />\n                        {tag.name}\n                      </span>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {tag.count}\n                      </Badge>\n                    </div>\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            )}\n            \n            {inputValue && !availableTags.some(tag => tag.name.toLowerCase() === inputValue.toLowerCase()) && (\n              <CommandGroup heading=\"Create New\">\n                <CommandItem\n                  value={inputValue}\n                  onSelect={() => addTag(inputValue)}\n                  className={cn(\"cursor-pointer\", darkMode ? \"text-slate-200 aria-selected:bg-slate-700\" : \"\")}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Plus className=\"w-4 h-4 opacity-50\" />\n                    Create \"{inputValue}\"\n                  </div>\n                </CommandItem>\n              </CommandGroup>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\TenantIdViewer.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tenant } from \"@/api/entities\"; // Internal entity, remains Tenant\nimport { User } from \"@/api/entities\"; // Internal entity, remains User\nimport { Loader2, Copy, Building2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { toast } from \"sonner\";\n\nexport default function TenantIdViewer() { // Component name remains TenantIdViewer, as per existing file\n  const [tenants, setTenants] = useState([]); // Internal state variable, remains tenants\n  const [loading, setLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n      try {\n        const user = await User.me();\n        setCurrentUser(user);\n\n        if (user.role === 'admin' || user.role === 'superadmin') {\n          // Admins can see all tenants (internal logic)\n          const tenantsData = await Tenant.list(); // Internal entity method, remains Tenant.list\n          setTenants(tenantsData);\n        } else if (user.tenant_id) { // Internal ID, remains tenant_id\n          // Non-admins should only see their own client ID\n          try {\n            const myTenant = await Tenant.get(user.tenant_id); // Internal entity method, remains Tenant.get\n            setTenants(myTenant ? [myTenant] : [{ id: user.tenant_id, name: 'Your Client' }]); // User-facing text changed\n          } catch {\n            setTenants([{ id: user.tenant_id, name: \"Your Client\" }]); // User-facing text changed\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading client information:\", error); // User-facing text changed\n        toast.error(\"Failed to load client information.\"); // User-facing text changed\n        setTenants([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  const copyToClipboard = (text) => {\n    navigator.clipboard.writeText(text);\n    toast.success(\"Client ID copied to clipboard!\"); // User-facing text changed\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center p-12\">\n          <Loader2 className=\"w-8 h-8 animate-spin mr-3\" />\n          <span>Loading Client Information...</span> {/* User-facing text changed */}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const isSuperOrAdmin = currentUser?.role === 'admin' || currentUser?.role === 'superadmin';\n\n  return (\n    <>\n      <div className=\"mb-8\"> {/* Added for the new heading as per outline */}\n        <h2 className=\"text-2xl font-bold text-slate-100\">Client Management</h2>\n        <p className=\"text-slate-400 mt-1\">View and manage client information.</p>\n      </div>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Building2 className=\"w-6 h-6 text-blue-600\" />\n            Client IDs {/* User-facing text changed */}\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            {isSuperOrAdmin\n              ? \"List of all client IDs in the system for administrative purposes.\" // User-facing text changed\n              : \"Your organization's Client ID for integrations and support.\"} {/* User-facing text changed */}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow className=\"border-slate-700 hover:bg-slate-700/50\">\n                <TableHead className=\"text-slate-300\">Client Name</TableHead> {/* User-facing text changed */}\n                <TableHead className=\"text-slate-300\">Client ID</TableHead> {/* User-facing text changed */}\n                <TableHead className=\"text-slate-300\">Industry</TableHead> {/* New column from outline */}\n                <TableHead className=\"text-slate-300\">Created Date</TableHead> {/* New column from outline */}\n                <TableHead className=\"text-slate-300\">Actions</TableHead> {/* New column from outline */}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {tenants.map(tenant => (\n                <TableRow key={tenant.id} className=\"border-slate-700 hover:bg-slate-700/30\">\n                  <TableCell className=\"font-medium text-slate-200\">{tenant.name || 'N/A'}</TableCell>\n                  <TableCell className=\"font-mono text-sm text-slate-300\">{tenant.id}</TableCell>\n                  <TableCell className=\"text-slate-400\">N/A</TableCell> {/* Placeholder for Industry, as tenant entity doesn't provide this */}\n                  <TableCell className=\"text-slate-400\">N/A</TableCell> {/* Placeholder for Created Date, as tenant entity doesn't provide this */}\n                  <TableCell>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => copyToClipboard(tenant.id)}\n                      className=\"text-slate-300 hover:text-slate-100 hover:bg-slate-600\"\n                    >\n                      <Copy className=\"w-4 h-4\" />\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {tenants.length === 0 && ( // Conditional rendering for empty state\n            <div className=\"text-center py-8 text-slate-400\"> {/* Replaced existing empty state row with new div from outline */}\n              <Building2 className=\"w-12 h-12 mx-auto mb-4 text-slate-500\" />\n              <p>No clients found</p> {/* User-facing text changed */}\n              <p className=\"text-sm\">Clients will appear here once they are created</p> {/* User-facing text changed */}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\TenantSetup.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Textarea' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"Textarea"},"fix":{"range":[294,346],"text":""},"desc":"Remove unused variable 'Textarea'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Edit' is defined but never used.","line":11,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[681,687],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Image' is defined but never used.","line":11,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":63,"suggestions":[{"messageId":"removeVar","data":{"varName":"Image"},"fix":{"range":[714,721],"text":""},"desc":"Remove unused variable 'Image'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Eye' is defined but never used.","line":11,"column":114,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":117,"suggestions":[{"messageId":"removeVar","data":{"varName":"Eye"},"fix":{"range":[770,775],"text":""},"desc":"Remove unused variable 'Eye'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'EyeOff' is defined but never used.","line":11,"column":119,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":125,"suggestions":[{"messageId":"removeVar","data":{"varName":"EyeOff"},"fix":{"range":[775,783],"text":""},"desc":"Remove unused variable 'EyeOff'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Loader2, Plus, Edit, Trash2, Building2, Upload, Image, GripVertical, MoreHorizontal, Pencil, RefreshCw, Eye, EyeOff, Phone, Bot } from \"lucide-react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\nimport { Tenant } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { createTenantWithR2Bucket } from \"@/api/functions\";\nimport { deleteTenantWithData } from \"@/api/functions\";\nimport { UploadFile } from \"@/api/integrations\";\nimport { toast } from \"sonner\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Switch } from \"@/components/ui/switch\";\n\nconst industries = [\n  { value: \"aerospace_and_defense\", label: \"Aerospace & Defense\" },\n  { value: \"agriculture\", label: \"Agriculture\" },\n  { value: \"automotive\", label: \"Automotive\" },\n  { value: \"banking_and_financial_services\", label: \"Banking & Financial Services\" },\n  { value: \"construction\", label: \"Construction\" },\n  { value: \"consumer_goods\", label: \"Consumer Goods\" },\n  { value: \"education\", label: \"Education\" },\n  { value: \"energy_and_utilities\", label: \"Energy & Utilities\" },\n  { value: \"entertainment_and_media\", label: \"Entertainment & Media\" },\n  { value: \"government_and_public_sector\", label: \"Government & Public Sector\" },\n  { value: \"green_energy_and_solar\", label: \"Green Energy & Solar\" },\n  { value: \"healthcare_and_life_sciences\", label: \"Healthcare & Life Sciences\" },\n  { value: \"hospitality_and_travel\", label: \"Hospitality & Travel\" },\n  { value: \"information_technology\", label: \"Information Technology\" },\n  { value: \"insurance\", label: \"Insurance\" },\n  { value: \"legal_services\", label: \"Legal Services\" },\n  { value: \"logistics_and_transportation\", label: \"Logistics & Transportation\" },\n  { value: \"manufacturing\", label: \"Manufacturing\" },\n  { value: \"marketing_advertising_pr\", label: \"Marketing, Advertising & PR\" },\n  { value: \"media_and_publishing\", label: \"Media & Publishing\" },\n  { value: \"mining_and_metals\", label: \"Mining & Metals\" },\n  { value: \"nonprofit_and_ngos\", label: \"Nonprofit & NGOs\" },\n  { value: \"pharmaceuticals_and_biotechnology\", label: \"Pharmaceuticals & Biotechnology\" },\n  { value: \"professional_services\", label: \"Professional Services\" },\n  { value: \"real_estate\", label: \"Real Estate\" },\n  { value: \"retail_and_wholesale\", label: \"Retail & Wholesale\" },\n  { value: \"telecommunications\", label: \"Telecommunications\" },\n  { value: \"textiles_and_apparel\", label: \"Textiles & Apparel\" },\n  { value: \"other\", label: \"Other\" },\n];\n\nconst TenantFormModal = ({ tenant, onSave, onCancel }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    domain: '',\n    industry: 'information_technology', // Set default for new tenant\n    business_model: 'b2b',\n    geographic_focus: 'north_america',\n    logo_url: '',\n    primary_color: '#3b82f6', // Default primary color (blue-500)\n    accent_color: '#f59e0b', // Default accent color (amber-500)\n    call_agent_url: '', // Add new field\n    ai_calling_providers: { // New field for provider-agnostic AI calling\n      callfluent: {\n        webhook_url: '',\n        api_key: '',\n        is_active: false,\n      },\n      thoughtly: {\n        api_key: '',\n        agent_id: '',\n        is_active: false,\n      }\n    }\n  });\n  const [saving, setSaving] = useState(false);\n  const [uploading, setUploading] = useState(false);\n\n  useEffect(() => {\n    if (tenant && tenant !== 'new') {\n      // Editing an existing tenant\n      setFormData({\n        name: tenant.name || '',\n        domain: tenant.domain || '',\n        industry: tenant.industry || 'information_technology', // Provide default if existing is null/empty\n        business_model: tenant.business_model || 'b2b',\n        geographic_focus: tenant.geographic_focus || 'north_america',\n        logo_url: tenant.logo_url || '',\n        primary_color: tenant.primary_color || '#3b82f6',\n        accent_color: tenant.accent_color || '#f59e0b',\n        call_agent_url: tenant.call_agent_url || '',\n        ai_calling_providers: {\n          callfluent: {\n            webhook_url: tenant.ai_calling_providers?.callfluent?.webhook_url || '',\n            api_key: tenant.ai_calling_providers?.callfluent?.api_key || '',\n            is_active: tenant.ai_calling_providers?.callfluent?.is_active || false,\n          },\n          thoughtly: {\n            api_key: tenant.ai_calling_providers?.thoughtly?.api_key || '',\n            agent_id: tenant.ai_calling_providers?.thoughtly?.agent_id || '',\n            is_active: tenant.ai_calling_providers?.thoughtly?.is_active || false,\n          }\n        }\n      });\n    } else {\n      // Reset to defaults for a new tenant or when closing the modal\n      setFormData({\n        name: '',\n        domain: '',\n        industry: 'information_technology', // Default for new tenant\n        business_model: 'b2b',\n        geographic_focus: 'north_america',\n        logo_url: '',\n        primary_color: '#3b82f6',\n        accent_color: '#f59e0b',\n        call_agent_url: '',\n        ai_calling_providers: {\n          callfluent: {\n            webhook_url: '',\n            api_key: '',\n            is_active: false,\n          },\n          thoughtly: {\n            api_key: '',\n            agent_id: '',\n            is_active: false,\n          }\n        }\n      });\n    }\n  }, [tenant]);\n\n  const handleLogoUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    if (file.size > 2 * 1024 * 1024) {\n      toast.error(\"File size must be less than 2MB\");\n      return;\n    }\n\n    setUploading(true);\n    try {\n      const { file_url } = await UploadFile({ file });\n      setFormData(prev => ({ ...prev, logo_url: file_url }));\n      toast.success(\"Logo uploaded successfully!\");\n    } catch (error) {\n      console.error(\"Error uploading logo:\", error);\n      toast.error(\"Failed to upload logo. Please try again.\");\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setSaving(true);\n    try {\n      // Keep existing logic where parent (TenantSetup) handles the actual save (create/update)\n      await onSave(formData);\n      // onCancel() is called by the parent component after successful save\n    } catch (error) {\n      console.error(\"Error saving tenant:\", error);\n      toast.error(\"Failed to save tenant. Please try again.\");\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <Dialog open={!!tenant || tenant === 'new'} onOpenChange={() => onCancel()}>\n      <DialogContent className=\"max-w-2xl bg-slate-800 border-slate-700\">\n        <DialogHeader>\n          <DialogTitle className=\"text-slate-100\">{tenant && tenant !== 'new' ? 'Edit Tenant' : 'Create New Tenant'}</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Apply grid changes */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"name\" className=\"text-slate-200\">Tenant Name *</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                required\n                className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"domain\" className=\"text-slate-200\">Domain</Label>\n              <Input\n                id=\"domain\"\n                value={formData.domain}\n                onChange={(e) => setFormData(prev => ({ ...prev, domain: e.target.value }))}\n                placeholder=\"example.com\"\n                className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"logo-upload\" className=\"text-slate-200\">Company Logo</Label>\n            <div className=\"flex items-center gap-4\">\n              {formData.logo_url && (\n                <div className=\"flex items-center gap-2\">\n                  <img\n                    src={formData.logo_url}\n                    alt=\"Tenant Logo\"\n                    className=\"w-16 h-16 object-contain border rounded\"\n                    onError={(e) => { \n                      console.warn(\"Logo failed to load:\", formData.logo_url);\n                      e.target.style.display = 'none'; \n                    }}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setFormData(prev => ({ ...prev, logo_url: '' }))}\n                    className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n                  >\n                    Remove\n                  </Button>\n                </div>\n              )}\n              <div>\n                <Input\n                  id=\"logo-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleLogoUpload}\n                  disabled={uploading}\n                  className=\"mb-2 bg-slate-700 border-slate-600 text-slate-200\"\n                />\n                <p className=\"text-sm text-slate-400\">\n                  Upload a logo (JPG, PNG, GIF - Max 2MB)\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"primary-color\" className=\"text-slate-200\">Primary Color</Label>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  id=\"primary-color\"\n                  type=\"color\"\n                  value={formData.primary_color}\n                  onChange={(e) => setFormData(prev => ({ ...prev, primary_color: e.target.value }))}\n                  className=\"w-16 h-10\"\n                />\n                <Input\n                  value={formData.primary_color}\n                  onChange={(e) => setFormData(prev => ({ ...prev, primary_color: e.target.value }))}\n                  placeholder=\"#3b82f6\"\n                  className=\"flex-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"accent-color\" className=\"text-slate-200\">Accent Color</Label>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  id=\"accent-color\"\n                  type=\"color\"\n                  value={formData.accent_color}\n                  onChange={(e) => setFormData(prev => ({ ...prev, accent_color: e.target.value }))}\n                  className=\"w-16 h-10\"\n                />\n                <Input\n                  value={formData.accent_color}\n                  onChange={(e) => setFormData(prev => ({ ...prev, accent_color: e.target.value }))}\n                  placeholder=\"#f59e0b\"\n                  className=\"flex-1 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Apply grid changes */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"industry\" className=\"text-slate-200\">Industry *</Label>\n              <Select value={formData.industry} onValueChange={(value) => setFormData(prev => ({ ...prev, industry: value }))}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue placeholder=\"Select industry\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  {industries.map(industry => (\n                    <SelectItem key={industry.value} value={industry.value} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">\n                      {industry.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"business_model\" className=\"text-slate-200\">Business Model</Label>\n              <Select value={formData.business_model} onValueChange={(value) => setFormData(prev => ({ ...prev, business_model: value }))}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"b2b\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">B2B</SelectItem>\n                  <SelectItem value=\"b2c\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">B2C</SelectItem>\n                  <SelectItem value=\"hybrid\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Hybrid</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"geographic_focus\" className=\"text-slate-200\">Geographic Focus</Label>\n              <Select value={formData.geographic_focus} onValueChange={(value) => setFormData(prev => ({ ...prev, geographic_focus: value }))}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"north_america\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">North America</SelectItem>\n                  <SelectItem value=\"europe\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Europe</SelectItem>\n                  <SelectItem value=\"asia\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Asia</SelectItem>\n                  <SelectItem value=\"south_america\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">South America</SelectItem>\n                  <SelectItem value=\"africa\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Africa</SelectItem>\n                  <SelectItem value=\"oceania\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Oceania</SelectItem>\n                  <SelectItem value=\"global\" className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">Global</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Legacy AI Call Agent URL field */}\n          <div>\n            <Label htmlFor=\"call_agent_url\" className=\"flex items-center gap-2 text-slate-200\">\n              <Phone className=\"w-4 h-4\" />\n              Legacy AI Call Agent URL (CallFluent)\n            </Label>\n            <Input\n              id=\"call_agent_url\"\n              value={formData.call_agent_url}\n              onChange={(e) => setFormData(prev => ({ ...prev, call_agent_url: e.target.value }))}\n              placeholder=\"https://your-callfluent-webhook.com/endpoint\"\n              type=\"url\"\n              className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n            />\n             <p className=\"text-xs text-slate-400 mt-1\">\n              Legacy field for backward compatibility. Use AI Calling Providers section for new configurations.\n             </p>\n          </div>\n\n          {/* New AI Calling Providers Configuration */}\n          <Card className=\"border-2 border-dashed border-blue-200 bg-slate-700/30\">\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2 text-slate-100\">\n                <Bot className=\"w-5 h-5 text-blue-400\" />\n                AI Calling Providers\n              </CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                Configure multiple AI calling platforms for this tenant. Campaigns can choose which provider to use.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* CallFluent Configuration */}\n              <div className=\"border rounded-lg p-4 space-y-3 bg-slate-600/30 border-slate-500\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                  <h4 className=\"font-semibold text-slate-200\">CallFluent</h4>\n                  <Badge variant={formData.ai_calling_providers?.callfluent?.is_active ? \"default\" : \"outline\"}>\n                    {formData.ai_calling_providers?.callfluent?.is_active ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  <div>\n                    <Label className=\"text-xs text-slate-300\">Webhook URL</Label>\n                    <Input\n                      placeholder=\"https://callfluent-webhook.com\"\n                      value={formData.ai_calling_providers?.callfluent?.webhook_url || ''}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        ai_calling_providers: {\n                          ...prev.ai_calling_providers,\n                          callfluent: {\n                            ...prev.ai_calling_providers?.callfluent,\n                            webhook_url: e.target.value\n                          }\n                        }\n                      }))}\n                      className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs text-slate-300\">API Key</Label>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"cf_api_key_...\"\n                      value={formData.ai_calling_providers?.callfluent?.api_key || ''}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        ai_calling_providers: {\n                          ...prev.ai_calling_providers,\n                          callfluent: {\n                            ...prev.ai_calling_providers?.callfluent,\n                            api_key: e.target.value\n                          }\n                        }\n                      }))}\n                      className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    checked={formData.ai_calling_providers?.callfluent?.is_active || false}\n                    onCheckedChange={(checked) => setFormData(prev => ({\n                      ...prev,\n                      ai_calling_providers: {\n                        ...prev.ai_calling_providers,\n                        callfluent: {\n                          ...prev.ai_calling_providers?.callfluent,\n                          is_active: checked\n                        }\n                      }\n                    }))}\n                  />\n                  <Label className=\"text-sm text-slate-300\">Enable CallFluent for this tenant</Label>\n                </div>\n              </div>\n\n              {/* Thoughtly Configuration */}\n              <div className=\"border rounded-lg p-4 space-y-3 bg-slate-600/30 border-slate-500\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-purple-500 rounded-full\"></div>\n                  <h4 className=\"font-semibold text-slate-200\">Thoughtly</h4>\n                  <Badge variant={formData.ai_calling_providers?.thoughtly?.is_active ? \"default\" : \"outline\"}>\n                    {formData.ai_calling_providers?.thoughtly?.is_active ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  <div>\n                    <Label className=\"text-xs text-slate-300\">API Key</Label>\n                    <Input\n                      type=\"password\"\n                      placeholder=\"thoughtly_api_key_...\"\n                      value={formData.ai_calling_providers?.thoughtly?.api_key || ''}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        ai_calling_providers: {\n                          ...prev.ai_calling_providers,\n                          thoughtly: {\n                            ...prev.ai_calling_providers?.thoughtly,\n                            api_key: e.target.value\n                          }\n                        }\n                      }))}\n                      className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs text-slate-300\">Agent ID</Label>\n                    <Input\n                      placeholder=\"agent_123abc...\"\n                      value={formData.ai_calling_providers?.thoughtly?.agent_id || ''}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        ai_calling_providers: {\n                          ...prev.ai_calling_providers,\n                          thoughtly: {\n                            ...prev.ai_calling_providers?.thoughtly,\n                            agent_id: e.target.value\n                          }\n                        }\n                      }))}\n                      className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    checked={formData.ai_calling_providers?.thoughtly?.is_active || false}\n                    onCheckedChange={(checked) => setFormData(prev => ({\n                      ...prev,\n                      ai_calling_providers: {\n                        ...prev.ai_calling_providers,\n                        thoughtly: {\n                          ...prev.ai_calling_providers?.thoughtly,\n                          is_active: checked\n                        }\n                      }\n                    }))}\n                  />\n                  <Label className=\"text-sm text-slate-300\">Enable Thoughtly for this tenant</Label>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"p-4 bg-slate-700/50 rounded-lg\">\n            <h3 className=\"font-semibold text-slate-200 mb-2\">Color Preview</h3>\n            <div className=\"flex gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <div\n                  className=\"w-8 h-8 rounded border\"\n                  style={{ backgroundColor: formData.primary_color }}\n                ></div>\n                <span className=\"text-sm text-slate-300\">Primary: {formData.primary_color}</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div\n                  className=\"w-8 h-8 rounded border\"\n                  style={{ backgroundColor: formData.accent_color }}\n                ></div>\n                <span className=\"text-sm text-slate-300\">Accent: {formData.accent_color}</span>\n              </div>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={onCancel} disabled={saving || uploading} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={saving || uploading} className=\"bg-blue-600 hover:bg-blue-700\">\n              {saving ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  {tenant && tenant !== 'new' ? 'Updating...' : 'Creating...'}\n                </>\n              ) : uploading ? (\n                <>\n                  <Upload className=\"mr-2 h-4 w-4\" />\n                  Uploading...\n                </>\n              ) : (\n                <>\n                  <Building2 className=\"mr-2 h-4 w-4\" />\n                  {tenant && tenant !== 'new' ? 'Update Tenant' : 'Create Tenant'}\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default function TenantSetup() {\n  const [tenants, setTenants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [editingTenant, setEditingTenant] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [debugInfo, setDebugInfo] = useState(null);\n\n  useEffect(() => {\n    loadUserAndTenants();\n  }, []);\n\n  const loadUserAndTenants = async () => {\n    setLoading(true);\n    setDebugInfo(null); // Clear debug info on new load attempt\n    try {\n      // First, get current user info for debugging\n      const user = await User.me();\n      setCurrentUser(user);\n      console.log('Current user:', user);\n      setDebugInfo(`User role: ${user.role}, Client ID: ${user.tenant_id || 'N/A'}`);\n\n      // Try to load tenants\n      console.log('Attempting to load tenants...');\n      const tenantsData = await Tenant.list('display_order');\n      console.log('Loaded tenants:', tenantsData);\n      setTenants(tenantsData);\n      \n      if (tenantsData.length === 0) {\n        setDebugInfo(prev => prev + ' | No tenants returned from database');\n      }\n    } catch (error) {\n      console.error(\"Error loading tenants:\", error);\n      setDebugInfo(prev => prev + ` | Error: ${error.message}`);\n      \n      // Try alternative loading method for debugging\n      try {\n        console.log('Trying alternative tenant loading...');\n        const altTenants = await Tenant.filter({});\n        console.log('Alternative method result:', altTenants);\n        setTenants(altTenants);\n        if (altTenants.length === 0) {\n             setDebugInfo(prev => prev + ' | Alt method also returned no tenants');\n        } else {\n             setDebugInfo(prev => prev + ' | Alt method loaded tenants');\n        }\n      } catch (altError) {\n        console.error(\"Alternative loading also failed:\", altError);\n        setDebugInfo(prev => prev + ` | Alt error: ${altError.message}`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadTenants = loadUserAndTenants; // For compatibility\n\n  const handleSaveTenant = async (tenantData) => {\n    if (!currentUser) {\n        toast.error(\"User not loaded. Cannot save tenant. Please refresh the page.\");\n        console.error(\"currentUser is null, cannot save tenant.\");\n        return;\n    }\n\n    try {\n      if (editingTenant && editingTenant !== 'new') {\n        await Tenant.update(editingTenant.id, tenantData);\n        toast.success(\"Tenant updated successfully!\");\n      } else {\n        // Assign a high display_order and the current user's email\n        const newTenantData = { \n            ...tenantData, \n            display_order: tenants.length,\n            created_by: currentUser.email // Explicitly set created_by\n        };\n        await createTenantWithR2Bucket(newTenantData);\n        toast.success(\"Tenant created successfully!\");\n      }\n      loadTenants();\n      setEditingTenant(null); // Close modal\n    } catch (error) {\n      console.error(\"Error saving tenant:\", error);\n      toast.error(\"Failed to save tenant. Please try again.\");\n    }\n  };\n\n  const handleDeleteTenant = async (tenantId) => {\n    if (confirm(\"Are you sure you want to delete this tenant? This will permanently delete all associated data including contacts, accounts, leads, opportunities, and activities.\")) {\n      try {\n        await deleteTenantWithData({ tenantId });\n        toast.success(\"Tenant deleted successfully!\");\n        loadTenants();\n      } catch (error) {\n        console.error(\"Error deleting tenant:\", error);\n        toast.error(\"Failed to delete tenant\");\n      }\n    }\n  };\n\n  const onDragEnd = async (result) => {\n    if (!result.destination) return;\n\n    const items = Array.from(tenants);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    // Update display_order for all affected items in local state\n    const updates = items.map((item, index) => ({\n      ...item,\n      display_order: index\n    }));\n\n    setTenants(updates); // Optimistic UI update\n\n    // Save the new order to database\n    try {\n      // Create an array of promises for parallel updates\n      const updatePromises = updates.map(tenant => \n        Tenant.update(tenant.id, { display_order: tenant.display_order })\n      );\n      await Promise.all(updatePromises);\n      toast.success(\"Tenant order saved successfully!\");\n    } catch (error) {\n      console.error(\"Failed to save tenant order:\", error);\n      toast.error(\"Failed to save new order. Reverting.\");\n      loadTenants(); // Revert on failure by reloading original data\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4\" />\n          <p>Loading tenant data...</p>\n          {debugInfo && <p className=\"text-sm text-gray-500 mt-2\">{debugInfo}</p>}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Debug Information Card */}\n      {debugInfo && (\n        <Card className=\"border-yellow-200 bg-yellow-900/20 border-yellow-700/50\">\n          <CardContent className=\"p-4\">\n            <h4 className=\"font-semibold text-yellow-200 mb-2\">Debug Information:</h4>\n            <p className=\"text-sm text-yellow-300\">{debugInfo}</p>\n            {currentUser && (\n              <div className=\"mt-2 text-xs text-yellow-400\">\n                <p>User Email: {currentUser.email}</p>\n                <p>User Role: {currentUser.role}</p>\n                <p>Client ID: {currentUser.tenant_id || 'None'}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Existing tenant management card */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n                <Building2 className=\"w-5 h-5\" />\n                Tenant Management\n              </CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                Create and manage tenant organizations {tenants.length > 0 && `(${tenants.length} total)`}\n              </CardDescription>\n            </div>\n            <Button onClick={() => setEditingTenant('new')} className=\"bg-blue-600 hover:bg-blue-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Tenant\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {tenants.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Building2 className=\"w-12 h-12 text-slate-500 mx-auto mb-4\" />\n              <p className=\"text-slate-400 mb-2\">No tenants found. Create your first tenant to get started.</p>\n              {debugInfo && (\n                <Button \n                  variant=\"outline\" \n                  onClick={loadTenants}\n                  className=\"mt-4 bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Retry Loading\n                </Button>\n              )}\n            </div>\n          ) : (\n            <DragDropContext onDragEnd={onDragEnd}>\n              <Droppable droppableId=\"tenants\">\n                {(provided) => (\n                  <div {...provided.droppableProps} ref={provided.innerRef}>\n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow className=\"border-slate-700\">\n                            <TableHead className=\"w-12 text-slate-300\"></TableHead>\n                            <TableHead className=\"text-slate-300\">Logo</TableHead>\n                            <TableHead className=\"text-slate-300\">Name</TableHead>\n                            <TableHead className=\"text-slate-300\">Domain</TableHead>\n                            <TableHead className=\"text-slate-300\">Agent URL</TableHead>\n                            <TableHead className=\"text-slate-300\">Industry</TableHead>\n                            <TableHead className=\"text-right text-slate-300\">Actions</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {tenants.map((tenant, index) => (\n                            <Draggable key={tenant.id} draggableId={tenant.id} index={index}>\n                              {(provided, snapshot) => (\n                                <TableRow\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  className={`${snapshot.isDragging ? \"shadow-lg\" : \"\"} border-slate-700`}\n                                >\n                                  <TableCell {...provided.dragHandleProps}>\n                                    <GripVertical className=\"w-4 h-4 text-slate-500 cursor-grab\" />\n                                  </TableCell>\n                                  <TableCell>\n                                    {tenant.logo_url ? (\n                                      <img \n                                        src={tenant.logo_url} \n                                        alt={tenant.name} \n                                        className=\"w-8 h-8 rounded object-contain\" \n                                      />\n                                    ) : (\n                                      <div className=\"w-8 h-8 bg-slate-600 rounded flex items-center justify-center\">\n                                        <span className=\"text-xs font-medium text-slate-300\">\n                                          {tenant.name?.charAt(0)?.toUpperCase() || '?'}\n                                        </span>\n                                      </div>\n                                    )}\n                                  </TableCell>\n                                  <TableCell className=\"font-medium text-slate-200\">{tenant.name}</TableCell>\n                                  <TableCell className=\"text-slate-300\">{tenant.domain || 'ΓÇö'}</TableCell>\n                                  <TableCell>\n                                    {tenant.call_agent_url ? (\n                                        <Badge variant=\"secondary\" className=\"bg-slate-600 text-slate-300\">Legacy Configured</Badge>\n                                    ) : tenant.ai_calling_providers?.callfluent?.is_active || tenant.ai_calling_providers?.thoughtly?.is_active ? (\n                                        <Badge variant=\"default\" className=\"bg-blue-600 text-white\">AI Providers Active</Badge>\n                                    ) : (\n                                        <Badge variant=\"outline\" className=\"border-slate-600 text-slate-400\">Not Set</Badge>\n                                    )}\n                                  </TableCell>\n                                  <TableCell>\n                                    <Badge variant=\"outline\" className=\"capitalize border-slate-600 text-slate-400\">\n                                      {industries.find(i => i.value === tenant.industry)?.label || 'Not set'}\n                                    </Badge>\n                                  </TableCell>\n                                  <TableCell className=\"text-right\">\n                                    <DropdownMenu>\n                                      <DropdownMenuTrigger asChild>\n                                        <Button variant=\"ghost\" size=\"icon\" className=\"text-slate-400 hover:text-slate-200 hover:bg-slate-700\">\n                                          <MoreHorizontal className=\"w-4 h-4\" />\n                                        </Button>\n                                      </DropdownMenuTrigger>\n                                      <DropdownMenuContent align=\"end\" className=\"bg-slate-800 border-slate-700\">\n                                        <DropdownMenuItem onClick={() => setEditingTenant(tenant)} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">\n                                          <Pencil className=\"w-4 h-4 mr-2\" />\n                                          Edit\n                                        </DropdownMenuItem>\n                                        <DropdownMenuSeparator className=\"bg-slate-600\" />\n                                        <DropdownMenuItem \n                                          onClick={() => handleDeleteTenant(tenant.id)}\n                                          className=\"text-red-400 focus:text-red-300 hover:bg-slate-700 focus:bg-slate-700\"\n                                        >\n                                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                                          Delete\n                                        </DropdownMenuItem>\n                                      </DropdownMenuContent>\n                                    </DropdownMenu>\n                                  </TableCell>\n                                </TableRow>\n                              )}\n                            </Draggable>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Tenant Form Modal */}\n      {editingTenant && (\n        <TenantFormModal\n          tenant={editingTenant}\n          onSave={handleSaveTenant}\n          onCancel={() => setEditingTenant(null)}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\TenantSwitcher.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":4,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"Users"},"fix":{"range":[234,241],"text":""},"desc":"Remove unused variable 'Users'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Building2, Users, AlertCircle, Globe } from \"lucide-react\";\nimport { Tenant } from \"@/api/entities\";\nimport { useTenant } from './tenantContext';\nimport { toast } from \"sonner\";\nimport { useApiManager } from \"./ApiManager\";\n\nexport default function TenantSwitcher({ user }) {\n  const [tenants, setTenants] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { selectedTenantId, setSelectedTenantId } = useTenant();\n  const { cachedRequest } = useApiManager();\n\n  const loadTenants = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const tenantsData = await cachedRequest(\n        'Tenant',\n        'list',\n        {},\n        () => Tenant.list()\n      );\n      \n      // CRITICAL: Handle undefined or null response\n      const validTenantsData = Array.isArray(tenantsData) ? tenantsData : [];\n      \n      console.log('TenantSwitcher: Loaded tenants:', validTenantsData.length);\n      setTenants(validTenantsData);\n      \n      // CRITICAL: Validate current selectedTenantId is in the list\n      if (selectedTenantId && validTenantsData.length > 0) {\n        const tenantExists = validTenantsData.find(t => t.id === selectedTenantId);\n        if (!tenantExists) {\n          console.warn('TenantSwitcher: Current selected tenant not in list, clearing selection:', selectedTenantId);\n          setSelectedTenantId(null);\n          try {\n            localStorage.removeItem('selected_tenant_id');\n          } catch (e) {\n            console.warn('TenantSwitcher: Failed to clear localStorage:', e);\n          }\n          toast.error('Selected client no longer exists. Reverted to global view.');\n        }\n      }\n    } catch (error) {\n      console.error(\"Error loading clients:\", error);\n      setError(error.message || 'Network error');\n      setTenants([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [cachedRequest, selectedTenantId, setSelectedTenantId]);\n\n  useEffect(() => {\n    if (user?.role === 'admin' || user?.role === 'superadmin') {\n      loadTenants();\n    }\n  }, [user, loadTenants]);\n\n  // Only show for admin/superadmin users\n  if (!user || (user.role !== 'admin' && user.role !== 'superadmin')) {\n    return null;\n  }\n\n  const handleTenantChange = async (tenantId) => {\n    console.log('TenantSwitcher: Switching to tenant:', tenantId);\n    \n    try {\n      // CRITICAL: Validate the tenant exists before switching\n      if (tenantId && tenantId !== 'null') {\n        // Ensure tenants is an array before using find\n        const tenantsArray = Array.isArray(tenants) ? tenants : [];\n        const tenantExists = tenantsArray.find(t => t?.id === tenantId);\n        if (!tenantExists) {\n          console.error('TenantSwitcher: Attempted to switch to non-existent tenant:', tenantId);\n          toast.error('Selected client does not exist.');\n          return;\n        }\n      }\n\n      // Update the context\n      setSelectedTenantId(tenantId);\n      \n      // Force a page refresh to apply new branding\n      setTimeout(() => {\n        window.location.reload();\n      }, 100);\n      \n    } catch (error) {\n      console.error('Error switching tenant:', error);\n      toast.error('Failed to switch client. Please try again.');\n    }\n  };\n\n  const getDisplayValue = () => {\n    return selectedTenantId;\n  };\n\n  const getCurrentTenantName = () => {\n    if (!selectedTenantId) return 'All Clients';\n    const tenantsArray = Array.isArray(tenants) ? tenants : [];\n    const tenant = tenantsArray.find((t) => t?.id === selectedTenantId);\n    return tenant?.name || 'Unknown Client';\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex items-center gap-2 text-amber-600\">\n        <AlertCircle className=\"w-4 h-4\" />\n        <span className=\"text-sm hidden sm:inline\">Client data unavailable</span>\n      </div>\n    );\n  }\n\n  // Ensure tenants is always an array\n  const tenantsArray = Array.isArray(tenants) ? tenants : [];\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <div className=\"hidden sm:flex items-center gap-2 text-sm\">\n        <Building2 className=\"w-4 h-4 text-slate-500\" />\n        <Select\n          value={getDisplayValue()}\n          onValueChange={handleTenantChange}\n          disabled={loading}\n        >\n          <SelectTrigger className=\"w-[280px] h-8 text-xs bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n            <SelectValue placeholder={loading ? \"Loading clients...\" : \"Select a client to manage...\"} />\n          </SelectTrigger>\n          <SelectContent className=\"bg-slate-800 border-slate-700\">\n            <SelectItem value={null} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">\n              <div className=\"flex items-center gap-2\">\n                <Globe className=\"w-3 h-3\" />\n                <span>All Clients (Global View)</span>\n              </div>\n            </SelectItem>\n            {tenantsArray.map((tenant) => (\n              <SelectItem key={tenant.id} value={tenant.id} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className=\"h-3 w-3 rounded-full\"\n                    style={{ backgroundColor: tenant.primary_color || '#3b82f6' }}\n                  />\n                  <span>{tenant.name}</span>\n                </div>\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"sm:hidden\">\n        <Select\n          value={getDisplayValue()}\n          onValueChange={handleTenantChange}\n          disabled={loading}\n        >\n          <SelectTrigger className=\"w-36 h-8 text-xs bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n            <SelectValue placeholder={loading ? \"Loading clients...\" : \"Select client...\"} />\n          </SelectTrigger>\n          <SelectContent className=\"bg-slate-800 border-slate-700\">\n            <SelectItem value={null} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">All Clients (Global View)</SelectItem>\n            {tenantsArray.map((tenant) => (\n              <SelectItem key={tenant.id} value={tenant.id} className=\"text-slate-200 hover:bg-slate-700 focus:bg-slate-700\">\n                {tenant.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"hidden lg:block\">\n        <Badge variant=\"outline\" className=\"text-xs bg-slate-700/50 text-slate-300 border-slate-600\">\n          Managing Client: {getCurrentTenantName()}\n        </Badge>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\TimezoneContext.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":37,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":37,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst TimezoneContext = createContext();\n\nexport const TimezoneProvider = ({ children }) => {\n  const [selectedTimezone, setSelectedTimezone] = useState('America/New_York');\n\n  // Load timezone from localStorage on mount\n  useEffect(() => {\n    try {\n      const savedTimezone = localStorage.getItem('selected_timezone');\n      if (savedTimezone) {\n        setSelectedTimezone(savedTimezone);\n      }\n    } catch (error) {\n      console.warn('Failed to load saved timezone:', error);\n    }\n  }, []);\n\n  // Save timezone to localStorage when changed\n  const updateTimezone = (timezone) => {\n    setSelectedTimezone(timezone);\n    try {\n      localStorage.setItem('selected_timezone', timezone);\n    } catch (error) {\n      console.warn('Failed to save timezone:', error);\n    }\n  };\n\n  return (\n    <TimezoneContext.Provider value={{ selectedTimezone, setSelectedTimezone: updateTimezone }}>\n      {children}\n    </TimezoneContext.Provider>\n  );\n};\n\nexport const useTimezone = () => {\n  const context = useContext(TimezoneContext);\n  if (!context) {\n    throw new Error('useTimezone must be used within a TimezoneProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\UniversalDetailPanel.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadActivities' and 'loadNotes'. Either include them or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [open, entity, entityType, loadNotes, loadActivities]","fix":{"range":[2405,2431],"text":"[open, entity, entityType, loadNotes, loadActivities]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":461,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":461,"endColumn":21},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":887,"column":70,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[35101,35172],"text":"\n                    This will also create an Activity record of type &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[35101,35172],"text":"\n                    This will also create an Activity record of type &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[35101,35172],"text":"\n                    This will also create an Activity record of type &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[35101,35172],"text":"\n                    This will also create an Activity record of type &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":887,"column":111,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[35212,35232],"text":"&quot;\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[35212,35232],"text":"&ldquo;\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[35212,35232],"text":"&#34;\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[35212,35232],"text":"&rdquo;\n                  "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Mail,\n  Phone,\n  Building2,\n  MapPin,\n  Edit,\n  Trash2,\n  MoreVertical,\n  Calendar,\n  User,\n  Tag,\n  DollarSign,\n  Target,\n  Hash,\n  X,\n  FileText,\n  PhoneCall,\n  Users,\n  Send,\n  CheckCircle,\n  Star,\n  Presentation,\n  ClipboardCheck,\n  Loader2, // Added Loader2\n  Eye // Added Eye\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { Note, Activity, Contact } from \"@/api/entities\"; // Added Contact\nimport { toast } from \"sonner\";\n\n/**\n * Universal Detail Panel - Consolidates all entity detail panels\n * Replaces: ContactDetailPanel, AccountDetailPanel, LeadDetailPanel, OpportunityDetailPanel\n */\nexport default function UniversalDetailPanel({\n  // Core props\n  entity,\n  entityType, // 'contact', 'account', 'lead', 'opportunity', 'activity'\n  open,\n  onOpenChange,\n  \n  // Actions\n  onEdit,\n  onDelete,\n  customActions = [],\n  \n  // User context\n  user,\n  \n  // Optional display data\n  displayData = {},\n  \n  // Optional sections\n  showNotes = true, // Kept default to true as per existing code\n  customSections = []\n}) {\n  const [notes, setNotes] = useState([]);\n  const [activities, setActivities] = useState([]);\n  const [newNoteTitle, setNewNoteTitle] = useState(\"\");\n  const [newNoteContent, setNewNoteContent] = useState(\"\");\n  const [newNoteType, setNewNoteType] = useState(\"general\");\n  const [isSavingNote, setIsSavingNote] = useState(false);\n  const [editingNote, setEditingNote] = useState(null);\n  \n  // New states for related contacts\n  const [relatedContacts, setRelatedContacts] = useState([]);\n  const [relatedDataLoading, setRelatedDataLoading] = useState(false);\n\n  // Load notes and activities when panel opens or entity changes\n  useEffect(() => {\n    if (open && entity) {\n      loadNotes();\n      loadActivities();\n    }\n  }, [open, entity, entityType]);\n\n  // Effect to load related contacts for accounts\n  useEffect(() => {\n    const loadRelatedContacts = async () => {\n      if (!entity?.id || entityType !== 'account') {\n        setRelatedContacts([]); // Clear contacts if not an account or no entity\n        return;\n      }\n      \n      setRelatedDataLoading(true);\n      try {\n        const contacts = await Contact.filter({ account_id: entity.id });\n        setRelatedContacts(contacts);\n      } catch (error) {\n        console.error('[UniversalDetailPanel] Error loading contacts:', error);\n        toast.error(\"Failed to load related contacts\");\n      } finally {\n        setRelatedDataLoading(false);\n      }\n    };\n\n    if (open) {\n      loadRelatedContacts();\n    }\n    // Cleanup function in case entity changes or panel closes rapidly\n    return () => {\n      setRelatedContacts([]);\n      setRelatedDataLoading(false);\n    };\n  }, [entity?.id, entityType, open]);\n\n  if (!entity) return null;\n\n  const loadNotes = async () => {\n    if (!entity) return;\n    try {\n      const relatedTo = entityType.toLowerCase();\n      // Assuming Note.filter supports ordering and related_to/related_id\n      const notesData = await Note.filter({ \n        related_to: relatedTo, \n        related_id: entity.id \n      }, '-created_date'); // Assuming '-created_date' sorts descending\n      setNotes(notesData || []);\n    } catch (error) {\n      console.error(\"Failed to load notes:\", error);\n      toast.error(\"Failed to load notes\");\n    }\n  };\n\n  const loadActivities = async () => {\n    if (!entity) return;\n    try {\n      const relatedTo = entityType.toLowerCase();\n      // Assuming Activity.filter supports ordering and related_to/related_id, limit to 10\n      const activitiesData = await Activity.filter({ \n        related_to: relatedTo, \n        related_id: entity.id \n      }, '-created_date', 10);\n      setActivities(activitiesData || []);\n    } catch (error) {\n      console.error(\"Failed to load activities:\", error);\n      toast.error(\"Failed to load activities\");\n    }\n  };\n\n  const getEntityName = (entity) => {\n    if (entity.first_name && entity.last_name) {\n      return `${entity.first_name} ${entity.last_name}`;\n    }\n    return entity.name || entity.title || entity.subject || 'Unknown';\n  };\n\n  const mapNoteTypeToActivityType = (noteType) => {\n    switch (noteType) {\n      case 'call_log': return 'call';\n      case 'meeting': return 'meeting';\n      case 'email': return 'email';\n      case 'follow_up': return 'task'; // Follow-up notes create tasks\n      // For other specific note types like 'task', 'important', 'demo', 'proposal',\n      // if not explicitly mapped to a specific activity type, they default to 'note' activity.\n      default: return 'note'; // 'general', 'task', 'important', 'demo', 'proposal' notes will result in 'note' activities\n    }\n  };\n\n  const handleSaveNote = async () => {\n    if (!newNoteContent.trim()) {\n      toast.error(\"Note content cannot be empty\");\n      return;\n    }\n\n    setIsSavingNote(true);\n    try {\n      const relatedTo = entityType.toLowerCase();\n      const entityName = getEntityName(entity); // Pre-calculate for activity\n\n      const noteData = {\n        related_to: relatedTo,\n        related_id: entity.id,\n        title: newNoteTitle || `${newNoteType.charAt(0).toUpperCase() + newNoteType.slice(1)} Note`,\n        content: newNoteContent,\n        type: newNoteType,\n        tenant_id: user.tenant_id,\n        created_by: user.email // Assuming user.email for created_by\n      };\n\n      // Create or update note\n      if (editingNote) {\n        await Note.update(editingNote.id, noteData);\n        toast.success(\"Note updated successfully\");\n      } else {\n        await Note.create(noteData);\n        toast.success(\"Note added successfully\");\n      }\n\n      // If type is NOT general, also create an Activity\n      if (newNoteType !== \"general\") {\n        const activityType = mapNoteTypeToActivityType(newNoteType); // Use the updated helper\n        \n        // Determine activity status and due date based on note type\n        const isScheduledActivity = ['follow_up', 'call_log', 'meeting', 'email'].includes(newNoteType);\n\n        const activityData = {\n          tenant_id: user.tenant_id,\n          type: activityType,\n          subject: newNoteTitle || newNoteContent.substring(0, 50), // Use newNoteTitle, or first 50 chars of content\n          description: newNoteContent,\n          status: isScheduledActivity ? 'scheduled' : 'completed', // Updated status logic\n          related_to: relatedTo,\n          related_id: entity.id,\n          related_name: entityName, // Use pre-calculated entityName\n          related_email: entity.email || null, // New field\n          assigned_to: entity.assigned_to || user.email, // Use entity's assigned_to or current user\n          due_date: isScheduledActivity ? new Date().toISOString().split('T')[0] : null // Updated due_date logic\n        };\n\n        await Activity.create(activityData);\n        toast.success(`Activity created for this ${newNoteType}`);\n        window.dispatchEvent(new CustomEvent('entity-modified', { detail: { entity: 'Activity' } })); // Dispatch event for activities list refresh\n      }\n\n      // Reset form\n      setNewNoteTitle(\"\");\n      setNewNoteContent(\"\");\n      setNewNoteType(\"general\");\n      setEditingNote(null);\n\n      // Reload both notes and activities\n      await Promise.all([loadNotes(), loadActivities()]);\n    } catch (error) {\n      console.error(\"Failed to save note:\", error);\n      toast.error(\"Failed to save note\");\n    } finally {\n      setIsSavingNote(false);\n    }\n  };\n\n  const handleDeleteNote = async (noteId) => {\n    if (!window.confirm(\"Are you sure you want to delete this note?\")) return;\n\n    try {\n      await Note.delete(noteId);\n      toast.success(\"Note deleted successfully\");\n      loadNotes();\n    } catch (error) {\n      console.error(\"Failed to delete note:\", error);\n      toast.error(\"Failed to delete note\");\n    }\n  };\n\n  const handleViewActivity = (activity) => {\n    // Dispatch event to open activity detail panel\n    window.dispatchEvent(new CustomEvent('view-entity-detail', {\n      detail: {\n        entityType: 'activity',\n        entityId: activity.id,\n        entityName: activity.subject\n      }\n    }));\n  };\n\n  const getActivityIcon = (type) => {\n    const icons = {\n      call: PhoneCall,\n      email: Send,\n      meeting: Users,\n      task: CheckCircle,\n      note: FileText,\n      demo: Presentation,\n      proposal: ClipboardCheck\n    };\n    const Icon = icons[type] || FileText;\n    return <Icon className=\"w-4 h-4 text-slate-400\" />;\n  };\n\n  const getNoteTypeIcon = (type) => {\n    const icons = {\n      general: FileText,\n      call_log: PhoneCall,\n      meeting: Users,\n      email: Send,\n      task: CheckCircle,\n      follow_up: CheckCircle,\n      important: Star,\n      demo: Presentation,\n      proposal: ClipboardCheck\n    };\n    const Icon = icons[type] || FileText;\n    return <Icon className=\"w-4 h-4 text-slate-400\" />;\n  };\n\n  const getIcon = () => {\n    switch (entityType) {\n      case 'contact': return <User className=\"w-5 h-5\" />;\n      case 'account': return <Building2 className=\"w-5 h-5\" />;\n      case 'lead': return <Target className=\"w-5 h-5\" />;\n      case 'opportunity': return <DollarSign className=\"w-5 h-5\" />;\n      case 'activity': return <Calendar className=\"w-5 h-5\" />;\n      default: return null;\n    }\n  };\n\n  const getTitle = () => {\n    switch (entityType) {\n      case 'contact':\n      case 'lead':\n        return `${entity.first_name || ''} ${entity.last_name || ''}`.trim();\n      case 'account':\n        return entity.name;\n      case 'opportunity':\n        return entity.name;\n      case 'activity':\n        return entity.subject;\n      default:\n        return 'Details';\n    }\n  };\n\n  // Helper function for badge colors (example, adjust as needed)\n  const getStatusColor = (value) => {\n    const lowerValue = value ? String(value).toLowerCase() : '';\n    if (lowerValue.includes('open') || lowerValue.includes('new') || lowerValue.includes('pending') || lowerValue.includes('scheduled')) {\n      return \"bg-blue-600 text-blue-50 hover:bg-blue-700\";\n    }\n    if (lowerValue.includes('won') || lowerValue.includes('active') || lowerValue.includes('completed') || lowerValue.includes('qualified')) {\n      return \"bg-green-600 text-green-50 hover:bg-green-700\";\n    }\n    if (lowerValue.includes('lost') || lowerValue.includes('cancelled') || lowerValue.includes('declined')) {\n      return \"bg-red-600 text-red-50 hover:bg-red-700\";\n    }\n    if (lowerValue.includes('meeting') || lowerValue.includes('contacted') || lowerValue.includes('in progress')) {\n      return \"bg-purple-600 text-purple-50 hover:bg-purple-700\";\n    }\n    return \"bg-slate-700 text-slate-200 border-slate-600 hover:bg-slate-600\"; // Default\n  };\n\n  // Render \"Contact Information\" section (from outline)\n  const renderContactInfo = () => {\n    const infoFields = [];\n\n    if (entity.email) {\n      infoFields.push(\n        <div key=\"email\" className=\"flex items-center gap-3\">\n          <Mail className=\"w-4 h-4 text-slate-400\" />\n          <div>\n            <Label className=\"text-xs text-slate-500\">Email</Label>\n            <a href={`mailto:${entity.email}`} className=\"text-blue-400 hover:text-blue-300 text-sm block\">\n              {entity.email}\n            </a>\n          </div>\n        </div>\n      );\n    }\n\n    if (entity.phone) {\n      infoFields.push(\n        <div key=\"phone\" className=\"flex items-center gap-3\">\n          <Phone className=\"w-4 h-4 text-slate-400\" />\n          <div>\n            <Label className=\"text-xs text-slate-500\">Phone</Label>\n            <a href={`tel:${entity.phone}`} className=\"text-blue-400 hover:text-blue-300 text-sm block\">\n              {entity.phone}\n            </a>\n          </div>\n        </div>\n      );\n    }\n\n    if (entity.mobile) {\n      infoFields.push(\n        <div key=\"mobile\" className=\"flex items-center gap-3\">\n          <Phone className=\"w-4 h-4 text-slate-400\" />\n          <div>\n            <Label className=\"text-xs text-slate-500\">Mobile</Label>\n            <a href={`tel:${entity.mobile}`} className=\"text-blue-400 hover:text-blue-300 text-sm block\">\n              {entity.mobile}\n            </a>\n          </div>\n        </div>\n      );\n    }\n\n    if (infoFields.length === 0) return null;\n\n    return (\n      <div>\n        <h3 className=\"text-sm font-semibold text-slate-400 uppercase mb-4\">Contact Information</h3>\n        <div className=\"space-y-3\">\n          {infoFields}\n        </div>\n      </div>\n    );\n  };\n\n  // Render DETAILS section (merged with outline and original comprehensive logic)\n  const renderDetailsSection = () => {\n    const detailFields = [];\n\n    // Add custom displayData fields first\n    if (typeof displayData === 'object' && displayData !== null) {\n      Object.entries(displayData).forEach(([label, value]) => {\n        // Skip rendering if value is null or undefined\n        if (value === null || typeof value === 'undefined') return;\n\n        detailFields.push(\n          <div key={`display-${label}`} className=\"grid grid-cols-2 gap-4 items-center\">\n            <Label className=\"text-slate-400\">{label}</Label>\n            <div className=\"text-sm text-slate-200 font-medium\">\n              {value}\n            </div>\n          </div>\n        );\n      });\n    }\n\n    // Standard fields to show in details\n    const standardFields = [\n      { key: 'status', label: 'Status' },\n      { key: 'stage', label: 'Stage' },\n      { key: 'source', label: 'Source' },\n      { key: 'lead_source', label: 'Lead Source' },\n      { key: 'priority', label: 'Priority' },\n      { key: 'type', label: 'Type' },\n      { key: 'industry', label: 'Industry' },\n      { key: 'amount', label: 'Amount' },\n      { key: 'probability', label: 'Probability' },\n      { key: 'close_date', label: 'Close Date' },\n      { key: 'due_date', label: 'Due Date' },\n      { key: 'created_date', label: 'Created' },\n      // assignedUserName from displayData should be handled by displayData loop\n    ];\n\n    standardFields.forEach(({ key, label }) => {\n      // Check if the entity has the key and its value is not null/undefined\n      // Also, ensure displayData doesn't already provide a custom field for this label\n      if (entity[key] !== undefined && entity[key] !== null && !Object.keys(displayData).includes(label)) {\n        let value = entity[key];\n        \n        // Format specific fields\n        if (key === 'amount' && typeof value === 'number') {\n          value = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);\n        } else if ((key === 'probability' || key === 'score') && typeof value === 'number') {\n          value = `${value}%`;\n        } else if (key.includes('date')) {\n          try {\n            value = format(new Date(value), 'MMM d, yyyy'); // Using date-fns for consistent formatting\n          } catch (e) {\n            value = String(value); // Fallback if date is invalid\n          }\n        } else if (['status', 'stage', 'priority', 'type'].includes(key)) {\n          value = (\n            <Badge className={getStatusColor(value)}>\n              {String(value).replace(/_/g, ' ')}\n            </Badge>\n          );\n        } else if (typeof value === 'string') {\n          value = String(value).replace(/_/g, ' '); // Replace underscores for general strings\n        }\n\n        detailFields.push(\n          <div key={`entity-${key}`} className=\"grid grid-cols-2 gap-4 items-center\">\n            <Label className=\"text-slate-400\">{label}</Label>\n            <div className=\"text-sm text-slate-200 font-medium\">\n              {value}\n            </div>\n          </div>\n        );\n      }\n    });\n\n    if (detailFields.length === 0) return null;\n\n    return (\n      <div>\n        <h3 className=\"text-sm font-semibold text-slate-400 uppercase mb-4\">Details</h3>\n        <div className=\"space-y-3\">\n          {detailFields}\n        </div>\n      </div>\n    );\n  };\n\n\n  return (\n    <Sheet open={open} onOpenChange={onOpenChange}>\n      <SheetContent \n        side=\"right\" \n        className=\"w-full sm:max-w-2xl bg-slate-900 text-slate-100 border-l border-slate-700 overflow-y-auto\"\n      >\n        <SheetHeader className=\"border-b border-slate-700 pb-4\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-2 rounded-lg bg-slate-700 text-slate-300\">\n                {getIcon()}\n              </div>\n              <div>\n                <SheetTitle className=\"text-2xl font-bold text-slate-100\">{getTitle()}</SheetTitle>\n                {entity.job_title && (\n                  <p className=\"text-sm text-slate-400 mt-1\">{entity.job_title}</p>\n                )}\n                {entity.company && (\n                  <p className=\"text-sm text-slate-400 mt-1\">{entity.company}</p>\n                )}\n                {entity.unique_id && !entity.job_title && !entity.company && (\n                  <p className=\"text-sm text-slate-500 mt-1\">ID: {entity.unique_id}</p>\n                )}\n              </div>\n            </div>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"text-slate-400 hover:text-slate-200\">\n                  <MoreVertical className=\"w-5 h-5\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"bg-slate-800 border-slate-700\">\n                <DropdownMenuItem onClick={() => onEdit?.(entity)} className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\">\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit\n                </DropdownMenuItem>\n                \n                {customActions.map((action, idx) => (\n                  <DropdownMenuItem\n                    key={idx}\n                    onClick={() => action.onClick?.(entity)}\n                    className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n                  >\n                    {action.icon && <span className=\"mr-2\">{action.icon}</span>}\n                    {action.label}\n                  </DropdownMenuItem>\n                ))}\n                \n                <DropdownMenuItem\n                  onClick={() => onDelete?.(entity.id)}\n                  className=\"text-red-400 hover:bg-red-900/20 cursor-pointer\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </SheetHeader>\n\n        <div className=\"space-y-6 p-6\">\n          {/* Contact Information Section */}\n          {renderContactInfo()}\n\n          {/* DETAILS Section */}\n          {renderDetailsSection()}\n\n          {/* Address Section - from outline, slightly adapted to match original data props */}\n          {(entity.address_1 || entity.city || entity.state) && (\n            <div>\n              <h3 className=\"text-sm font-semibold text-slate-400 uppercase mb-4\">Address</h3>\n              <div className=\"flex items-start gap-3\">\n                <MapPin className=\"w-4 h-4 text-slate-400 mt-1\" />\n                <div className=\"text-sm text-slate-300\">\n                  {entity.address_1 && <div>{entity.address_1}</div>}\n                  {entity.address_2 && <div>{entity.address_2}</div>}\n                  {(entity.city || entity.state || entity.zip) && (\n                    <div>\n                      {entity.city}{entity.city && (entity.state || entity.zip) && ', '}{entity.state} {entity.zip}\n                    </div>\n                  )}\n                  {entity.country && <div>{entity.country}</div>}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Tags */}\n          {entity.tags && entity.tags.length > 0 && (\n            <div>\n              <h3 className=\"text-sm font-semibold text-slate-400 uppercase mb-3 flex items-center gap-2\">\n                <Tag className=\"w-4 h-4\" />\n                Tags\n              </h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {entity.tags.map((tag, idx) => (\n                  <Badge key={idx} variant=\"outline\" className=\"bg-slate-700 border-slate-600\">\n                    <Hash className=\"w-3 h-3 mr-1\" />\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Custom Actions - from outline, moved earlier in the flow */}\n          {customActions.length > 0 && (\n            <div className=\"flex flex-wrap gap-2\">\n              {customActions.map((action, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  onClick={() => action.onClick?.(entity)}\n                  className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                >\n                  {action.icon && <span className=\"mr-2\">{action.icon}</span>}\n                  {action.label}\n                </Button>\n              ))}\n            </div>\n          )}\n          \n          {/* Related Contacts Section - IMPROVED */}\n          {entityType === 'account' && (\n            <div className=\"border-t border-slate-700 pt-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-slate-100 flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  Contacts ({relatedContacts.length})\n                </h3>\n              </div>\n\n              {relatedDataLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"w-6 h-6 animate-spin text-blue-400\" />\n                </div>\n              ) : relatedContacts.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {relatedContacts.map((contact) => (\n                    <div\n                      key={contact.id}\n                      className=\"p-4 bg-slate-800 rounded-lg border border-slate-700 hover:border-slate-600 transition-colors\"\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1 space-y-2\">\n                          {/* Contact Name */}\n                          <div className=\"flex items-center gap-2\">\n                            <User className=\"w-4 h-4 text-slate-400\" />\n                            <span className=\"font-medium text-slate-200\">\n                              {contact.first_name} {contact.last_name}\n                            </span>\n                            {contact.job_title && (\n                              <Badge variant=\"outline\" className=\"text-xs bg-slate-700 text-slate-300 border-slate-600\">\n                                {contact.job_title}\n                              </Badge>\n                            )}\n                          </div>\n\n                          {/* Contact Phone */}\n                          {contact.phone && (\n                            <div className=\"flex items-center gap-2 text-sm\">\n                              <Phone className=\"w-4 h-4 text-slate-400\" />\n                              <a \n                                href={`tel:${contact.phone}`}\n                                className=\"text-blue-400 hover:text-blue-300\"\n                                onClick={(e) => e.stopPropagation()} // Prevent sheet from closing/re-rendering\n                              >\n                                {contact.phone}\n                              </a>\n                            </div>\n                          )}\n\n                          {/* Contact Email */}\n                          {contact.email && (\n                            <div className=\"flex items-center gap-2 text-sm\">\n                              <Mail className=\"w-4 h-4 text-slate-400\" />\n                              <a \n                                href={`mailto:${contact.email}`}\n                                className=\"text-blue-400 hover:text-blue-300\"\n                                onClick={(e) => e.stopPropagation()} // Prevent sheet from closing/re-rendering\n                              >\n                                {contact.email}\n                              </a>\n                            </div>\n                          )}\n\n                          {/* Contact Mobile (if different from phone) */}\n                          {contact.mobile && contact.mobile !== contact.phone && (\n                            <div className=\"flex items-center gap-2 text-sm\">\n                              <Phone className=\"w-4 h-4 text-slate-400\" />\n                              <span className=\"text-slate-400 text-xs mr-1\">Mobile:</span>\n                              <a \n                                href={`tel:${contact.mobile}`}\n                                className=\"text-blue-400 hover:text-blue-300\"\n                                onClick={(e) => e.stopPropagation()} // Prevent sheet from closing/re-rendering\n                              >\n                                {contact.mobile}\n                              </a>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* View Contact Button */}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation(); // Prevent sheet from closing/re-rendering\n                            window.location.href = `/contacts/${contact.id}`; // Adjusted to a more common SPA route pattern if applicable\n                          }}\n                          className=\"text-slate-400 hover:text-slate-200\"\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-slate-400 bg-slate-800/50 rounded-lg\">\n                  <Users className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                  <p>No contacts linked to this account</p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Recent Activities Section - New from outline */}\n          {activities.length > 0 && (\n            <div>\n              <h3 className=\"text-sm font-semibold text-slate-400 uppercase mb-4\">Recent Activities</h3>\n              <div className=\"space-y-2\">\n                {activities.slice(0, 5).map((activity) => (\n                  <button\n                    key={activity.id}\n                    onClick={() => handleViewActivity(activity)}\n                    className=\"w-full flex items-start gap-3 p-3 rounded-lg bg-slate-800/50 hover:bg-slate-800 border border-slate-700 text-left transition-colors\"\n                  >\n                    <div className=\"mt-0.5\">\n                      {getActivityIcon(activity.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <span className=\"font-medium text-slate-200 text-sm\">{activity.subject}</span>\n                        <Badge className={getStatusColor(activity.status)}>\n                          {activity.type.replace(/_/g, ' ')}\n                        </Badge>\n                      </div>\n                      {activity.description && (\n                        <p className=\"text-xs text-slate-400 line-clamp-2\">\n                          {activity.description}\n                        </p>\n                      )}\n                      <p className=\"text-xs text-slate-500 mt-1\">\n                        {activity.created_date ? format(new Date(activity.created_date), 'MMM d, yyyy') : 'N/A'}\n                      </p>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        \n          {/* Custom Sections - Kept as is */}\n          {customSections && customSections.length > 0 && (\n            <div className=\"space-y-4\">\n              {customSections.map((section, index) => (\n                <div key={index} className=\"space-y-2\">\n                  {section.title && (\n                    <h3 className=\"text-sm font-semibold text-slate-400 uppercase mb-3 flex items-center gap-2\">\n                      {section.icon && <span className=\"w-4 h-4\">{section.icon}</span>}\n                      {section.title}\n                    </h3>\n                  )}\n                  <div>\n                    {section.content}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Notes & Activity Section - Replaced old NotesSection with new implementation */}\n          {showNotes && (\n            <div>\n              <h3 className=\"text-sm font-semibold text-slate-400 uppercase mb-4\">Notes & Activity</h3>\n              \n              {/* Add Note Form */}\n              <div className=\"space-y-3 mb-4 p-4 border border-slate-700 rounded-lg bg-slate-800\">\n                <Input\n                  placeholder=\"Note title (optional)\"\n                  value={newNoteTitle}\n                  onChange={(e) => setNewNoteTitle(e.target.value)}\n                  className=\"bg-slate-900 border-slate-700 text-slate-200 placeholder:text-slate-500\"\n                />\n                <Textarea\n                  placeholder=\"Write your note here...\"\n                  value={newNoteContent}\n                  onChange={(e) => setNewNoteContent(e.target.value)}\n                  className=\"bg-slate-900 border-slate-700 text-slate-200 min-h-[100px] placeholder:text-slate-500\"\n                />\n                <div className=\"flex items-center gap-3\">\n                  <Select value={newNoteType} onValueChange={setNewNoteType}>\n                    <SelectTrigger className=\"w-48 bg-slate-900 border-slate-700 text-slate-200\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                      <SelectItem value=\"general\" className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                        <div className=\"flex items-center gap-2\">\n                          <FileText className=\"w-4 h-4 text-slate-400\" />\n                          General\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"call_log\" className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                        <div className=\"flex items-center gap-2\">\n                          <PhoneCall className=\"w-4 h-4 text-slate-400\" />\n                          Call Log\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"meeting\" className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                        <div className=\"flex items-center gap-2\">\n                          <Users className=\"w-4 h-4 text-slate-400\" />\n                          Meeting\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"email\" className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                        <div className=\"flex items-center gap-2\">\n                          <Send className=\"w-4 h-4 text-slate-400\" />\n                          Email\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"task\" className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-slate-400\" />\n                          Task\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"follow_up\" className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-slate-400\" />\n                          Follow-up\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"important\" className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                        <div className=\"flex items-center gap-2\">\n                          <Star className=\"w-4 h-4 text-slate-400\" />\n                          Important\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"demo\" className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                        <div className=\"flex items-center gap-2\">\n                          <Presentation className=\"w-4 h-4 text-slate-400\" />\n                          Demo\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"proposal\" className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                        <div className=\"flex items-center gap-2\">\n                          <ClipboardCheck className=\"w-4 h-4 text-slate-400\" />\n                          Proposal\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button\n                    onClick={handleSaveNote}\n                    disabled={isSavingNote || !newNoteContent.trim()}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                  >\n                    {isSavingNote ? \"Saving...\" : editingNote ? \"Update Note\" : \"Add Note\"}\n                  </Button>\n                  {editingNote && (\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => {\n                        setEditingNote(null);\n                        setNewNoteTitle(\"\");\n                        setNewNoteContent(\"\");\n                        setNewNoteType(\"general\");\n                      }}\n                      className=\"text-slate-400 hover:bg-slate-700\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                </div>\n                {newNoteType !== \"general\" && (\n                  <p className=\"text-xs text-amber-400 flex items-center gap-1 mt-2\">\n                    <Star className=\"w-3 h-3\" />\n                    This will also create an Activity record of type \"{mapNoteTypeToActivityType(newNoteType)}\"\n                  </p>\n                )}\n              </div>\n\n              {/* Notes List */}\n              {notes.length === 0 ? (\n                <div className=\"text-center py-8 text-slate-500\">\n                  <FileText className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                  <p>No notes yet</p>\n                  <p className=\"text-xs\">Add your first note above</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {notes.map((note) => (\n                    <div\n                      key={note.id}\n                      className=\"p-4 rounded-lg bg-slate-800/50 border border-slate-700\"\n                    >\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          {getNoteTypeIcon(note.type)}\n                          <span className=\"font-medium text-slate-200\">{note.title}</span>\n                          <Badge variant=\"secondary\" className=\"text-xs bg-slate-700 text-slate-300\">\n                            {note.type.replace(/_/g, ' ')}\n                          </Badge>\n                        </div>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6 text-slate-400\">\n                              <MoreVertical className=\"w-4 h-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent className=\"bg-slate-800 border-slate-700\">\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setEditingNote(note);\n                                setNewNoteTitle(note.title);\n                                setNewNoteContent(note.content);\n                                setNewNoteType(note.type);\n                              }}\n                              className=\"text-slate-200 hover:bg-slate-700 cursor-pointer\"\n                            >\n                              <Edit className=\"w-4 h-4 mr-2\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => handleDeleteNote(note.id)}\n                              className=\"text-red-400 hover:bg-red-900/20 cursor-pointer\"\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                      <p className=\"text-sm text-slate-300 whitespace-pre-wrap\">{note.content}</p>\n                      <p className=\"text-xs text-slate-500 mt-2\">\n                        {note.created_date ? format(new Date(note.created_date), 'MMM d, yyyy HH:mm') : 'N/A'} by {note.created_by || 'Unknown'}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\UserGuide.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":86,"column":148,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3771,3961],"text":"\n                Use the sidebar menu to access different sections of the CRM. The modules you can see depend on your role and permissions (see the &quot;Roles & Permissions\" tab).\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3771,3961],"text":"\n                Use the sidebar menu to access different sections of the CRM. The modules you can see depend on your role and permissions (see the &ldquo;Roles & Permissions\" tab).\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3771,3961],"text":"\n                Use the sidebar menu to access different sections of the CRM. The modules you can see depend on your role and permissions (see the &#34;Roles & Permissions\" tab).\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3771,3961],"text":"\n                Use the sidebar menu to access different sections of the CRM. The modules you can see depend on your role and permissions (see the &rdquo;Roles & Permissions\" tab).\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":86,"column":168,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3771,3961],"text":"\n                Use the sidebar menu to access different sections of the CRM. The modules you can see depend on your role and permissions (see the \"Roles & Permissions&quot; tab).\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3771,3961],"text":"\n                Use the sidebar menu to access different sections of the CRM. The modules you can see depend on your role and permissions (see the \"Roles & Permissions&ldquo; tab).\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3771,3961],"text":"\n                Use the sidebar menu to access different sections of the CRM. The modules you can see depend on your role and permissions (see the \"Roles & Permissions&#34; tab).\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3771,3961],"text":"\n                Use the sidebar menu to access different sections of the CRM. The modules you can see depend on your role and permissions (see the \"Roles & Permissions&rdquo; tab).\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":159,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7906,7966],"text":"\n                    If you&apos;re a Manager:\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7906,7966],"text":"\n                    If you&lsquo;re a Manager:\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7906,7966],"text":"\n                    If you&#39;re a Manager:\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7906,7966],"text":"\n                    If you&rsquo;re a Manager:\n                  "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":162,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8096,8177],"text":"You&apos;ll see all leads, contacts, accounts, and opportunities for your organization"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8096,8177],"text":"You&lsquo;ll see all leads, contacts, accounts, and opportunities for your organization"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8096,8177],"text":"You&#39;ll see all leads, contacts, accounts, and opportunities for your organization"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8096,8177],"text":"You&rsquo;ll see all leads, contacts, accounts, and opportunities for your organization"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":172,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8640,8702],"text":"\n                    If you&apos;re an Employee:\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8640,8702],"text":"\n                    If you&lsquo;re an Employee:\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8640,8702],"text":"\n                    If you&#39;re an Employee:\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8640,8702],"text":"\n                    If you&rsquo;re an Employee:\n                  "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":175,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8832,8893],"text":"You&apos;ll only see leads, contacts, and accounts assigned to you"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8832,8893],"text":"You&lsquo;ll only see leads, contacts, and accounts assigned to you"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8832,8893],"text":"You&#39;ll only see leads, contacts, and accounts assigned to you"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8832,8893],"text":"You&rsquo;ll only see leads, contacts, and accounts assigned to you"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":176,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8923,8983],"text":"You can create new records (they&apos;ll be auto-assigned to you)"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8923,8983],"text":"You can create new records (they&lsquo;ll be auto-assigned to you)"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8923,8983],"text":"You can create new records (they&#39;ll be auto-assigned to you)"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8923,8983],"text":"You can create new records (they&rsquo;ll be auto-assigned to you)"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":178,"column":66,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9094,9144],"text":"You cannot see or edit other team members&apos; records"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9094,9144],"text":"You cannot see or edit other team members&lsquo; records"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9094,9144],"text":"You cannot see or edit other team members&#39; records"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9094,9144],"text":"You cannot see or edit other team members&rsquo; records"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":222,"column":31,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11350,11371],"text":"&quot;Customize Dashboard\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11350,11371],"text":"&ldquo;Customize Dashboard\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11350,11371],"text":"&#34;Customize Dashboard\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11350,11371],"text":"&rdquo;Customize Dashboard\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":222,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11350,11371],"text":"\"Customize Dashboard&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11350,11371],"text":"\"Customize Dashboard&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11350,11371],"text":"\"Customize Dashboard&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11350,11371],"text":"\"Customize Dashboard&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":258,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13292,13305],"text":"&quot;Add Contact\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13292,13305],"text":"&ldquo;Add Contact\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13292,13305],"text":"&#34;Add Contact\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13292,13305],"text":"&rdquo;Add Contact\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":258,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13292,13305],"text":"\"Add Contact&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13292,13305],"text":"\"Add Contact&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13292,13305],"text":"\"Add Contact&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13292,13305],"text":"\"Add Contact&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":262,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13592,13598],"text":"&quot;Save\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13592,13598],"text":"&ldquo;Save\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13592,13598],"text":"&#34;Save\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13592,13598],"text":"&rdquo;Save\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":262,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13592,13598],"text":"\"Save&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13592,13598],"text":"\"Save&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13592,13598],"text":"\"Save&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13592,13598],"text":"\"Save&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":300,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[15644,15814],"text":"\n                Leads are potential customers who haven&apos;t been qualified yet. They move through stages: New ΓåÆ Contacted ΓåÆ Qualified ΓåÆ Converted (or Lost).\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[15644,15814],"text":"\n                Leads are potential customers who haven&lsquo;t been qualified yet. They move through stages: New ΓåÆ Contacted ΓåÆ Qualified ΓåÆ Converted (or Lost).\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[15644,15814],"text":"\n                Leads are potential customers who haven&#39;t been qualified yet. They move through stages: New ΓåÆ Contacted ΓåÆ Qualified ΓåÆ Converted (or Lost).\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[15644,15814],"text":"\n                Leads are potential customers who haven&rsquo;t been qualified yet. They move through stages: New ΓåÆ Contacted ΓåÆ Qualified ΓåÆ Converted (or Lost).\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":306,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16092,16134],"text":" You&apos;ve reached out (call, email, meeting)"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16092,16134],"text":" You&lsquo;ve reached out (call, email, meeting)"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16092,16134],"text":" You&#39;ve reached out (call, email, meeting)"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16092,16134],"text":" You&rsquo;ve reached out (call, email, meeting)"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":324,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17138,17152],"text":"&quot;Convert Lead\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17138,17152],"text":"&ldquo;Convert Lead\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17138,17152],"text":"&#34;Convert Lead\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17138,17152],"text":"&rdquo;Convert Lead\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":324,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17138,17152],"text":"\"Convert Lead&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17138,17152],"text":"\"Convert Lead&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17138,17152],"text":"\"Convert Lead&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17138,17152],"text":"\"Convert Lead&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":328,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17355,17390],"text":"Account (if they&apos;re from a company)"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17355,17390],"text":"Account (if they&lsquo;re from a company)"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17355,17390],"text":"Account (if they&#39;re from a company)"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17355,17390],"text":"Account (if they&rsquo;re from a company)"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":329,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17420,17461],"text":"Opportunity (if there&apos;s a potential deal)"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17420,17461],"text":"Opportunity (if there&lsquo;s a potential deal)"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17420,17461],"text":"Opportunity (if there&#39;s a potential deal)"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17420,17461],"text":"Opportunity (if there&rsquo;s a potential deal)"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":361,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[18939,18952],"text":"&quot;Add Account\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[18939,18952],"text":"&ldquo;Add Account\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[18939,18952],"text":"&#34;Add Account\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[18939,18952],"text":"&rdquo;Add Account\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":361,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[18939,18952],"text":"\"Add Account&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[18939,18952],"text":"\"Add Account&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[18939,18952],"text":"\"Add Account&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[18939,18952],"text":"\"Add Account&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":364,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[19163,19169],"text":"&quot;Save\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[19163,19169],"text":"&ldquo;Save\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[19163,19169],"text":"&#34;Save\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[19163,19169],"text":"&rdquo;Save\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":364,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[19163,19169],"text":"\"Save&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[19163,19169],"text":"\"Save&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[19163,19169],"text":"\"Save&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[19163,19169],"text":"\"Save&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":414,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[21859,21878],"text":" Deal didn&apos;t happen"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[21859,21878],"text":" Deal didn&lsquo;t happen"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[21859,21878],"text":" Deal didn&#39;t happen"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[21859,21878],"text":" Deal didn&rsquo;t happen"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":425,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22487,22537],"text":" Deal title (e.g., &quot;ACME Corp - Website Redesign\")"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22487,22537],"text":" Deal title (e.g., &ldquo;ACME Corp - Website Redesign\")"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22487,22537],"text":" Deal title (e.g., &#34;ACME Corp - Website Redesign\")"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22487,22537],"text":" Deal title (e.g., &rdquo;ACME Corp - Website Redesign\")"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":425,"column":91,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22487,22537],"text":" Deal title (e.g., \"ACME Corp - Website Redesign&quot;)"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22487,22537],"text":" Deal title (e.g., \"ACME Corp - Website Redesign&ldquo;)"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22487,22537],"text":" Deal title (e.g., \"ACME Corp - Website Redesign&#34;)"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22487,22537],"text":" Deal title (e.g., \"ACME Corp - Website Redesign&rdquo;)"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":459,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24328,24342],"text":"&quot;Add Activity\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24328,24342],"text":"&ldquo;Add Activity\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24328,24342],"text":"&#34;Add Activity\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24328,24342],"text":"&rdquo;Add Activity\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":459,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24328,24342],"text":"\"Add Activity&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24328,24342],"text":"\"Add Activity&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24328,24342],"text":"\"Add Activity&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24328,24342],"text":"\"Add Activity&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":463,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24582,24588],"text":"&quot;Save\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24582,24588],"text":"&ldquo;Save\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24582,24588],"text":"&#34;Save\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24582,24588],"text":"&rdquo;Save\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":463,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24582,24588],"text":"\"Save&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24582,24588],"text":"\"Save&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24582,24588],"text":"\"Save&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24582,24588],"text":"\"Save&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":580,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30688,30762],"text":"\n                When creating an activity of type &quot;Email\":\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30688,30762],"text":"\n                When creating an activity of type &ldquo;Email\":\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30688,30762],"text":"\n                When creating an activity of type &#34;Email\":\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30688,30762],"text":"\n                When creating an activity of type &rdquo;Email\":\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":580,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30688,30762],"text":"\n                When creating an activity of type \"Email&quot;:\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30688,30762],"text":"\n                When creating an activity of type \"Email&ldquo;:\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30688,30762],"text":"\n                When creating an activity of type \"Email&#34;:\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30688,30762],"text":"\n                When creating an activity of type \"Email&rdquo;:\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":584,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30922,30940],"text":"&quot;Generate with AI\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30922,30940],"text":"&ldquo;Generate with AI\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30922,30940],"text":"&#34;Generate with AI\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30922,30940],"text":"&rdquo;Generate with AI\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":584,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30922,30940],"text":"\"Generate with AI&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30922,30940],"text":"\"Generate with AI&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30922,30940],"text":"\"Generate with AI&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30922,30940],"text":"\"Generate with AI&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  BookOpen, \n  LayoutDashboard, \n  Users, \n  Target, \n  Building2, \n  CheckSquare,\n  FileText,\n  TrendingUp,\n  Sparkles,\n  Shield,\n  Eye,\n  EyeOff\n} from \"lucide-react\";\n\nexport default function UserGuide() {\n  const [activeModule, setActiveModule] = useState('introduction');\n\n  const modules = [\n    { id: 'introduction', name: 'Introduction', icon: BookOpen },\n    { id: 'roles', name: 'Roles & Permissions', icon: Shield },\n    { id: 'dashboard', name: 'Dashboard', icon: LayoutDashboard },\n    { id: 'contacts', name: 'Contacts', icon: Users },\n    { id: 'leads', name: 'Leads', icon: Target },\n    { id: 'accounts', name: 'Accounts', icon: Building2 },\n    { id: 'opportunities', name: 'Opportunities', icon: TrendingUp },\n    { id: 'activities', name: 'Activities', icon: CheckSquare },\n    { id: 'reports', name: 'Reports', icon: FileText },\n    { id: 'ai', name: 'AI Features', icon: Sparkles }\n  ];\n\n  return (\n    <div className=\"max-w-7xl mx-auto\">\n      <Alert className=\"mb-6 bg-blue-900/30 border-blue-700/50\">\n        <BookOpen className=\"h-4 w-4 text-blue-400\" />\n        <AlertDescription className=\"text-blue-300\">\n          Welcome to the Ai-SHA CRM User Guide. This guide will help you understand and use all features of the CRM effectively.\n        </AlertDescription>\n      </Alert>\n\n      <Tabs value={activeModule} onValueChange={setActiveModule} className=\"space-y-6\">\n        <TabsList className=\"bg-slate-800 border border-slate-700 p-1 flex-wrap h-auto gap-1\">\n          {modules.map(module => (\n            <TabsTrigger\n              key={module.id}\n              value={module.id}\n              className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white text-slate-300 flex items-center gap-2\"\n            >\n              <module.icon className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">{module.name}</span>\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        {/* Introduction */}\n        <TabsContent value=\"introduction\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <BookOpen className=\"w-5 h-5 text-blue-400\" />\n                Getting Started with Ai-SHA CRM\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert prose-slate max-w-none space-y-4 text-slate-300\">\n              <p>\n                Ai-SHA CRM is a comprehensive customer relationship management platform designed to help you manage leads, contacts, accounts, opportunities, and activities efficiently.\n              </p>\n              \n              <h3 className=\"text-slate-100 text-lg font-semibold\">What You Can Do</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li>Track and nurture leads through your sales pipeline</li>\n                <li>Manage contact information and communication history</li>\n                <li>Organize accounts (companies) and their associated contacts</li>\n                <li>Monitor sales opportunities and forecast revenue</li>\n                <li>Schedule and log activities (calls, meetings, tasks)</li>\n                <li>Generate reports and insights with AI assistance</li>\n                <li>Collaborate with your team on deals and accounts</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">Navigation</h3>\n              <p>\n                Use the sidebar menu to access different sections of the CRM. The modules you can see depend on your role and permissions (see the \"Roles & Permissions\" tab).\n              </p>\n\n              <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4 mt-4\">\n                <p className=\"text-sm text-slate-400\">\n                  <strong className=\"text-slate-200\">Tip:</strong> Use the search bar at the top to quickly find contacts, leads, or accounts. Press <code className=\"bg-slate-700 px-1.5 py-0.5 rounded\">Ctrl+K</code> or <code className=\"bg-slate-700 px-1.5 py-0.5 rounded\">Cmd+K</code> to open the command palette for quick navigation.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Roles & Permissions */}\n        <TabsContent value=\"roles\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <Shield className=\"w-5 h-5 text-purple-400\" />\n                Understanding Roles and Permissions\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert prose-slate max-w-none space-y-4 text-slate-300\">\n              <p>\n                Your access to CRM data depends on two things: your Base44 platform role and your CRM employee role.\n              </p>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 not-prose\">\n                <div className=\"bg-blue-900/20 border border-blue-700/50 rounded-lg p-4\">\n                  <h4 className=\"text-blue-300 font-semibold flex items-center gap-2 mb-3\">\n                    <Shield className=\"w-4 h-4\" />\n                    Platform Role\n                  </h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>\n                      <strong className=\"text-blue-200\">Admin:</strong>\n                      <p className=\"text-slate-400 mt-1\">System administrators. Full access to all data, settings, and tenants.</p>\n                    </div>\n                    <div className=\"mt-3\">\n                      <strong className=\"text-blue-200\">User:</strong>\n                      <p className=\"text-slate-400 mt-1\">Standard login role. Your CRM access is determined by your employee role (see right).</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-green-900/20 border border-green-700/50 rounded-lg p-4\">\n                  <h4 className=\"text-green-300 font-semibold flex items-center gap-2 mb-3\">\n                    <Users className=\"w-4 h-4\" />\n                    Employee Role\n                  </h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>\n                      <strong className=\"text-green-200\">Manager:</strong>\n                      <p className=\"text-slate-400 mt-1 flex items-start gap-1\">\n                        <Eye className=\"w-3 h-3 mt-0.5 flex-shrink-0 text-green-400\" />\n                        Can see <strong>all</strong> CRM data within your client/tenant. Full visibility of team activity.\n                      </p>\n                    </div>\n                    <div className=\"mt-3\">\n                      <strong className=\"text-green-200\">Employee:</strong>\n                      <p className=\"text-slate-400 mt-1 flex items-start gap-1\">\n                        <EyeOff className=\"w-3 h-3 mt-0.5 flex-shrink-0 text-orange-400\" />\n                        Can only see records you created or that are assigned to you. Individual view.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">What This Means For You</h3>\n              <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4 space-y-3\">\n                <div>\n                  <h4 className=\"text-green-400 font-medium flex items-center gap-2\">\n                    <Eye className=\"w-4 h-4\" />\n                    If you're a Manager:\n                  </h4>\n                  <ul className=\"list-disc list-inside mt-2 space-y-1 text-sm text-slate-400 ml-4\">\n                    <li>You'll see all leads, contacts, accounts, and opportunities for your organization</li>\n                    <li>You can view and edit records created by any team member</li>\n                    <li>Dashboard stats show team-wide performance</li>\n                    <li>You can reassign records to other team members</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h4 className=\"text-orange-400 font-medium flex items-center gap-2\">\n                    <EyeOff className=\"w-4 h-4\" />\n                    If you're an Employee:\n                  </h4>\n                  <ul className=\"list-disc list-inside mt-2 space-y-1 text-sm text-slate-400 ml-4\">\n                    <li>You'll only see leads, contacts, and accounts assigned to you</li>\n                    <li>You can create new records (they'll be auto-assigned to you)</li>\n                    <li>Dashboard stats reflect only your personal activity</li>\n                    <li>You cannot see or edit other team members' records</li>\n                  </ul>\n                </div>\n              </div>\n\n              <div className=\"bg-blue-900/20 border border-blue-700/50 rounded-lg p-3 mt-4\">\n                <p className=\"text-blue-300 text-sm\">\n                  <strong>Not sure what role you have?</strong> Check your profile settings or ask your system administrator.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Dashboard */}\n        <TabsContent value=\"dashboard\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <LayoutDashboard className=\"w-5 h-5 text-cyan-400\" />\n                Using the Dashboard\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert prose-slate max-w-none space-y-4 text-slate-300\">\n              <p>\n                The Dashboard provides an at-a-glance view of your CRM performance. The data you see depends on your role:\n              </p>\n              \n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Managers:</strong> See team-wide metrics and pipeline health</li>\n                <li><strong>Employees:</strong> See your personal performance and assigned tasks</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold\">Key Metrics</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Total Contacts:</strong> Number of active contacts in your CRM</li>\n                <li><strong>New Leads (30d):</strong> Leads created in the last 30 days</li>\n                <li><strong>Active Opportunities:</strong> Open deals in your pipeline</li>\n                <li><strong>Pipeline Value:</strong> Total estimated revenue from open opportunities</li>\n                <li><strong>Activities Logged (30d):</strong> Calls, meetings, and tasks completed recently</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">Widgets</h3>\n              <p>\n                Click <strong>\"Customize Dashboard\"</strong> to show or hide widgets:\n              </p>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Sales Pipeline:</strong> Opportunities by stage with values</li>\n                <li><strong>Lead Sources:</strong> Where your leads are coming from</li>\n                <li><strong>Top Accounts:</strong> Your highest-revenue clients</li>\n                <li><strong>Lead Age Report:</strong> Leads that need follow-up attention</li>\n                <li><strong>Recent Activities:</strong> Latest team interactions</li>\n              </ul>\n\n              <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4 mt-4\">\n                <p className=\"text-sm text-slate-400\">\n                  <strong className=\"text-slate-200\">Pro Tip:</strong> Use the timeframe filters (Week, Month, Quarter, Year) at the top to adjust the data range shown.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Contacts */}\n        <TabsContent value=\"contacts\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <Users className=\"w-5 h-5 text-indigo-400\" />\n                Managing Contacts\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert prose-slate max-w-none space-y-4 text-slate-300\">\n              <p>\n                Contacts represent individual people you interact with. They can be associated with Accounts (companies).\n              </p>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold\">Creating a Contact</h3>\n              <ol className=\"list-decimal list-inside space-y-1\">\n                <li>Navigate to <strong>Contacts</strong> in the sidebar</li>\n                <li>Click <strong>\"Add Contact\"</strong></li>\n                <li>Fill in required fields (First Name, Last Name)</li>\n                <li>Optionally add email, phone, company, job title, and notes</li>\n                <li>Assign to a team member (or leave assigned to yourself)</li>\n                <li>Click <strong>\"Save\"</strong></li>\n              </ol>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">What You Can See</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Managers:</strong> All contacts for your organization</li>\n                <li><strong>Employees:</strong> Only contacts you created or that are assigned to you</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">Contact Actions</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Edit:</strong> Update contact information</li>\n                <li><strong>View Details:</strong> See full contact profile, notes, and activity history</li>\n                <li><strong>Log Activity:</strong> Record calls, meetings, or emails with this contact</li>\n                <li><strong>Convert to Lead:</strong> Promote contact to an active lead for qualification</li>\n                <li><strong>Link to Account:</strong> Associate with a company record</li>\n              </ul>\n\n              <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4 mt-4\">\n                <p className=\"text-sm text-slate-400\">\n                  <strong className=\"text-slate-200\">Best Practice:</strong> Always fill in as much detail as possible when creating contacts. Rich data helps AI features provide better insights and recommendations.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Leads */}\n        <TabsContent value=\"leads\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <Target className=\"w-5 h-5 text-yellow-400\" />\n                Working with Leads\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert prose-slate max-w-none space-y-4 text-slate-300\">\n              <p>\n                Leads are potential customers who haven't been qualified yet. They move through stages: New ΓåÆ Contacted ΓåÆ Qualified ΓåÆ Converted (or Lost).\n              </p>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold\">Lead Lifecycle</h3>\n              <ol className=\"list-decimal list-inside space-y-1\">\n                <li><strong>New:</strong> Just entered your system</li>\n                <li><strong>Contacted:</strong> You've reached out (call, email, meeting)</li>\n                <li><strong>Qualified:</strong> They meet your buying criteria and are interested</li>\n                <li><strong>Converted:</strong> Turned into a Contact, Account, or Opportunity</li>\n                <li><strong>Lost:</strong> Not a fit or not interested</li>\n              </ol>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">What You Can See</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Managers:</strong> All leads for your organization</li>\n                <li><strong>Employees:</strong> Only leads assigned to you</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">Converting Leads</h3>\n              <p>\n                When a lead is qualified and ready to become a customer:\n              </p>\n              <ol className=\"list-decimal list-inside space-y-1\">\n                <li>Open the lead detail panel</li>\n                <li>Click <strong>\"Convert Lead\"</strong></li>\n                <li>Choose what to create:\n                  <ul className=\"list-disc list-inside ml-6 mt-1\">\n                    <li>Contact (always created)</li>\n                    <li>Account (if they're from a company)</li>\n                    <li>Opportunity (if there's a potential deal)</li>\n                  </ul>\n                </li>\n                <li>Review and confirm the conversion</li>\n              </ol>\n\n              <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4 mt-4\">\n                <p className=\"text-sm text-slate-400\">\n                  <strong className=\"text-slate-200\">Tip:</strong> Use the Lead Age Report widget on your dashboard to identify leads that need immediate follow-up attention.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Accounts */}\n        <TabsContent value=\"accounts\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <Building2 className=\"w-5 h-5 text-purple-400\" />\n                Managing Accounts\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert prose-slate max-w-none space-y-4 text-slate-300\">\n              <p>\n                Accounts represent companies or organizations. Multiple Contacts can be associated with a single Account.\n              </p>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold\">Creating an Account</h3>\n              <ol className=\"list-decimal list-inside space-y-1\">\n                <li>Navigate to <strong>Accounts</strong> in the sidebar</li>\n                <li>Click <strong>\"Add Account\"</strong></li>\n                <li>Fill in company details (Name, Industry, Website, Phone)</li>\n                <li>Add revenue and employee count for better segmentation</li>\n                <li>Click <strong>\"Save\"</strong></li>\n              </ol>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">What You Can See</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Managers:</strong> All accounts for your organization</li>\n                <li><strong>Employees:</strong> Only accounts you created or are assigned to you</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">Account Relationships</h3>\n              <p>\n                When viewing an Account:\n              </p>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li>See all associated Contacts working at that company</li>\n                <li>View related Opportunities (active deals)</li>\n                <li>Track Activities and interactions with the account</li>\n                <li>Monitor account health and engagement</li>\n              </ul>\n\n              <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4 mt-4\">\n                <p className=\"text-sm text-slate-400\">\n                  <strong className=\"text-slate-200\">Best Practice:</strong> When creating Contacts, always link them to their Account. This gives you a complete view of your relationship with each company.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Opportunities */}\n        <TabsContent value=\"opportunities\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5 text-green-400\" />\n                Tracking Opportunities\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert prose-slate max-w-none space-y-4 text-slate-300\">\n              <p>\n                Opportunities represent potential deals with a specific dollar value and close date. They move through your sales pipeline.\n              </p>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold\">Pipeline Stages</h3>\n              <ol className=\"list-decimal list-inside space-y-1\">\n                <li><strong>Prospecting:</strong> Initial contact and discovery</li>\n                <li><strong>Qualification:</strong> Confirming fit and budget</li>\n                <li><strong>Proposal:</strong> Presenting your solution</li>\n                <li><strong>Negotiation:</strong> Discussing terms and pricing</li>\n                <li><strong>Closed Won:</strong> Deal is won! ≡ƒÄë</li>\n                <li><strong>Closed Lost:</strong> Deal didn't happen</li>\n              </ol>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">What You Can See</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Managers:</strong> All opportunities for your organization</li>\n                <li><strong>Employees:</strong> Only opportunities you created or are assigned to you</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">Key Opportunity Fields</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Name:</strong> Deal title (e.g., \"ACME Corp - Website Redesign\")</li>\n                <li><strong>Amount:</strong> Expected revenue in USD</li>\n                <li><strong>Close Date:</strong> When you expect to close the deal</li>\n                <li><strong>Probability:</strong> Likelihood of winning (0-100%)</li>\n                <li><strong>Account:</strong> Which company this deal is with</li>\n                <li><strong>Contact:</strong> Primary decision-maker</li>\n              </ul>\n\n              <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4 mt-4\">\n                <p className=\"text-sm text-slate-400\">\n                  <strong className=\"text-slate-200\">Tip:</strong> Use the Kanban board view (click the board icon) to drag and drop opportunities between stages for quick updates.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Activities */}\n        <TabsContent value=\"activities\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <CheckSquare className=\"w-5 h-5 text-orange-400\" />\n                Logging Activities\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert prose-slate max-w-none space-y-4 text-slate-300\">\n              <p>\n                Activities track your interactions and tasks. Types include Calls, Emails, Meetings, Tasks, and Notes.\n              </p>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold\">Creating an Activity</h3>\n              <ol className=\"list-decimal list-inside space-y-1\">\n                <li>Navigate to <strong>Activities</strong> in the sidebar</li>\n                <li>Click <strong>\"Add Activity\"</strong></li>\n                <li>Choose activity type and fill in details</li>\n                <li>Link to a Contact, Lead, Account, or Opportunity</li>\n                <li>Set due date and priority</li>\n                <li>Click <strong>\"Save\"</strong></li>\n              </ol>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">Activity Types</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Call:</strong> Phone conversations with prospects or customers</li>\n                <li><strong>Email:</strong> Email communications (can be automated)</li>\n                <li><strong>Meeting:</strong> In-person or virtual meetings</li>\n                <li><strong>Task:</strong> To-dos and action items</li>\n                <li><strong>Note:</strong> General observations or reminders</li>\n                <li><strong>Demo:</strong> Product demonstrations</li>\n                <li><strong>Proposal:</strong> Sending proposals or quotes</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">Activity Statuses</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Scheduled:</strong> Planned for the future</li>\n                <li><strong>In Progress:</strong> Currently working on it</li>\n                <li><strong>Completed:</strong> Done</li>\n                <li><strong>Overdue:</strong> Passed the due date</li>\n                <li><strong>Cancelled:</strong> No longer needed</li>\n              </ul>\n\n              <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4 mt-4\">\n                <p className=\"text-sm text-slate-400\">\n                  <strong className=\"text-slate-200\">Best Practice:</strong> Log activities immediately after completing them. This keeps your CRM data fresh and provides accurate reporting.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Reports */}\n        <TabsContent value=\"reports\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <FileText className=\"w-5 h-5 text-blue-400\" />\n                Generating Reports\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert prose-slate max-w-none space-y-4 text-slate-300\">\n              <p>\n                The Reports section provides detailed analytics and insights into your sales performance, pipeline health, and team productivity.\n              </p>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold\">Available Reports</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Sales Analytics:</strong> Revenue trends, win rates, and pipeline value</li>\n                <li><strong>Lead Analytics:</strong> Lead conversion rates and sources</li>\n                <li><strong>Productivity Analytics:</strong> Activity volume and completion rates</li>\n                <li><strong>Forecasting:</strong> Predicted revenue based on pipeline</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">What You Can See</h3>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>Managers:</strong> Team-wide reports and individual performance comparisons</li>\n                <li><strong>Employees:</strong> Personal performance reports only</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">Exporting Reports</h3>\n              <p>\n                Most reports can be exported:\n              </p>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li><strong>CSV:</strong> For Excel or Google Sheets analysis</li>\n                <li><strong>PDF:</strong> For printing or sharing with stakeholders</li>\n              </ul>\n\n              <div className=\"bg-slate-900/50 border border-slate-700 rounded-lg p-4 mt-4\">\n                <p className=\"text-sm text-slate-400\">\n                  <strong className=\"text-slate-200\">Tip:</strong> Use date range filters to analyze specific time periods (month, quarter, year). This helps identify trends and seasonal patterns.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* AI Features */}\n        <TabsContent value=\"ai\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <Sparkles className=\"w-5 h-5 text-yellow-400\" />\n                AI-Powered Features\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"prose prose-invert prose-slate max-w-none space-y-4 text-slate-300\">\n              <p>\n                Ai-SHA CRM includes several AI-powered features to help you work smarter and faster.\n              </p>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold\">AI Assistant (Avatar)</h3>\n              <p>\n                Click the AI avatar in the bottom-right corner to:\n              </p>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li>Ask questions about your CRM data</li>\n                <li>Get summaries of contacts, leads, or opportunities</li>\n                <li>Research companies or contacts using web search</li>\n                <li>Draft emails to prospects</li>\n                <li>Navigate the CRM with voice commands</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">Lead Scoring</h3>\n              <p>\n                The AI automatically scores leads (0-100) based on:\n              </p>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li>Company size and industry</li>\n                <li>Engagement history (opens, clicks, replies)</li>\n                <li>Job title and decision-making authority</li>\n                <li>Lead source quality</li>\n              </ul>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">AI Email Composer</h3>\n              <p>\n                When creating an activity of type \"Email\":\n              </p>\n              <ol className=\"list-decimal list-inside space-y-1\">\n                <li>Describe what you want to say</li>\n                <li>Click <strong>\"Generate with AI\"</strong></li>\n                <li>Review and edit the drafted email</li>\n                <li>Send or save as an activity</li>\n              </ol>\n\n              <h3 className=\"text-slate-100 text-lg font-semibold mt-6\">Document Processing</h3>\n              <p>\n                Upload business cards or documents, and AI will:\n              </p>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li>Extract contact information</li>\n                <li>Create Contact and Account records automatically</li>\n                <li>Parse receipts for cash flow tracking</li>\n              </ul>\n\n              <div className=\"bg-yellow-900/20 border border-yellow-700/50 rounded-lg p-4 mt-4\">\n                <p className=\"text-yellow-300 text-sm\">\n                  <strong>AI Limitations:</strong> AI features are powerful but not perfect. Always review AI-generated content before sending to customers, and verify extracted data for accuracy.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\UserSelector.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { User } from \"@/api/entities\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { UserIcon, AlertCircle } from \"lucide-react\";\n\nexport default function UserSelector({ value, onValueChange, placeholder = \"Assign to user...\" }) {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadUsers = async () => {\n      setLoading(true);\n      try {\n        // First get current user\n        const current = await User.me();\n        setCurrentUser(current);\n        \n        // Try to get users list, but handle permission errors gracefully\n        try {\n          const usersData = await User.list();\n          setUsers(usersData);\n          setError(null);\n        } catch (userListError) {\n          console.log(\"Cannot access full user list (permissions), showing current user only:\", userListError);\n          // If can't access full list, just show current user\n          setUsers([current]);\n          setError(\"Limited user access\");\n        }\n      } catch (error) {\n        console.error(\"Error loading users:\", error);\n        setError(\"Failed to load users\");\n        setUsers([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUsers();\n  }, []);\n\n  if (loading) {\n    return (\n      <Select disabled>\n        <SelectTrigger>\n          <SelectValue placeholder=\"Loading users...\" />\n        </SelectTrigger>\n      </Select>\n    );\n  }\n\n  if (error && users.length === 0) {\n    return (\n      <Select disabled>\n        <SelectTrigger className=\"text-red-500\">\n          <AlertCircle className=\"w-4 h-4 mr-2\" />\n          <SelectValue placeholder=\"Error loading users\" />\n        </SelectTrigger>\n      </Select>\n    );\n  }\n\n  return (\n    <Select value={value} onValueChange={onValueChange}>\n      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\">\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n        {users.map(user => (\n          <SelectItem key={user.email} value={user.email} className=\"text-slate-200 hover:bg-slate-700\">\n            <div className=\"flex items-center gap-2\">\n              <UserIcon className=\"w-4 h-4 text-slate-400\" />\n              <span>{user.full_name || user.email}</span>\n              {user.email === currentUser?.email && (\n                <span className=\"text-xs text-blue-400\">(You)</span>\n              )}\n            </div>\n          </SelectItem>\n        ))}\n        {error && (\n          <SelectItem disabled value=\"error\" className=\"text-slate-400\">\n            <div className=\"flex items-center gap-2 text-amber-400\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <span className=\"text-xs\">Limited access - showing available users only</span>\n            </div>\n          </SelectItem>\n        )}\n      </SelectContent>\n    </Select>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\WebhookExamples.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,19],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":140,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5335,5388],"text":" Your organization&apos;s name for conversational context."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5335,5388],"text":" Your organization&lsquo;s name for conversational context."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5335,5388],"text":" Your organization&#39;s name for conversational context."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5335,5388],"text":" Your organization&rsquo;s name for conversational context."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Webhook, Phone, AlertCircle } from \"lucide-react\";\n\n// Updated Schema\nconst AI_AGENT_PAYLOAD_SCHEMA = {\n  type: \"object\",\n  properties: {\n    phone_number: {\n      type: \"string\",\n      description: \"The phone number to call (exactly as stored in CRM)\",\n      example: \"954-397-3449\"\n    },\n    contact_name: {\n      type: \"string\",\n      description: \"Full name of the contact being called\",\n      example: \"John Smith\"\n    },\n    company_name: {\n      type: \"string\",\n      description: \"Company name associated with the contact\",\n      example: \"Acme Corp\",\n      default: \"Unknown Company\"\n    },\n    tenant_name: {\n      type: \"string\",\n      description: \"Name of the client/organization making the call\",\n      example: \"ABC Sales Company\"\n    },\n    client_id: {\n      type: \"string\",\n      description: \"Internal Client ID for tracking\",\n      example: \"68b0cba04f934c88fe26afab\"\n    },\n    call_objective: {\n      type: \"string\",\n      description: \"The raw objective entered by the user\",\n      example: \"Follow up on the quote sent last week and confirm meeting for Friday.\"\n    },\n    ai_prompt: {\n      type: \"string\",\n      description: \"Structured prompt for the AI agent with full context and instructions\",\n      example: \"You are an AI assistant calling on behalf of ABC Sales Company...\"\n    },\n    assignee_name: {\n      type: \"string\",\n      description: \"Name of the CRM user who initiated the call (for context)\",\n      example: \"Sarah Johnson\",\n      default: \"\"\n    },\n    initiated_at: {\n      type: \"string\",\n      format: \"date-time\",\n      description: \"ISO timestamp when the call was initiated\",\n      example: \"2025-01-15T14:30:00.000Z\"\n    }\n  },\n  required: [\"phone_number\", \"contact_name\", \"tenant_name\", \"client_id\", \"call_objective\", \"ai_prompt\"],\n  additionalProperties: false\n};\n\n// Updated Sample Payload\nconst SAMPLE_AI_AGENT_PAYLOAD = {\n  phone_number: \"954-397-3449\",\n  contact_name: \"Andrew Day\",\n  company_name: \"Day Construction LLC\",\n  tenant_name: \"ABC Sales Company\",\n  client_id: \"68b0cba04f934c88fe26afab\",\n  call_objective: \"Follow up on our solar panel installation quote from last week. Confirm if they're ready to schedule the installation and answer any remaining questions about the warranty.\",\n  ai_prompt: `You are an AI assistant calling on behalf of ABC Sales Company. \nYou are representing Sarah Johnson, a team member from ABC Sales Company.\n\nContact Information:\n- Name: Andrew Day\n- Company: Day Construction LLC\n- Phone: 954-397-3449\n\nCall Objective: Follow up on our solar panel installation quote from last week. Confirm if they're ready to schedule the installation and answer any remaining questions about the warranty.\n\nPlease be professional, courteous, and focused on achieving the stated objective. Introduce yourself as an AI assistant calling on behalf of ABC Sales Company and Sarah Johnson.`,\n  assignee_name: \"Sarah Johnson\",\n  initiated_at: \"2025-01-15T14:30:00.000Z\"\n};\n\nexport default function WebhookExamples() {\n  const otherWebhooks = [\n    {\n      event: \"contact.created\",\n      payload: {\n        id: \"c4a7b9e0-1d2f-4c8a-9e0a-1b2c3d4e5f6a\",\n        created_date: \"2024-07-29T10:00:00Z\",\n        first_name: \"Jane\",\n        last_name: \"Doe\",\n        email: \"jane.doe@example.com\",\n        phone: \"555-123-4567\",\n        account_id: \"a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d\",\n        tenant_id: \"68b0cba04f934c88fe26afab\"\n      }\n    },\n    // Add more examples here if needed\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Phone className=\"w-5 h-5 text-blue-600\" />\n            AI Agent Call Initiation Payload\n          </CardTitle>\n          <CardDescription>\n            Schema and example of the payload sent to your AI agent when initiating calls from the CRM. This is a POST request to your configured `call_agent_url`.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <h4 className=\"font-semibold mb-2\">JSON Schema:</h4>\n            <pre className=\"bg-slate-100 p-4 rounded-lg text-xs overflow-x-auto\">\n              {JSON.stringify(AI_AGENT_PAYLOAD_SCHEMA, null, 2)}\n            </pre>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-2\">Sample Payload:</h4>\n            <pre className=\"bg-slate-100 p-4 rounded-lg text-xs overflow-x-auto\">\n              {JSON.stringify(SAMPLE_AI_AGENT_PAYLOAD, null, 2)}\n            </pre>\n          </div>\n\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Key Fields:</strong>\n              <ul className=\"mt-2 list-disc list-inside text-sm space-y-1\">\n                <li><strong>call_objective:</strong> This is the raw objective entered by the user.</li>\n                <li><strong>ai_prompt:</strong> A structured prompt generated from the objective and other context.</li>\n                <li><strong>client_id:</strong> The unique identifier for your organization.</li>\n                <li><strong>tenant_name:</strong> Your organization's name for conversational context.</li>\n                <li><strong>assignee_name:</strong> The CRM user who initiated the call.</li>\n              </ul>\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Webhook className=\"w-5 h-5 text-slate-600\" />\n            Standard Webhook Payloads\n          </CardTitle>\n          <CardDescription>\n            Examples of standard CRM event payloads sent to your n8n workflows.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {otherWebhooks.map(hook => (\n            <div key={hook.event}>\n              <h4 className=\"font-semibold mb-2\">Event: <code className=\"bg-slate-100 text-slate-800 px-2 py-1 rounded\">{hook.event}</code></h4>\n              <pre className=\"bg-slate-100 p-4 rounded-lg text-xs overflow-x-auto\">\n                {JSON.stringify(hook.payload, null, 2)}\n              </pre>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\countriesData.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\employeeScopeUtils.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\loggerUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\phoneCountriesData.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\statesData.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\tenantContext.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":173,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":173,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { isValidId } from './tenantUtils';\n\nwindow.__fixPrototype = (obj) => {\n  if (!obj || typeof obj !== 'object') return obj;\n  if (typeof obj.hasOwnProperty !== 'function') {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  return obj;\n};\n\nif (typeof Object.prototype.hasOwnProperty !== 'function') {\n  const goodProto = {}.__proto__;\n  Object.setPrototypeOf(Object.prototype, goodProto);\n}\n\nconst sanitizeObject = (obj) => {\n  if (!obj) return obj;\n  try {\n    return JSON.parse(JSON.stringify(obj));\n  } catch (e) {\n    console.error(\"Sanitization failed:\", e);\n    return null;\n  }\n};\n\n// Removed unused `safeGet` function to resolve the lint error.\n\nconst TenantContext = createContext(null);\n\n// Import logger functionality\nlet loggerInstance = null;\n\n// Helper to log without causing circular dependencies\nfunction logTenantEvent(level, message, metadata) {\n  if (!loggerInstance) {\n    // Lazy load logger to avoid circular deps\n    import('./Logger').then(module => {\n      // Assuming module.useLogger is the actual logger instance/object\n      // that has info, warn, error methods.\n      if (module && typeof module.useLogger === 'object' &&\n          typeof module.useLogger.info === 'function' &&\n          typeof module.useLogger.warn === 'function' &&\n          typeof module.useLogger.error === 'function') {\n        loggerInstance = module.useLogger;\n      } else {\n        console.warn('[TenantContext] Logger module did not export expected methods via `useLogger`. Falling back to console only.');\n      }\n    }).catch(e => {\n      console.error('[TenantContext] Failed to load logger module:', e);\n    });\n  }\n  \n  // Also keep console logging - FIX: ensure we always have a valid method\n  const consoleMethodMap = {\n    'INFO': 'info',\n    'WARNING': 'warn',\n    'ERROR': 'error',\n    'DEBUG': 'debug'\n  };\n  \n  const methodName = consoleMethodMap[level] || 'log';\n  const consoleMethod = console[methodName];\n  \n  // Only call if the method exists\n  if (typeof consoleMethod === 'function') {\n    consoleMethod.call(console, `[TenantContext] ${message}`, metadata);\n  } else {\n    // Fallback to console.log\n    console.log(`[TenantContext] [${level}] ${message}`, metadata);\n  }\n\n  // If external logger methods are loaded and available, use them too.\n  // Note: This might not run on the very first log if loggerInstance is still loading.\n  if (loggerInstance && typeof loggerInstance[level.toLowerCase()] === 'function') {\n    // Ensure metadata is stringifiable if the logger expects it.\n    const logMetadata = sanitizeObject(metadata); \n    loggerInstance[level.toLowerCase()](`[TenantContext] ${message}`, logMetadata);\n  }\n}\n\nexport const TenantProvider = ({ children }) => {\n  const [selectedTenantId, setSelectedTenantIdState] = useState(null);\n  const [lastSyncedTenantId, setLastSyncedTenantId] = useState(null);\n  const persistenceAttempted = useRef(false);\n\n  const setSelectedTenantId = useCallback((newTenantId) => {\n    const sanitized = newTenantId === null || newTenantId === undefined || newTenantId === '' \n      ? null \n      : String(newTenantId);\n\n    if (sanitized === selectedTenantId) {\n      return;\n    }\n\n    logTenantEvent('INFO', 'Tenant selection changed', {\n      from: selectedTenantId,\n      to: sanitized\n    });\n\n    setSelectedTenantIdState(sanitized);\n\n    try {\n      if (sanitized === null) {\n        localStorage.removeItem('selected_tenant_id');\n      } else {\n        localStorage.setItem('selected_tenant_id', sanitized);\n      }\n    } catch (error) {\n      logTenantEvent('ERROR', 'Failed to persist tenant selection', {\n        error: error.message\n      });\n    }\n  }, [selectedTenantId]); // Dependency on selectedTenantId ensures we compare against the *current* state\n\n  useEffect(() => {\n    if (persistenceAttempted.current) return;\n    persistenceAttempted.current = true;\n\n    try {\n      const saved = localStorage.getItem('selected_tenant_id');\n      if (saved && saved !== 'null' && saved !== 'undefined') {\n        const sanitized = String(saved);\n        // Use shared validation function\n        if (isValidId(sanitized)) {\n          setSelectedTenantIdState(sanitized);\n          logTenantEvent('INFO', 'Restored tenant from localStorage', {\n            tenantId: sanitized\n          });\n        } else {\n          logTenantEvent('WARNING', 'Invalid tenant ID format in localStorage', {\n            savedValue: saved\n          });\n          // Reset to a default tenant ID\n          const defaultTenantId = '68f84f58558dd2a4d4bdd545';\n          setSelectedTenantIdState(defaultTenantId);\n          localStorage.setItem('selected_tenant_id', defaultTenantId);\n          logTenantEvent('INFO', 'Reset tenant ID to default', {\n            tenantId: defaultTenantId\n          });\n        }\n      }\n    } catch (error) {\n      logTenantEvent('ERROR', 'Failed to load tenant from storage', {\n        error: error.message\n      });\n    }\n  }, []); // Empty dependency array means this runs once on mount\n\n  useEffect(() => {\n    if (selectedTenantId && selectedTenantId !== lastSyncedTenantId) {\n      setLastSyncedTenantId(selectedTenantId);\n      \n      logTenantEvent('INFO', 'Tenant context synchronized', {\n        tenantId: selectedTenantId\n      });\n\n      window.dispatchEvent(\n        new CustomEvent('tenant-changed', {\n          detail: { tenantId: selectedTenantId }\n        })\n      );\n    }\n  }, [selectedTenantId, lastSyncedTenantId]); // Dependencies: selectedTenantId and lastSyncedTenantId\n\n  return (\n    <TenantContext.Provider value={{ selectedTenantId, setSelectedTenantId }}>\n      {children}\n    </TenantContext.Provider>\n  );\n};\n\nexport const useTenant = () => {\n  const context = useContext(TenantContext);\n  if (!context) {\n    logTenantEvent('WARNING', 'useTenant called outside TenantProvider', {});\n    // Return a default, non-functional object to prevent crashes\n    return { selectedTenantId: null, setSelectedTenantId: () => {} };\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\tenantUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\timezoneUtils.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":229,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":229,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { format } from 'date-fns';\n\n// On Save (convert local time + offset -> UTC) \nexport function localToUtc(dateString, timeString, offsetMinutes) {\n  // Validate inputs\n  if (!dateString || !timeString || typeof dateString !== 'string' || typeof timeString !== 'string') {\n    throw new Error('dateString and timeString are required and must be strings');\n  }\n\n  // Calculate offset string from offsetMinutes\n  // getTimezoneOffset returns positive for zones behind UTC (e.g., America), so the sign in the ISO string is negative.\n  // Our offsetMinutes are defined such that positive means 'behind UTC' (e.g., EDT is +240 minutes from UTC),\n  // so for ISO format, we need to negate it to get the UTC offset.\n  // For example, if offsetMinutes is 240 (EDT, 4 hours behind UTC), the ISO offset should be -04:00.\n  // So, we use a negative sign if offsetMinutes is positive, and a positive sign if offsetMinutes is negative (e.g., for times ahead of UTC).\n  const sign = offsetMinutes > 0 ? '-' : '+';\n  const absOffset = Math.abs(offsetMinutes);\n  const hours = Math.floor(absOffset / 60).toString().padStart(2, '0');\n  const minutes = (absOffset % 60).toString().padStart(2, '0');\n  const offsetString = `${sign}${hours}:${minutes}`;\n\n  // Construct a full ISO 8601 string with the correct offset\n  const isoStringWithOffset = `${dateString}T${timeString}:00${offsetString}`;\n  \n  // Let the Date object parse this unambiguous string\n  const finalDate = new Date(isoStringWithOffset);\n\n  // Check for invalid date\n  if (isNaN(finalDate.getTime())) {\n    throw new Error(`Failed to parse constructed ISO string: ${isoStringWithOffset}`);\n  }\n  \n  // No console.log here, as it's not in the new implementation outline.\n  // The original console.log:\n  // console.log('localToUtc conversion:', {\n  //   input: `${dateString} ${timeString}`,\n  //   offsetMinutes,\n  //   timezone: offsetMinutes === 240 ? 'EDT' : offsetMinutes === 300 ? 'EST' : 'Other',\n  //   local_datetime: localDate.toISOString(),\n  //   utc_datetime: utcDate.toISOString(),\n  //   localTime: `${hour}:${minute.toString().padStart(2, '0')}`,\n  //   utcTime: utcDate.toISOString().substr(11, 5)\n  // });\n  \n  // Return the standard UTC ISO string (e.g., \"2025-09-24T17:30:00.000Z\")\n  return finalDate.toISOString();\n}\n\n// On Display (convert stored UTC time -> user local) \nexport function utcToLocal(utcString, offsetMinutes) {\n  // Validate inputs\n  if (!utcString) {\n    throw new Error('utcString is required');\n  }\n  \n  const utcDate = new Date(utcString);\n  \n  // Check if date is valid\n  if (isNaN(utcDate.getTime())) {\n    throw new Error(`Invalid UTC string: ${utcString}`);\n  }\n  \n  // Convert UTC to local by subtracting the offset\n  const localTimeValue = utcDate.getTime() - (offsetMinutes * 60 * 1000);\n  const tempDate = new Date(localTimeValue);\n  \n  // Create a new date object using UTC methods to prevent the browser from re-applying its own timezone offset.\n  // This effectively \"tricks\" the formatting library into displaying the correct local time.\n  const displayDate = new Date(\n    tempDate.getUTCFullYear(),\n    tempDate.getUTCMonth(),\n    tempDate.getUTCDate(),\n    tempDate.getUTCHours(),\n    tempDate.getUTCMinutes(),\n    tempDate.getUTCSeconds()\n  );\n\n  return displayDate;\n}\n\n// Get timezone offset in minutes for a given timezone\nexport function getCurrentTimezoneOffset(timezone) {\n  // Define timezone mappings with DST handling\n  const timezoneMap = {\n    'America/New_York': () => {\n      const now = new Date();\n      const jan = new Date(now.getFullYear(), 0, 1);\n      const jul = new Date(now.getFullYear(), 6, 1);\n      const stdOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n      const isDST = now.getTimezoneOffset() < stdOffset;\n      return isDST ? 240 : 300; // EDT: 240, EST: 300\n    },\n    'America/Chicago': () => {\n      const now = new Date();\n      const jan = new Date(now.getFullYear(), 0, 1);\n      const jul = new Date(now.getFullYear(), 6, 1);\n      const stdOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n      const isDST = now.getTimezoneOffset() < stdOffset;\n      return isDST ? 300 : 360; // CDT: 300, CST: 360\n    },\n    'America/Denver': () => {\n      const now = new Date();\n      const jan = new Date(now.getFullYear(), 0, 1);\n      const jul = new Date(now.getFullYear(), 6, 1);\n      const stdOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n      const isDST = now.getTimezoneOffset() < stdOffset;\n      return isDST ? 360 : 420; // MDT: 360, MST: 420\n    },\n    'America/Los_Angeles': () => {\n      const now = new Date();\n      const jan = new Date(now.getFullYear(), 0, 1);\n      const jul = new Date(now.getFullYear(), 6, 1);\n      const stdOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n      const isDST = now.getTimezoneOffset() < stdOffset;\n      return isDST ? 420 : 480; // PDT: 420, PST: 480\n    },\n    'UTC': () => 0,\n    'Europe/London': () => {\n      const now = new Date();\n      const jan = new Date(now.getFullYear(), 0, 1);\n      const jul = new Date(now.getFullYear(), 6, 1);\n      const stdOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n      const isDST = now.getTimezoneOffset() < stdOffset;\n      return isDST ? -60 : 0; // BST: -60, GMT: 0\n    },\n    'Europe/Paris': () => {\n      const now = new Date();\n      const jan = new Date(now.getFullYear(), 0, 1);\n      const jul = new Date(now.getFullYear(), 6, 1);\n      const stdOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n      const isDST = now.getTimezoneOffset() < stdOffset;\n      return isDST ? -120 : -60; // CEST: -120, CET: -60\n    },\n    'Asia/Tokyo': () => -540,\n    'Asia/Shanghai': () => -480,\n    'Australia/Sydney': () => {\n      const now = new Date();\n      const jan = new Date(now.getFullYear(), 0, 1);\n      const jul = new Date(now.getFullYear(), 6, 1);\n      const stdOffset = Math.min(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n      const isDST = now.getTimezoneOffset() > stdOffset;\n      return isDST ? -660 : -600; // AEDT: -660, AEST: -600\n    }\n  };\n\n  if (!timezone || !timezoneMap[timezone]) {\n    // Fallback to system timezone\n    return new Date().getTimezoneOffset();\n  }\n\n  return timezoneMap[timezone]();\n}\n\n// Validate date string format\nfunction isValidDateString(dateStr) {\n  if (!dateStr || typeof dateStr !== 'string') return false;\n  // Allow YYYY-MM-DD or full ISO string by just checking the start\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}/;\n  return dateRegex.test(dateStr);\n}\n\n// Validate time string format\nfunction isValidTimeString(timeStr) {\n  if (!timeStr || typeof timeStr !== 'string') return false;\n  const timeRegex = /^\\d{2}:\\d{2}$/;\n  return timeRegex.test(timeStr);\n}\n\n// Helper function to format activity date/time for display\nexport function formatActivityDateTime(activity, offsetMinutes = null) {\n  // Early validation (quiet)\n  if (!activity) {\n    return 'Not set';\n  }\n\n  if (!activity.due_date) {\n    return 'Not set';\n  }\n\n  // FIXED: Handle full ISO strings by taking only the date part\n  const datePart = activity.due_date.split('T')[0];\n\n  // Validate date format\n  if (!isValidDateString(datePart)) {\n    return 'Invalid date';\n  }\n\n  try {\n    // If no offset provided, try to get from system/user settings\n    if (offsetMinutes === null) {\n      offsetMinutes = new Date().getTimezoneOffset();\n    }\n\n    if (activity.due_time) {\n      // Validate time format\n      if (!isValidTimeString(activity.due_time)) {\n        return 'Invalid time';\n      }\n\n      // Create UTC datetime string from stored values\n      const utcString = `${datePart}T${activity.due_time}:00.000Z`;\n      \n      // Convert to local time using user's timezone offset\n      const displayDate = utcToLocal(utcString, offsetMinutes);\n      \n      return format(displayDate, 'PPP p'); // e.g., \"September 26, 2025 at 5:00 AM\"\n    } else {\n      // Date only - treat as local date without time conversion\n      const dateParts = datePart.split('-');\n      const year = parseInt(dateParts[0]);\n      const month = parseInt(dateParts[1]) - 1; // JS months are 0-indexed\n      const day = parseInt(dateParts[2]);\n      \n      // Validate parsed date parts\n      if (isNaN(year) || isNaN(month) || isNaN(day)) {\n        return 'Invalid date';\n      }\n      \n      const dateOnly = new Date(year, month, day);\n      \n      // Check if constructed date is valid\n      if (isNaN(dateOnly.getTime())) {\n        return 'Invalid date';\n      }\n      \n      return format(dateOnly, 'PPP'); // e.g., \"September 26, 2025\"\n    }\n  } catch (_error) {\n    return 'Invalid date/time';\n  }\n}\n\n// Get timezone display name with offset\nexport function getTimezoneDisplayName(timezone) {\n  const offsetMinutes = getCurrentTimezoneOffset(timezone);\n  const hours = Math.abs(Math.floor(offsetMinutes / 60));\n  const minutes = Math.abs(offsetMinutes % 60);\n  const sign = offsetMinutes <= 0 ? '+' : '-';\n  const offsetString = `UTC${sign}${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  \n  const displayNames = {\n    'America/New_York': 'Eastern Time',\n    'America/Chicago': 'Central Time', \n    'America/Denver': 'Mountain Time',\n    'America/Los_Angeles': 'Pacific Time',\n    'UTC': 'Coordinated Universal Time',\n    'Europe/London': 'Greenwich Mean Time',\n    'Europe/Paris': 'Central European Time',\n    'Asia/Tokyo': 'Japan Standard Time',\n    'Asia/Shanghai': 'China Standard Time',\n    'Australia/Sydney': 'Australian Eastern Time'\n  };\n  \n  return `${displayNames[timezone] || timezone} (${offsetString})`;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\useBatchedData.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\useEditEntity.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\useLazyLoad.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\useOptimizedQuery.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\useTagFilter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\shared\\userLoader.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\testing\\TestRunner.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"AlertTriangle"},"fix":{"range":[328,346],"text":""},"desc":"Remove unused variable 'AlertTriangle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'FileText' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"FileText"},"fix":{"range":[355,367],"text":""},"desc":"Remove unused variable 'FileText'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Play, \n  CheckCircle2, \n  XCircle, \n  AlertTriangle,\n  Clock,\n  FileText\n} from \"lucide-react\";\n\nexport default function TestRunner({ testSuites }) {\n  const [results, setResults] = useState([]);\n  const [running, setRunning] = useState(false);\n  const [currentTest, setCurrentTest] = useState(null);\n\n  const runTests = async () => {\n    setRunning(true);\n    setResults([]);\n    \n    const allResults = [];\n\n    for (const suite of testSuites) {\n      for (const test of suite.tests) {\n        setCurrentTest(`${suite.name} - ${test.name}`);\n        \n        const startTime = Date.now();\n        let result = {\n          suite: suite.name,\n          test: test.name,\n          status: 'running',\n          duration: 0,\n          error: null\n        };\n\n        try {\n          await test.fn();\n          result.status = 'passed';\n          result.duration = Date.now() - startTime;\n        } catch (error) {\n          result.status = 'failed';\n          result.duration = Date.now() - startTime;\n          result.error = error.message;\n        }\n\n        allResults.push(result);\n        setResults([...allResults]);\n      }\n    }\n\n    setCurrentTest(null);\n    setRunning(false);\n  };\n\n  const totalTests = testSuites.reduce((sum, suite) => sum + suite.tests.length, 0);\n  const passedTests = results.filter(r => r.status === 'passed').length;\n  const failedTests = results.filter(r => r.status === 'failed').length;\n  const passRate = totalTests > 0 ? ((passedTests / results.length) * 100).toFixed(1) : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100 flex items-center justify-between\">\n            <span>Test Suite Runner</span>\n            <Button \n              onClick={runTests} \n              disabled={running}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              {running ? (\n                <>\n                  <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Running...\n                </>\n              ) : (\n                <>\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  Run All Tests\n                </>\n              )}\n            </Button>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {running && currentTest && (\n            <Alert className=\"mb-4 bg-blue-900/30 border-blue-700\">\n              <Clock className=\"h-4 w-4 animate-spin\" />\n              <AlertDescription className=\"text-blue-300\">\n                Running: {currentTest}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {results.length > 0 && (\n            <div className=\"grid grid-cols-4 gap-4 mb-6\">\n              <Card className=\"bg-slate-700 border-slate-600\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-sm text-slate-400\">Total Tests</div>\n                  <div className=\"text-2xl font-bold text-slate-100\">{results.length}</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-green-900/30 border-green-700\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-sm text-green-400\">Passed</div>\n                  <div className=\"text-2xl font-bold text-green-300\">{passedTests}</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-red-900/30 border-red-700\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-sm text-red-400\">Failed</div>\n                  <div className=\"text-2xl font-bold text-red-300\">{failedTests}</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-blue-900/30 border-blue-700\">\n                <CardContent className=\"p-4\">\n                  <div className=\"text-sm text-blue-400\">Pass Rate</div>\n                  <div className=\"text-2xl font-bold text-blue-300\">{passRate}%</div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          <div className=\"space-y-2\">\n            {results.map((result, index) => (\n              <div \n                key={index}\n                className={`p-4 rounded-lg border ${\n                  result.status === 'passed' \n                    ? 'bg-green-900/20 border-green-700' \n                    : 'bg-red-900/20 border-red-700'\n                }`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    {result.status === 'passed' ? (\n                      <CheckCircle2 className=\"w-5 h-5 text-green-400\" />\n                    ) : (\n                      <XCircle className=\"w-5 h-5 text-red-400\" />\n                    )}\n                    <div>\n                      <div className=\"font-medium text-slate-200\">\n                        {result.suite} - {result.test}\n                      </div>\n                      {result.error && (\n                        <div className=\"text-sm text-red-400 mt-1\">\n                          Error: {result.error}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-slate-400\">\n                    {result.duration}ms\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\testing\\apiHealthMonitorTests.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\testing\\crudTests.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\testing\\dataIntegrityTests.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\testing\\employeeScopeTests.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\testing\\errorLoggerTests.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'createSpy' is defined but never used.","line":1,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"createSpy"},"fix":{"range":[15,26],"text":""},"desc":"Remove unused variable 'createSpy'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { assert, createSpy } from './testUtils';\nimport { createError, handleApiError } from '../shared/ErrorLogger';\n\nexport const errorLoggerTests = {\n  name: 'Error Logger',\n  tests: [\n    {\n      name: 'createError should create error with correct structure',\n      fn: async () => {\n        const error = createError('TestComponent', 'Test error message', {\n          status: 500,\n          severity: 'critical',\n          actionable: 'Test action'\n        });\n\n        assert.equal(error.component, 'TestComponent');\n        assert.equal(error.message, 'Test error message');\n        assert.equal(error.status, 500);\n        assert.equal(error.severity, 'critical');\n        assert.equal(error.actionable, 'Test action');\n      }\n    },\n    {\n      name: 'createError should default severity to error',\n      fn: async () => {\n        const error = createError('TestComponent', 'Test error');\n        assert.equal(error.severity, 'error');\n      }\n    },\n    {\n      name: 'handleApiError should map 403 status correctly',\n      fn: async () => {\n        const apiError = {\n          response: { status: 403 },\n          message: 'Forbidden'\n        };\n\n        const error = handleApiError('TestComponent', apiError);\n\n        assert.equal(error.component, 'TestComponent');\n        assert.equal(error.message, 'Permission denied');\n        assert.equal(error.severity, 'warning');\n        assert.equal(error.status, 403);\n        assert.truthy(error.actionable);\n      }\n    },\n    {\n      name: 'handleApiError should map 429 status correctly',\n      fn: async () => {\n        const apiError = {\n          response: { status: 429 }\n        };\n\n        const error = handleApiError('TestComponent', apiError);\n\n        assert.equal(error.message, 'Rate limit exceeded');\n        assert.equal(error.severity, 'warning');\n      }\n    },\n    {\n      name: 'handleApiError should map 500 status correctly',\n      fn: async () => {\n        const apiError = {\n          response: { status: 500 }\n        };\n\n        const error = handleApiError('TestComponent', apiError);\n\n        assert.equal(error.message, 'Server error');\n        assert.equal(error.severity, 'critical');\n      }\n    },\n    {\n      name: 'handleApiError should map 502 status correctly',\n      fn: async () => {\n        const apiError = {\n          response: { status: 502 }\n        };\n\n        const error = handleApiError('TestComponent', apiError);\n\n        assert.equal(error.message, 'Backend unavailable');\n        assert.equal(error.severity, 'critical');\n      }\n    },\n    {\n      name: 'handleApiError should map 504 status correctly',\n      fn: async () => {\n        const apiError = {\n          response: { status: 504 }\n        };\n\n        const error = handleApiError('TestComponent', apiError);\n\n        assert.equal(error.message, 'Request timeout');\n        assert.equal(error.severity, 'warning');\n      }\n    },\n    {\n      name: 'handleApiError should handle unknown status codes',\n      fn: async () => {\n        const apiError = {\n          response: { status: 418 },\n          message: 'I am a teapot'\n        };\n\n        const error = handleApiError('TestComponent', apiError);\n\n        assert.equal(error.message, 'I am a teapot');\n        assert.equal(error.severity, 'error');\n      }\n    },\n    {\n      name: 'handleApiError should handle errors without response',\n      fn: async () => {\n        const apiError = {\n          message: 'Network error'\n        };\n\n        const error = handleApiError('TestComponent', apiError);\n\n        assert.equal(error.message, 'Network error');\n        assert.exists(error.actionable);\n      }\n    }\n  ]\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\testing\\formValidationTests.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\testing\\testUtils.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\testing\\utilityFunctionTests.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\accordion.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\alert-dialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\alert.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\aspect-ratio.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\avatar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\badge.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,23],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":34,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":34,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  ...props\n}) {\n  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\breadcrumb.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\button.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":48,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":48,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n  return (\n    (<Comp\n      className={cn(buttonVariants({ variant, size, className }))}\n      ref={ref}\n      {...props} />)\n  );\n})\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\calendar.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,23],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}) {\n  return (\n    (<DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props} />)\n  );\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\card.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\carousel.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\chart.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\checkbox.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\collapsible.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\command.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\context-menu.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\dialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\drawer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\dropdown-menu.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\form.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":126,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":126,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { Controller, FormProvider, useFormContext } from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\nconst FormFieldContext = React.createContext({})\n\nconst FormField = (\n  {\n    ...props\n  }\n) => {\n  return (\n    (<FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>)\n  );\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\nconst FormItemContext = React.createContext({})\n\nconst FormItem = React.forwardRef(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    (<FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>)\n  );\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    (<Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props} />)\n  );\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    (<Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props} />)\n  );\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    (<p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props} />)\n  );\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    (<p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}>\n      {body}\n    </p>)\n  );\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\hover-card.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\input-otp.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\input.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\label.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\menubar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\navigation-menu.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":95,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":95,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}>\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props} />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}>\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\" />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props} />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props} />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}>\n    <div\n      className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\pagination.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\popover.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\progress.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\radio-group.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\resizable.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\scroll-area.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\select.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\separator.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\sheet.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\sidebar.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":618,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":618,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\nconst SidebarContext = React.createContext(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef((\n  {\n    defaultOpen = true,\n    open: openProp,\n    onOpenChange: setOpenProp,\n    className,\n    style,\n    children,\n    ...props\n  },\n  ref\n) => {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback((value) => {\n    const openState = typeof value === \"function\" ? value(open) : value\n    if (setOpenProp) {\n      setOpenProp(openState)\n    } else {\n      _setOpen(openState)\n    }\n\n    // This sets the cookie to keep the sidebar state.\n    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n  }, [setOpenProp, open])\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile\n      ? setOpenMobile((open) => !open)\n      : setOpen((open) => !open);\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo(() => ({\n    state,\n    open,\n    setOpen,\n    isMobile,\n    openMobile,\n    setOpenMobile,\n    toggleSidebar,\n  }), [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar])\n\n  return (\n    (<SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style\n            }\n          }\n          className={cn(\n            \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n            className\n          )}\n          ref={ref}\n          {...props}>\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>)\n  );\n})\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef((\n  {\n    side = \"left\",\n    variant = \"sidebar\",\n    collapsible = \"offcanvas\",\n    className,\n    children,\n    ...props\n  },\n  ref\n) => {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      (<div\n        className={cn(\n          \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n          className\n        )}\n        ref={ref}\n        {...props}>\n        {children}\n      </div>)\n    );\n  }\n\n  if (isMobile) {\n    return (\n      (<Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE\n            }\n          }\n          side={side}>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>)\n    );\n  }\n\n  return (\n    (<div\n      ref={ref}\n      className=\"group peer hidden text-sidebar-foreground md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}>\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        className={cn(\n          \"relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n        )} />\n      <div\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}>\n        <div\n          data-sidebar=\"sidebar\"\n          className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\">\n          {children}\n        </div>\n      </div>\n    </div>)\n  );\n})\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    (<Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}>\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>)\n  );\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    (<button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props} />)\n  );\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props} />)\n  );\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props} />)\n  );\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props} />)\n  );\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    (<Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    (<Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props} />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props} />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props} />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef((\n  {\n    asChild = false,\n    isActive = false,\n    variant = \"default\",\n    size = \"default\",\n    tooltip,\n    className,\n    ...props\n  },\n  ref\n) => {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props} />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    (<Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip} />\n    </Tooltip>)\n  );\n})\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    (<Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props} />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, [])\n\n  return (\n    (<div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}>\n      {showIcon && (\n        <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width\n          }\n        } />\n    </div>)\n  );\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props} />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef(\n  ({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"a\"\n\n    return (\n      (<Comp\n        ref={ref}\n        data-sidebar=\"menu-sub-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(\n          \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n          \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n          size === \"sm\" && \"text-xs\",\n          size === \"md\" && \"text-sm\",\n          \"group-data-[collapsible=icon]:hidden\",\n          className\n        )}\n        {...props} />)\n    );\n  }\n)\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\skeleton.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\slider.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\sonner.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\switch.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\table.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\tabs.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\textarea.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\toast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\toaster.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\toggle-group.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\toggle.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":38,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":38,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props} />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\tooltip.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\ui\\use-toast.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'createContext' is defined but never used.","line":2,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"createContext"},"fix":{"range":[67,82],"text":""},"desc":"Remove unused variable 'createContext'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'useContext' is defined but never used.","line":2,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"useContext"},"fix":{"range":[82,94],"text":""},"desc":"Remove unused variable 'useContext'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'clearFromRemoveQueue' is assigned a value but never used.","line":39,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"clearFromRemoveQueue"},"fix":{"range":[775,950],"text":""},"desc":"Remove unused variable 'clearFromRemoveQueue'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Inspired by react-hot-toast library\nimport { useState, useEffect, createContext, useContext } from \"react\";\n\nconst TOAST_LIMIT = 20;\nconst TOAST_REMOVE_DELAY = 1000000;\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n};\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE;\n  return count.toString();\n}\n\nconst toastTimeouts = new Map();\n\nconst addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: actionTypes.REMOVE_TOAST,\n      toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nconst clearFromRemoveQueue = (toastId) => {\n  const timeout = toastTimeouts.get(toastId);\n  if (timeout) {\n    clearTimeout(timeout);\n    toastTimeouts.delete(toastId);\n  }\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TOAST:\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case actionTypes.UPDATE_TOAST:\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case actionTypes.DISMISS_TOAST: {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case actionTypes.REMOVE_TOAST:\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners = [];\n\nlet memoryState = { toasts: [] };\n\nfunction dispatch(action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\nfunction toast({ ...props }) {\n  const id = genId();\n\n  const update = (props) =>\n    dispatch({\n      type: actionTypes.UPDATE_TOAST,\n      toast: { ...props, id },\n    });\n\n  const dismiss = () =>\n    dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id });\n\n  dispatch({\n    type: actionTypes.ADD_TOAST,\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = useState(memoryState);\n\n  useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),\n  };\n}\n\nexport { useToast, toast }; ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\utils\\apiTimer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\workflows\\NodeLibrary.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Webhook' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"Webhook"},"fix":{"range":[36,44],"text":""},"desc":"Remove unused variable 'Webhook'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[114,158],"text":""},"desc":"Remove unused variable 'Card'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Webhook, Search, Edit, Mail, Plus, GitBranch, UserPlus } from 'lucide-react';\nimport { Card } from '@/components/ui/card';\n\nconst nodeTypes = [\n  {\n    type: 'find_lead',\n    label: 'Find Lead',\n    icon: Search,\n    description: 'Find a lead by email or other criteria',\n    color: 'blue'\n  },\n  {\n    type: 'create_lead',\n    label: 'Create Lead',\n    icon: UserPlus,\n    description: 'Create a new lead record',\n    color: 'green'\n  },\n  {\n    type: 'update_lead',\n    label: 'Update Lead',\n    icon: Edit,\n    description: 'Update lead fields',\n    color: 'emerald'\n  },\n  {\n    type: 'condition',\n    label: 'Condition',\n    icon: GitBranch,\n    description: 'Branch based on a condition',\n    color: 'yellow'\n  },\n  {\n    type: 'find_contact',\n    label: 'Find Contact',\n    icon: Search,\n    description: 'Find a contact by email',\n    color: 'cyan'\n  },\n  {\n    type: 'update_contact',\n    label: 'Update Contact',\n    icon: Edit,\n    description: 'Update contact fields',\n    color: 'teal'\n  },\n  {\n    type: 'send_email',\n    label: 'Send Email',\n    icon: Mail,\n    description: 'Send an email',\n    color: 'purple'\n  }\n];\n\nexport default function NodeLibrary({ onAddNode }) {\n  return (\n    <div className=\"space-y-2\">\n      <h3 className=\"text-sm font-semibold text-slate-300 mb-3\">Add Step</h3>\n      {nodeTypes.map((nodeType) => {\n        const Icon = nodeType.icon;\n        return (\n          <button\n            key={nodeType.type}\n            onClick={() => onAddNode(nodeType.type)}\n            className=\"w-full p-3 rounded-lg bg-slate-800 hover:bg-slate-700 border border-slate-700 transition-colors text-left\"\n          >\n            <div className=\"flex items-start gap-2\">\n              <div className={`p-2 rounded bg-${nodeType.color}-600/20`}>\n                <Icon className={`w-4 h-4 text-${nodeType.color}-400`} />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-slate-200\">{nodeType.label}</p>\n                <p className=\"text-xs text-slate-500\">{nodeType.description}</p>\n              </div>\n              <Plus className=\"w-4 h-4 text-slate-400\" />\n            </div>\n          </button>\n        );\n      })}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\workflows\\WorkflowBuilder.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Textarea' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"Textarea"},"fix":{"range":[149,201],"text":""},"desc":"Remove unused variable 'Textarea'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Edit' is defined but never used.","line":10,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[459,465],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Play' is defined but never used.","line":10,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"Play"},"fix":{"range":[471,477],"text":""},"desc":"Remove unused variable 'Play'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":692,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[28969,29054],"text":"\n                This checks the field from the previous node&apos;s output\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[28969,29054],"text":"\n                This checks the field from the previous node&lsquo;s output\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[28969,29054],"text":"\n                This checks the field from the previous node&#39;s output\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[28969,29054],"text":"\n                This checks the field from the previous node&rsquo;s output\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Workflow } from '@/api/entities';\nimport { User } from '@/api/entities';\nimport { Webhook, Search, Edit, Save, Play, Plus, X, Copy, Check, RefreshCw } from 'lucide-react';\nimport WorkflowCanvas from './WorkflowCanvas';\nimport NodeLibrary from './NodeLibrary';\nimport { toast } from 'sonner';\nimport { WorkflowExecution } from '@/api/entities';\n\nexport default function WorkflowBuilder({ workflow, onSave, onCancel }) {\n  const [name, setName] = useState(workflow?.name || '');\n  const [description, setDescription] = useState(workflow?.description || '');\n  const [nodes, setNodes] = useState(workflow?.nodes || []);\n  const [connections, setConnections] = useState(workflow?.connections || []);\n  const [user, setUser] = useState(null);\n  const [saving, setSaving] = useState(false);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [testPayload, setTestPayload] = useState(null);\n  const [showPayload, setShowPayload] = useState(false);\n  const [copied, setCopied] = useState(false);\n  // Removed [loadingPayload, setLoadingPayload]\n\n  // Added new states for execution history viewer\n  const [waitingForWebhook, setWaitingForWebhook] = useState(false);\n  const [recentExecutions, setRecentExecutions] = useState([]);\n  const [showExecutions, setShowExecutions] = useState(false);\n  const [loadingExecutions, setLoadingExecutions] = useState(false);\n\n  useEffect(() => {\n    User.me().then(setUser);\n  }, []);\n\n  useEffect(() => {\n    if (!workflow && nodes.length === 0) {\n      const initialNode = {\n        id: 'trigger-1',\n        type: 'webhook_trigger',\n        config: {},\n        position: { x: 50, y: 50 }\n      };\n      setNodes([initialNode]);\n      // Make the initial webhook trigger node selectable\n      setSelectedNodeId(initialNode.id);\n    }\n  }, [workflow, nodes.length]);\n\n  const handleAddNode = (nodeType) => {\n    const newNode = {\n      id: `node-${Date.now()}`,\n      type: nodeType,\n      config: {},\n      position: { x: 300, y: nodes.length * 100 + 50 }\n    };\n    setNodes([...nodes, newNode]);\n    setSelectedNodeId(newNode.id);\n  };\n\n  const handleUpdateNode = (nodeId, updates) => {\n    setNodes(nodes.map(node =>\n      node.id === nodeId ? { ...node, ...updates } : node\n    ));\n  };\n\n  const updateNodeConfig = (nodeId, newConfig) => {\n    setNodes(nodes.map(node =>\n      node.id === nodeId ? { ...node, config: newConfig } : node\n    ));\n  };\n\n  const handleDeleteNode = (nodeId) => {\n    setNodes(nodes.filter(node => node.id !== nodeId));\n    setConnections(connections.filter(conn => conn.from !== nodeId && conn.to !== nodeId));\n    if (selectedNodeId === nodeId) {\n      setSelectedNodeId(null);\n    }\n  };\n\n  const handleConnect = (fromId, toId) => {\n    const filteredConnections = connections.filter(conn => conn.from !== fromId);\n    setConnections([...filteredConnections, { from: fromId, to: toId }]);\n  };\n\n  const handleSelectNode = (nodeId) => {\n    setSelectedNodeId(nodeId);\n  };\n\n  const handleCopyWebhookUrl = () => {\n    const webhookUrl = workflow?.webhook_url || `https://base44.app/api/apps/${user?.app_id}/functions/executeWorkflow?workflow_id=PENDING`;\n    navigator.clipboard.writeText(webhookUrl);\n    setCopied(true);\n    toast.success('Webhook URL copied to clipboard');\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  // New function: handleUseSamplePayload (replaces part of old handleTestPayload logic)\n  const handleUseSamplePayload = () => {\n    const genericSamplePayload = {\n      email: \"test@example.com\",\n      first_name: \"John\",\n      last_name: \"Doe\",\n      status: \"qualified\",\n      score: 85,\n      company: \"Test Corp\",\n      phone: \"+1234567890\",\n      notes: \"Sample lead from webhook\",\n      source: \"website\",\n      next_action: \"Schedule demo\"\n    };\n    setTestPayload(genericSamplePayload);\n    setShowPayload(true);\n    toast.info('Loaded a generic sample payload.');\n    setShowExecutions(false); // Hide executions list if showing\n  };\n\n  const handleWaitForWebhook = async () => {\n    if (!workflow?.id) {\n      toast.error('Please save the workflow first to wait for a real webhook.');\n      return;\n    }\n\n    setWaitingForWebhook(true);\n    setShowPayload(false);\n    setShowExecutions(false);\n\n    try {\n      toast.info('Waiting for a new webhook to be sent (max 30 seconds)...');\n      \n      // Get the current latest execution timestamp\n      const currentExecutions = await WorkflowExecution.filter(\n        { workflow_id: workflow.id },\n        '-created_date',\n        1\n      );\n      const lastTimestamp = currentExecutions[0]?.created_date || new Date(0).toISOString();\n\n      // Poll for new executions\n      let attempts = 0;\n      const maxAttempts = 15; // 30 seconds (15 attempts * 2 seconds)\n      \n      const checkForNew = async () => {\n        attempts++;\n        \n        const latestExecutions = await WorkflowExecution.filter(\n          { workflow_id: workflow.id },\n          '-created_date',\n          1\n        );\n\n        if (latestExecutions && latestExecutions.length > 0) {\n          const latest = latestExecutions[0];\n          \n          // Check if this is a new execution\n          if (latest.created_date > lastTimestamp && latest.trigger_data) {\n            setTestPayload(latest.trigger_data);\n            setShowPayload(true);\n            setWaitingForWebhook(false);\n            toast.success('Webhook received! Payload loaded successfully.');\n            return true;\n          }\n        }\n\n        if (attempts >= maxAttempts) {\n          setWaitingForWebhook(false);\n          toast.warn('No new webhook detected. Try sending a test webhook to the URL above, or use a sample payload.');\n          handleUseSamplePayload(); // Fallback to sample\n          return true;\n        }\n\n        // Continue polling\n        setTimeout(checkForNew, 2000);\n        return false;\n      };\n\n      // Start polling\n      checkForNew();\n\n    } catch (error) {\n      console.error('Error waiting for webhook:', error);\n      toast.error('Failed to wait for webhook. Using sample payload instead.');\n      handleUseSamplePayload(); // Fallback to sample on error\n      setWaitingForWebhook(false);\n    }\n  };\n\n  // New function: loadRecentExecutions (from outline)\n  const loadRecentExecutions = async () => {\n    if (!workflow?.id) {\n      toast.error('Please save the workflow first');\n      return;\n    }\n\n    setLoadingExecutions(true);\n    setShowPayload(false); // Hide current payload when loading history\n    try {\n      const executions = await WorkflowExecution.filter(\n        { workflow_id: workflow.id },\n        '-created_date', // Order by created_date descending\n        10 // Limit to 10\n      );\n      setRecentExecutions(executions || []);\n      setShowExecutions(true); // Show the executions list\n      if (executions && executions.length > 0) {\n        toast.success('Recent webhook executions loaded.');\n      } else {\n        toast.info('No recent webhook executions found for this workflow.');\n      }\n    } catch (error) {\n      console.error('Error loading executions:', error);\n      toast.error('Failed to load webhook history');\n    } finally {\n      setLoadingExecutions(false);\n    }\n  };\n\n  // New function: handleUseExecutionPayload (from outline)\n  const handleUseExecutionPayload = (execution) => {\n    if (execution.trigger_data) {\n      setTestPayload(execution.trigger_data);\n      setShowPayload(true);\n      toast.success('Payload loaded from execution');\n      setShowExecutions(false); // Hide executions list once a payload is selected\n    } else {\n      toast.error('No payload data in this execution');\n    }\n  };\n\n  const getAvailableFields = () => {\n    if (!testPayload) return [];\n    return Object.keys(testPayload);\n  };\n\n  const renderNodeConfig = (node) => {\n    if (!node) return null;\n\n    switch (node.type) {\n      case 'webhook_trigger':\n        return (\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-slate-200\">Webhook Trigger</Label>\n              <p className=\"text-sm text-slate-400 mt-1\">\n                This workflow executes when the webhook receives data\n              </p>\n            </div>\n\n            {workflow?.webhook_url && (\n              <div>\n                <Label className=\"text-slate-200\">Webhook URL</Label>\n                <div className=\"flex gap-2 mt-1\">\n                  <Input\n                    value={workflow.webhook_url}\n                    readOnly\n                    className=\"bg-slate-800 border-slate-700 text-slate-300 text-xs\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={handleCopyWebhookUrl}\n                    className=\"bg-slate-800 border-slate-700\"\n                  >\n                    {copied ? <Check className=\"w-4 h-4 text-green-400\" /> : <Copy className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Button\n                variant=\"outline\"\n                onClick={handleWaitForWebhook}\n                disabled={waitingForWebhook || !workflow?.id}\n                className=\"w-full bg-purple-600 hover:bg-purple-700 text-white border-purple-500\"\n              >\n                {waitingForWebhook ? (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Waiting for Webhook...\n                  </>\n                ) : (\n                  <>\n                    <Webhook className=\"w-4 h-4 mr-2\" />\n                    Wait for Real Webhook\n                  </>\n                )}\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                onClick={loadRecentExecutions}\n                disabled={loadingExecutions || !workflow?.id}\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white border-blue-500\"\n              >\n                {loadingExecutions ? (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Loading...\n                  </>\n                ) : (\n                  <>\n                    <Search className=\"w-4 h-4 mr-2\" />\n                    View Webhook History\n                  </>\n                )}\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                onClick={handleUseSamplePayload}\n                className=\"w-full bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Use Sample Payload\n              </Button>\n            </div>\n\n            {!workflow?.id && (\n              <p className=\"text-xs text-amber-400\">\n                ≡ƒÆí Save the workflow first to capture real webhook data\n              </p>\n            )}\n\n            {/* Recent Executions List */}\n            {showExecutions && (\n              <div className=\"border border-slate-700 rounded-lg p-3\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <Label className=\"text-slate-200\">Recent Webhook Executions</Label>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setShowExecutions(false)}\n                    className=\"text-slate-400 hover:text-slate-200\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-2 max-h-80 overflow-y-auto pr-1\">\n                  {recentExecutions.length === 0 ? (\n                    <p className=\"text-sm text-slate-500 text-center py-4\">\n                      No webhook executions yet. Send a test webhook to see it here.\n                    </p>\n                  ) : (\n                    recentExecutions.map((execution) => (\n                      <div\n                        key={execution.id}\n                        className=\"bg-slate-800 border border-slate-700 rounded p-3 hover:bg-slate-750 cursor-pointer transition-colors duration-200\"\n                        onClick={() => handleUseExecutionPayload(execution)}\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className={`text-xs px-2 py-1 rounded ${\n                            execution.status === 'success' ? 'bg-green-900/30 text-green-400' :\n                            execution.status === 'failed' ? 'bg-red-900/30 text-red-400' :\n                            'bg-blue-900/30 text-blue-400'\n                          }`}>\n                            {execution.status}\n                          </span>\n                          <span className=\"text-xs text-slate-500\">\n                            {new Date(execution.created_date).toLocaleString()}\n                          </span>\n                        </div>\n                        \n                        {execution.trigger_data && (\n                          <div className=\"bg-slate-950 rounded p-2 mt-2\">\n                            <pre className=\"text-xs text-slate-400 overflow-x-auto whitespace-pre-wrap break-all\">\n                              {JSON.stringify(execution.trigger_data, null, 2).substring(0, 200)}\n                              {JSON.stringify(execution.trigger_data, null, 2).length > 200 && '...'}\n                            </pre>\n                          </div>\n                        )}\n                        \n                        <p className=\"text-xs text-slate-500 mt-2\">\n                          Click to use this payload\n                        </p>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Current Payload Display */}\n            {showPayload && testPayload && (\n              <div>\n                <Label className=\"text-slate-200\">Current Payload</Label>\n                <div className=\"mt-2 p-3 bg-slate-950 border border-slate-700 rounded max-h-60 overflow-y-auto\">\n                  <pre className=\"text-xs text-slate-300\">\n                    {JSON.stringify(testPayload, null, 2)}\n                  </pre>\n                </div>\n                <p className=\"text-xs text-slate-500 mt-2\">\n                  Available fields: {Object.keys(testPayload).join(', ')}\n                </p>\n              </div>\n            )}\n          </div>\n        );\n\n      case 'find_lead':\n        return (\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-slate-200\">Search Field</Label>\n              <Select\n                value={node.config?.search_field || 'email'}\n                onValueChange={(value) => {\n                  updateNodeConfig(node.id, { ...node.config, search_field: value });\n                }}\n              >\n                <SelectTrigger className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"email\">Email</SelectItem>\n                  <SelectItem value=\"phone\">Phone</SelectItem>\n                  <SelectItem value=\"unique_id\">Unique ID</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label className=\"text-slate-200\">Search Value</Label>\n              {getAvailableFields().length > 0 ? (\n                <Select\n                  value={node.config?.search_value || ''}\n                  onValueChange={(value) => {\n                    updateNodeConfig(node.id, { ...node.config, search_value: `{{${value}}}` });\n                  }}\n                >\n                  <SelectTrigger className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                    <SelectValue placeholder=\"Select webhook field\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-slate-700\">\n                    {getAvailableFields().map(field => (\n                      <SelectItem key={field} value={field}>\n                        {'{{'}{field}{'}}'}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              ) : (\n                <Input\n                  value={node.config?.search_value || '{{email}}'}\n                  onChange={(e) => {\n                    updateNodeConfig(node.id, { ...node.config, search_value: e.target.value });\n                  }}\n                  placeholder=\"{{email}}\"\n                  className=\"bg-slate-800 border-slate-700 text-slate-200\"\n                />\n              )}\n              <p className=\"text-xs text-slate-500 mt-1\">\n                Use {'{{field_name}}'} to reference webhook data\n              </p>\n            </div>\n          </div>\n        );\n\n      case 'create_lead':\n        return (\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-slate-200\">Field Mappings</Label>\n              <p className=\"text-sm text-slate-400 mb-3\">\n                Map webhook fields to new lead fields\n              </p>\n\n              <div className=\"max-h-96 overflow-y-auto pr-2 space-y-2\">\n                {(node.config?.field_mappings || []).map((mapping, index) => (\n                  <div key={index} className=\"flex gap-2 items-center\">\n                    <Select\n                      value={mapping.lead_field}\n                      onValueChange={(value) => {\n                        const newMappings = [...(node.config?.field_mappings || [])];\n                        newMappings[index] = { ...mapping, lead_field: value };\n                        updateNodeConfig(node.id, { ...node.config, field_mappings: newMappings });\n                      }}\n                    >\n                      <SelectTrigger className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                        <SelectValue placeholder=\"Lead Field\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-700\">\n                        <SelectItem value=\"first_name\">First Name</SelectItem>\n                        <SelectItem value=\"last_name\">Last Name</SelectItem>\n                        <SelectItem value=\"email\">Email</SelectItem>\n                        <SelectItem value=\"phone\">Phone</SelectItem>\n                        <SelectItem value=\"company\">Company</SelectItem>\n                        <SelectItem value=\"status\">Status</SelectItem>\n                        <SelectItem value=\"score\">Score</SelectItem>\n                        <SelectItem value=\"job_title\">Job Title</SelectItem>\n                        <SelectItem value=\"source\">Source</SelectItem>\n                        <SelectItem value=\"next_action\">Next Action</SelectItem>\n                        <SelectItem value=\"notes\">Notes</SelectItem>\n                      </SelectContent>\n                    </Select>\n\n                    {getAvailableFields().length > 0 ? (\n                      <Select\n                        value={mapping.webhook_field}\n                        onValueChange={(value) => {\n                          const newMappings = [...(node.config?.field_mappings || [])];\n                          newMappings[index] = { ...mapping, webhook_field: value };\n                          updateNodeConfig(node.id, { ...node.config, field_mappings: newMappings });\n                        }}\n                      >\n                        <SelectTrigger className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                          <SelectValue placeholder=\"Webhook Field\" />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-slate-800 border-slate-700\">\n                          {getAvailableFields().map(field => (\n                            <SelectItem key={field} value={field}>{field}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <Input\n                        value={mapping.webhook_field}\n                        onChange={(e) => {\n                          const newMappings = [...(node.config?.field_mappings || [])];\n                          newMappings[index] = { ...mapping, webhook_field: e.target.value };\n                          updateNodeConfig(node.id, { ...node.config, field_mappings: newMappings });\n                        }}\n                        placeholder=\"webhook_field\"\n                        className=\"bg-slate-800 border-slate-700 text-slate-200\"\n                      />\n                    )}\n\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => {\n                        const newMappings = (node.config?.field_mappings || []).filter((_, i) => i !== index);\n                        updateNodeConfig(node.id, { ...node.config, field_mappings: newMappings });\n                      }}\n                      className=\"text-red-400 hover:text-red-300 hover:bg-red-900/20 flex-shrink-0\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  const newMappings = [...(node.config?.field_mappings || []), { lead_field: '', webhook_field: '' }];\n                  updateNodeConfig(node.id, { ...node.config, field_mappings: newMappings });\n                }}\n                className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700 mt-2 w-full\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Mapping\n              </Button>\n            </div>\n          </div>\n        );\n\n      case 'update_lead':\n        return (\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-slate-200\">Field Mappings</Label>\n              <p className=\"text-sm text-slate-400 mb-3\">\n                Map webhook fields to lead fields\n              </p>\n\n              <div className=\"max-h-96 overflow-y-auto pr-2 space-y-2\">\n                {(node.config?.field_mappings || []).map((mapping, index) => (\n                  <div key={index} className=\"flex gap-2 items-center\">\n                    <Select\n                      value={mapping.lead_field}\n                      onValueChange={(value) => {\n                        const newMappings = [...(node.config?.field_mappings || [])];\n                        newMappings[index] = { ...mapping, lead_field: value };\n                        updateNodeConfig(node.id, { ...node.config, field_mappings: newMappings });\n                      }}\n                    >\n                      <SelectTrigger className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                        <SelectValue placeholder=\"Lead Field\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-700\">\n                        <SelectItem value=\"status\">Status</SelectItem>\n                        <SelectItem value=\"score\">Score</SelectItem>\n                        <SelectItem value=\"company\">Company</SelectItem>\n                        <SelectItem value=\"phone\">Phone</SelectItem>\n                        <SelectItem value=\"job_title\">Job Title</SelectItem>\n                        <SelectItem value=\"source\">Source</SelectItem>\n                        <SelectItem value=\"next_action\">Next Action</SelectItem>\n                        <SelectItem value=\"score_reason\">Score Reason</SelectItem>\n                        <SelectItem value=\"notes\">Notes</SelectItem>\n                      </SelectContent>\n                    </Select>\n\n                    {getAvailableFields().length > 0 ? (\n                      <Select\n                        value={mapping.webhook_field}\n                        onValueChange={(value) => {\n                          const newMappings = [...(node.config?.field_mappings || [])];\n                          newMappings[index] = { ...mapping, webhook_field: value };\n                          updateNodeConfig(node.id, { ...node.config, field_mappings: newMappings });\n                        }}\n                      >\n                        <SelectTrigger className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                          <SelectValue placeholder=\"Webhook Field\" />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-slate-800 border-slate-700\">\n                          {getAvailableFields().map(field => (\n                            <SelectItem key={field} value={field}>{field}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <Input\n                        value={mapping.webhook_field}\n                        onChange={(e) => {\n                          const newMappings = [...(node.config?.field_mappings || [])];\n                          newMappings[index] = { ...mapping, webhook_field: e.target.value };\n                          updateNodeConfig(node.id, { ...node.config, field_mappings: newMappings });\n                        }}\n                        placeholder=\"webhook_field\"\n                        className=\"bg-slate-800 border-slate-700 text-slate-200\"\n                      />\n                    )}\n\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => {\n                        const newMappings = (node.config?.field_mappings || []).filter((_, i) => i !== index);\n                        updateNodeConfig(node.id, { ...node.config, field_mappings: newMappings });\n                      }}\n                      className=\"text-red-400 hover:text-red-300 hover:bg-red-900/20 flex-shrink-0\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  const newMappings = [...(node.config?.field_mappings || []), { lead_field: '', webhook_field: '' }];\n                  updateNodeConfig(node.id, { ...node.config, field_mappings: newMappings });\n                }}\n                className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700 mt-2 w-full\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Mapping\n              </Button>\n            </div>\n          </div>\n        );\n\n      case 'condition':\n        return (\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-slate-200\">Condition</Label>\n              <p className=\"text-sm text-slate-400 mb-3\">\n                Branch the workflow based on a field value\n              </p>\n            </div>\n\n            <div>\n              <Label className=\"text-slate-200\">Field to Check</Label>\n              <Select\n                value={node.config?.field || ''}\n                onValueChange={(value) => {\n                  updateNodeConfig(node.id, { ...node.config, field: value });\n                }}\n              >\n                <SelectTrigger className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                  <SelectValue placeholder=\"Select field\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"lead.status\">Lead Status</SelectItem>\n                  <SelectItem value=\"lead.score\">Lead Score</SelectItem>\n                  <SelectItem value=\"lead.source\">Lead Source</SelectItem>\n                  <SelectItem value=\"lead.company\">Lead Company</SelectItem>\n                  <SelectItem value=\"lead.email\">Lead Email</SelectItem>\n                  <SelectItem value=\"contact.status\">Contact Status</SelectItem>\n                  <SelectItem value=\"contact.email\">Contact Email</SelectItem>\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-slate-500 mt-1\">\n                This checks the field from the previous node's output\n              </p>\n            </div>\n\n            <div>\n              <Label className=\"text-slate-200\">Operator</Label>\n              <Select\n                value={node.config?.operator || 'equals'}\n                onValueChange={(value) => {\n                  updateNodeConfig(node.id, { ...node.config, operator: value });\n                }}\n              >\n                <SelectTrigger className=\"bg-slate-800 border-slate-700 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"equals\">Equals</SelectItem>\n                  <SelectItem value=\"not_equals\">Not Equals</SelectItem>\n                  <SelectItem value=\"contains\">Contains</SelectItem>\n                  <SelectItem value=\"greater_than\">Greater Than</SelectItem>\n                  <SelectItem value=\"less_than\">Less Than</SelectItem>\n                  <SelectItem value=\"exists\">Exists</SelectItem>\n                  <SelectItem value=\"not_exists\">Does Not Exist</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {node.config?.operator !== 'exists' && node.config?.operator !== 'not_exists' && (\n              <div>\n                <Label className=\"text-slate-200\">Value to Compare</Label>\n                <Input\n                  value={node.config?.value || ''}\n                  onChange={(e) => {\n                    updateNodeConfig(node.id, { ...node.config, value: e.target.value });\n                  }}\n                  placeholder=\"Enter value or {{webhook_field}}\"\n                  className=\"bg-slate-800 border-slate-700 text-slate-200\"\n                />\n                <p className=\"text-xs text-slate-500 mt-1\">\n                  Use {'{{field_name}}'} to reference webhook data\n                </p>\n              </div>\n            )}\n\n            <div className=\"bg-blue-900/20 border border-blue-700 rounded-lg p-3 mt-4\">\n              <p className=\"text-sm text-blue-300\">\n                <strong>How to connect:</strong> After saving, connect this node to two different nodes:\n              </p>\n              <ul className=\"text-xs text-blue-400 mt-2 space-y-1 ml-4 list-disc\">\n                <li>First connection = TRUE path (condition matches)</li>\n                <li>Second connection = FALSE path (condition fails)</li>\n              </ul>\n            </div>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"text-slate-400 text-sm\">\n            No configuration needed for this node type\n          </div>\n        );\n    }\n  };\n\n  const handleSave = async () => {\n    if (!name.trim()) {\n      toast.error('Please enter a workflow name');\n      return;\n    }\n\n    if (nodes.length === 0) {\n      toast.error('Add at least one node to your workflow');\n      return;\n    }\n\n    if (!user) {\n      toast.error('User not loaded. Please try again.');\n      return;\n    }\n\n    setSaving(true);\n    try {\n      const workflowData = {\n        tenant_id: user.tenant_id,\n        name,\n        description,\n        is_active: true,\n        trigger: {\n          type: 'webhook',\n          config: {}\n        },\n        nodes,\n        connections,\n        webhook_url: workflow?.webhook_url || `https://base44.app/api/apps/${user.app_id}/functions/executeWorkflow?workflow_id=PENDING`\n      };\n\n      let savedWorkflow;\n      if (workflow) {\n        savedWorkflow = await Workflow.update(workflow.id, workflowData);\n      } else {\n        savedWorkflow = await Workflow.create(workflowData);\n        await Workflow.update(savedWorkflow.id, {\n          webhook_url: `https://base44.app/api/apps/${user.app_id}/functions/executeWorkflow?workflow_id=${savedWorkflow.id}`\n        });\n      }\n\n      toast.success('Workflow saved successfully');\n      onSave();\n    } catch (error) {\n      console.error('Failed to save workflow:', error);\n      toast.error('Failed to save workflow');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const selectedNode = nodes.find(node => node.id === selectedNodeId);\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"p-4 border-b border-slate-700\">\n        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n          <div>\n            <Label htmlFor=\"workflow-name\" className=\"text-slate-300\">Workflow Name</Label>\n            <Input\n              id=\"workflow-name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"e.g., Update Lead from Webhook\"\n              className=\"bg-slate-800 border-slate-700 text-slate-100\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"workflow-description\" className=\"text-slate-300\">Description</Label>\n            <Input\n              id=\"workflow-description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"What does this workflow do?\"\n              className=\"bg-slate-800 border-slate-700 text-slate-100\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        <div className=\"w-64 border-r border-slate-700 overflow-y-auto p-4 flex-shrink-0\">\n          <NodeLibrary onAddNode={handleAddNode} />\n        </div>\n\n        <div className=\"flex-1 bg-slate-950 overflow-auto\">\n          <WorkflowCanvas\n            nodes={nodes}\n            connections={connections}\n            onUpdateNode={handleUpdateNode}\n            onDeleteNode={handleDeleteNode}\n            onConnect={handleConnect}\n            onSelectNode={handleSelectNode}\n            selectedNodeId={selectedNodeId}\n          />\n        </div>\n\n        <div className=\"w-80 border-l border-slate-700 overflow-y-auto p-4 bg-slate-900 flex-shrink-0\">\n          <h3 className=\"text-lg font-semibold text-slate-100 mb-4\">\n            {selectedNode ? `${selectedNode.type.replace(/_/g, ' ').replace(/\\b\\w/g, char => char.toUpperCase())} Config` : 'Node Configuration'}\n          </h3>\n          {selectedNode ? (\n            renderNodeConfig(selectedNode)\n          ) : (\n            <p className=\"text-slate-400 text-sm\">Select a node to configure</p>\n          )}\n        </div>\n      </div>\n\n      <div className=\"p-4 border-t border-slate-700 flex justify-between\">\n        <Button variant=\"outline\" onClick={onCancel} className=\"border-slate-600 text-slate-300\">\n          Cancel\n        </Button>\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={handleSave}\n            disabled={saving}\n            className=\"bg-purple-600 hover:bg-purple-700\"\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            {saving ? 'Saving...' : 'Save Workflow'}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\workflows\\WorkflowCanvas.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":33,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[1016,1023],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport WorkflowNode from './WorkflowNode';\nimport { ArrowDown } from 'lucide-react';\n\nexport default function WorkflowCanvas({ nodes, connections, onUpdateNode, onDeleteNode, onConnect, onSelectNode, selectedNodeId }) {\n  const [connectingFrom, setConnectingFrom] = useState(null);\n\n  const handleNodeClick = (nodeId) => {\n    if (connectingFrom) {\n      if (connectingFrom !== nodeId) {\n        onConnect(connectingFrom, nodeId);\n      }\n      setConnectingFrom(null);\n    } else {\n      onSelectNode(nodeId);\n    }\n  };\n\n  const handleStartConnect = (nodeId) => {\n    setConnectingFrom(nodeId);\n  };\n\n  return (\n    <div className=\"relative p-8 min-h-full\">\n      {connectingFrom && (\n        <div className=\"fixed top-4 left-1/2 transform -translate-x-1/2 bg-purple-600 text-white px-4 py-2 rounded-lg shadow-lg z-50\">\n          Click on another node to connect\n        </div>\n      )}\n\n      {/* Render nodes */}\n      <div className=\"space-y-6\">\n        {nodes.map((node, index) => (\n          <React.Fragment key={node.id}>\n            <WorkflowNode\n              node={node}\n              isSelected={selectedNodeId === node.id}\n              isConnecting={connectingFrom === node.id}\n              onClick={() => handleNodeClick(node.id)}\n              onUpdate={(updates) => onUpdateNode(node.id, updates)}\n              onDelete={() => onDeleteNode(node.id)}\n              onStartConnect={() => handleStartConnect(node.id)}\n            />\n            \n            {/* Show arrow if there's a connection from this node */}\n            {connections.find(c => c.from === node.id) && (\n              <div className=\"flex justify-center\">\n                <ArrowDown className=\"w-6 h-6 text-purple-400\" />\n              </div>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\components\\workflows\\WorkflowNode.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,19],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'onUpdate' is defined but never used.","line":27,"column":81,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":89,"suggestions":[{"messageId":"removeVar","data":{"varName":"onUpdate"},"fix":{"range":[776,786],"text":""},"desc":"Remove unused variable 'onUpdate'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Webhook, Search, Edit, Trash2, Link as LinkIcon, UserPlus, GitBranch } from 'lucide-react';\n\nconst nodeIcons = {\n  webhook_trigger: Webhook,\n  find_lead: Search,\n  create_lead: UserPlus,\n  update_lead: Edit,\n  condition: GitBranch,\n  find_contact: Search,\n  update_contact: Edit,\n};\n\nconst nodeColors = {\n  webhook_trigger: 'bg-purple-600',\n  find_lead: 'bg-blue-600',\n  create_lead: 'bg-green-600',\n  update_lead: 'bg-emerald-600',\n  condition: 'bg-yellow-600',\n  find_contact: 'bg-cyan-600',\n  update_contact: 'bg-teal-600',\n};\n\nexport default function WorkflowNode({ node, isSelected, isConnecting, onClick, onUpdate, onDelete, onStartConnect }) {\n  const Icon = nodeIcons[node.type] || Edit;\n  const colorClass = nodeColors[node.type] || 'bg-gray-600';\n\n  const getNodeTitle = () => {\n    switch (node.type) {\n      case 'webhook_trigger': return 'Webhook Trigger';\n      case 'find_lead': return 'Find Lead';\n      case 'create_lead': return 'Create Lead';\n      case 'update_lead': return 'Update Lead';\n      case 'condition': return 'Condition';\n      case 'find_contact': return 'Find Contact';\n      case 'update_contact': return 'Update Contact';\n      default: return node.type;\n    }\n  };\n\n  const getNodeDescription = () => {\n    switch (node.type) {\n      case 'webhook_trigger': return 'Receives webhook data';\n      case 'find_lead': return 'Search for an existing lead';\n      case 'create_lead': return 'Create a new lead record';\n      case 'update_lead': return 'Update lead fields';\n      case 'condition': \n        if (node.config?.field && node.config?.operator) {\n          return `If ${node.config.field} ${node.config.operator} ${node.config.value || ''}`;\n        }\n        return 'Branch based on condition';\n      case 'find_contact': return 'Search for a contact';\n      case 'update_contact': return 'Update contact fields';\n      default: return '';\n    }\n  };\n\n  return (\n    <Card \n      className={`w-80 cursor-pointer transition-all ${\n        isSelected \n          ? 'ring-2 ring-purple-500 shadow-xl' \n          : 'hover:shadow-lg'\n      } ${\n        isConnecting \n          ? 'ring-2 ring-yellow-500' \n          : ''\n      } bg-slate-800 border-slate-700`}\n      onClick={onClick}\n    >\n      <CardHeader className={`${colorClass} text-white`}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Icon className=\"w-5 h-5\" />\n            <CardTitle className=\"text-base\">{getNodeTitle()}</CardTitle>\n          </div>\n          <div className=\"flex gap-1\">\n            {node.type !== 'webhook_trigger' && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-6 w-6 text-white hover:bg-white/20\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onStartConnect();\n                }}\n              >\n                <LinkIcon className=\"w-3 h-3\" />\n              </Button>\n            )}\n            {node.type !== 'webhook_trigger' && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-6 w-6 text-white hover:bg-red-600\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onDelete();\n                }}\n              >\n                <Trash2 className=\"w-3 h-3\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-4\">\n        <div className=\"text-sm text-slate-400\">\n          {getNodeDescription()}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\AICampaign.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Account.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Activity.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Announcement.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\ApiKey.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\ArchiveIndex.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\AuditLog.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\BizDevSource.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Cache.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\CashFlow.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Checkpoint.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\ClientRequirement.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Contact.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\ContactHistory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\CronJob.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\DailySalesMetrics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\DataManagementSettings.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Documentation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\EmailTemplate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Employee.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\FieldCustomization.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\File.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\GuideContent.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\ImportLog.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\IndustryMarketData.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Lead.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\LeadHistory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\ModuleSettings.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\MonthlyPerformance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Note.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Notification.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Opportunity.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\OpportunityHistory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\PerformanceLog.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\SubscriptionPlan.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\SubscriptionWebhook.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\SyncHealth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\SystemBranding.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\SystemLog.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Tenant.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\TenantIntegration.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\TestReport.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\UserInvitation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\UserPerformance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\Workflow.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\WorkflowExecution.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\entities\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\hooks\\use-mobile.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\lib\\utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\main.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from '@/App.jsx'\nimport '@/index.css'\nimport ErrorBoundary from '@/components/shared/ErrorBoundary'\n\n// Add loading indicator\nconsole.log('[App] Starting Ai-SHA CRM...');\nconsole.log('[App] Local Dev Mode:', import.meta.env.VITE_USE_BASE44_AUTH !== 'true');\n\nReactDOM.createRoot(document.getElementById('root')).render(\n    <ErrorBoundary>\n      <App />\n    </ErrorBoundary>\n) ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\AICampaigns.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Accounts.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'AnimatePresence' is defined but never used.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"AnimatePresence"},"fix":{"range":[947,995],"text":""},"desc":"Remove unused variable 'AnimatePresence'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'contacts' is assigned a value but never used.","line":36,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"contacts"},"fix":{"range":[1958,1966],"text":""},"desc":"Remove unused variable 'contacts'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setShowTestData' is assigned a value but never used.","line":53,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"setShowTestData"},"fix":{"range":[2892,2909],"text":""},"desc":"Remove unused variable 'setShowTestData'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'selectedTenantId'. Either exclude it or remove the dependency array.","line":234,"column":6,"nodeType":"ArrayExpression","endLine":234,"endColumn":62,"suggestions":[{"desc":"Update the dependencies array to be: [user, cachedRequest, getTenantFilter]","fix":{"range":[9194,9250],"text":"[user, cachedRequest, getTenantFilter]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'selectedTenantId'. Either exclude it or remove the dependency array.","line":295,"column":6,"nodeType":"ArrayExpression","endLine":295,"endColumn":123,"suggestions":[{"desc":"Update the dependencies array to be: [user, searchTerm, typeFilter, selectedTags, currentPage, pageSize, cachedRequest, getTenantFilter]","fix":{"range":[11086,11203],"text":"[user, searchTerm, typeFilter, selectedTags, currentPage, pageSize, cachedRequest, getTenantFilter]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'toggleTag' is assigned a value but never used.","line":675,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":675,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"toggleTag"},"fix":{"range":[23283,23574],"text":""},"desc":"Remove unused variable 'toggleTag'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'clearTags' is assigned a value but never used.","line":685,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":685,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"clearTags"},"fix":{"range":[23578,23708],"text":""},"desc":"Remove unused variable 'clearTags'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport { Account } from \"@/api/entities\";\nimport { Contact } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Employee } from \"@/api/entities\";\nimport { useApiManager } from \"../components/shared/ApiManager\";\nimport { loadUsersSafely } from \"../components/shared/userLoader\";\nimport AccountCard from \"../components/accounts/AccountCard\";\nimport AccountForm from \"../components/accounts/AccountForm\";\nimport AccountDetailPanel from \"../components/accounts/AccountDetailPanel\";\nimport BulkActionsMenu from \"../components/accounts/BulkActionsMenu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Plus, Search, Upload, Loader2, Grid, List, AlertCircle, X, Edit, Eye, Trash2 } from \"lucide-react\";\nimport { AnimatePresence } from \"framer-motion\";\nimport CsvExportButton from \"../components/shared/CsvExportButton\";\nimport CsvImportDialog from \"../components/shared/CsvImportDialog\";\nimport { useTenant } from '../components/shared/tenantContext';\nimport Pagination from \"../components/shared/Pagination\";\nimport { toast } from \"sonner\";\nimport TagFilter from \"../components/shared/TagFilter\";\nimport { useEmployeeScope } from \"../components/shared/EmployeeScopeContext\";\nimport RefreshButton from \"../components/shared/RefreshButton\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport StatusHelper from \"../components/shared/StatusHelper\";\n\n// Helper to add delay between API calls\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport default function AccountsPage() {\n  const [accounts, setAccounts] = useState([]);\n  const [contacts, setContacts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingAccount, setEditingAccount] = useState(null);\n  const [viewMode, setViewMode] = useState(\"list\");\n  const [selectedAccounts, setSelectedAccounts] = useState(() => new Set());\n  const [selectAllMode, setSelectAllMode] = useState(false);\n  const [isImportOpen, setIsImportOpen] = useState(false);\n  const [user, setUser] = useState(null);\n  const { selectedTenantId } = useTenant();\n  const [detailAccount, setDetailAccount] = useState(null);\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [showTestData, setShowTestData] = useState(false); // Added: New state for test data filter\n\n  // Stats for ALL accounts (not just current page)\n  const [totalStats, setTotalStats] = useState({\n    total: 0,\n    customer: 0,\n    prospect: 0,\n    partner: 0,\n    inactive: 0\n  });\n\n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(25);\n  const [totalItems, setTotalItems] = useState(0);\n\n  const { cachedRequest, clearCacheByKey } = useApiManager();\n  const { selectedEmail } = useEmployeeScope();\n\n  // Ref to track if initial load is done\n  const initialLoadDone = useRef(false);\n  const supportingDataLoaded = useRef(false); // Track if supporting data is loaded\n\n  // Type colors matching stat cards - semi-transparent backgrounds\n  const typeBadgeColors = {\n    prospect: 'bg-blue-900/20 text-blue-300 border-blue-700',\n    customer: 'bg-emerald-900/20 text-emerald-300 border-emerald-700',\n    partner: 'bg-purple-900/20 text-purple-300 border-purple-700',\n    competitor: 'bg-red-900/20 text-red-300 border-red-700',\n    vendor: 'bg-amber-900/20 text-amber-300 border-amber-700',\n    inactive: 'bg-gray-900/20 text-gray-300 border-gray-700'\n  };\n\n  // Local getTenantFilter function that incorporates employee scope and test data\n  const getTenantFilter = useCallback(() => {\n    if (!user) return {};\n\n    let filter = {};\n\n    // Tenant filtering\n    if (user.role === 'superadmin' || user.role === 'admin') {\n      if (selectedTenantId) {\n        filter.tenant_id = selectedTenantId;\n      }\n    } else if (user.tenant_id) {\n      filter.tenant_id = user.tenant_id;\n    }\n\n    // Employee scope filtering from context\n    if (selectedEmail && selectedEmail !== 'all') {\n      if (selectedEmail === 'unassigned') {\n        filter.$or = [{ assigned_to: null }, { assigned_to: '' }];\n      } else {\n        filter.assigned_to = selectedEmail;\n      }\n    } else if (user.employee_role === 'employee' && user.role !== 'admin' && user.role !== 'superadmin') {\n      // Regular employees only see their own data\n      filter.assigned_to = user.email;\n    }\n\n    // Test data filtering\n    if (!showTestData) {\n      filter.is_test_data = { $ne: true };\n    }\n\n    return filter;\n  }, [user, selectedTenantId, showTestData, selectedEmail]);\n\n  // Load user once\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const currentUser = await User.me();\n        setUser(currentUser);\n      } catch (error) {\n        console.error(\"Failed to load user:\", error);\n        toast.error(\"Failed to load user information\");\n      }\n    };\n    loadUser();\n  }, []);\n\n  // Load supporting data (contacts, users, employees) ONCE with delays and error handling\n  useEffect(() => {\n    // CRITICAL: Only load once\n    if (supportingDataLoaded.current || !user) return;\n\n    const loadSupportingData = async () => {\n      try {\n        // Use the local getTenantFilter without employee scope specific filter for supporting data\n        // since supporting data like employees/contacts are usually loaded for all within the tenant\n        // for selection in other forms, not necessarily to be filtered by assigned_to.\n        // We revert to basic tenant filter for supporting data for now.\n        const baseTenantFilter = {};\n        if (user.role === 'superadmin' || user.role === 'admin') {\n          if (selectedTenantId) {\n            baseTenantFilter.tenant_id = selectedTenantId;\n          }\n        } else if (user.tenant_id) {\n          baseTenantFilter.tenant_id = user.tenant_id;\n        }\n\n        // Load contacts\n        const contactsData = await cachedRequest('Contact', 'filter', { filter: baseTenantFilter }, () => Contact.filter(baseTenantFilter));\n        setContacts(contactsData || []);\n\n        await delay(300);\n\n        // Load users safely\n        const usersData = await loadUsersSafely(user, selectedTenantId, cachedRequest);\n        setUsers(usersData || []);\n\n        await delay(300);\n\n        // Load employees\n        const employeesData = await cachedRequest('Employee', 'filter', { filter: baseTenantFilter }, () => Employee.filter(baseTenantFilter));\n        setEmployees(employeesData || []);\n\n        supportingDataLoaded.current = true; // Mark as loaded\n      } catch (error) {\n        console.error(\"[Accounts] Failed to load supporting data:\", error);\n        // Don't toast here - the page will still function\n      }\n    };\n\n    loadSupportingData();\n  }, [user, selectedTenantId, cachedRequest]); // REMOVED cachedRequest from deps to prevent loops - but it is used inside, so it should be there\n\n  // Handle opening account from URL parameter\n  useEffect(() => {\n    const loadAccountFromUrl = async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const accountId = urlParams.get('accountId');\n\n      if (accountId) {\n        try {\n          // Fetch the specific account by ID\n          const account = await Account.get(accountId);\n          if (account) {\n            setDetailAccount(account);\n            setIsDetailOpen(true);\n          }\n        } catch (error) {\n          console.error('[Accounts] Failed to load account from URL:', error);\n          toast.error(\"Account not found\");\n        } finally {\n          // Clear the URL parameter\n          window.history.replaceState({}, '', '/Accounts');\n        }\n      }\n    };\n\n    if (user) {\n      loadAccountFromUrl();\n    }\n  }, [user]); // Only depend on user, not accounts array\n\n  const loadTotalStats = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      const currentTenantFilter = getTenantFilter();\n      const allAccounts = await cachedRequest(\n        'Account',\n        'filter',\n        { filter: currentTenantFilter },\n        () => Account.filter(currentTenantFilter)\n      );\n\n      const stats = {\n        total: allAccounts.length,\n        customer: allAccounts.filter(a => a.type === 'customer').length,\n        prospect: allAccounts.filter(a => a.type === 'prospect').length,\n        partner: allAccounts.filter(a => a.type === 'partner').length,\n        inactive: allAccounts.filter(a => a.type === 'inactive').length || 0\n      };\n\n      setTotalStats(stats);\n    } catch (error) {\n      console.error('[Accounts] Failed to load stats:', error);\n    }\n  }, [user, selectedTenantId, cachedRequest, getTenantFilter]);\n\n  // Load accounts with pagination\n  const loadAccounts = useCallback(async () => {\n    if (!user) return;\n\n    setLoading(true);\n    try {\n      const currentTenantFilter = getTenantFilter();\n\n      const allAccounts = await cachedRequest(\n        'Account',\n        'filter',\n        { filter: currentTenantFilter },\n        () => Account.filter(currentTenantFilter)\n      );\n\n      let filtered = allAccounts || [];\n\n      // Apply client-side filters\n      if (searchTerm) {\n        const search = searchTerm.toLowerCase();\n        filtered = filtered.filter(account =>\n          account.name?.toLowerCase().includes(search) ||\n          account.website?.toLowerCase().includes(search) ||\n          account.email?.toLowerCase().includes(search) ||\n          account.phone?.includes(searchTerm)\n        );\n      }\n\n      if (typeFilter !== \"all\") {\n        filtered = filtered.filter(account => account.type === typeFilter);\n      }\n\n      if (selectedTags.length > 0) {\n        filtered = filtered.filter(account =>\n          Array.isArray(account.tags) && selectedTags.every(tag => account.tags.includes(tag))\n        );\n      }\n\n      // Sort by created_date descending\n      filtered.sort((a, b) => new Date(b.created_date) - new Date(a.created_date));\n\n      setTotalItems(filtered.length);\n\n      // Apply pagination\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const paginatedAccounts = filtered.slice(startIndex, endIndex);\n\n      setAccounts(paginatedAccounts);\n    } catch (error) {\n      console.error(\"[Accounts] Failed to load accounts:\", error);\n      toast.error(\"Failed to load accounts\");\n      setAccounts([]);\n    } finally {\n      setLoading(false);\n      if (!initialLoadDone.current) {\n        initialLoadDone.current = true;\n      }\n    }\n  }, [user, selectedTenantId, searchTerm, typeFilter, selectedTags, currentPage, pageSize, cachedRequest, getTenantFilter]);\n\n  // Load accounts when dependencies change\n  useEffect(() => {\n    loadAccounts();\n  }, [loadAccounts]);\n\n  // Load stats once when user/tenant/scope changes\n  useEffect(() => {\n    if (user) {\n      loadTotalStats();\n    }\n  }, [user, selectedTenantId, selectedEmail, loadTotalStats]);\n\n  // Reset to page 1 when filters change\n  useEffect(() => {\n    if (initialLoadDone.current) {\n      setCurrentPage(1);\n    }\n  }, [searchTerm, typeFilter, selectedTags, selectedEmail]);\n\n  // Handle page change\n  const handlePageChange = useCallback((newPage) => {\n    setCurrentPage(newPage);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // Handle page size change\n  const handlePageSizeChange = useCallback((newSize) => {\n    setPageSize(newSize);\n    setCurrentPage(1);\n  }, []);\n\n  // Extract all tags from accounts for TagFilter\n  const allTags = useMemo(() => {\n    if (!Array.isArray(accounts)) return [];\n\n    const tagCounts = {};\n    accounts.forEach(account => {\n      if (Array.isArray(account.tags)) {\n        account.tags.forEach(tag => {\n          if (tag && typeof tag === 'string') {\n            tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n          }\n        });\n      }\n    });\n\n    return Object.entries(tagCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count);\n  }, [accounts]);\n\n  // Create lookup maps for denormalized fields\n  const usersMap = useMemo(() => {\n    return users.reduce((acc, user) => {\n      acc[user.email] = user.full_name || user.email;\n      return acc;\n    }, {});\n  }, [users]);\n\n  const employeesMap = useMemo(() => {\n    return employees.reduce((acc, employee) => {\n      if (employee.email) {\n        acc[employee.email] = `${employee.first_name} ${employee.last_name}`;\n      }\n      return acc;\n    }, {});\n  }, [employees]);\n\n  const handleSave = async () => {\n    setIsFormOpen(false);\n    setEditingAccount(null);\n    clearCacheByKey('Account');\n    await Promise.all([\n      loadAccounts(),\n      loadTotalStats()\n    ]);\n    toast.success(editingAccount ? \"Account updated successfully\" : \"Account created successfully\");\n  };\n\n  const handleDelete = async (id) => {\n    if (!window.confirm(\"Are you sure you want to delete this account?\")) return;\n\n    try {\n      await Account.delete(id);\n      clearCacheByKey('Account');\n      await Promise.all([\n        loadAccounts(),\n        loadTotalStats()\n      ]);\n      toast.success(\"Account deleted successfully\");\n    } catch (error) {\n      console.error(\"Failed to delete account:\", error);\n      toast.error(\"Failed to delete account\");\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    if (selectAllMode) {\n      if (!window.confirm(`Delete ALL ${totalItems} account(s) matching current filters? This cannot be undone!`)) return;\n\n      try {\n        let currentTenantFilter = getTenantFilter();\n        // The employee scope filter is already applied within getTenantFilter()\n\n        if (typeFilter !== \"all\") {\n          currentTenantFilter = { ...currentTenantFilter, type: typeFilter };\n        }\n\n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          currentTenantFilter = {\n            ...currentTenantFilter,\n            $or: [\n              { name: searchRegex },\n              { email: searchRegex },\n              { phone: searchRegex },\n              { website: searchRegex },\n              { city: searchRegex }\n            ]\n          };\n        }\n\n        if (selectedTags.length > 0) {\n          currentTenantFilter = { ...currentTenantFilter, tags: { $all: selectedTags } };\n        }\n\n        const allAccountsToDelete = await cachedRequest('Account', 'filter', { filter: currentTenantFilter, sort: 'id', limit: 10000 }, () => Account.filter(currentTenantFilter, 'id', 10000));\n        const deleteCount = allAccountsToDelete.length;\n\n        // Delete in batches to avoid overwhelming the system\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allAccountsToDelete.length; i += BATCH_SIZE) {\n          const batch = allAccountsToDelete.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(a => Account.delete(a.id)));\n        }\n\n        setSelectedAccounts(new Set());\n        setSelectAllMode(false);\n        clearCacheByKey('Account');\n        await Promise.all([\n          loadAccounts(),\n          loadTotalStats()\n        ]);\n        toast.success(`${deleteCount} account(s) deleted`);\n      } catch (error) {\n        console.error(\"Failed to delete accounts:\", error);\n        toast.error(\"Failed to delete accounts\");\n      }\n    } else {\n      if (!selectedAccounts || selectedAccounts.size === 0) {\n        toast.error(\"No accounts selected\");\n        return;\n      }\n\n      if (!window.confirm(`Delete ${selectedAccounts.size} account(s)?`)) return;\n\n      try {\n        await Promise.all([...selectedAccounts].map(id => Account.delete(id)));\n        setSelectedAccounts(new Set());\n        clearCacheByKey('Account');\n        await Promise.all([\n          loadAccounts(),\n          loadTotalStats()\n        ]);\n        toast.success(`${selectedAccounts.size} account(s) deleted`);\n      } catch (error) {\n        console.error(\"Failed to delete accounts:\", error);\n        toast.error(\"Failed to delete accounts\");\n      }\n    }\n  };\n\n  const handleBulkTypeChange = async (newType) => {\n    if (selectAllMode) {\n      if (!window.confirm(`Update type for ALL ${totalItems} account(s) matching current filters to ${newType}?`)) return;\n\n      try {\n        let currentTenantFilter = getTenantFilter();\n        // The employee scope filter is already applied within getTenantFilter()\n\n        if (typeFilter !== \"all\") {\n          currentTenantFilter = { ...currentTenantFilter, type: typeFilter };\n        }\n\n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          currentTenantFilter = {\n            ...currentTenantFilter,\n            $or: [\n              { name: searchRegex },\n              { email: searchRegex },\n              { phone: searchRegex },\n              { website: searchRegex },\n              { city: searchRegex }\n            ]\n          };\n        }\n\n        if (selectedTags.length > 0) {\n          currentTenantFilter = { ...currentTenantFilter, tags: { $all: selectedTags } };\n        }\n\n        const allAccountsToUpdate = await cachedRequest('Account', 'filter', { filter: currentTenantFilter, sort: 'id', limit: 10000 }, () => Account.filter(currentTenantFilter, 'id', 10000));\n        const updateCount = allAccountsToUpdate.length;\n\n        // Update in batches\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allAccountsToUpdate.length; i += BATCH_SIZE) {\n          const batch = allAccountsToUpdate.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(a => Account.update(a.id, { type: newType })));\n        }\n\n        setSelectedAccounts(new Set());\n        setSelectAllMode(false);\n        clearCacheByKey('Account');\n        await Promise.all([\n          loadAccounts(),\n          loadTotalStats()\n        ]);\n        toast.success(`Updated ${updateCount} account(s) to ${newType}`);\n      } catch (error) {\n        console.error(\"Failed to update accounts:\", error);\n        toast.error(\"Failed to update accounts\");\n      }\n    } else {\n      if (!selectedAccounts || selectedAccounts.size === 0) {\n        toast.error(\"No accounts selected\");\n        return;\n      }\n\n      try {\n        const promises = [...selectedAccounts].map(id =>\n          Account.update(id, { type: newType })\n        );\n\n        await Promise.all(promises);\n        setSelectedAccounts(new Set());\n        clearCacheByKey('Account');\n        await Promise.all([\n          loadAccounts(),\n          loadTotalStats()\n        ]);\n        toast.success(`Updated ${promises.length} account(s) to ${newType}`);\n      } catch (error) {\n        console.error(\"Failed to update accounts:\", error);\n        toast.error(\"Failed to update accounts\");\n      }\n    }\n  };\n\n  const handleBulkAssign = async (assignedTo) => {\n    if (selectAllMode) {\n      if (!window.confirm(`Assign ALL ${totalItems} account(s) matching current filters?`)) return;\n\n      try {\n        let currentTenantFilter = getTenantFilter();\n        // The employee scope filter is already applied within getTenantFilter()\n\n        if (typeFilter !== \"all\") {\n          currentTenantFilter = { ...currentTenantFilter, type: typeFilter };\n        }\n\n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          currentTenantFilter = {\n            ...currentTenantFilter,\n            $or: [\n              { name: searchRegex },\n              { email: searchRegex },\n              { phone: searchRegex },\n              { website: searchRegex },\n              { city: searchRegex }\n            ]\n          };\n        }\n\n        if (selectedTags.length > 0) {\n          currentTenantFilter = { ...currentTenantFilter, tags: { $all: selectedTags } };\n        }\n\n        const allAccountsToAssign = await cachedRequest('Account', 'filter', { filter: currentTenantFilter, sort: 'id', limit: 10000 }, () => Account.filter(currentTenantFilter, 'id', 10000));\n        const updateCount = allAccountsToAssign.length;\n\n        // Update in batches\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allAccountsToAssign.length; i += BATCH_SIZE) {\n          const batch = allAccountsToAssign.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(a => Account.update(a.id, { assigned_to: assignedTo || null })));\n        }\n\n        setSelectedAccounts(new Set());\n        setSelectAllMode(false);\n        clearCacheByKey('Account');\n        await Promise.all([\n          loadAccounts(),\n          loadTotalStats()\n        ]);\n        toast.success(`Assigned ${updateCount} account(s)`);\n      } catch (error) {\n        console.error(\"Failed to assign accounts:\", error);\n        toast.error(\"Failed to assign accounts\");\n      }\n    } else {\n      if (!selectedAccounts || selectedAccounts.size === 0) {\n        toast.error(\"No accounts selected\");\n        return;\n      }\n\n      try {\n        const promises = [...selectedAccounts].map(id =>\n          Account.update(id, { assigned_to: assignedTo || null })\n        );\n\n        await Promise.all(promises);\n        setSelectedAccounts(new Set());\n        clearCacheByKey('Account');\n        await Promise.all([\n          loadAccounts(),\n          loadTotalStats()\n        ]);\n        toast.success(`Assigned ${promises.length} account(s)`);\n      } catch (error) {\n        console.error(\"Failed to assign accounts:\", error);\n        toast.error(\"Failed to assign accounts\");\n      }\n    }\n  };\n\n  const toggleSelection = (id) => {\n    const newSet = new Set(selectedAccounts);\n    if (newSet.has(id)) {\n      newSet.delete(id);\n    } else {\n      newSet.add(id);\n    }\n    setSelectedAccounts(newSet);\n    setSelectAllMode(false);\n  };\n\n  const toggleSelectAll = () => {\n    if (selectedAccounts.size === accounts.length && accounts.length > 0) {\n      setSelectedAccounts(new Set());\n      setSelectAllMode(false);\n    } else {\n      setSelectedAccounts(new Set(accounts.map(a => a.id)));\n      setSelectAllMode(false);\n    }\n  };\n\n  const handleSelectAllRecords = () => {\n    setSelectAllMode(true);\n    setSelectedAccounts(new Set(accounts.map(a => a.id)));\n  };\n\n  const handleClearSelection = () => {\n    setSelectedAccounts(new Set());\n    setSelectAllMode(false);\n  };\n\n  const handleViewDetails = (account) => {\n    setDetailAccount(account);\n    setIsDetailOpen(true);\n  };\n\n  const handleRefresh = async () => {\n    clearCacheByKey('Account');\n    clearCacheByKey('Employee');\n    clearCacheByKey('User'); // Clear User cache as well since it's loaded with cachedRequest\n    clearCacheByKey('Contact'); // Clear Contact cache\n    // Also reset supportingDataLoaded ref so it can reload\n    supportingDataLoaded.current = false;\n    await Promise.all([\n      loadAccounts(),\n      loadTotalStats()\n    ]);\n    toast.success(\"Accounts refreshed\");\n  };\n\n  const toggleTag = useCallback((tagName) => {\n    setSelectedTags(prev => {\n      const newTags = prev.includes(tagName)\n        ? prev.filter(t => t !== tagName)\n        : [...prev, tagName];\n      // currentPage reset handled by useEffect for filters\n      return newTags;\n    });\n  }, []);\n\n  const clearTags = useCallback(() => {\n    setSelectedTags([]);\n    // currentPage reset handled by useEffect for filters\n  }, []);\n\n  const handleTypeFilterClick = (type) => {\n    setTypeFilter(type);\n    // currentPage reset handled by useEffect for filters\n  };\n\n  const handleClearFilters = () => {\n    setSearchTerm(\"\");\n    setTypeFilter(\"all\");\n    setSelectedTags([]);\n    // currentPage reset handled by useEffect for filters\n    handleClearSelection();\n  };\n\n  const hasActiveFilters = useMemo(() => {\n    return searchTerm !== \"\" || typeFilter !== \"all\" || selectedTags.length > 0;\n  }, [searchTerm, typeFilter, selectedTags]);\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 p-6 flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n      </div>\n    );\n  }\n\n  return (\n    <TooltipProvider>\n      <div className=\"min-h-screen bg-slate-900 p-4 sm:p-6\">\n        <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto bg-slate-800 border-slate-700 text-slate-200\">\n            <DialogHeader>\n              <DialogTitle className=\"text-slate-100\">\n                {editingAccount ? \"Edit Account\" : \"Add New Account\"}\n              </DialogTitle>\n            </DialogHeader>\n            <AccountForm\n              account={editingAccount}\n              onSuccess={handleSave}\n              onCancel={() => {\n                setIsFormOpen(false);\n                setEditingAccount(null);\n              }}\n              user={user}\n            />\n          </DialogContent>\n        </Dialog>\n\n        <CsvImportDialog\n          open={isImportOpen}\n          onOpenChange={setIsImportOpen}\n          schema={Account.schema ? Account.schema() : null}\n          onSuccess={async () => {\n            clearCacheByKey('Account');\n            await Promise.all([\n              loadAccounts(),\n              loadTotalStats()\n            ]);\n          }}\n        />\n\n        <AccountDetailPanel\n          account={detailAccount}\n          assignedUserName={employeesMap[detailAccount?.assigned_to] || usersMap[detailAccount?.assigned_to]}\n          open={isDetailOpen}\n          onOpenChange={() => {\n            setIsDetailOpen(false);\n            setDetailAccount(null);\n          }}\n          onEdit={(account) => {\n            setEditingAccount(account);\n            setIsFormOpen(true);\n            setIsDetailOpen(false);\n          }}\n          onDelete={async (id) => {\n            await handleDelete(id);\n            setIsDetailOpen(false);\n          }}\n          onRefresh={() => loadAccounts()}\n          user={user}\n        />\n\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-100 mb-2\">Accounts</h1>\n            <p className=\"text-slate-400\">\n              Manage your company accounts and partnerships.\n            </p>\n          </div>\n          <div className=\"flex flex-wrap items-center gap-2\">\n            <RefreshButton onClick={handleRefresh} loading={loading} />\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setViewMode(viewMode === \"list\" ? \"grid\" : \"list\")}\n                  className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                >\n                  {viewMode === \"list\" ? <Grid className=\"w-4 h-4\" /> : <List className=\"w-4 h-4\" />}\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Switch to {viewMode === \"list\" ? \"card\" : \"list\"} view</p>\n              </TooltipContent>\n            </Tooltip>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsImportOpen(true)}\n                  className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Import\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Import accounts from CSV</p>\n              </TooltipContent>\n            </Tooltip>\n            <CsvExportButton\n              entityName=\"Account\"\n              data={accounts}\n              filename=\"accounts_export\"\n            />\n            {(selectedAccounts.size > 0 || selectAllMode) && (\n              <BulkActionsMenu\n                selectedCount={selectAllMode ? totalItems : selectedAccounts.size}\n                onBulkTypeChange={handleBulkTypeChange}\n                onBulkAssign={handleBulkAssign}\n                onBulkDelete={handleBulkDelete}\n                employees={employees}\n                selectAllMode={selectAllMode}\n                totalCount={totalItems}\n              />\n            )}\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  onClick={() => {\n                    setEditingAccount(null);\n                    setIsFormOpen(true);\n                  }}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Account\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Create new account</p>\n              </TooltipContent>\n            </Tooltip>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mb-6\">\n          {[\n            {\n              label: 'Total Accounts',\n              value: totalStats.total,\n              filter: 'all',\n              bgColor: 'bg-slate-800',\n              tooltip: 'total_all'\n            },\n            {\n              label: 'Prospects',\n              value: totalStats.prospect,\n              filter: 'prospect',\n              bgColor: 'bg-blue-900/20',\n              borderColor: 'border-blue-700',\n              tooltip: 'account_prospect'\n            },\n            {\n              label: 'Customers',\n              value: totalStats.customer,\n              filter: 'customer',\n              bgColor: 'bg-emerald-900/20',\n              borderColor: 'border-emerald-700',\n              tooltip: 'account_customer'\n            },\n            {\n              label: 'Partners',\n              value: totalStats.partner,\n              filter: 'partner',\n              bgColor: 'bg-purple-900/20',\n              borderColor: 'border-purple-700',\n              tooltip: 'account_partner'\n            },\n            {\n              label: 'Inactive',\n              value: totalStats.inactive,\n              filter: 'inactive',\n              bgColor: 'bg-gray-900/20',\n              borderColor: 'border-gray-700',\n              tooltip: 'account_inactive'\n            },\n          ].map((stat) => (\n            <div\n              key={stat.label}\n              className={`${stat.bgColor} ${stat.borderColor || 'border-slate-700'} border rounded-lg p-4 cursor-pointer hover:scale-105 transition-all ${\n                typeFilter === stat.filter ? 'ring-2 ring-blue-500 ring-offset-2 ring-offset-slate-900' : ''\n              }`}\n              onClick={() => handleTypeFilterClick(stat.filter)}\n            >\n              <div className=\"flex items-center justify-between mb-1\">\n                <p className=\"text-sm text-slate-400\">{stat.label}</p>\n                <StatusHelper statusKey={stat.tooltip} />\n              </div>\n              <p className=\"text-2xl font-bold text-slate-100\">{stat.value}</p>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"flex flex-col lg:flex-row gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-3 w-5 h-5 text-slate-500\" />\n            <Input\n              placeholder=\"Search accounts by name, website, email, phone, city or industry...\"\n              value={searchTerm}\n              onChange={(e) => {\n                setSearchTerm(e.target.value);\n                // currentPage reset handled by useEffect for filters\n              }}\n              className=\"pl-10 bg-slate-800 border-slate-700 text-slate-200\"\n            />\n          </div>\n\n          <div className=\"flex flex-wrap gap-2\">\n            <TagFilter\n              allTags={allTags}\n              selectedTags={selectedTags}\n              onTagsChange={(newTags) => {\n                setSelectedTags(newTags);\n                // currentPage reset handled by useEffect for filters\n              }}\n            />\n\n            {hasActiveFilters && (\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleClearFilters}\n                    className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                  >\n                    <X className=\"w-4 h-4 mr-1\" />\n                    Clear\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Clear all filters</p>\n                </TooltipContent>\n              </Tooltip>\n            )}\n          </div>\n        </div>\n\n        {/* Select All Banner */}\n        {selectedAccounts.size === accounts.length && accounts.length > 0 && !selectAllMode && totalItems > accounts.length && (\n          <div className=\"mb-4 bg-blue-900/20 border border-blue-700 rounded-lg p-4 flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"text-blue-200\">\n                All {accounts.length} accounts on this page are selected.\n              </span>\n              <Button\n                variant=\"link\"\n                onClick={handleSelectAllRecords}\n                className=\"text-blue-400 hover:text-blue-300 p-0 h-auto\"\n              >\n                Select all {totalItems} accounts matching current filters\n              </Button>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClearSelection}\n              className=\"text-slate-400 hover:text-slate-200\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        )}\n\n        {selectAllMode && (\n          <div className=\"mb-4 bg-blue-900/20 border border-blue-700 rounded-lg p-4 flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"text-blue-200 font-semibold\">\n                All {totalItems} accounts matching current filters are selected.\n              </span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClearSelection}\n              className=\"text-slate-400 hover:text-slate-200\"\n            >\n              Clear selection\n            </Button>\n          </div>\n        )}\n\n        {loading && !initialLoadDone.current ? (\n          <div className=\"flex items-center justify-center py-20\">\n            <div className=\"text-center\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-blue-400 mx-auto mb-4\" />\n              <p className=\"text-slate-400\">Loading accounts...</p>\n            </div>\n          </div>\n        ) : accounts.length === 0 ? (\n          <div className=\"bg-slate-800/50 border border-slate-700 rounded-lg p-12 text-center\">\n            <AlertCircle className=\"w-12 h-12 text-slate-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-slate-300 mb-2\">No accounts found</h3>\n            <p className=\"text-slate-500 mb-6\">\n              {hasActiveFilters\n                ? \"Try adjusting your filters or search term\"\n                : \"Get started by adding your first account\"}\n            </p>\n            {!hasActiveFilters && (\n              <Button\n                onClick={() => setIsFormOpen(true)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Your First Account\n              </Button>\n            )}\n          </div>\n        ) : viewMode === \"list\" ? (\n          <>\n            {/* List/Table View */}\n            <div className=\"bg-slate-800 border border-slate-700 rounded-lg overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-slate-700/50\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-left\">\n                        <Checkbox\n                          checked={selectedAccounts.size === accounts.length && accounts.length > 0 && !selectAllMode}\n                          onCheckedChange={toggleSelectAll}\n                          className=\"border-slate-600\"\n                        />\n                      </th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Name</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Website</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Phone</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Industry</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Assigned To</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Type</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-slate-700\">\n                    {accounts.map((account) => (\n                      <tr\n                        key={account.id}\n                        className=\"hover:bg-slate-700/30 transition-colors\"\n                      >\n                        <td className=\"px-4 py-3\">\n                          <Checkbox\n                            checked={selectedAccounts.has(account.id) || selectAllMode}\n                            onCheckedChange={() => toggleSelection(account.id)}\n                            className=\"border-slate-600\"\n                          />\n                        </td>\n                        <td className=\"px-4 py-3 text-sm text-slate-300\">\n                          {account.name}\n                        </td>\n                        <td className=\"px-4 py-3 text-sm text-slate-300\">\n                          {account.website ? (\n                            <a href={account.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-400 hover:text-blue-300\">\n                              {account.website}\n                            </a>\n                          ) : (\n                            <span className=\"text-slate-500\">ΓÇö</span>\n                          )}\n                        </td>\n                        <td className=\"px-4 py-3 text-sm text-slate-300\">\n                          {account.phone || <span className=\"text-slate-500\">ΓÇö</span>}\n                        </td>\n                        <td className=\"px-4 py-3 text-sm text-slate-300\">\n                          {account.industry || <span className=\"text-slate-500\">ΓÇö</span>}\n                        </td>\n                        <td className=\"px-4 py-3 text-sm text-slate-300\">\n                          {employeesMap[account.assigned_to] || usersMap[account.assigned_to] || <span className=\"text-slate-500\">Unassigned</span>}\n                        </td>\n                        <td className=\"cursor-pointer p-3\" onClick={() => handleViewDetails(account)}>\n                          <Badge className={`${typeBadgeColors[account.type]} border capitalize text-xs font-semibold whitespace-nowrap`}>\n                            {account.type?.replace(/_/g, ' ')}\n                          </Badge>\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleViewDetails(account);\n                                  }}\n                                  className=\"h-8 w-8 text-slate-400 hover:text-blue-400\"\n                                >\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>View details</p>\n                              </TooltipContent>\n                            </Tooltip>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setEditingAccount(account);\n                                    setIsFormOpen(true);\n                                  }}\n                                  className=\"h-8 w-8 text-slate-400 hover:text-blue-400\"\n                                >\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>Edit account</p>\n                              </TooltipContent>\n                            </Tooltip>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleDelete(account.id);\n                                  }}\n                                  className=\"h-8 w-8 text-red-400 hover:text-red-300 hover:bg-red-900/20\"\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>Delete account</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            <Pagination\n              currentPage={currentPage}\n              totalPages={Math.ceil(totalItems / pageSize)}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              onPageChange={handlePageChange}\n              onPageSizeChange={handlePageSizeChange}\n              loading={loading}\n            />\n          </>\n        ) : (\n          <>\n            {/* Card View */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {accounts.map((account) => (\n                <AccountCard\n                  key={account.id}\n                  account={account}\n                  assignedUserName={employeesMap[account.assigned_to] || usersMap[account.assigned_to]}\n                  onEdit={(a) => {\n                    setEditingAccount(a);\n                    setIsFormOpen(true);\n                  }}\n                  onDelete={handleDelete}\n                  onViewDetails={handleViewDetails}\n                  onClick={() => handleViewDetails(account)}\n                  isSelected={selectedAccounts.has(account.id) || selectAllMode}\n                  onSelect={() => toggleSelection(account.id)}\n                  user={user}\n                />\n              ))}\n            </div>\n\n            <Pagination\n              currentPage={currentPage}\n              totalPages={Math.ceil(totalItems / pageSize)}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              onPageChange={handlePageChange}\n              onPageSizeChange={handlePageSizeChange}\n              loading={loading}\n            />\n          </>\n        )}\n      </div>\n    </TooltipProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Activities.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used.","line":17,"column":100,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":112,"suggestions":[{"messageId":"removeVar","data":{"varName":"CalendarIcon"},"fix":{"range":[907,933],"text":""},"desc":"Remove unused variable 'CalendarIcon'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'accountsMap' is assigned a value but never used.","line":321,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":321,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"accountsMap"},"fix":{"range":[11904,12072],"text":""},"desc":"Remove unused variable 'accountsMap'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'contactsMap' is assigned a value but never used.","line":328,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":328,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactsMap"},"fix":{"range":[12076,12276],"text":""},"desc":"Remove unused variable 'contactsMap'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'leadsMap' is assigned a value but never used.","line":335,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":335,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"leadsMap"},"fix":{"range":[12280,12459],"text":""},"desc":"Remove unused variable 'leadsMap'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'opportunitiesMap' is assigned a value but never used.","line":342,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":342,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"opportunitiesMap"},"fix":{"range":[12463,12658],"text":""},"desc":"Remove unused variable 'opportunitiesMap'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":818,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[28021,28070],"text":"Track and manage your team&apos;s activities and tasks"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[28021,28070],"text":"Track and manage your team&lsquo;s activities and tasks"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[28021,28070],"text":"Track and manage your team&#39;s activities and tasks"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[28021,28070],"text":"Track and manage your team&rsquo;s activities and tasks"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'checked' is defined but never used.","line":1093,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":1093,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"checked"},"fix":{"range":[39265,39272],"text":""},"desc":"Remove unused variable 'checked'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport { Activity } from \"@/api/entities\";\nimport { Account } from \"@/api/entities\";\nimport { Contact } from \"@/api/entities\";\nimport { Lead } from \"@/api/entities\";\nimport { Opportunity } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Employee } from \"@/api/entities\";\nimport { useApiManager } from \"../components/shared/ApiManager\";\nimport ActivityCard from \"../components/activities/ActivityCard\";\nimport ActivityForm from \"../components/activities/ActivityForm\";\nimport ActivityDetailPanel from \"../components/activities/ActivityDetailPanel\";\nimport BulkActionsMenu from \"../components/activities/BulkActionsMenu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Search, Upload, Loader2, Grid, List, AlertCircle, X, Edit, Eye, Trash2, Calendar as CalendarIcon } from \"lucide-react\";\nimport { AnimatePresence } from \"framer-motion\";\nimport CsvExportButton from \"../components/shared/CsvExportButton\";\nimport CsvImportDialog from \"../components/shared/CsvImportDialog\";\nimport { useTenant } from '../components/shared/tenantContext';\nimport Pagination from \"../components/shared/Pagination\";\nimport { toast } from \"sonner\";\nimport TagFilter from \"../components/shared/TagFilter\";\nimport { useEmployeeScope } from \"../components/shared/EmployeeScopeContext\";\nimport RefreshButton from \"../components/shared/RefreshButton\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { format } from \"date-fns\";\nimport SimpleModal from \"../components/shared/SimpleModal\";\nimport StatusHelper from \"../components/shared/StatusHelper\";\nimport { createPageUrl } from \"@/utils\";\nimport { Link } from \"react-router-dom\";\nimport { utcToLocal, getCurrentTimezoneOffset } from '../components/shared/timezoneUtils';\nimport { useTimezone } from '../components/shared/TimezoneContext';\n\nconst statusColors = {\n  scheduled: \"bg-blue-900/20 text-blue-300 border-blue-700\",\n  in_progress: \"bg-yellow-900/20 text-yellow-300 border-yellow-700\",\n  overdue: \"bg-red-900/20 text-red-300 border-red-700\",\n  completed: \"bg-emerald-900/20 text-emerald-300 border-emerald-700\",\n  cancelled: \"bg-slate-900/20 text-slate-300 border-slate-700\"\n};\n\nconst typeColors = {\n  call: \"bg-indigo-600 text-white\",\n  email: \"bg-purple-600 text-white\",\n  meeting: \"bg-blue-600 text-white\",\n  task: \"bg-green-600 text-white\",\n  note: \"bg-slate-600 text-white\",\n  demo: \"bg-orange-600 text-white\",\n  proposal: \"bg-pink-600 text-white\"\n};\n\nexport default function ActivitiesPage() {\n  const [activities, setActivities] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [contacts, setContacts] = useState([]);\n  const [leads, setLeads] = useState([]);\n  const [opportunities, setOpportunities] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingActivity, setEditingActivity] = useState(null);\n  const [viewMode, setViewMode] = useState(\"list\");\n  const [selectedActivities, setSelectedActivities] = useState(() => new Set());\n  const [selectAllMode, setSelectAllMode] = useState(false);\n  const [isImportOpen, setIsImportOpen] = useState(false);\n  const [user, setUser] = useState(null);\n  const { selectedTenantId } = useTenant();\n  const [detailActivity, setDetailActivity] = useState(null);\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [dateRange, setDateRange] = useState({ start: null, end: null });\n  const [showTestData, setShowTestData] = useState(false);\n  const { selectedEmail } = useEmployeeScope();\n\n  const { selectedTimezone } = useTimezone();\n  const offsetMinutes = getCurrentTimezoneOffset(selectedTimezone);\n\n  const [totalStats, setTotalStats] = useState({\n    total: 0,\n    scheduled: 0,\n    in_progress: 0,\n    overdue: 0,\n    completed: 0,\n    cancelled: 0\n  });\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(25);\n  const [totalItems, setTotalItems] = useState(0);\n\n  const { cachedRequest, clearCacheByKey } = useApiManager();\n  \n  const initialLoadDone = useRef(false);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const currentUser = await User.me();\n        setUser(currentUser);\n      } catch (error) {\n        console.error(\"Failed to load user:\", error);\n        toast.error(\"Failed to load user information\");\n      }\n    };\n    loadUser();\n  }, []);\n\n  const buildFilter = useCallback(() => {\n    if (!user) return {};\n    \n    let filter = {};\n    \n    if (user.role === 'superadmin' || user.role === 'admin') {\n      if (selectedTenantId) {\n        filter.tenant_id = selectedTenantId;\n      }\n    } else if (user.tenant_id) {\n      filter.tenant_id = user.tenant_id;\n    }\n    \n    if (selectedEmail && selectedEmail !== 'all') {\n      if (selectedEmail === 'unassigned') {\n        filter.$or = [{ assigned_to: null }, { assigned_to: '' }];\n      } else {\n        filter.assigned_to = selectedEmail;\n      }\n    } else if (user.employee_role === 'employee' && user.role !== 'admin' && user.role !== 'superadmin') {\n      filter.assigned_to = user.email;\n    }\n\n    if (statusFilter !== 'all') {\n      if (statusFilter === \"overdue\") {\n        filter.due_date = { $lt: new Date().toISOString() };\n        filter.status = { $nin: ['completed', 'cancelled'] };\n      } else {\n        filter.status = statusFilter;\n      }\n    }\n\n    if (typeFilter !== 'all') {\n      filter.type = typeFilter;\n    }\n\n    if (dateRange.start) {\n      filter.due_date = filter.due_date || {};\n      filter.due_date.$gte = dateRange.start;\n    }\n    if (dateRange.end) {\n      filter.due_date = filter.due_date || {};\n      filter.due_date.$lte = dateRange.end;\n    }\n\n    if (!showTestData) {\n      filter.is_test_data = { $ne: true };\n    }\n\n    return filter;\n  }, [user, selectedTenantId, selectedEmail, statusFilter, typeFilter, dateRange, showTestData]);\n\n\n  useEffect(() => {\n    const loadSupportingData = async () => {\n      if (!user) return;\n\n      try {\n        const supportingDataTenantFilter = {};\n        if (user.role === 'superadmin' || user.role === 'admin') {\n          if (selectedTenantId) {\n            supportingDataTenantFilter.tenant_id = selectedTenantId;\n          }\n        } else if (user.tenant_id) {\n          supportingDataTenantFilter.tenant_id = user.tenant_id;\n        }\n        \n        const [usersData, employeesData, accountsData, contactsData, leadsData, opportunitiesData] = await Promise.all([\n          cachedRequest('User', 'list', {}, () => User.list()),\n          cachedRequest('Employee', 'filter', { filter: supportingDataTenantFilter }, () => Employee.filter(supportingDataTenantFilter)),\n          cachedRequest('Account', 'filter', { filter: supportingDataTenantFilter }, () => Account.filter(supportingDataTenantFilter)),\n          cachedRequest('Contact', 'filter', { filter: supportingDataTenantFilter }, () => Contact.filter(supportingDataTenantFilter)),\n          cachedRequest('Lead', 'filter', { filter: supportingDataTenantFilter }, () => Lead.filter(supportingDataTenantFilter)),\n          cachedRequest('Opportunity', 'filter', { filter: supportingDataTenantFilter }, () => Opportunity.filter(supportingDataTenantFilter))\n        ]);\n\n        setUsers(usersData || []);\n        setEmployees(employeesData || []);\n        setAccounts(accountsData || []);\n        setContacts(contactsData || []);\n        setLeads(leadsData || []);\n        setOpportunities(opportunitiesData || []);\n      } catch (error) {\n        console.error(\"Failed to load supporting data:\", error);\n      }\n    };\n\n    loadSupportingData();\n  }, [user, selectedTenantId, cachedRequest]);\n\n  const loadTotalStats = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      const baseFilter = buildFilter();\n      \n      const allActivities = await Activity.filter(baseFilter, 'id', 10000);\n      \n      const now = new Date();\n      const stats = {\n        total: allActivities?.length || 0,\n        scheduled: allActivities?.filter(a => a.status === 'scheduled' && (!a.due_date || new Date(a.due_date) >= now)).length || 0,\n        in_progress: allActivities?.filter(a => a.status === 'in_progress' || a.status === 'in-progress').length || 0,\n        overdue: allActivities?.filter(a => {\n          if (a.status === 'completed' || a.status === 'cancelled') return false;\n          if (!a.due_date) return false;\n          return new Date(a.due_date) < now;\n        }).length || 0,\n        completed: allActivities?.filter(a => a.status === 'completed').length || 0,\n        cancelled: allActivities?.filter(a => a.status === 'cancelled').length || 0\n      };\n\n      setTotalStats(stats);\n    } catch (error) {\n      console.error(\"Failed to load total stats:\", error);\n    }\n  }, [user, buildFilter]);\n\n  useEffect(() => {\n    if (user) {\n      loadTotalStats();\n    }\n  }, [user, buildFilter, loadTotalStats]);\n\n  const loadActivities = useCallback(async (page = 1, size = 25) => {\n    if (!user) return;\n\n    setLoading(true);\n    try {\n      let currentFilter = buildFilter();\n      \n      if (searchTerm) {\n        const searchRegex = { $regex: searchTerm, $options: 'i' };\n        currentFilter = {\n          ...currentFilter,\n          $or: [\n            { subject: searchRegex },\n            { description: searchRegex },\n            { related_name: searchRegex }\n          ]\n        };\n      }\n\n      if (selectedTags.length > 0) {\n        currentFilter = { ...currentFilter, tags: { $all: selectedTags } };\n      }\n\n      const skip = (page - 1) * size;\n\n      console.log('[Activities] Loading page:', page, 'size:', size, 'skip:', skip, 'filter:', currentFilter);\n\n      const activitiesData = await Activity.filter(currentFilter, '-due_date', size, skip);\n      \n      const countQuery = await Activity.filter(currentFilter, 'id', 10000);\n      const totalCount = countQuery?.length || 0;\n\n      console.log('[Activities] Loaded:', activitiesData?.length, 'Total:', totalCount);\n\n      setActivities(activitiesData || []);\n      setTotalItems(totalCount);\n      setCurrentPage(page);\n      initialLoadDone.current = true;\n    } catch (error) {\n      console.error(\"Failed to load activities:\", error);\n      toast.error(\"Failed to load activities\");\n      setActivities([]);\n      setTotalItems(0);\n    } finally {\n      setLoading(false);\n    }\n  }, [user, searchTerm, selectedTags, buildFilter]);\n\n  useEffect(() => {\n    if (user) {\n      loadActivities(currentPage, pageSize);\n    }\n  }, [user, currentPage, pageSize, loadActivities]);\n\n  const handlePageChange = useCallback((newPage) => {\n    setCurrentPage(newPage);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  const handlePageSizeChange = useCallback((newSize) => {\n    setPageSize(newSize);\n    setCurrentPage(1);\n  }, []);\n\n  const usersMap = useMemo(() => {\n    return users.reduce((acc, user) => {\n      acc[user.email] = user.full_name || user.email;\n      return acc;\n    }, {});\n  }, [users]);\n\n  const employeesMap = useMemo(() => {\n    return employees.reduce((acc, employee) => {\n      if (employee.email) {\n        acc[employee.email] = `${employee.first_name} ${employee.last_name}`;\n      }\n      return acc;\n    }, {});\n  }, [employees]);\n\n  const accountsMap = useMemo(() => {\n    return accounts.reduce((acc, account) => {\n      acc[account.id] = account.name;\n      return acc;\n    }, {});\n  }, [accounts]);\n\n  const contactsMap = useMemo(() => {\n    return contacts.reduce((acc, contact) => {\n      acc[contact.id] = `${contact.first_name} ${contact.last_name}`;\n      return acc;\n    }, {});\n  }, [contacts]);\n\n  const leadsMap = useMemo(() => {\n    return leads.reduce((acc, lead) => {\n      acc[lead.id] = `${lead.first_name} ${lead.last_name}`;\n      return acc;\n    }, {});\n  }, [leads]);\n\n  const opportunitiesMap = useMemo(() => {\n    return opportunities.reduce((acc, opportunity) => {\n      acc[opportunity.id] = opportunity.name;\n      return acc;\n    }, {});\n  }, [opportunities]);\n\n  const allTags = useMemo(() => {\n    if (!Array.isArray(activities)) return [];\n    \n    const tagCounts = {};\n    activities.forEach(activity => {\n      if (Array.isArray(activity.tags)) {\n        activity.tags.forEach(tag => {\n          if (tag && typeof tag === 'string') {\n            tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n          }\n        });\n      }\n    });\n\n    return Object.entries(tagCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count);\n  }, [activities]);\n\n  const handleSave = async () => {\n    setIsFormOpen(false);\n    setEditingActivity(null);\n    clearCacheByKey('Activity');\n    await Promise.all([\n      loadActivities(currentPage, pageSize),\n      loadTotalStats()\n    ]);\n    toast.success(editingActivity ? \"Activity updated successfully\" : \"Activity created successfully\");\n  };\n\n  const handleDelete = async (id) => {\n    if (!window.confirm(\"Are you sure you want to delete this activity?\")) return;\n\n    try {\n      await Activity.delete(id);\n      clearCacheByKey('Activity');\n      await Promise.all([\n        loadActivities(currentPage, pageSize),\n        loadTotalStats()\n      ]);\n      toast.success(\"Activity deleted successfully\");\n    } catch (error) {\n      console.error(\"Failed to delete activity:\", error);\n      toast.error(\"Failed to delete activity\");\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    if (selectAllMode) {\n      if (!window.confirm(`Delete ALL ${totalItems} activity/activities? This cannot be undone!`)) return;\n\n      try {\n        let currentFilter = buildFilter();\n        \n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          currentFilter = {\n            ...currentFilter,\n            $or: [\n              { subject: searchRegex },\n              { description: searchRegex },\n              { related_name: searchRegex }\n            ]\n          };\n        }\n\n        const allActivities = await Activity.filter(currentFilter, 'id', 10000);\n        const deleteCount = allActivities.length;\n\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allActivities.length; i += BATCH_SIZE) {\n          const batch = allActivities.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(a => Activity.delete(a.id)));\n        }\n\n        setSelectedActivities(new Set());\n        setSelectAllMode(false);\n        clearCacheByKey('Activity');\n        await Promise.all([\n          loadActivities(1, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`${deleteCount} activity/activities deleted`);\n      } catch (error) {\n        console.error(\"Failed to delete activities:\", error);\n        toast.error(\"Failed to delete activities\");\n      }\n    } else {\n      if (!selectedActivities || selectedActivities.size === 0) {\n        toast.error(\"No activities selected\");\n        return;\n      }\n\n      if (!window.confirm(`Delete ${selectedActivities.size} activity/activities?`)) return;\n\n      try {\n        await Promise.all([...selectedActivities].map(id => Activity.delete(id)));\n        setSelectedActivities(new Set());\n        clearCacheByKey('Activity');\n        await Promise.all([\n          loadActivities(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`${selectedActivities.size} activity/activities deleted`);\n      } catch (error) {\n        console.error(\"Failed to delete activities:\", error);\n        toast.error(\"Failed to delete activities\");\n      }\n    }\n  };\n\n  const handleBulkStatusChange = async (newStatus) => {\n    if (selectAllMode) {\n      if (!window.confirm(`Update status for ALL ${totalItems} activity/activities to ${newStatus}?`)) return;\n\n      try {\n        let currentFilter = buildFilter();\n        \n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          currentFilter = {\n            ...currentFilter,\n            $or: [\n              { subject: searchRegex },\n              { description: searchRegex },\n              { related_name: searchRegex }\n            ]\n          };\n        }\n\n        const allActivities = await Activity.filter(currentFilter, 'id', 10000);\n        const updateCount = allActivities.length;\n\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allActivities.length; i += BATCH_SIZE) {\n          const batch = allActivities.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(a => Activity.update(a.id, { status: newStatus })));\n        }\n\n        setSelectedActivities(new Set());\n        setSelectAllMode(false);\n        clearCacheByKey('Activity');\n        await Promise.all([\n          loadActivities(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Updated ${updateCount} activity/activities to ${newStatus}`);\n      } catch (error) {\n        console.error(\"Failed to update activities:\", error);\n        toast.error(\"Failed to update activities\");\n      }\n    } else {\n      if (!selectedActivities || selectedActivities.size === 0) {\n        toast.error(\"No activities selected\");\n        return;\n      }\n\n      try {\n        const promises = [...selectedActivities].map(id => \n          Activity.update(id, { status: newStatus })\n        );\n        \n        await Promise.all(promises);\n        setSelectedActivities(new Set());\n        clearCacheByKey('Activity');\n        await Promise.all([\n          loadActivities(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Updated ${promises.length} activity/activities to ${newStatus}`);\n      } catch (error) {\n        console.error(\"Failed to update activities:\", error);\n        toast.error(\"Failed to update activities\");\n      }\n    }\n  };\n\n  const handleBulkAssign = async (assignedTo) => {\n    if (selectAllMode) {\n      if (!window.confirm(`Assign ALL ${totalItems} activity/activities?`)) return;\n\n      try {\n        let currentFilter = buildFilter();\n        \n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          currentFilter = {\n            ...currentFilter,\n            $or: [\n              { subject: searchRegex },\n              { description: searchRegex },\n              { related_name: searchRegex }\n            ]\n          };\n        }\n\n        const allActivities = await Activity.filter(currentFilter, 'id', 10000);\n        const updateCount = allActivities.length;\n\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allActivities.length; i += BATCH_SIZE) {\n          const batch = allActivities.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(a => Activity.update(a.id, { assigned_to: assignedTo || null })));\n        }\n\n        setSelectedActivities(new Set());\n        setSelectAllMode(false);\n        clearCacheByKey('Activity');\n        await Promise.all([\n          loadActivities(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Assigned ${updateCount} activity/activities`);\n      } catch (error) {\n        console.error(\"Failed to assign activities:\", error);\n        toast.error(\"Failed to assign activities\");\n      }\n    } else {\n      if (!selectedActivities || selectedActivities.size === 0) {\n        toast.error(\"No activities selected\");\n        return;\n      }\n\n      try {\n        const promises = [...selectedActivities].map(id => \n          Activity.update(id, { assigned_to: assignedTo || null })\n        );\n        \n        await Promise.all(promises);\n        setSelectedActivities(new Set());\n        clearCacheByKey('Activity');\n        await Promise.all([\n          loadActivities(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Assigned ${promises.length} activity/activities`);\n      } catch (error) {\n        console.error(\"Failed to assign activities:\", error);\n        toast.error(\"Failed to assign activities\");\n      }\n    }\n  };\n\n  const toggleSelection = (id) => {\n    const newSet = new Set(selectedActivities);\n    if (newSet.has(id)) {\n      newSet.delete(id);\n    } else {\n      newSet.add(id);\n    }\n    setSelectedActivities(newSet);\n    setSelectAllMode(false);\n  };\n\n  const toggleSelectAll = () => {\n    if (selectedActivities.size === activities.length && activities.length > 0) {\n      setSelectedActivities(new Set());\n      setSelectAllMode(false);\n    } else {\n      setSelectedActivities(new Set(activities.map(a => a.id)));\n      setSelectAllMode(false);\n    }\n  };\n\n  const handleSelectAllRecords = () => {\n    setSelectAllMode(true);\n    setSelectedActivities(new Set(activities.map(a => a.id)));\n  };\n\n  const handleClearSelection = () => {\n    setSelectedActivities(new Set());\n    setSelectAllMode(false);\n  };\n\n  const handleViewDetails = (activity) => {\n    setDetailActivity(activity);\n    setIsDetailOpen(true);\n  };\n\n  const handleRefresh = async () => {\n    clearCacheByKey('Activity');\n    clearCacheByKey('Employee');\n    clearCacheByKey('Account');\n    clearCacheByKey('Contact');\n    clearCacheByKey('Lead');\n    clearCacheByKey('Opportunity');\n    await Promise.all([\n      loadActivities(currentPage, pageSize),\n      loadTotalStats()\n    ]);\n    toast.success(\"Activities refreshed\");\n  };\n\n  const handleStatusFilterClick = (status) => {\n    setStatusFilter(status);\n    setCurrentPage(1);\n  };\n\n  const handleClearFilters = () => {\n    setSearchTerm(\"\");\n    setStatusFilter(\"all\");\n    setTypeFilter(\"all\");\n    setSelectedTags([]);\n    setDateRange({ start: null, end: null });\n    setShowTestData(false);\n    setCurrentPage(1);\n    handleClearSelection();\n  };\n\n  const hasActiveFilters = useMemo(() => {\n    return searchTerm !== \"\" \n      || statusFilter !== \"all\" \n      || typeFilter !== \"all\" \n      || selectedTags.length > 0\n      || dateRange.start !== null\n      || dateRange.end !== null\n      || showTestData;\n  }, [searchTerm, statusFilter, typeFilter, selectedTags, dateRange, showTestData]);\n\n  const getRelatedEntityLink = (activity) => {\n    if (!activity.related_to || !activity.related_id) return null;\n\n    const entityMap = {\n      contact: { url: createPageUrl('Contacts'), label: 'Contact' },\n      account: { url: createPageUrl('Accounts'), label: 'Account' },\n      lead: { url: createPageUrl('Leads'), label: 'Lead' },\n      opportunity: { url: createPageUrl('Opportunities'), label: 'Opportunity' }\n    };\n\n    const entity = entityMap[activity.related_to];\n    if (!entity) return null;\n\n    return (\n      <Link \n        to={entity.url} \n        className=\"text-blue-400 hover:text-blue-300 hover:underline\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {activity.related_name || `View ${entity.label}`}\n      </Link>\n    );\n  };\n\n  const statusDescriptions = useMemo(() => ({\n    total_all: \"Total number of activities.\",\n    activity_scheduled: \"Activities planned for a future date or time, not yet started.\",\n    activity_in_progress: \"Activities that are currently being worked on.\",\n    activity_overdue: \"Activities that have passed their due date and are not yet completed.\",\n    activity_completed: \"Activities that have been successfully finished.\",\n    activity_cancelled: \"Activities that were planned but later cancelled.\"\n  }), []);\n\n  const formatDisplayDate = useCallback((activity) => {\n    if (!activity.due_date) return 'ΓÇö';\n    \n    try {\n      if (activity.due_time) {\n        const datePart = activity.due_date.split('T')[0];\n        const utcString = `${datePart}T${activity.due_time}:00.000Z`;\n        const localDate = utcToLocal(utcString, offsetMinutes);\n        return format(localDate, 'MMM d, yyyy h:mm a');\n      } else {\n        const parts = activity.due_date.split('-').map(Number);\n        const localCalendarDate = new Date(parts[0], parts[1] - 1, parts[2]);\n        return format(localCalendarDate, 'MMM d, yyyy');\n      }\n    } catch (error) {\n      console.error('Error formatting date:', error, 'Activity:', activity);\n      return activity.due_date;\n    }\n  }, [offsetMinutes]);\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 p-6 flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n      </div>\n    );\n  }\n\n  return (\n    <TooltipProvider>\n      <div className=\"min-h-screen bg-slate-900 p-4 sm:p-6\">\n        <SimpleModal\n          open={isFormOpen}\n          onOpenChange={(open) => {\n            console.log('[Activities] Modal onOpenChange:', open);\n            setIsFormOpen(open);\n            if (!open) {\n              setEditingActivity(null);\n            }\n          }}\n          title={editingActivity ? \"Edit Activity\" : \"Add New Activity\"}\n          size=\"lg\"\n        >\n          <ActivityForm\n            activity={editingActivity}\n            accounts={accounts}\n            contacts={contacts}\n            leads={leads}\n            opportunities={opportunities}\n            users={users}\n            tenantId={user?.tenant_id}\n            onSubmit={async (payload) => {\n              try {\n                console.log('[Activities] Form submitted:', { isEdit: !!editingActivity, payload });\n                if (editingActivity) {\n                  await Activity.update(editingActivity.id, payload);\n                } else {\n                  await Activity.create(payload);\n                }\n                await handleSave();\n              } catch (error) {\n                console.error(\"Error saving activity:\", error);\n                toast.error(\"Failed to save activity\");\n              }\n            }}\n            onCancel={() => {\n              console.log('[Activities] Form cancelled');\n              setIsFormOpen(false);\n              setEditingActivity(null);\n            }}\n          />\n        </SimpleModal>\n\n        <CsvImportDialog\n          open={isImportOpen}\n          onOpenChange={setIsImportOpen}\n          schema={Activity.schema ? Activity.schema() : null}\n          onSuccess={async () => {\n            clearCacheByKey('Activity');\n            await Promise.all([\n              loadActivities(1, pageSize),\n              loadTotalStats()\n            ]);\n          }}\n        />\n\n        {isDetailOpen && detailActivity && (\n          <ActivityDetailPanel\n            activity={detailActivity}\n            accounts={accounts}\n            contacts={contacts}\n            leads={leads}\n            opportunities={opportunities}\n            users={users}\n            assignedUserName={employeesMap[detailActivity.assigned_to] || usersMap[detailActivity.assigned_to] || detailActivity.assigned_to_name}\n            relatedName={detailActivity.related_name}\n            open={isDetailOpen}\n            onOpenChange={() => {\n              setIsDetailOpen(false);\n              setDetailActivity(null);\n            }}\n            onEdit={(activity) => {\n              setEditingActivity(activity);\n              setIsFormOpen(true);\n              setIsDetailOpen(false);\n            }}\n            onDelete={async (id) => {\n              await handleDelete(id);\n              setIsDetailOpen(false);\n            }}\n            user={user}\n          />\n        )}\n\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-100 mb-2\">Activities</h1>\n            <p className=\"text-slate-400\">Track and manage your team's activities and tasks</p>\n          </div>\n          <div className=\"flex flex-wrap items-center gap-2\">\n            <RefreshButton onClick={handleRefresh} loading={loading} />\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setViewMode(viewMode === \"list\" ? \"grid\" : \"list\")}\n                  className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                >\n                  {viewMode === \"list\" ? <List className=\"w-4 h-4\" /> : <Grid className=\"w-4 h-4\" />}\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Switch view</p>\n              </TooltipContent>\n            </Tooltip>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsImportOpen(true)}\n                  className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Import\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Import activities from CSV</p>\n              </TooltipContent>\n            </Tooltip>\n            <CsvExportButton\n              entityName=\"Activity\"\n              data={activities}\n              filename=\"activities_export\"\n            />\n            {(selectedActivities.size > 0 || selectAllMode) && (\n              <BulkActionsMenu\n                selectedCount={selectAllMode ? totalItems : selectedActivities.size}\n                onBulkStatusChange={handleBulkStatusChange}\n                onBulkAssign={handleBulkAssign}\n                onBulkDelete={handleBulkDelete}\n                selectAllMode={selectAllMode}\n                totalCount={totalItems}\n              />\n            )}\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  onClick={() => {\n                    console.log('[Activities] Add button clicked');\n                    setEditingActivity(null);\n                    setIsFormOpen(true);\n                    console.log('[Activities] State after click:', { isFormOpen: true, editingActivity: null });\n                  }}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Activity\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Create new activity</p>\n              </TooltipContent>\n            </Tooltip>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4 mb-6\">\n          {[\n            { \n              label: 'Total Activities', \n              value: totalStats.total, \n              filter: 'all', \n              bgColor: 'bg-slate-800',\n              tooltip: 'total_all'\n            },\n            { \n              label: 'Scheduled', \n              value: totalStats.scheduled, \n              filter: 'scheduled', \n              bgColor: 'bg-blue-900/20', \n              borderColor: 'border-blue-700',\n              tooltip: 'activity_scheduled'\n            },\n            { \n              label: 'In Progress', \n              value: totalStats.in_progress, \n              filter: 'in_progress', \n              bgColor: 'bg-yellow-900/20', \n              borderColor: 'border-yellow-700',\n              tooltip: 'activity_in_progress'\n            },\n            { \n              label: 'Overdue', \n              value: totalStats.overdue, \n              filter: 'overdue', \n              bgColor: 'bg-red-900/20', \n              borderColor: 'border-red-700',\n              tooltip: 'activity_overdue'\n            },\n            { \n              label: 'Completed', \n              value: totalStats.completed, \n              filter: 'completed', \n              bgColor: 'bg-emerald-900/20', \n              borderColor: 'border-emerald-700',\n              tooltip: 'activity_completed'\n            },\n            { \n              label: 'Cancelled', \n              value: totalStats.cancelled, \n              filter: 'cancelled', \n              bgColor: 'bg-slate-900/20', \n              borderColor: 'border-slate-700',\n              tooltip: 'activity_cancelled'\n            },\n          ].map((stat) => (\n            <Tooltip key={stat.label}>\n              <TooltipTrigger asChild>\n                <div\n                  className={`${stat.bgColor} ${stat.borderColor || 'border-slate-700'} border rounded-lg p-4 cursor-pointer hover:scale-105 transition-all ${\n                    statusFilter === stat.filter ? 'ring-2 ring-blue-500 ring-offset-2 ring-offset-slate-900' : ''\n                  }`}\n                  onClick={() => handleStatusFilterClick(stat.filter)}\n                >\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <p className=\"text-sm text-slate-400\">{stat.label}</p>\n                    <StatusHelper statusKey={stat.tooltip} />\n                  </div>\n                  <p className=\"text-2xl font-bold text-slate-100\">{stat.value}</p>\n                </div>\n              </TooltipTrigger>\n              <TooltipContent className=\"max-w-xs\">\n                <p>Click to filter by {stat.label.toLowerCase()}. {stat.tooltip && statusDescriptions[stat.tooltip]}</p>\n              </TooltipContent>\n            </Tooltip>\n          ))}\n        </div>\n\n        <div className=\"flex flex-col lg:flex-row gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-3 w-5 h-5 text-slate-500\" />\n            <Input\n              placeholder=\"Search activities by subject, description, or related entity...\"\n              value={searchTerm}\n              onChange={(e) => {\n                setSearchTerm(e.target.value);\n                setCurrentPage(1);\n              }}\n              className=\"pl-10 bg-slate-800 border-slate-700 text-slate-200\"\n            />\n          </div>\n          \n          <div className=\"flex flex-wrap gap-2\">\n            <TagFilter \n              allTags={allTags}\n              selectedTags={selectedTags} \n              setSelectedTags={setSelectedTags} \n              className=\"w-48 bg-slate-800 border-slate-700 text-slate-200\" \n              contentClassName=\"bg-slate-800 border-slate-700\"\n              itemClassName=\"text-slate-200 hover:bg-slate-700\"\n            />\n\n            {hasActiveFilters && (\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleClearFilters}\n                    className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                  >\n                    <X className=\"w-4 h-4 mr-1\" />\n                    Clear\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Clear all filters</p>\n                </TooltipContent>\n              </Tooltip>\n            )}\n          </div>\n        </div>\n\n        {selectedActivities.size === activities.length && activities.length > 0 && !selectAllMode && totalItems > activities.length && (\n          <div className=\"mb-4 bg-blue-900/20 border border-blue-700 rounded-lg p-4 flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"text-blue-200\">\n                All {activities.length} activities on this page are selected.\n              </span>\n              <Button\n                variant=\"link\"\n                onClick={handleSelectAllRecords}\n                className=\"text-blue-400 hover:text-blue-300 p-0 h-auto\"\n              >\n                Select all {totalItems} activities matching current filters\n              </Button>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClearSelection}\n              className=\"text-slate-400 hover:text-slate-200\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        )}\n\n        {selectAllMode && (\n          <div className=\"mb-4 bg-blue-900/20 border border-blue-700 rounded-lg p-4 flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"text-blue-200 font-semibold\">\n                All {totalItems} activities matching current filters are selected.\n              </span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClearSelection}\n              className=\"text-slate-400 hover:text-slate-200\"\n            >\n              Clear selection\n            </Button>\n          </div>\n        )}\n\n        {loading && !initialLoadDone.current ? (\n          <div className=\"flex items-center justify-center py-20\">\n            <div className=\"text-center\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-blue-400 mx-auto mb-4\" />\n              <p className=\"text-slate-400\">Loading activities...</p>\n            </div>\n          </div>\n        ) : activities.length === 0 ? (\n          <div className=\"bg-slate-800/50 border border-slate-700 rounded-lg p-12 text-center\">\n            <AlertCircle className=\"w-12 h-12 text-slate-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-slate-300 mb-2\">No activities found</h3>\n            <p className=\"text-slate-500 mb-6\">\n              {hasActiveFilters\n                ? \"Try adjusting your filters or search term\"\n                : \"Get started by adding your first activity\"}\n            </p>\n            {!hasActiveFilters && (\n              <Button\n                onClick={() => setIsFormOpen(true)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Your First Activity\n              </Button>\n            )}\n          </div>\n        ) : viewMode === \"grid\" ? (\n          <>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <AnimatePresence>\n                {activities.map((activity) => (\n                  <ActivityCard\n                    key={activity.id}\n                    activity={activity}\n                    assignedUserName={employeesMap[activity.assigned_to] || usersMap[activity.assigned_to] || activity.assigned_to_name}\n                    relatedName={activity.related_name}\n                    onEdit={() => {\n                      setEditingActivity(activity);\n                      setIsFormOpen(true);\n                    }}\n                    onDelete={() => handleDelete(activity.id)}\n                    onViewDetails={() => handleViewDetails(activity)}\n                    isSelected={selectedActivities.has(activity.id)}\n                    onSelect={(checked) => toggleSelection(activity.id)}\n                  />\n                ))}\n              </AnimatePresence>\n            </div>\n\n            <Pagination\n              currentPage={currentPage}\n              totalPages={Math.ceil(totalItems / pageSize)}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              onPageChange={handlePageChange}\n              onPageSizeChange={handlePageSizeChange}\n              loading={loading}\n            />\n          </>\n        ) : (\n          <>\n            <div className=\"bg-slate-800 border border-slate-700 rounded-lg overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader className=\"bg-slate-700/50\">\n                    <TableRow>\n                      <TableHead className=\"w-12 p-3\">\n                        <Checkbox\n                          checked={selectedActivities.size === activities.length && activities.length > 0 && !selectAllMode}\n                          onCheckedChange={toggleSelectAll}\n                          className=\"border-slate-600\"\n                        />\n                      </TableHead>\n                      <TableHead className=\"text-left p-3 font-medium text-slate-300\">Activity</TableHead>\n                      <TableHead className=\"text-left p-3 font-medium text-slate-300\">Type</TableHead>\n                      <TableHead className=\"text-left p-3 font-medium text-slate-300\">Status</TableHead>\n                      <TableHead className=\"text-left p-3 font-medium text-slate-300\">Due Date</TableHead>\n                      <TableHead className=\"text-left p-3 font-medium text-slate-300\">Related To</TableHead>\n                      <TableHead className=\"text-left p-3 font-medium text-slate-300\">Assigned To</TableHead>\n                      <TableHead className=\"w-24 p-3 font-medium text-slate-300\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {activities.map((activity) => (\n                      <TableRow key={activity.id} className=\"hover:bg-slate-700/30 transition-colors border-b border-slate-800\">\n                        <TableCell className=\"text-center p-3\">\n                          <Checkbox\n                            checked={selectedActivities.has(activity.id) || selectAllMode}\n                            onCheckedChange={() => toggleSelection(activity.id)}\n                            className=\"border-slate-600 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium text-slate-200 cursor-pointer p-3\" onClick={() => handleViewDetails(activity)}>\n                          <div className=\"font-semibold\">{activity.subject}</div>\n                          {activity.description && <div className=\"text-xs text-slate-400 truncate max-w-xs\">{activity.description}</div>}\n                        </TableCell>\n                        <TableCell className=\"cursor-pointer p-3\" onClick={() => handleViewDetails(activity)}>\n                          <Badge className={`${typeColors[activity.type]} capitalize text-xs`}>\n                            {activity.type}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"cursor-pointer p-3\" onClick={() => handleViewDetails(activity)}>\n                          <Badge className={`${statusColors[activity.status]} capitalize text-xs`}>\n                            {activity.status?.replace(/_/g, ' ')}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-slate-300 cursor-pointer p-3\" onClick={() => handleViewDetails(activity)}>\n                          {formatDisplayDate(activity)}\n                        </TableCell>\n                        <TableCell className=\"text-slate-300 cursor-pointer p-3\" onClick={() => handleViewDetails(activity)}>\n                          {getRelatedEntityLink(activity) || 'ΓÇö'}\n                        </TableCell>\n                        <TableCell className=\"text-slate-300 cursor-pointer p-3\" onClick={() => handleViewDetails(activity)}>\n                          {employeesMap[activity.assigned_to] || usersMap[activity.assigned_to] || activity.assigned_to_name || <span className=\"text-slate-500\">Unassigned</span>}\n                        </TableCell>\n                        <TableCell className=\"p-3\">\n                          <div className=\"flex items-center gap-1\">\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setEditingActivity(activity);\n                                    setIsFormOpen(true);\n                                  }}\n                                  className=\"h-8 w-8 text-slate-400 hover:text-slate-200 hover:bg-slate-700\"\n                                >\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>Edit activity</p>\n                              </TooltipContent>\n                            </Tooltip>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleViewDetails(activity);\n                                  }}\n                                  className=\"h-8 w-8 text-slate-400 hover:text-slate-200 hover:bg-slate-700\"\n                                >\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>View details</p>\n                              </TooltipContent>\n                            </Tooltip>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleDelete(activity.id);\n                                  }}\n                                  className=\"h-8 w-8 text-red-400 hover:text-red-300 hover:bg-red-900/20\"\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>Delete activity</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </div>\n\n            <Pagination\n              currentPage={currentPage}\n              totalPages={Math.ceil(totalItems / pageSize)}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              onPageChange={handlePageChange}\n              onPageSizeChange={handlePageSizeChange}\n              loading={loading}\n            />\n          </>\n        )}\n      </div>\n    </TooltipProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Agent.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has a missing dependency: 'user'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [user, selectedTenantId]","fix":{"range":[1686,1733],"text":"[user, selectedTenantId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport AgentChat from \"../components/agents/AgentChat\";\nimport { Sparkles, AlertCircle } from \"lucide-react\";\nimport { useTenant } from \"../components/shared/tenantContext\";\nimport { isValidId } from \"../components/shared/tenantUtils\";\nimport { User } from \"@/api/entities\";\n\nexport default function Agent() {\n  const { selectedTenantId } = useTenant();\n  const [user, setUser] = React.useState(null);\n  const [currentTenantData, setCurrentTenantData] = React.useState(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    User.me().then(setUser).catch(console.error);\n  }, []);\n\n  React.useEffect(() => {\n    if (!selectedTenantId) {\n      setCurrentTenantData(null);\n      setLoading(false);\n      return;\n    }\n\n    const loadTenantData = async () => {\n      setLoading(true);\n      try {\n        const { Tenant } = await import(\"@/api/entities\");\n        const tenant = await Tenant.get(selectedTenantId);\n        setCurrentTenantData(tenant);\n      } catch (error) {\n        console.error(\"Failed to load tenant data:\", error);\n        setCurrentTenantData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadTenantData();\n  }, [selectedTenantId]);\n\n  const effectiveTenantId = React.useMemo(() => {\n    if (!user) return null;\n    const isAdminLike = (user?.role === 'admin' || user?.role === 'superadmin');\n    let nextTenantId = null;\n\n    if (isAdminLike) {\n      nextTenantId = selectedTenantId || user?.tenant_id;\n    } else {\n      nextTenantId = user?.tenant_id;\n    }\n    return nextTenantId && typeof nextTenantId === 'string' && isValidId(nextTenantId) ? nextTenantId : null;\n  }, [user?.role, user?.tenant_id, selectedTenantId]);\n\n  const effectiveTenantName = currentTenantData?.name || null;\n\n  if (!user || loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 p-4 lg:p-8 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-cyan-400 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-slate-400\">Loading AI Agent...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!effectiveTenantId) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 p-4 lg:p-8\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <div className=\"w-10 h-10 lg:w-12 lg:h-12 flex items-center justify-center rounded-full bg-slate-700/50 border border-slate-600/50\">\n            <Sparkles className=\"w-5 h-5 lg:w-7 lg:h-7 text-cyan-400\" />\n          </div>\n          <div>\n            <h1 className=\"text-2xl lg:text-3xl font-bold text-slate-100\">AI Executive Assistant</h1>\n            <p className=\"text-slate-400 mt-1\">Chat with an agent that can research the web and work with your CRM data.</p>\n          </div>\n        </div>\n\n        <div className=\"bg-amber-900/30 border border-amber-700/50 rounded-lg p-6 flex items-start gap-4\">\n          <AlertCircle className=\"w-6 h-6 text-amber-400 flex-shrink-0 mt-1\" />\n          <div>\n            <h3 className=\"text-lg font-semibold text-amber-200 mb-2\">No Client Selected</h3>\n            <p className=\"text-amber-100/80\">\n              {user.role === 'admin' || user.role === 'superadmin' \n                ? 'Please select a client from the header to use the AI Agent.'\n                : 'No client is assigned to your account. Please contact your administrator.'}\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-4 lg:p-8 space-y-6\">\n      <div className=\"flex items-center gap-3\">\n        <div className=\"w-10 h-10 lg:w-12 lg:h-12 flex items-center justify-center rounded-full bg-slate-700/50 border border-slate-600/50\">\n          <Sparkles className=\"w-5 h-5 lg:w-7 lg:h-7 text-cyan-400\" />\n        </div>\n        <div>\n          <h1 className=\"text-2xl lg:text-3xl font-bold text-slate-100\">AI Executive Assistant</h1>\n          <p className=\"text-slate-400 mt-1\">Chat with an agent that can research the web and work with your CRM data.</p>\n        </div>\n      </div>\n\n      <AgentChat \n        key={`agent-chat-${effectiveTenantId}`}\n        agentName=\"crm_assistant\"\n        tenantId={effectiveTenantId}\n        tenantName={effectiveTenantName}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\AuditLog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Filter' is defined but never used.","line":11,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"Filter"},"fix":{"range":[608,616],"text":""},"desc":"Remove unused variable 'Filter'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Download' is defined but never used.","line":11,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"Download"},"fix":{"range":[616,626],"text":""},"desc":"Remove unused variable 'Download'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'currentUser' is assigned a value but never used.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentUser"},"fix":{"range":[1100,1111],"text":""},"desc":"Remove unused variable 'currentUser'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { AuditLog } from '@/api/entities';\nimport { User } from '@/api/entities';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Search, Calendar, Filter, Download, Shield } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { toast } from 'sonner';\n\nexport default function AuditLogPage() {\n  const [auditLogs, setAuditLogs] = useState([]);\n  const [filteredLogs, setFilteredLogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [actionFilter, setActionFilter] = useState('all');\n  const [entityFilter, setEntityFilter] = useState('all');\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    // Filter logs logic moved directly into useEffect\n    let filtered = auditLogs;\n\n    if (searchTerm) {\n      filtered = filtered.filter(log => \n        log.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        log.user_email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        log.entity_type?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    if (actionFilter && actionFilter !== 'all') {\n      filtered = filtered.filter(log => log.action_type === actionFilter);\n    }\n\n    if (entityFilter && entityFilter !== 'all') {\n      filtered = filtered.filter(log => log.entity_type === entityFilter);\n    }\n\n    setFilteredLogs(filtered);\n  }, [auditLogs, searchTerm, actionFilter, entityFilter]);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      const [user, logs] = await Promise.all([\n        User.me(),\n        AuditLog.list('-created_date', 100) // Get last 100 entries\n      ]);\n      \n      setCurrentUser(user);\n      setAuditLogs(logs);\n    } catch (error) {\n      console.error('Error loading audit logs:', error);\n      toast.error('Failed to load audit logs');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getActionBadgeColor = (action) => {\n    switch (action) {\n      case 'create': return 'bg-green-700 text-green-100'; // Dark theme colors\n      case 'update': return 'bg-blue-700 text-blue-100';\n      case 'delete': return 'bg-red-700 text-red-100';\n      case 'login': return 'bg-purple-700 text-purple-100';\n      case 'logout': return 'bg-gray-700 text-gray-100';\n      default: return 'bg-slate-700 text-slate-100';\n    }\n  };\n\n  const getRoleDisplay = (log) => {\n    // Use display role if available, otherwise fall back to the base role\n    return log.user_display_role || log.user_role;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-6 bg-slate-900 min-h-screen\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-slate-700 rounded w-64\"></div>\n          <div className=\"h-64 bg-slate-700 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6 bg-slate-900 min-h-screen\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-100 flex items-center gap-3\">\n            <Shield className=\"w-8 h-8 text-blue-400\" />\n            Audit Log\n          </h1>\n          <p className=\"text-slate-400 mt-1\">\n            Track all system changes and user activities\n          </p>\n        </div>\n        <Button variant=\"outline\" onClick={loadData} className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n          <Calendar className=\"w-4 h-4 mr-2\" />\n          Refresh\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"shadow-lg border-0 bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-lg text-slate-100\">Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block text-slate-200\">Search</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n                <Input\n                  placeholder=\"Search descriptions, users, entities...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400 focus:border-slate-500\"\n                />\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block text-slate-200\">Action Type</label>\n              <Select value={actionFilter} onValueChange={setActionFilter}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"all\" className=\"text-slate-200 hover:bg-slate-700\">All Actions</SelectItem>\n                  <SelectItem value=\"create\" className=\"text-slate-200 hover:bg-slate-700\">Create</SelectItem>\n                  <SelectItem value=\"update\" className=\"text-slate-200 hover:bg-slate-700\">Update</SelectItem>\n                  <SelectItem value=\"delete\" className=\"text-slate-200 hover:bg-slate-700\">Delete</SelectItem>\n                  <SelectItem value=\"login\" className=\"text-slate-200 hover:bg-slate-700\">Login</SelectItem>\n                  <SelectItem value=\"logout\" className=\"text-slate-200 hover:bg-slate-700\">Logout</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block text-slate-200\">Entity Type</label>\n              <Select value={entityFilter} onValueChange={setEntityFilter}>\n                <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-700\">\n                  <SelectItem value=\"all\" className=\"text-slate-200 hover:bg-slate-700\">All Entities</SelectItem>\n                  <SelectItem value=\"Lead\" className=\"text-slate-200 hover:bg-slate-700\">Leads</SelectItem>\n                  <SelectItem value=\"Contact\" className=\"text-slate-200 hover:bg-slate-700\">Contacts</SelectItem>\n                  <SelectItem value=\"Account\" className=\"text-slate-200 hover:bg-slate-700\">Accounts</SelectItem>\n                  <SelectItem value=\"Opportunity\" className=\"text-slate-200 hover:bg-slate-700\">Opportunities</SelectItem>\n                  <SelectItem value=\"Activity\" className=\"text-slate-200 hover:bg-slate-700\">Activities</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Audit Log Table */}\n      <Card className=\"shadow-lg border-0 bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Activity Log ({filteredLogs.length} entries)</CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Recent system activities and changes\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {filteredLogs.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Shield className=\"w-12 h-12 mx-auto text-slate-500 mb-4\" />\n              <h3 className=\"text-lg font-semibold text-slate-300 mb-2\">No Audit Logs Found</h3>\n              <p className=\"text-slate-400\">No activities match your current filters.</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"border-b border-slate-700\">\n                    <TableHead className=\"text-slate-300\">Date & Time</TableHead>\n                    <TableHead className=\"text-slate-300\">User</TableHead>\n                    <TableHead className=\"text-slate-300\">Action</TableHead>\n                    <TableHead className=\"text-slate-300\">Entity</TableHead>\n                    <TableHead className=\"text-slate-300\">Description</TableHead>\n                    <TableHead className=\"text-slate-300\">Changes</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredLogs.map((log) => (\n                    <TableRow key={log.id} className=\"border-b border-slate-800 hover:bg-slate-700/50\">\n                      <TableCell className=\"font-mono text-sm text-slate-200\">\n                        {format(new Date(log.created_date), 'MMM d, yyyy HH:mm:ss')}\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium text-slate-200\">{log.user_email}</div>\n                          <Badge variant=\"outline\" className=\"text-xs border-slate-600 text-slate-300\">\n                            {getRoleDisplay(log)}\n                          </Badge>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={`${getActionBadgeColor(log.action_type)} border-slate-600`}>\n                          {log.action_type}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium text-slate-200\">{log.entity_type || 'System'}</div>\n                          {log.entity_id && (\n                            <div className=\"text-xs text-slate-400 font-mono\">\n                              ID: {log.entity_id.substring(0, 8)}...\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"max-w-md\">\n                        <div className=\"truncate text-slate-300\" title={log.description}>\n                          {log.description}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {(log.old_values || log.new_values) && (\n                          <details className=\"cursor-pointer\">\n                            <summary className=\"text-blue-400 hover:text-blue-300 text-sm\">\n                              View Changes\n                            </summary>\n                            <div className=\"mt-2 p-2 bg-slate-700 rounded text-xs space-y-1 border border-slate-600\">\n                              {log.old_values && (\n                                <div>\n                                  <strong className=\"text-slate-200\">Before:</strong>\n                                  <pre className=\"whitespace-pre-wrap text-slate-300\">\n                                    {JSON.stringify(log.old_values, null, 2)}\n                                  </pre>\n                                </div>\n                              )}\n                              {log.new_values && (\n                                <div>\n                                  <strong className=\"text-slate-200\">After:</strong>\n                                  <pre className=\"whitespace-pre-wrap text-slate-300\">\n                                    {JSON.stringify(log.new_values, null, 2)}\n                                  </pre>\n                                </div>\n                              )}\n                            </div>\n                          </details>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\BizDevSources.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Filter' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Filter"},"fix":{"range":[564,574],"text":""},"desc":"Remove unused variable 'Filter'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Download' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Download"},"fix":{"range":[574,586],"text":""},"desc":"Remove unused variable 'Download'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'archiveBizDevSourcesToR2' is defined but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"archiveBizDevSourcesToR2"},"fix":{"range":[1454,1513],"text":""},"desc":"Remove unused variable 'archiveBizDevSourcesToR2'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef, useMemo } from \"react\";\nimport { BizDevSource } from \"@/api/entities\";\nimport { Account } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Building2,\n  Plus,\n  Search,\n  Filter,\n  Download,\n  Upload,\n  Loader2,\n  Archive,\n  TrendingUp,\n  Trash2,\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useTenant } from \"../components/shared/tenantContext\";\nimport { useApiManager } from \"../components/shared/ApiManager\";\nimport { useErrorLog, handleApiError } from \"../components/shared/ErrorLogger\";\nimport BizDevSourceForm from \"../components/bizdev/BizDevSourceForm\";\nimport BizDevSourceCard from \"../components/bizdev/BizDevSourceCard\";\nimport BizDevSourceDetailPanel from \"../components/bizdev/BizDevSourceDetailPanel\";\nimport CsvImportDialog from \"../components/shared/CsvImportDialog\";\nimport CsvExportButton from \"../components/shared/CsvExportButton\";\nimport Pagination from \"../components/shared/Pagination\";\nimport RefreshButton from \"../components/shared/RefreshButton\";\nimport { promoteBizDevSourceToAccount } from \"@/api/functions\";\nimport { archiveBizDevSourcesToR2 } from \"@/api/functions\";\nimport BulkArchiveDialog from \"../components/bizdev/BulkArchiveDialog\";\nimport ArchiveIndexViewer from \"../components/bizdev/ArchiveIndexViewer\";\nimport BulkDeleteDialog from \"../components/bizdev/BulkDeleteDialog\";\nimport StatusHelper from \"../components/shared/StatusHelper\";\n\nexport default function BizDevSourcesPage() {\n  const [sources, setSources] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingSource, setEditingSource] = useState(null);\n  const [selectedSource, setSelectedSource] = useState(null);\n  const [showDetailPanel, setShowDetailPanel] = useState(false);\n  const [showImportDialog, setShowImportDialog] = useState(false);\n  const [selectedSources, setSelectedSources] = useState([]);\n  const [showBulkArchive, setShowBulkArchive] = useState(false);\n  const [showBulkDelete, setShowBulkDelete] = useState(false);\n  const [showArchiveIndex, setShowArchiveIndex] = useState(false);\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [licenseStatusFilter, setLicenseStatusFilter] = useState(\"all\");\n  const [batchFilter, setBatchFilter] = useState(\"all\");\n  const [sourceFilter, setSourceFilter] = useState(\"all\");\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(25);\n  const [user, setUser] = useState(null);\n  const [bizdevSchema, setBizdevSchema] = useState(null);\n\n  const { selectedTenantId } = useTenant();\n  const { cachedRequest, clearCache } = useApiManager();\n  const { logError } = useErrorLog();\n  const loadingRef = useRef(false);\n\n  useEffect(() => {\n    User.me()\n      .then(setUser)\n      .catch((error) => {\n        console.error(\"Failed to load user:\", error);\n        toast.error(\"Failed to load user data\");\n      });\n  }, []);\n\n  useEffect(() => {\n    const loadSchema = async () => {\n      try {\n        const schema = await BizDevSource.schema();\n        setBizdevSchema({\n          name: 'BizDevSource',\n          properties: schema.properties || {},\n          required: schema.required || []\n        });\n      } catch (error) {\n        console.error(\"Failed to load BizDevSource schema:\", error);\n      }\n    };\n    loadSchema();\n  }, []);\n\n  const loadSources = useCallback(async () => {\n    if (!user || loadingRef.current) return;\n\n    loadingRef.current = true;\n    setLoading(true);\n    setSelectedSources([]);\n\n    try {\n      const filter = { tenant_id: user.tenant_id || selectedTenantId };\n      if (!filter.tenant_id) {\n        setSources([]);\n        setAccounts([]);\n        return;\n      }\n\n      const [fetchedSources, fetchedAccounts] = await Promise.all([\n        cachedRequest(\n          'BizDevSource',\n          'filter',\n          { filter },\n          () => BizDevSource.filter(filter, '-created_date', 5000)\n        ).catch(err => {\n          if (logError) {\n            logError(handleApiError('BizDev Sources Page', err));\n          }\n          return [];\n        }),\n        cachedRequest(\n          'Account',\n          'filter',\n          { filter },\n          () => Account.filter(filter, null, 1000)\n        ).catch(err => {\n          if (logError) {\n            logError(handleApiError('BizDev Sources Page - Accounts', err));\n          }\n          return [];\n        })\n      ]);\n\n      setSources(fetchedSources || []);\n      setAccounts(fetchedAccounts || []);\n\n      if (fetchedSources && fetchedSources.length >= 5000) {\n        toast.warning(`Loaded 5,000 BizDev Sources. There may be more records not displayed. Use filters to narrow your search.`, {\n          duration: 5000,\n        });\n      }\n\n    } catch (error) {\n      if (logError) {\n        logError(handleApiError('BizDev Sources Page', error));\n      }\n      toast.error(\"Failed to load BizDev sources\");\n    } finally {\n      setLoading(false);\n      loadingRef.current = false;\n    }\n  }, [user, selectedTenantId, cachedRequest, logError]);\n\n  useEffect(() => {\n    if (user) {\n      loadSources();\n    }\n  }, [user, loadSources]);\n\n  const handleRefresh = () => {\n    clearCache();\n    loadSources();\n  };\n\n  const handleCreate = () => {\n    setEditingSource(null);\n    setShowForm(true);\n  };\n\n  const handleEdit = (source) => {\n    setEditingSource(source);\n    setShowForm(true);\n  };\n\n  const handleFormSubmit = async (data) => {\n    try {\n      if (editingSource) {\n        await BizDevSource.update(editingSource.id, data);\n        toast.success(\"BizDev source updated successfully\");\n      } else {\n        await BizDevSource.create({\n          ...data,\n          tenant_id: user.tenant_id || selectedTenantId,\n        });\n        toast.success(\"BizDev source created successfully\");\n      }\n      setShowForm(false);\n      setEditingSource(null);\n      handleRefresh();\n    } catch (error) {\n      if (logError) {\n        logError(handleApiError('BizDev Source Form', error));\n      }\n      toast.error(`Failed to ${editingSource ? 'update' : 'create'} BizDev source`);\n    }\n  };\n\n  const handleArchive = async (source) => {\n    if (!confirm(`Archive \"${source.company_name}\"? This will mark it as archived but not delete it.`)) {\n      return;\n    }\n\n    try {\n      await BizDevSource.update(source.id, {\n        status: \"Archived\",\n        archived_at: new Date().toISOString(),\n      });\n      toast.success(\"BizDev source archived\");\n      handleRefresh();\n      if (selectedSource?.id === source.id) {\n        setSelectedSource(prev => ({ ...prev, status: \"Archived\", archived_at: new Date().toISOString() }));\n      }\n      setShowDetailPanel(false);\n    } catch (error) {\n      if (logError) {\n        logError(handleApiError('BizDev Source Archive', error));\n      }\n      toast.error(\"Failed to archive BizDev source\");\n    }\n  };\n\n  const handleViewDetails = (source) => {\n    setSelectedSource(source);\n    setShowDetailPanel(true);\n  };\n\n  const handleImportComplete = () => {\n    setShowImportDialog(false);\n    handleRefresh();\n    toast.success(\"Import completed successfully\");\n  };\n\n  const handleUpdate = (updatedSource) => {\n    setSources(prev => prev.map(s =>\n      s.id === updatedSource.id ? updatedSource : s\n    ));\n    if (selectedSource?.id === updatedSource.id) {\n      setSelectedSource(updatedSource);\n    }\n  };\n\n  const handlePromote = async (sourceToPromote) => {\n    if (!confirm(`Are you sure you want to promote \"${sourceToPromote.company_name}\" to an Account?`)) {\n      return;\n    }\n\n    try {\n      const { data } = await promoteBizDevSourceToAccount({ bizdev_source_id: sourceToPromote.id });\n\n      toast.success(data.message);\n\n      handleRefresh();\n      setShowDetailPanel(false);\n    } catch (error) {\n      if (logError) {\n        logError(handleApiError('BizDev Source Promotion', error));\n      }\n      toast.error(`Failed to promote BizDev source to Account.`);\n    }\n  };\n\n  const handleSelectSource = (sourceId) => {\n    setSelectedSources(prevSelected =>\n      prevSelected.includes(sourceId)\n        ? prevSelected.filter(id => id !== sourceId)\n        : [...prevSelected, sourceId]\n    );\n  };\n\n  const handleBulkArchive = () => {\n    if (selectedSources.length === 0) {\n      toast.error(\"Please select sources to archive\");\n      return;\n    }\n    setShowBulkArchive(true);\n  };\n\n  const handleArchiveComplete = (result) => {\n    setSelectedSources([]);\n    handleRefresh();\n\n    if (result && result.archived_count > 0) {\n      toast.success(`Archived ${result.archived_count} source(s) to R2`);\n    }\n  };\n\n  const handleBulkDelete = () => {\n    if (selectedSources.length === 0) {\n      toast.error(\"Please select sources to delete\");\n      return;\n    }\n    setShowBulkDelete(true);\n  };\n\n  const handleDeleteComplete = (result) => {\n    setSelectedSources([]);\n    handleRefresh();\n\n    if (result && result.deleted > 0) {\n      toast.success(`Deleted ${result.deleted} BizDev Source(s)`);\n    }\n  };\n\n  const handleArchiveRetrieved = () => {\n    clearCache();\n    loadSources();\n    toast.success(\"Sources list refreshed after archive retrieval\");\n  };\n\n  const filteredSources = sources.filter((source) => {\n    const matchesSearch = !searchTerm ||\n      source.company_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      source.dba_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      source.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      source.phone_number?.includes(searchTerm) ||\n      source.city?.toLowerCase().includes(searchTerm.toLowerCase());\n\n    const matchesStatus = statusFilter === \"all\" || source.status === statusFilter;\n    const matchesLicenseStatus = licenseStatusFilter === \"all\" || source.license_status === licenseStatusFilter;\n    const matchesBatch = batchFilter === \"all\" || source.batch_id === batchFilter;\n    const matchesSource = sourceFilter === \"all\" || source.source === sourceFilter;\n\n    return matchesSearch && matchesStatus && matchesLicenseStatus && matchesBatch && matchesSource;\n  });\n\n  const uniqueBatches = [...new Set(sources.map(s => s.batch_id).filter(Boolean))];\n  const uniqueSources = [...new Set(sources.map(s => s.source).filter(Boolean))];\n\n  const paginatedSources = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    return filteredSources.slice(startIndex, endIndex);\n  }, [filteredSources, currentPage, pageSize]);\n\n  const totalPages = Math.ceil(filteredSources.length / pageSize);\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n    setSelectedSources([]);\n  };\n\n  const handlePageSizeChange = (newPageSize) => {\n    setPageSize(newPageSize);\n    setCurrentPage(1);\n    setSelectedSources([]);\n  };\n\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchTerm, statusFilter, licenseStatusFilter, batchFilter, sourceFilter]);\n\n  const stats = {\n    total: sources.length,\n    active: sources.filter(s => s.status === \"Active\").length,\n    promoted: sources.filter(s => s.status === \"Promoted\").length,\n    archived: sources.filter(s => s.status === \"Archived\").length,\n  };\n\n  if (loading && sources.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-500\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-4 sm:p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-12 h-12 flex items-center justify-center rounded-full bg-blue-900/30 border border-blue-700/50\">\n            <Building2 className=\"w-7 h-7 text-blue-400\" />\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-100\">BizDev Sources</h1>\n            <p className=\"text-slate-400\">\n              Manage business development leads and prospects\n              {sources.length > 0 && (\n                <span className=\"ml-2 text-slate-500\">\n                  ΓÇó Showing {filteredSources.length.toLocaleString()} of {sources.length.toLocaleString()} total\n                </span>\n              )}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <RefreshButton onRefresh={handleRefresh} />\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowArchiveIndex(true)}\n            className=\"border-slate-700 text-slate-300 hover:bg-slate-800\"\n          >\n            <Archive className=\"w-4 h-4 mr-2\" />\n            View Archives\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowImportDialog(true)}\n            className=\"border-slate-700 text-slate-300 hover:bg-slate-800\"\n          >\n            <Upload className=\"w-4 h-4 mr-2\" />\n            Import\n          </Button>\n          <CsvExportButton\n            data={filteredSources}\n            filename=\"bizdev-sources\"\n            entityName=\"BizDevSource\"\n          />\n          <Button onClick={handleCreate} className=\"bg-blue-600 hover:bg-blue-700\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Source\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <p className=\"text-sm text-slate-400\">Total Sources</p>\n                  <StatusHelper statusKey=\"bizdev_total\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-100\">{stats.total}</p>\n              </div>\n              <Building2 className=\"w-8 h-8 text-blue-400\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <p className=\"text-sm text-slate-400\">Active</p>\n                  <StatusHelper statusKey=\"bizdev_active\" />\n                </div>\n                <p className=\"text-2xl font-bold text-green-400\">{stats.active}</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <p className=\"text-sm text-slate-400\">Promoted</p>\n                  <StatusHelper statusKey=\"bizdev_promoted\" />\n                </div>\n                <p className=\"text-2xl font-bold text-blue-400\">{stats.promoted}</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-blue-400\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <p className=\"text-sm text-slate-400\">Archived</p>\n                  <StatusHelper statusKey=\"bizdev_archived\" />\n                </div>\n                <p className=\"text-2xl font-bold text-slate-400\">{stats.archived}</p>\n              </div>\n              <Archive className=\"w-8 h-8 text-slate-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card className=\"bg-slate-800 border-slate-700 mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4\">\n            <div className=\"md:col-span-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400\" />\n                <Input\n                  placeholder=\"Search sources...\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\") {\n                      setSearchTerm(searchInput);\n                      setCurrentPage(1);\n                    }\n                  }}\n                  className=\"pl-10 bg-slate-700 border-slate-600 text-slate-100\"\n                />\n              </div>\n              {searchTerm && (\n                <p className=\"text-xs text-slate-400 mt-1\">\n                  {filteredSources.length} result{filteredSources.length !== 1 ? 's' : ''} found\n                </p>\n              )}\n            </div>\n            <Select value={statusFilter} onValueChange={(value) => {\n              setStatusFilter(value);\n              setCurrentPage(1);\n            }}>\n              <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-100\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"Active\">Active</SelectItem>\n                <SelectItem value=\"Promoted\">Promoted</SelectItem>\n                <SelectItem value=\"Archived\">Archived</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={licenseStatusFilter} onValueChange={(value) => {\n              setLicenseStatusFilter(value);\n              setCurrentPage(1);\n            }}>\n              <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-100\">\n                <SelectValue placeholder=\"License Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Licenses</SelectItem>\n                <SelectItem value=\"Active\">Active</SelectItem>\n                <SelectItem value=\"Suspended\">Suspended</SelectItem>\n                <SelectItem value=\"Revoked\">Revoked</SelectItem>\n                <SelectItem value=\"Expired\">Expired</SelectItem>\n                <SelectItem value=\"Unknown\">Unknown</SelectItem>\n                <SelectItem value=\"Not Required\">Not Required</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={batchFilter} onValueChange={(value) => {\n              setBatchFilter(value);\n              setCurrentPage(1);\n            }}>\n              <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-100\">\n                <SelectValue placeholder=\"Batch\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Batches</SelectItem>\n                {uniqueBatches.map(batch => (\n                  <SelectItem key={batch} value={batch}>{batch}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select value={sourceFilter} onValueChange={(value) => {\n              setSourceFilter(value);\n              setCurrentPage(1);\n            }}>\n              <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-100\">\n                <SelectValue placeholder=\"Source\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Sources</SelectItem>\n                {uniqueSources.map(source => (\n                  <SelectItem key={source} value={source}>{source}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-slate-800 border-slate-700 mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-wrap items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-2\">\n              {selectedSources.length > 0 && (\n                <>\n                  <Badge variant=\"outline\" className=\"border-blue-600 text-blue-400\">\n                    {selectedSources.length} selected\n                  </Badge>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleBulkArchive}\n                    className=\"border-blue-600 text-blue-400 hover:bg-blue-900/30\"\n                  >\n                    <Archive className=\"w-4 h-4 mr-2\" />\n                    Archive Selected\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleBulkDelete}\n                    className=\"border-red-600 text-red-400 hover:bg-red-900/30\"\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    Delete Selected\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setSelectedSources([])}\n                    className=\"text-slate-400 hover:text-slate-300\"\n                  >\n                    Clear Selection\n                  </Button>\n                </>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardContent className=\"p-6\">\n          {loading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-blue-500\" />\n            </div>\n          ) : filteredSources.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Building2 className=\"w-16 h-16 text-slate-600 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-slate-300 mb-2\">\n                No BizDev sources found\n              </h3>\n              <p className=\"text-slate-400 mb-4\">\n                {sources.length === 0\n                  ? \"Get started by adding your first business development source.\"\n                  : \"Try adjusting your filters or search term.\"}\n              </p>\n              {sources.length === 0 && (\n                <Button onClick={handleCreate} className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add First Source\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {paginatedSources.map((source) => (\n                <BizDevSourceCard\n                  key={source.id}\n                  source={source}\n                  onClick={handleViewDetails}\n                  isSelected={selectedSources.includes(source.id)}\n                  onSelect={handleSelectSource}\n                  onEdit={handleEdit}\n                />\n              ))}\n            </div>\n          )}\n        </CardContent>\n\n        {!loading && filteredSources.length > 0 && (\n          <Pagination\n            currentPage={currentPage}\n            totalPages={totalPages}\n            totalItems={filteredSources.length}\n            pageSize={pageSize}\n            onPageChange={handlePageChange}\n            onPageSizeChange={handlePageSizeChange}\n            loading={loading}\n          />\n        )}\n      </Card>\n\n      {showForm && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-slate-800 rounded-lg max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n            <BizDevSourceForm\n              source={editingSource}\n              onSubmit={handleFormSubmit}\n              onCancel={() => {\n                setShowForm(false);\n                setEditingSource(null);\n              }}\n            />\n          </div>\n        </div>\n      )}\n\n      {showDetailPanel && selectedSource && (\n        <BizDevSourceDetailPanel\n          bizDevSource={selectedSource}\n          accounts={accounts}\n          onClose={() => {\n            setShowDetailPanel(false);\n            setSelectedSource(null);\n          }}\n          onEdit={() => {\n            setShowDetailPanel(false);\n            handleEdit(selectedSource);\n          }}\n          onArchive={() => {\n            setShowDetailPanel(false);\n            handleArchive(selectedSource);\n          }}\n          onPromote={handlePromote}\n          onUpdate={handleUpdate}\n          onRefresh={handleRefresh}\n        />\n      )}\n\n      {showImportDialog && bizdevSchema && (\n        <CsvImportDialog\n          open={showImportDialog}\n          onOpenChange={setShowImportDialog}\n          schema={bizdevSchema}\n          onSuccess={handleImportComplete}\n        />\n      )}\n\n      {showBulkArchive && (\n        <BulkArchiveDialog\n          sources={sources.filter(s => selectedSources.includes(s.id))}\n          onClose={() => setShowBulkArchive(false)}\n          onComplete={handleArchiveComplete}\n        />\n      )}\n\n      {showBulkDelete && (\n        <BulkDeleteDialog\n          sources={sources.filter(s => selectedSources.includes(s.id))}\n          onClose={() => setShowBulkDelete(false)}\n          onComplete={handleDeleteComplete}\n        />\n      )}\n\n      {showArchiveIndex && (\n        <ArchiveIndexViewer\n          tenantId={user?.tenant_id || selectedTenantId}\n          onClose={() => setShowArchiveIndex(false)}\n          onRetrieved={handleArchiveRetrieved}\n        />\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Calendar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\CashFlow.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\ClientOnboarding.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Building2, CheckCircle2, Loader2, Calendar } from 'lucide-react';\nimport { submitClientRequirement } from '@/api/functions';\nimport { toast } from 'sonner';\n\nconst moduleOptions = [\n{ id: 'dashboard', label: 'Dashboard', description: 'Central analytics hub', default: true },\n{ id: 'contacts', label: 'Contact Management', description: 'Manage customer contacts', default: true },\n{ id: 'accounts', label: 'Account Management', description: 'Manage companies', default: true },\n{ id: 'leads', label: 'Lead Management', description: 'Track potential customers', default: true },\n{ id: 'opportunities', label: 'Opportunities', description: 'Manage sales pipeline', default: true },\n{ id: 'activities', label: 'Activity Tracking', description: 'Tasks, calls, meetings', default: true },\n{ id: 'calendar', label: 'Calendar', description: 'Schedule management', default: true },\n{ id: 'reports', label: 'Analytics & Reports', description: 'Business intelligence', default: true },\n{ id: 'bizdev_sources', label: 'BizDev Sources', description: 'Import business directories', default: false },\n{ id: 'cash_flow', label: 'Cash Flow Management', description: 'Track income/expenses', default: false },\n{ id: 'document_processing', label: 'Document Processing', description: 'AI document extraction', default: false },\n{ id: 'employees', label: 'Employee Management', description: 'Manage team members', default: false },\n{ id: 'integrations', label: 'Integrations', description: 'Connect external tools', default: false },\n{ id: 'payment_portal', label: 'Payment Portal', description: 'Stripe integration', default: false },\n{ id: 'ai_campaigns', label: 'AI Campaigns', description: 'AI-powered outreach', default: false },\n{ id: 'utilities', label: 'Utilities', description: 'Data quality tools', default: false }];\n\n\nexport default function ClientOnboarding() {\n  const [step, setStep] = useState(1);\n  const [submitting, setSubmitting] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n\n  const [formData, setFormData] = useState({\n    company_name: '',\n    industry: '',\n    business_model: 'b2b',\n    geographic_focus: 'north_america',\n    project_title: '',\n    project_description: '',\n    target_test_date: '',\n    target_implementation_date: '',\n    selected_modules: moduleOptions.reduce((acc, mod) => {\n      acc[mod.id] = mod.default;\n      return acc;\n    }, {}),\n    initial_employee: {\n      first_name: '',\n      last_name: '',\n      email: '',\n      phone: '',\n      role: 'admin',\n      employee_role: 'manager',\n      access_level: 'read_write',\n      has_crm_access: true\n    }\n  });\n\n  const updateField = (field, value) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const updateEmployeeField = (field, value) => {\n    setFormData((prev) => ({\n      ...prev,\n      initial_employee: { ...prev.initial_employee, [field]: value }\n    }));\n  };\n\n  const toggleModule = (moduleId) => {\n    setFormData((prev) => ({\n      ...prev,\n      selected_modules: {\n        ...prev.selected_modules,\n        [moduleId]: !prev.selected_modules[moduleId]\n      }\n    }));\n  };\n\n  const handleSubmit = async () => {\n    setSubmitting(true);\n    try {\n      const { data } = await submitClientRequirement(formData);\n      if (data.success) {\n        setSubmitted(true);\n        toast.success('Your request has been submitted successfully!');\n      } else {\n        toast.error(data.message || 'Failed to submit request');\n      }\n    } catch (error) {\n      console.error('Submission error:', error);\n      toast.error(error.response?.data?.message || 'An error occurred. Please try again.');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  if (submitted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 flex items-center justify-center p-6\">\n        <Card className=\"max-w-2xl w-full bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"w-20 h-20 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <CheckCircle2 className=\"w-10 h-10 text-green-400\" />\n            </div>\n            <h2 className=\"text-3xl font-bold text-slate-100 mb-4\">Thank You!</h2>\n            <p className=\"text-slate-300 text-lg mb-2\">Your onboarding request has been submitted.</p>\n            <p className=\"text-slate-400\">Our team will review your requirements and contact you within 24-48 hours.</p>\n          </CardContent>\n        </Card>\n      </div>);\n\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <Building2 className=\"w-12 h-12 text-blue-400\" />\n            <h1 className=\"text-lime-500 text-4xl font-bold\">Ai-SHA CRM</h1>\n          </div>\n          <p className=\"text-lime-500 text-lg\">Client Onboarding Portal</p>\n        </div>\n\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center\">\n            {[1, 2, 3, 4].map((s) =>\n            <div key={s} className=\"flex items-center flex-1\">\n                <div className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold ${\n              step >= s ? 'bg-blue-600 text-white' : 'bg-slate-700 text-slate-400'}`\n              }>\n                  {s}\n                </div>\n                {s < 4 && <div className={`flex-1 h-1 mx-2 ${step > s ? 'bg-blue-600' : 'bg-slate-700'}`} />}\n              </div>\n            )}\n          </div>\n          <div className=\"text-yellow-300 mt-2 text-xs flex justify-between\">\n            <span>Company Info</span>\n            <span>Project Details</span>\n            <span>Modules</span>\n            <span>Contact Info</span>\n          </div>\n        </div>\n\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardHeader>\n            <CardTitle className=\"text-slate-100\">\n              {step === 1 && 'Company Information'}\n              {step === 2 && 'Project Details'}\n              {step === 3 && 'Select CRM Modules'}\n              {step === 4 && 'Primary Contact'}\n            </CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              {step === 1 && 'Tell us about your organization'}\n              {step === 2 && 'Describe your project and timeline'}\n              {step === 3 && 'Choose the features you need'}\n              {step === 4 && 'Who will be the main administrator?'}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {step === 1 &&\n            <>\n                <div>\n                  <Label className=\"text-slate-200\">Company Name *</Label>\n                  <Input\n                  value={formData.company_name}\n                  onChange={(e) => updateField('company_name', e.target.value)}\n                  placeholder=\"Your Company Inc.\"\n                  className=\"bg-slate-700 border-slate-600 text-slate-100\"\n                  required />\n\n                </div>\n\n                <div>\n                  <Label className=\"text-slate-200\">Industry *</Label>\n                  <Select value={formData.industry} onValueChange={(v) => updateField('industry', v)}>\n                    <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-100\">\n                      <SelectValue placeholder=\"Select your industry\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-slate-700 max-h-[300px]\">\n                      <SelectItem value=\"accounting_and_finance\">Accounting & Finance</SelectItem>\n                      <SelectItem value=\"aerospace_and_defense\">Aerospace & Defense</SelectItem>\n                      <SelectItem value=\"agriculture_and_farming\">Agriculture & Farming</SelectItem>\n                      <SelectItem value=\"automotive_and_transportation\">Automotive & Transportation</SelectItem>\n                      <SelectItem value=\"banking_and_financial_services\">Banking & Financial Services</SelectItem>\n                      <SelectItem value=\"biotechnology_and_pharmaceuticals\">Biotechnology & Pharmaceuticals</SelectItem>\n                      <SelectItem value=\"chemicals_and_materials\">Chemicals & Materials</SelectItem>\n                      <SelectItem value=\"construction_and_engineering\">Construction & Engineering</SelectItem>\n                      <SelectItem value=\"consulting_and_professional_services\">Consulting & Professional Services</SelectItem>\n                      <SelectItem value=\"consumer_goods_and_retail\">Consumer Goods & Retail</SelectItem>\n                      <SelectItem value=\"cybersecurity\">Cybersecurity</SelectItem>\n                      <SelectItem value=\"data_analytics_and_business_intelligence\">Data Analytics & Business Intelligence</SelectItem>\n                      <SelectItem value=\"education_and_training\">Education & Training</SelectItem>\n                      <SelectItem value=\"energy_oil_and_gas\">Energy, Oil & Gas</SelectItem>\n                      <SelectItem value=\"entertainment_and_media\">Entertainment & Media</SelectItem>\n                      <SelectItem value=\"environmental_services\">Environmental Services</SelectItem>\n                      <SelectItem value=\"event_management\">Event Management</SelectItem>\n                      <SelectItem value=\"fashion_and_apparel\">Fashion & Apparel</SelectItem>\n                      <SelectItem value=\"food_and_beverage\">Food & Beverage</SelectItem>\n                      <SelectItem value=\"franchising\">Franchising</SelectItem>\n                      <SelectItem value=\"gaming_and_esports\">Gaming & Esports</SelectItem>\n                      <SelectItem value=\"government_and_public_sector\">Government & Public Sector</SelectItem>\n                      <SelectItem value=\"green_energy_and_solar\">Green Energy & Solar</SelectItem>\n                      <SelectItem value=\"healthcare_and_medical_services\">Healthcare & Medical Services</SelectItem>\n                      <SelectItem value=\"hospitality_and_tourism\">Hospitality & Tourism</SelectItem>\n                      <SelectItem value=\"human_resources_and_staffing\">Human Resources & Staffing</SelectItem>\n                      <SelectItem value=\"information_technology_and_software\">Information Technology & Software</SelectItem>\n                      <SelectItem value=\"insurance\">Insurance</SelectItem>\n                      <SelectItem value=\"interior_design_and_architecture\">Interior Design & Architecture</SelectItem>\n                      <SelectItem value=\"legal_services\">Legal Services</SelectItem>\n                      <SelectItem value=\"logistics_and_supply_chain\">Logistics & Supply Chain</SelectItem>\n                      <SelectItem value=\"manufacturing_industrial\">Manufacturing (Industrial)</SelectItem>\n                      <SelectItem value=\"marketing_advertising_and_pr\">Marketing, Advertising & PR</SelectItem>\n                      <SelectItem value=\"mining_and_metals\">Mining & Metals</SelectItem>\n                      <SelectItem value=\"nonprofit_and_ngos\">Nonprofit & NGOs</SelectItem>\n                      <SelectItem value=\"packaging_and_printing\">Packaging & Printing</SelectItem>\n                      <SelectItem value=\"pharmaceuticals\">Pharmaceuticals</SelectItem>\n                      <SelectItem value=\"real_estate_and_property_management\">Real Estate & Property Management</SelectItem>\n                      <SelectItem value=\"renewable_energy\">Renewable Energy</SelectItem>\n                      <SelectItem value=\"research_and_development\">Research & Development</SelectItem>\n                      <SelectItem value=\"retail_and_wholesale\">Retail & Wholesale</SelectItem>\n                      <SelectItem value=\"robotics_and_automation\">Robotics & Automation</SelectItem>\n                      <SelectItem value=\"saas_and_cloud_services\">SaaS & Cloud Services</SelectItem>\n                      <SelectItem value=\"security_services\">Security Services</SelectItem>\n                      <SelectItem value=\"social_media_and_influencer\">Social Media & Influencer</SelectItem>\n                      <SelectItem value=\"sports_and_recreation\">Sports & Recreation</SelectItem>\n                      <SelectItem value=\"telecommunications\">Telecommunications</SelectItem>\n                      <SelectItem value=\"textiles_and_apparel\">Textiles & Apparel</SelectItem>\n                      <SelectItem value=\"transportation_and_delivery\">Transportation & Delivery</SelectItem>\n                      <SelectItem value=\"utilities_water_and_waste\">Utilities (Water & Waste)</SelectItem>\n                      <SelectItem value=\"veterinary_services\">Veterinary Services</SelectItem>\n                      <SelectItem value=\"warehousing_and_distribution\">Warehousing & Distribution</SelectItem>\n                      <SelectItem value=\"wealth_management\">Wealth Management</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-slate-200\">Business Model</Label>\n                    <Select value={formData.business_model} onValueChange={(v) => updateField('business_model', v)}>\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-100\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-700\">\n                        <SelectItem value=\"b2b\">B2B (Business to Business)</SelectItem>\n                        <SelectItem value=\"b2c\">B2C (Business to Consumer)</SelectItem>\n                        <SelectItem value=\"hybrid\">Hybrid</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label className=\"text-slate-200\">Geographic Focus</Label>\n                    <Select value={formData.geographic_focus} onValueChange={(v) => updateField('geographic_focus', v)}>\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-100\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-700\">\n                        <SelectItem value=\"north_america\">North America</SelectItem>\n                        <SelectItem value=\"europe\">Europe</SelectItem>\n                        <SelectItem value=\"asia\">Asia</SelectItem>\n                        <SelectItem value=\"south_america\">South America</SelectItem>\n                        <SelectItem value=\"africa\">Africa</SelectItem>\n                        <SelectItem value=\"oceania\">Oceania</SelectItem>\n                        <SelectItem value=\"global\">Global</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </>\n            }\n\n            {step === 2 &&\n            <>\n                <div>\n                  <Label className=\"text-slate-200\">Project Title</Label>\n                  <Input\n                  value={formData.project_title}\n                  onChange={(e) => updateField('project_title', e.target.value)}\n                  placeholder=\"CRM Implementation 2025\"\n                  className=\"bg-slate-700 border-slate-600 text-slate-100\" />\n\n                </div>\n\n                <div>\n                  <Label className=\"text-slate-200\">Project Description</Label>\n                  <Textarea\n                  value={formData.project_description}\n                  onChange={(e) => updateField('project_description', e.target.value)}\n                  placeholder=\"Describe your goals, team size, current challenges...\"\n                  className=\"bg-slate-700 border-slate-600 text-slate-100 min-h-[120px]\" />\n\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-slate-200 flex items-center gap-2\">\n                      <Calendar className=\"w-4 h-4\" />\n                      Target Test Date\n                    </Label>\n                    <Input\n                    type=\"date\"\n                    value={formData.target_test_date}\n                    onChange={(e) => updateField('target_test_date', e.target.value)}\n                    className=\"bg-slate-700 border-slate-600 text-slate-100\" />\n\n                  </div>\n                  <div>\n                    <Label className=\"text-slate-200 flex items-center gap-2\">\n                      <Calendar className=\"w-4 h-4\" />\n                      Target Go-Live Date\n                    </Label>\n                    <Input\n                    type=\"date\"\n                    value={formData.target_implementation_date}\n                    onChange={(e) => updateField('target_implementation_date', e.target.value)}\n                    className=\"bg-slate-700 border-slate-600 text-slate-100\" />\n\n                  </div>\n                </div>\n              </>\n            }\n\n            {step === 3 &&\n            <div className=\"space-y-3\">\n                <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n                  <AlertDescription className=\"text-blue-300\">\n                    Select the modules you need. You can always add more later.\n                  </AlertDescription>\n                </Alert>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {moduleOptions.map((module) =>\n                <div\n                  key={module.id}\n                  className={`p-4 rounded-lg border cursor-pointer transition-all ${\n                  formData.selected_modules[module.id] ?\n                  'bg-blue-900/30 border-blue-600' :\n                  'bg-slate-700/50 border-slate-600 hover:border-slate-500'}`\n                  }\n                  onClick={() => toggleModule(module.id)}>\n\n                      <div className=\"flex items-start gap-3\">\n                        <Checkbox\n                      checked={formData.selected_modules[module.id]}\n                      className=\"mt-1\" />\n\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-slate-100\">{module.label}</div>\n                          <div className=\"text-xs text-slate-400\">{module.description}</div>\n                        </div>\n                      </div>\n                    </div>\n                )}\n                </div>\n              </div>\n            }\n\n            {step === 4 &&\n            <>\n                <Alert className=\"bg-amber-900/30 border-amber-700/50\">\n                  <AlertDescription className=\"text-amber-300\">\n                    This person will be the primary admin and receive the invitation email.\n                  </AlertDescription>\n                </Alert>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-slate-200\">First Name *</Label>\n                    <Input\n                    value={formData.initial_employee.first_name}\n                    onChange={(e) => updateEmployeeField('first_name', e.target.value)}\n                    placeholder=\"John\"\n                    className=\"bg-slate-700 border-slate-600 text-slate-100\"\n                    required />\n\n                  </div>\n                  <div>\n                    <Label className=\"text-slate-200\">Last Name *</Label>\n                    <Input\n                    value={formData.initial_employee.last_name}\n                    onChange={(e) => updateEmployeeField('last_name', e.target.value)}\n                    placeholder=\"Doe\"\n                    className=\"bg-slate-700 border-slate-600 text-slate-100\"\n                    required />\n\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-slate-200\">Email *</Label>\n                  <Input\n                  type=\"email\"\n                  value={formData.initial_employee.email}\n                  onChange={(e) => updateEmployeeField('email', e.target.value)}\n                  placeholder=\"john.doe@company.com\"\n                  className=\"bg-slate-700 border-slate-600 text-slate-100\"\n                  required />\n\n                </div>\n\n                <div>\n                  <Label className=\"text-slate-200\">Phone</Label>\n                  <Input\n                  type=\"tel\"\n                  value={formData.initial_employee.phone}\n                  onChange={(e) => updateEmployeeField('phone', e.target.value)}\n                  placeholder=\"+1 (555) 123-4567\"\n                  className=\"bg-slate-700 border-slate-600 text-slate-100\" />\n\n                </div>\n              </>\n            }\n\n            <div className=\"flex justify-between pt-6 border-t border-slate-700\">\n              {step > 1 &&\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setStep(step - 1)}\n                className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\">\n\n                  Back\n                </Button>\n              }\n              {step < 4 ?\n              <Button\n                type=\"button\"\n                onClick={() => setStep(step + 1)}\n                className=\"ml-auto bg-blue-600 hover:bg-blue-700\"\n                disabled={\n                step === 1 && (!formData.company_name || !formData.industry) ||\n                step === 4 && (!formData.initial_employee.first_name || !formData.initial_employee.last_name || !formData.initial_employee.email)\n                }>\n\n                  Next\n                </Button> :\n\n              <Button\n                type=\"button\"\n                onClick={handleSubmit}\n                disabled={submitting || !formData.initial_employee.email}\n                className=\"ml-auto bg-green-600 hover:bg-green-700\">\n\n                  {submitting ?\n                <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Submitting...\n                    </> :\n\n                'Submit Request'\n                }\n                </Button>\n              }\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>);\n\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\ClientRequirements.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":244,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":244,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[9517,9518],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { base44 } from \"@/api/base44Client\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter\n} from \"@/components/ui/dialog\";\nimport { CheckCircle2, XCircle, Clock, Building2, User, Calendar, Loader2 } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nexport default function ClientRequirements() {\n  const [requirements, setRequirements] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRequirement, setSelectedRequirement] = useState(null);\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\n  const [isApproving, setIsApproving] = useState(false);\n  const [adminNotes, setAdminNotes] = useState(\"\");\n\n  useEffect(() => {\n    loadRequirements();\n  }, []);\n\n  const loadRequirements = async () => {\n    setLoading(true);\n    try {\n      const reqs = await base44.entities.ClientRequirement.list('-created_date');\n      setRequirements(reqs || []);\n    } catch (error) {\n      console.error('Failed to load requirements:', error);\n      toast.error('Failed to load requirements');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApprove = async () => {\n    if (!selectedRequirement) return;\n    \n    setIsApproving(true);\n    try {\n      // USE BASE44 SDK INSTEAD OF RAW FETCH\n      const result = await base44.functions.invoke('approveClientRequirement', {\n        requirement_id: selectedRequirement.id,\n        admin_notes: adminNotes\n      });\n\n      if (result.data.success) {\n        toast.success('Client requirement approved and tenant created!');\n        \n        // Show the signup link\n        if (result.data.signup_url) {\n          toast.info(`Signup link: ${result.data.signup_url}`, { duration: 10000 });\n        }\n        \n        setIsDetailOpen(false);\n        setSelectedRequirement(null);\n        setAdminNotes(\"\");\n        loadRequirements();\n      } else {\n        // base44.functions.invoke will throw an error for non-2xx responses or if the function's own return\n        // indicates an error, so `result.data.error` will be the error message from the backend.\n        toast.error(result.data.error || 'Approval failed');\n      }\n    } catch (error) {\n      console.error('Approval error:', error);\n      // The error object from base44.functions.invoke will contain the error details\n      // It might be error.response.data.error or just error.message\n      const errorMessage = error.response?.data?.error || error.message || 'Unknown error during approval';\n      toast.error(`Failed to approve requirement: ${errorMessage}`);\n    } finally {\n      setIsApproving(false);\n    }\n  };\n\n  const handleReject = async () => {\n    if (!selectedRequirement) return;\n    \n    try {\n      await base44.entities.ClientRequirement.update(selectedRequirement.id, {\n        status: 'rejected',\n        admin_notes: adminNotes\n      });\n\n      toast.success('Requirement rejected');\n      setIsDetailOpen(false);\n      setSelectedRequirement(null);\n      setAdminNotes(\"\");\n      loadRequirements();\n    } catch (error) {\n      console.error('Reject error:', error);\n      toast.error('Failed to reject requirement');\n    }\n  };\n\n  const getStatusBadge = (status) => {\n    const styles = {\n      pending: 'bg-yellow-900/20 text-yellow-300 border-yellow-800',\n      approved: 'bg-green-900/20 text-green-300 border-green-800',\n      rejected: 'bg-red-900/20 text-red-300 border-red-800'\n    };\n\n    const icons = {\n      pending: <Clock className=\"w-3 h-3 mr-1\" />,\n      approved: <CheckCircle2 className=\"w-3 h-3 mr-1\" />,\n      rejected: <XCircle className=\"w-3 h-3 mr-1\" />\n    };\n\n    return (\n      <Badge className={`${styles[status]} flex items-center`}>\n        {icons[status]}\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-500\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-slate-100 mb-2\">Client Onboarding Requests</h1>\n          <p className=\"text-slate-400\">Review and approve new client requirements</p>\n        </div>\n\n        <div className=\"grid gap-4\">\n          {requirements.length === 0 ? (\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardContent className=\"py-12 text-center\">\n                <Building2 className=\"w-12 h-12 text-slate-600 mx-auto mb-4\" />\n                <p className=\"text-slate-400\">No client requirements submitted yet</p>\n              </CardContent>\n            </Card>\n          ) : (\n            requirements.map((req) => (\n              <Card \n                key={req.id} \n                className=\"bg-slate-800 border-slate-700 hover:border-slate-600 cursor-pointer transition-colors\"\n                onClick={() => {\n                  setSelectedRequirement(req);\n                  setAdminNotes(req.admin_notes || \"\");\n                  setIsDetailOpen(true);\n                }}\n              >\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-slate-100 flex items-center gap-3\">\n                        <Building2 className=\"w-5 h-5\" />\n                        {req.company_name}\n                      </CardTitle>\n                      <div className=\"flex items-center gap-4 mt-2 text-sm text-slate-400\">\n                        <span className=\"flex items-center gap-1\">\n                          <User className=\"w-4 h-4\" />\n                          {req.initial_employee?.first_name} {req.initial_employee?.last_name}\n                        </span>\n                        <span className=\"flex items-center gap-1\">\n                          <Calendar className=\"w-4 h-4\" />\n                          {new Date(req.created_date).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                    <div>{getStatusBadge(req.status)}</div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-slate-500\">Industry</p>\n                      <p className=\"text-slate-200\">{req.industry?.replace(/_/g, ' ')}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-slate-500\">Business Model</p>\n                      <p className=\"text-slate-200\">{req.business_model?.toUpperCase()}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-slate-500\">Test Date</p>\n                      <p className=\"text-slate-200\">{req.target_test_date || 'Not specified'}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-slate-500\">Implementation</p>\n                      <p className=\"text-slate-200\">{req.target_implementation_date || 'Not specified'}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n\n      <Dialog open={isDetailOpen} onOpenChange={setIsDetailOpen}>\n        <DialogContent className=\"bg-slate-800 border-slate-700 max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-slate-100 text-2xl\">\n              {selectedRequirement?.company_name}\n            </DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              Review details and approve or reject this client requirement\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedRequirement && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <h3 className=\"text-sm font-medium text-slate-400 mb-1\">Status</h3>\n                  {getStatusBadge(selectedRequirement.status)}\n                </div>\n                <div>\n                  <h3 className=\"text-sm font-medium text-slate-400 mb-1\">Industry</h3>\n                  <p className=\"text-slate-200\">{selectedRequirement.industry?.replace(/_/g, ' ')}</p>\n                </div>\n              </div>\n\n              {selectedRequirement.project_description && (\n                <div>\n                  <h3 className=\"text-sm font-medium text-slate-400 mb-2\">Project Description</h3>\n                  <p className=\"text-slate-200 bg-slate-700/50 p-3 rounded-lg\">\n                    {selectedRequirement.project_description}\n                  </p>\n                </div>\n              )}\n\n              <div>\n                <h3 className=\"text-sm font-medium text-slate-400 mb-2\">Selected Modules</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {Object.entries(selectedRequirement.selected_modules || {})\n                    .filter(([_, value]) => value === true)\n                    .map(([key]) => (\n                      <Badge key={key} className=\"bg-blue-900/20 text-blue-300\">\n                        {key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </Badge>\n                    ))}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-sm font-medium text-slate-400 mb-2\">Initial User</h3>\n                <div className=\"bg-slate-700/50 p-4 rounded-lg space-y-2\">\n                  <p className=\"text-slate-200\">\n                    <span className=\"text-slate-400\">Name:</span> {selectedRequirement.initial_employee?.first_name} {selectedRequirement.initial_employee?.last_name}\n                  </p>\n                  <p className=\"text-slate-200\">\n                    <span className=\"text-slate-400\">Email:</span> {selectedRequirement.initial_employee?.email}\n                  </p>\n                  <p className=\"text-slate-200\">\n                    <span className=\"text-slate-400\">Phone:</span> {selectedRequirement.initial_employee?.phone || 'Not provided'}\n                  </p>\n                  <p className=\"text-slate-200\">\n                    <span className=\"text-slate-400\">Role:</span> {selectedRequirement.initial_employee?.employee_role}\n                  </p>\n                  <p className=\"text-slate-200\">\n                    <span className=\"text-slate-400\">Access:</span> {selectedRequirement.initial_employee?.access_level}\n                  </p>\n                </div>\n              </div>\n\n              {selectedRequirement.status === 'pending' && (\n                <div>\n                  <Label htmlFor=\"admin_notes\" className=\"text-slate-200\">Admin Notes</Label>\n                  <Textarea\n                    id=\"admin_notes\"\n                    value={adminNotes}\n                    onChange={(e) => setAdminNotes(e.target.value)}\n                    className=\"bg-slate-700 border-slate-600 text-slate-100 mt-2\"\n                    rows={4}\n                    placeholder=\"Add any notes about this approval/rejection...\"\n                  />\n                </div>\n              )}\n\n              {selectedRequirement.admin_notes && (\n                <div>\n                  <h3 className=\"text-sm font-medium text-slate-400 mb-2\">Admin Notes</h3>\n                  <p className=\"text-slate-200 bg-slate-700/50 p-3 rounded-lg\">\n                    {selectedRequirement.admin_notes}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {selectedRequirement?.status === 'pending' && (\n            <DialogFooter className=\"gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={handleReject}\n                className=\"bg-slate-700 border-slate-600 hover:bg-red-900/20 hover:border-red-800 text-slate-200\"\n              >\n                <XCircle className=\"w-4 h-4 mr-2\" />\n                Reject\n              </Button>\n              <Button\n                onClick={handleApprove}\n                disabled={isApproving}\n                className=\"bg-green-600 hover:bg-green-700 text-white\"\n              >\n                {isApproving ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Approving...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                    Approve & Create Tenant\n                  </>\n                )}\n              </Button>\n            </DialogFooter>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Contacts.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":15,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"X"},"fix":{"range":[831,834],"text":""},"desc":"Remove unused variable 'X'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'HelpCircle' is defined but never used.","line":15,"column":88,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":98,"suggestions":[{"messageId":"removeVar","data":{"varName":"HelpCircle"},"fix":{"range":[853,865],"text":""},"desc":"Remove unused variable 'HelpCircle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'createPageUrl' is assigned a value but never used.","line":37,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"createPageUrl"},"fix":{"range":[2071,2233],"text":""},"desc":"Remove unused variable 'createPageUrl'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'selectAllMode' is assigned a value but never used.","line":54,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectAllMode"},"fix":{"range":[2878,2891],"text":""},"desc":"Remove unused variable 'selectAllMode'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setShowTestData' is assigned a value but never used.","line":63,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"setShowTestData"},"fix":{"range":[3427,3444],"text":""},"desc":"Remove unused variable 'setShowTestData'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport { Contact } from \"@/api/entities\";\nimport { Account } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Employee } from \"@/api/entities\";\nimport { useApiManager } from \"../components/shared/ApiManager\";\nimport { loadUsersSafely } from \"../components/shared/userLoader\";\nimport ContactCard from \"../components/contacts/ContactCard\";\nimport ContactForm from \"../components/contacts/ContactForm\";\nimport ContactDetailPanel from \"../components/contacts/ContactDetailPanel\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Plus, Search, Upload, Loader2, Grid, List, AlertCircle, X, Edit, Eye, Trash2, HelpCircle } from \"lucide-react\";\nimport { AnimatePresence } from \"framer-motion\";\nimport CsvExportButton from \"../components/shared/CsvExportButton\";\nimport CsvImportDialog from \"../components/shared/CsvImportDialog\";\nimport { useTenant } from '../components/shared/tenantContext';\nimport Pagination from \"../components/shared/Pagination\";\nimport { toast } from \"sonner\";\nimport ContactToLeadDialog from \"../components/contacts/ContactToLeadDialog\";\nimport TagFilter from \"../components/shared/TagFilter\";\nimport { useEmployeeScope } from \"../components/shared/EmployeeScopeContext\";\nimport RefreshButton from \"../components/shared/RefreshButton\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport PhoneDisplay from \"../components/shared/PhoneDisplay\";\nimport BulkActionsMenu from \"../components/contacts/BulkActionsMenu\";\nimport StatusHelper from \"../components/shared/StatusHelper\";\nimport { useLogger } from '../components/shared/Logger';\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n// Helper function for page URL creation\nconst createPageUrl = (pageName) => {\n  // This assumes a consistent pathing convention, e.g., 'Accounts' -> '/accounts'\n  return `/${pageName.toLowerCase()}`;\n};\n\nexport default function ContactsPage() {\n  const [contacts, setContacts] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingContact, setEditingContact] = useState(null);\n  const [viewMode, setViewMode] = useState(\"list\");\n  const [selectedContacts, setSelectedContacts] = useState(() => new Set());\n  const [selectAllMode, setSelectAllMode] = useState(false);\n  const [isImportOpen, setIsImportOpen] = useState(false);\n  const [user, setUser] = useState(null);\n  const { selectedTenantId } = useTenant();\n  const [detailContact, setDetailContact] = useState(null);\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\n  const [convertingContact, setConvertingContact] = useState(null);\n  const [selectedTags, setSelectedTags] = useState([]);\n  // Added showTestData state to support the new getTenantFilter logic from the outline\n  const [showTestData, setShowTestData] = useState(false);\n\n  const [totalStats, setTotalStats] = useState({\n    total: 0,\n    active: 0,\n    prospect: 0,\n    customer: 0,\n    inactive: 0\n  });\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(25);\n  const [totalItems, setTotalItems] = useState(0);\n\n  const { cachedRequest, clearCacheByKey } = useApiManager();\n  const { selectedEmail } = useEmployeeScope();\n  const logger = useLogger();\n\n  const initialLoadDone = useRef(false);\n  const supportingDataLoaded = useRef(false);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const currentUser = await User.me();\n        setUser(currentUser);\n        logger.info('Current user loaded', 'ContactsPage', { userId: currentUser.id || currentUser.email, role: currentUser.role });\n      } catch (error) {\n        console.error(\"Failed to load user:\", error);\n        toast.error(\"Failed to load user information\");\n        logger.error('Failed to load user information', 'ContactsPage', { error: error.message, stack: error.stack });\n      }\n    };\n    loadUser();\n  }, [logger]);\n\n  const getTenantFilter = useCallback(() => {\n    if (!user) return {};\n\n    let filter = {};\n\n    // Tenant filtering\n    if (user.role === 'superadmin' || user.role === 'admin') {\n      if (selectedTenantId) {\n        filter.tenant_id = selectedTenantId;\n      }\n    } else if (user.tenant_id) {\n      filter.tenant_id = user.tenant_id;\n    }\n\n    // Employee scope filtering from context\n    if (selectedEmail && selectedEmail !== 'all') {\n      if (selectedEmail === 'unassigned') {\n        filter.$or = [{ assigned_to: null }, { assigned_to: '' }];\n      } else {\n        filter.assigned_to = selectedEmail;\n      }\n    } else if (user.employee_role === 'employee' && user.role !== 'admin' && user.role !== 'superadmin') {\n      // Regular employees only see their own data\n      filter.assigned_to = user.email;\n    }\n\n    // Test data filtering\n    if (!showTestData) {\n      filter.is_test_data = { $ne: true };\n    }\n\n    return filter;\n  }, [user, selectedTenantId, showTestData, selectedEmail]);\n\n  useEffect(() => {\n    if (supportingDataLoaded.current || !user) return;\n\n    const loadSupportingData = async () => {\n      logger.info('Loading supporting data for contacts (accounts, users, employees)', 'ContactsPage', { tenantId: selectedTenantId, userId: user?.id || user?.email });\n      try {\n        const filterForSupportingData = getTenantFilter();\n\n        const accountsData = await cachedRequest('Account', 'filter', { filter: filterForSupportingData }, () => Account.filter(filterForSupportingData));\n        setAccounts(accountsData || []);\n\n        await delay(300);\n\n        const usersData = await loadUsersSafely(user, selectedTenantId, cachedRequest);\n        setUsers(usersData || []);\n\n        await delay(300);\n\n        const employeesData = await cachedRequest('Employee', 'filter', { filter: filterForSupportingData }, () => Employee.filter(filterForSupportingData));\n        setEmployees(employeesData || []);\n\n        supportingDataLoaded.current = true;\n        logger.info('Supporting data for contacts loaded successfully.', 'ContactsPage', { accountsCount: accountsData?.length, usersCount: usersData?.length, employeesCount: employeesData?.length, tenantId: selectedTenantId, userId: user?.id || user?.email });\n      } catch (error) {\n        console.error(\"[Contacts] Failed to load supporting data:\", error);\n        logger.error('Failed to load supporting data for contacts', 'ContactsPage', { error: error.message, stack: error.stack, tenantId: selectedTenantId, userId: user?.id || user?.email });\n      }\n    };\n\n    loadSupportingData();\n  }, [user, selectedTenantId, cachedRequest, getTenantFilter, logger]);\n\n  const loadTotalStats = useCallback(async () => {\n    if (!user) return;\n\n    logger.info('Loading contact total stats', 'ContactsPage', { tenantId: selectedTenantId, userId: user?.id || user?.email, employeeScope: selectedEmail });\n    try {\n      const scopedFilter = getTenantFilter();\n\n      const allContacts = await cachedRequest(\n        'Contact',\n        'filter',\n        { filter: scopedFilter },\n        () => Contact.filter(scopedFilter)\n      );\n\n      const stats = {\n        total: allContacts.length,\n        active: allContacts.filter((c) => c.status === 'active').length,\n        prospect: allContacts.filter((c) => c.status === 'prospect').length,\n        customer: allContacts.filter((c) => c.status === 'customer').length,\n        inactive: allContacts.filter((c) => c.status === 'inactive').length\n      };\n\n      setTotalStats(stats);\n      logger.info('Contact total stats loaded', 'ContactsPage', { stats, tenantId: selectedTenantId, userId: user?.id || user?.email, employeeScope: selectedEmail });\n    } catch (error) {\n      console.error('[Contacts] Failed to load stats:', error);\n      logger.error('Failed to load contact stats', 'ContactsPage', { error: error.message, stack: error.stack, tenantId: selectedTenantId, userId: user?.id || user?.email, employeeScope: selectedEmail });\n    }\n  }, [user, selectedTenantId, cachedRequest, getTenantFilter, selectedEmail, logger]);\n\n  const loadContacts = useCallback(async () => {\n    if (!user) {\n      logger.warning('User not loaded, skipping contact load', 'ContactsPage');\n      return;\n    }\n\n    setLoading(true);\n    logger.info('Loading contacts with applied filters', 'ContactsPage', {\n      searchTerm,\n      statusFilter,\n      selectedTags,\n      currentPage,\n      pageSize,\n      tenantId: selectedTenantId,\n      userId: user?.id || user?.email,\n      employeeScope: selectedEmail\n    });\n\n    try {\n      const scopedFilter = getTenantFilter();\n\n      if (!scopedFilter.tenant_id && user.role !== 'superadmin') {\n        logger.warning('No explicit tenant_id in scopedFilter for non-superadmin user. This might indicate incomplete tenant context.', 'ContactsPage', {\n          scopedFilter,\n          userId: user.id || user.email,\n          role: user.role,\n          selectedTenantIdFromContext: selectedTenantId\n        });\n      }\n\n      const allContacts = await cachedRequest(\n        'Contact',\n        'filter',\n        { filter: scopedFilter },\n        () => Contact.filter(scopedFilter)\n      );\n\n      let filtered = allContacts || [];\n\n      if (searchTerm) {\n        const search = searchTerm.toLowerCase();\n        filtered = filtered.filter((contact) =>\n          contact.first_name?.toLowerCase().includes(search) ||\n          contact.last_name?.toLowerCase().includes(search) ||\n          contact.email?.toLowerCase().includes(search) ||\n          contact.phone?.includes(searchTerm) ||\n          contact.job_title?.toLowerCase().includes(search) ||\n          contact.account_name?.toLowerCase().includes(search)\n        );\n      }\n\n      if (statusFilter !== \"all\") {\n        filtered = filtered.filter((contact) => contact.status === statusFilter);\n      }\n\n      if (selectedTags.length > 0) {\n        filtered = filtered.filter((contact) =>\n          Array.isArray(contact.tags) && selectedTags.every((tag) => contact.tags.includes(tag))\n        );\n      }\n\n      filtered.sort((a, b) => new Date(b.created_date) - new Date(a.created_date));\n\n      setTotalItems(filtered.length);\n\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const paginatedContacts = filtered.slice(startIndex, endIndex);\n\n      setContacts(paginatedContacts);\n      logger.info('Contacts loaded and paginated successfully.', 'ContactsPage', {\n        loadedCount: allContacts?.length || 0,\n        filteredCount: filtered.length,\n        paginatedCount: paginatedContacts.length,\n        currentPage,\n        pageSize,\n        tenantId: scopedFilter.tenant_id,\n        userId: user?.id || user?.email,\n        employeeScope: selectedEmail,\n        searchTerm, statusFilter, selectedTags\n      });\n    } catch (error) {\n      console.error(\"[Contacts] Failed to load contacts:\", error);\n      toast.error(\"Failed to load contacts\");\n      setContacts([]);\n      logger.error('Failed to load contacts', 'ContactsPage', {\n        error: error.message,\n        stack: error.stack,\n        searchTerm,\n        statusFilter,\n        selectedTags,\n        currentPage,\n        pageSize,\n        tenantId: selectedTenantId,\n        userId: user?.id || user?.email,\n        employeeScope: selectedEmail\n      });\n    } finally {\n      setLoading(false);\n      if (!initialLoadDone.current) {\n        initialLoadDone.current = true;\n      }\n    }\n  }, [user, selectedTenantId, searchTerm, statusFilter, selectedTags, currentPage, pageSize, cachedRequest, getTenantFilter, selectedEmail, logger]);\n\n  useEffect(() => {\n    loadContacts();\n  }, [loadContacts]);\n\n  useEffect(() => {\n    if (user) {\n      loadTotalStats();\n    }\n  }, [user, selectedTenantId, selectedEmail, loadTotalStats]);\n\n  useEffect(() => {\n    if (initialLoadDone.current) {\n      setCurrentPage(1);\n    }\n  }, [searchTerm, statusFilter, selectedTags, selectedEmail]);\n\n  const handleCreate = async (contactData) => {\n    const tenantIdentifier = user?.tenant_id || selectedTenantId;\n    logger.info('Attempting to create new contact', 'ContactsPage', { contactData: { ...contactData, tenant_id: tenantIdentifier }, userId: user?.id || user?.email });\n    try {\n      const newContact = await Contact.create({\n        ...contactData,\n        tenant_id: tenantIdentifier\n      });\n      toast.success(\"Contact created successfully\");\n      setIsFormOpen(false);\n      setEditingContact(null);\n      clearCacheByKey('Contact');\n      loadContacts();\n      loadTotalStats();\n      logger.info('Contact created successfully', 'ContactsPage', { contactId: newContact.id, contactName: `${newContact.first_name} ${newContact.last_name}`, userId: user?.id || user?.email, tenantId: tenantIdentifier });\n    } catch (error) {\n      console.error(\"Error creating contact:\", error);\n      toast.error(\"Failed to create contact\");\n      logger.error('Error creating contact', 'ContactsPage', { error: error.message, stack: error.stack, contactData: { ...contactData, tenant_id: tenantIdentifier }, userId: user?.id || user?.email });\n    }\n  };\n\n  const handleUpdate = async (contactData) => {\n    logger.info('Attempting to update contact', 'ContactsPage', { contactId: editingContact.id, contactData, userId: user?.id || user?.email });\n    try {\n      await Contact.update(editingContact.id, contactData);\n      toast.success(\"Contact updated successfully\");\n      setIsFormOpen(false);\n      setEditingContact(null);\n      clearCacheByKey('Contact');\n      loadContacts();\n      loadTotalStats();\n      logger.info('Contact updated successfully', 'ContactsPage', { contactId: editingContact.id, contactName: `${contactData.first_name} ${contactData.last_name}`, userId: user?.id || user?.email });\n    } catch (error) {\n      console.error(\"Error updating contact:\", error);\n      toast.error(\"Failed to update contact\");\n      logger.error('Error updating contact', 'ContactsPage', { error: error.message, stack: error.stack, contactId: editingContact.id, contactData, userId: user?.id || user?.email });\n    }\n  };\n\n  const handleDelete = async (id) => {\n    if (!window.confirm(\"Are you sure you want to delete this contact?\")) {\n      logger.warning('Contact deletion cancelled by user', 'ContactsPage', { contactId: id, userId: user?.id || user?.email });\n      return;\n    }\n\n    logger.info('Attempting to delete contact', 'ContactsPage', { contactId: id, userId: user?.id || user?.email });\n    try {\n      await Contact.delete(id);\n      toast.success(\"Contact deleted successfully\");\n      clearCacheByKey('Contact');\n      loadContacts();\n      loadTotalStats();\n      logger.info('Contact deleted successfully', 'ContactsPage', { contactId: id, userId: user?.id || user?.email });\n    } catch (error) {\n      console.error(\"Error deleting contact:\", error);\n      toast.error(\"Failed to delete contact\");\n      logger.error('Error deleting contact', 'ContactsPage', { error: error.message, stack: error.stack, contactId: id, userId: user?.id || user?.email });\n    }\n  };\n\n  const handleRefresh = () => {\n    logger.info('Refreshing all contacts data', 'ContactsPage', { userId: user?.id || user?.email, tenantId: selectedTenantId });\n    clearCacheByKey('Contact');\n    clearCacheByKey('Account');\n    clearCacheByKey('Employee');\n    loadContacts();\n    loadTotalStats();\n  };\n\n  const handleViewDetails = (contact) => {\n    setDetailContact(contact);\n    setIsDetailOpen(true);\n    logger.info('Viewing contact details', 'ContactsPage', { contactId: contact.id, contactName: `${contact.first_name} ${contact.last_name}`, userId: user?.id || user?.email });\n  };\n\n  const handleViewAccount = (accountId, accountName) => {\n    // Navigate to Accounts page with query parameter (use capital A)\n    window.location.href = `/Accounts?accountId=${accountId}`;\n    logger.info('Navigating to account details', 'ContactsPage', { accountId, accountName, userId: user?.id || user?.email });\n  };\n\n  const handleEdit = (contact) => {\n    setEditingContact(contact);\n    setIsFormOpen(true);\n    logger.info('Opening edit form for contact', 'ContactsPage', { contactId: contact.id, contactName: `${contact.first_name} ${contact.last_name}`, userId: user?.id || user?.email });\n  };\n\n  const handleSelectContact = (contactId, checked) => {\n    setSelectedContacts((prev) => {\n      const newSet = new Set(prev);\n      if (checked) {\n        newSet.add(contactId);\n        logger.debug('Contact selected', 'ContactsPage', { contactId, userId: user?.id || user?.email });\n      } else {\n        newSet.delete(contactId);\n        logger.debug('Contact deselected', 'ContactsPage', { contactId, userId: user?.id || user?.email });\n      }\n      return newSet;\n    });\n  };\n\n  const handleSelectAll = (checked) => {\n    if (checked) {\n      setSelectedContacts(new Set(contacts.map((c) => c.id)));\n      setSelectAllMode(false);\n      logger.info('All contacts selected', 'ContactsPage', { count: contacts.length, userId: user?.id || user?.email });\n    } else {\n      setSelectedContacts(new Set());\n      setSelectAllMode(false);\n      logger.info('All contacts deselected', 'ContactsPage', { userId: user?.id || user?.email });\n    }\n  };\n\n  const accountMap = useMemo(() => {\n    const map = new Map();\n    accounts.forEach((acc) => map.set(acc.id, acc));\n    return map;\n  }, [accounts]);\n\n  const userMap = useMemo(() => {\n    const map = new Map();\n    users.forEach((u) => map.set(u.email, u));\n    return map;\n  }, [users]);\n\n  const employeeMap = useMemo(() => {\n    const map = new Map();\n    employees.forEach((emp) => map.set(emp.user_email, emp));\n    return map;\n  }, [employees]);\n\n  // Badge colors for table view - matching stat cards\n  const statusBadgeColors = {\n    active: 'bg-green-900/20 text-green-300 border-green-700',\n    prospect: 'bg-cyan-900/20 text-cyan-300 border-cyan-700',\n    customer: 'bg-purple-900/20 text-purple-300 border-purple-700',\n    inactive: 'bg-slate-900/20 text-slate-300 border-slate-700',\n    default: 'bg-slate-900/20 text-slate-300 border-slate-700' // Fallback for undefined statuses\n  };\n\n  // Helper function to format large numbers with commas\n  const formatNumber = (num) => {\n    return num.toLocaleString('en-US');\n  };\n\n  if (loading && !initialLoadDone.current) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-12 h-12 text-blue-600 animate-spin mx-auto mb-4\" />\n          <p className=\"text-slate-400\">Loading contacts...</p>\n        </div>\n      </div>);\n\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-100\">Contacts</h1>\n          <p className=\"text-slate-400 mt-1\">\n            Track and manage your sales contacts and prospects.\n          </p>\n        </div>\n        <div className=\"flex flex-wrap items-center gap-2\">\n          <RefreshButton onClick={handleRefresh} loading={loading} />\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={() => {\n              setViewMode(viewMode === \"grid\" ? \"list\" : \"grid\");\n              logger.info('Toggled contact view mode', 'ContactsPage', { newViewMode: viewMode === \"grid\" ? \"list\" : \"grid\", userId: user?.id || user?.email });\n            }}\n            className=\"bg-slate-800 border-slate-700 text-slate-300 hover:bg-slate-700\">\n\n            {viewMode === \"grid\" ? <List className=\"w-4 h-4\" /> : <Grid className=\"w-4 h-4\" />}\n          </Button>\n          <CsvExportButton\n            entityName=\"Contact\"\n            data={contacts}\n            filename=\"contacts\"\n            className=\"bg-slate-800 border-slate-700 text-slate-300 hover:bg-slate-700\"\n            onExport={() => logger.info('Exported contacts CSV', 'ContactsPage', { count: contacts.length, userId: user?.id || user?.email })} />\n\n          <Button\n            variant=\"outline\"\n            onClick={() => {\n              setIsImportOpen(true);\n              logger.info('Opened CSV import dialog for contacts', 'ContactsPage', { userId: user?.id || user?.email });\n            }}\n            className=\"bg-slate-800 border-slate-700 text-slate-300 hover:bg-slate-700\">\n\n            <Upload className=\"w-4 h-4 mr-2\" />\n            Import\n          </Button>\n          <Button\n            onClick={() => {\n              setEditingContact(null);\n              setIsFormOpen(true);\n              logger.info('Opened create new contact form', 'ContactsPage', { userId: user?.id || user?.email });\n            }}\n            className=\"bg-orange-600 hover:bg-orange-700 text-white\">\n\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Contact\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards - Matching Accounts styling with solid backgrounds */}\n      <div className=\"grid grid-cols-2 sm:grid-cols-5 gap-4\">\n        <button\n          onClick={() => {\n            setStatusFilter(\"all\");\n            logger.debug('Status filter set to All', 'ContactsPage', { userId: user?.id || user?.email });\n          }}\n          className={`relative rounded-xl p-5 transition-all ${\n            statusFilter === \"all\" \n              ? \"bg-blue-100 border-2 border-blue-600\" \n              : \"bg-blue-50 border-2 border-blue-300 hover:bg-blue-100\"\n          }`}\n        >\n          <div className=\"flex items-start justify-between mb-3\">\n            <span className=\"text-sm font-medium text-slate-700\">Total Contacts</span>\n            <StatusHelper statusKey=\"total_all\" />\n          </div>\n          <p className=\"text-slate-900 text-3xl font-bold\">{formatNumber(totalStats.total)}</p>\n        </button>\n\n        <button\n          onClick={() => {\n            setStatusFilter(\"active\");\n            logger.debug('Status filter set to Active', 'ContactsPage', { userId: user?.id || user?.email });\n          }}\n          className={`relative rounded-xl p-5 transition-all ${\n            statusFilter === \"active\"\n              ? \"bg-green-100 border-2 border-green-600\"\n              : \"bg-green-50 border-2 border-green-300 hover:bg-green-100\"\n          }`}\n        >\n          <div className=\"flex items-start justify-between mb-3\">\n            <span className=\"text-sm font-medium text-slate-700\">Active</span>\n            <StatusHelper statusKey=\"contact_active\" />\n          </div>\n          <p className=\"text-slate-900 text-3xl font-bold\">{formatNumber(totalStats.active)}</p>\n        </button>\n\n        <button\n          onClick={() => {\n            setStatusFilter(\"prospect\");\n            logger.debug('Status filter set to Prospect', 'ContactsPage', { userId: user?.id || user?.email });\n          }}\n          className={`relative rounded-xl p-5 transition-all ${\n            statusFilter === \"prospect\"\n              ? \"bg-cyan-100 border-2 border-cyan-600\"\n              : \"bg-cyan-50 border-2 border-cyan-300 hover:bg-cyan-100\"\n          }`}\n        >\n          <div className=\"flex items-start justify-between mb-3\">\n            <span className=\"text-sm font-medium text-slate-700\">Prospects</span>\n            <StatusHelper statusKey=\"contact_prospect\" />\n          </div>\n          <p className=\"text-slate-900 text-3xl font-bold\">{formatNumber(totalStats.prospect)}</p>\n        </button>\n\n        <button\n          onClick={() => {\n            setStatusFilter(\"customer\");\n            logger.debug('Status filter set to Customer', 'ContactsPage', { userId: user?.id || user?.email });\n          }}\n          className={`relative rounded-xl p-5 transition-all ${\n            statusFilter === \"customer\"\n              ? \"bg-purple-100 border-2 border-purple-600\"\n              : \"bg-purple-50 border-2 border-purple-300 hover:bg-purple-100\"\n          }`}\n        >\n          <div className=\"flex items-start justify-between mb-3\">\n            <span className=\"text-sm font-medium text-slate-700\">Customers</span>\n            <StatusHelper statusKey=\"contact_customer\" />\n          </div>\n          <p className=\"text-slate-900 text-3xl font-bold\">{formatNumber(totalStats.customer)}</p>\n        </button>\n\n        <button\n          onClick={() => {\n            setStatusFilter(\"inactive\");\n            logger.debug('Status filter set to Inactive', 'ContactsPage', { userId: user?.id || user?.email });\n          }}\n          className={`relative rounded-xl p-5 transition-all ${\n            statusFilter === \"inactive\"\n              ? \"bg-slate-200 border-2 border-slate-600\"\n              : \"bg-slate-100 border-2 border-slate-400 hover:bg-slate-200\"\n          }`}\n        >\n          <div className=\"flex items-start justify-between mb-3\">\n            <span className=\"text-sm font-medium text-slate-700\">Inactive</span>\n            <StatusHelper statusKey=\"contact_inactive\" />\n          </div>\n          <p className=\"text-slate-900 text-3xl font-bold\">{formatNumber(totalStats.inactive)}</p>\n        </button>\n      </div>\n\n      {/* Search and Tag Filter */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-500 w-4 h-4\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search contacts by name, email, phone, company, or job title...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 bg-slate-800 border-slate-700 text-slate-200\" />\n\n        </div>\n        <TagFilter\n          entityName=\"Contact\"\n          selectedTags={selectedTags}\n          onTagsChange={setSelectedTags} />\n\n      </div>\n\n      {/* Bulk Actions */}\n      {selectedContacts.size > 0 &&\n      <div className=\"bg-blue-900/30 border border-blue-700/50 rounded-lg p-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Checkbox\n            checked={selectedContacts.size === contacts.length}\n            onCheckedChange={handleSelectAll}\n            className=\"border-slate-600 data-[state=checked]:bg-blue-600\" />\n\n            <span className=\"text-slate-200 font-medium\">\n              {selectedContacts.size} contact{selectedContacts.size !== 1 ? 's' : ''} selected\n            </span>\n          </div>\n          <BulkActionsMenu\n          selectedIds={Array.from(selectedContacts)}\n          onActionComplete={() => {\n            setSelectedContacts(new Set());\n            loadContacts();\n            loadTotalStats();\n            logger.info('Bulk action completed, contacts refreshed', 'ContactsPage', { count: selectedContacts.size, userId: user?.id || user?.email });\n          }} />\n\n        </div>\n      }\n\n      {/* Contacts List/Grid */}\n      {viewMode === \"list\" ?\n      <div className=\"bg-slate-800 border border-slate-700 rounded-lg overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-slate-700/50 border-b border-slate-700\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left\">\n                    <Checkbox\n                    checked={selectedContacts.size === contacts.length && contacts.length > 0}\n                    onCheckedChange={handleSelectAll}\n                    onClick={(e) => e.stopPropagation()}\n                    className=\"border-slate-600 data-[state=checked]:bg-blue-600\" />\n\n                  </th>\n                  <th className=\"px-4 py-3 text-left text-sm font-semibold text-slate-300\">Name</th>\n                  <th className=\"px-4 py-3 text-left text-sm font-semibold text-slate-300\">Email</th>\n                  <th className=\"px-4 py-3 text-left text-sm font-semibold text-slate-300\">Phone</th>\n                  <th className=\"px-4 py-3 text-left text-sm font-semibold text-slate-300\">Company</th>\n                  <th className=\"px-4 py-3 text-left text-sm font-semibold text-slate-300\">Job Title</th>\n                  <th className=\"px-4 py-3 text-left text-sm font-semibold text-slate-300\">Assigned To</th>\n                  <th className=\"px-4 py-3 text-left text-sm font-semibold text-slate-300\">Status</th>\n                  <th className=\"px-4 py-3 text-right text-sm font-semibold text-slate-300\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-slate-700\">\n                {contacts.map((contact) => {\n                const account = accountMap.get(contact.account_id);\n                const assignedUser = userMap.get(contact.assigned_to);\n                const assignedEmployee = employeeMap.get(contact.assigned_to);\n                const assignedName = assignedEmployee?.first_name && assignedEmployee?.last_name ?\n                `${assignedEmployee.first_name} ${assignedEmployee.last_name}` :\n                assignedUser?.full_name || contact.assigned_to_name || null;\n\n                return (\n                  <tr key={contact.id} className=\"hover:bg-slate-700/30 transition-colors\">\n                      <td className=\"px-4 py-3\">\n                        <Checkbox\n                        checked={selectedContacts.has(contact.id)}\n                        onCheckedChange={(checked) => handleSelectContact(contact.id, checked)}\n                        onClick={(e) => e.stopPropagation()}\n                        className=\"border-slate-600 data-[state=checked]:bg-blue-600\" />\n\n                      </td>\n                      <td className=\"px-4 py-3\">\n                        <span className=\"text-slate-300 text-sm font-medium\">\n                          {contact.first_name} {contact.last_name}\n                        </span>\n                      </td>\n                      <td className=\"px-4 py-3\">\n                        {contact.email ?\n                      <span className=\"text-slate-300 text-sm\">{contact.email}</span> :\n\n                      <span className=\"text-slate-500 text-sm\">-</span>\n                      }\n                      </td>\n                      <td className=\"px-4 py-3\">\n                        {contact.phone ?\n                      <PhoneDisplay\n                        user={user}\n                        phone={contact.phone}\n                        contactName={`${contact.first_name} ${contact.last_name}`}\n                        enableCalling={true}\n                        className=\"text-slate-300 hover:text-blue-400 text-sm\" /> :\n\n\n                      <span className=\"text-slate-500 text-sm\">-</span>\n                      }\n                      </td>\n                      <td className=\"px-4 py-3\">\n                        {contact.account_id && account ?\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleViewAccount(contact.account_id, account.name);\n                        }}\n                        className=\"text-blue-400 hover:text-blue-300 hover:underline text-sm\">\n\n                            {account.name}\n                          </button> :\n                      contact.account_name ?\n                      <span className=\"text-slate-300 text-sm\">{contact.account_name}</span> :\n\n                      <span className=\"text-slate-500 text-sm\">-</span>\n                      }\n                      </td>\n                      <td className=\"px-4 py-3\">\n                        {contact.job_title ?\n                      <span className=\"text-slate-300 text-sm\">{contact.job_title}</span> :\n\n                      <span className=\"text-slate-500 text-sm\">-</span>\n                      }\n                      </td>\n                      <td className=\"px-4 py-3\">\n                        {assignedName ?\n                      <span className=\"text-slate-300 text-sm\">{assignedName}</span> :\n\n                      <span className=\"text-slate-500 text-sm\">-</span>\n                      }\n                      </td>\n                      <td className=\"px-4 py-3\">\n                        <Badge\n                        variant=\"outline\"\n                        className={`${statusBadgeColors[contact.status] || statusBadgeColors.default} border capitalize text-xs font-semibold whitespace-nowrap`}>\n\n                          {contact.status}\n                        </Badge>\n                      </td>\n                      <td className=\"px-4 py-3\">\n                        <div className=\"flex items-center justify-end gap-2\">\n                          <TooltipProvider>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleViewDetails(contact);\n                                }}\n                                className=\"h-8 w-8 text-slate-400 hover:text-slate-300 hover:bg-slate-700\">\n\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>View Details</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                          <TooltipProvider>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleEdit(contact);\n                                }}\n                                className=\"h-8 w-8 text-slate-400 hover:text-slate-300 hover:bg-slate-700\">\n\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>Edit</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                          <TooltipProvider>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleDelete(contact.id);\n                                }}\n                                className=\"h-8 w-8 text-red-400 hover:text-red-300 hover:bg-slate-700\">\n\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>Delete</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                        </div>\n                      </td>\n                    </tr>);\n\n              })}\n              </tbody>\n            </table>\n          </div>\n        </div> :\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          <AnimatePresence>\n            {contacts.map((contact) => {\n            const account = accountMap.get(contact.account_id);\n            const assignedUser = userMap.get(contact.assigned_to);\n            const assignedEmployee = employeeMap.get(contact.assigned_to);\n            const assignedName = assignedEmployee?.first_name && assignedEmployee?.last_name ?\n            `${assignedEmployee.first_name} ${assignedEmployee.last_name}` :\n            assignedUser?.full_name || contact.assigned_to_name || null;\n\n            return (\n              <ContactCard\n                key={contact.id}\n                contact={contact}\n                accountId={contact.account_id}\n                accountName={account?.name || contact.account_name}\n                assignedUserName={assignedName}\n                onEdit={handleEdit}\n                onDelete={handleDelete}\n                onViewDetails={handleViewDetails}\n                onViewAccount={handleViewAccount}\n                onClick={() => handleViewDetails(contact)}\n                isSelected={selectedContacts.has(contact.id)}\n                onSelect={(checked) => handleSelectContact(contact.id, checked)}\n                user={user} />);\n\n\n          })}\n          </AnimatePresence>\n        </div>\n      }\n\n      {/* Pagination */}\n      {totalItems > pageSize &&\n      <Pagination\n        currentPage={currentPage}\n        totalPages={Math.ceil(totalItems / pageSize)}\n        pageSize={pageSize}\n        totalItems={totalItems}\n        onPageChange={(page) => {\n          setCurrentPage(page);\n          logger.debug('Pagination page changed', 'ContactsPage', { newPage: page, userId: user?.id || user?.email });\n        }}\n        onPageSizeChange={(newSize) => {\n          setPageSize(newSize);\n          setCurrentPage(1);\n          logger.debug('Pagination page size changed', 'ContactsPage', { newSize, userId: user?.id || user?.email });\n        }} />\n\n      }\n\n      {/* Empty State */}\n      {!loading && contacts.length === 0 &&\n      <div className=\"bg-slate-800 border border-slate-700 rounded-lg p-12 text-center\">\n          <AlertCircle className=\"w-16 h-16 text-slate-600 mx-auto mb-4\" />\n          <h3 className=\"text-xl font-semibold text-slate-300 mb-2\">No contacts found</h3>\n          <p className=\"text-slate-500 mb-6\">\n            {searchTerm || statusFilter !== \"all\" || selectedTags.length > 0 ?\n          \"Try adjusting your filters\" :\n          \"Get started by creating your first contact\"}\n          </p>\n          {!searchTerm && statusFilter === \"all\" && selectedTags.length === 0 &&\n        <Button\n          onClick={() => {\n            setEditingContact(null);\n            setIsFormOpen(true);\n            logger.info('Opened create new contact form from empty state', 'ContactsPage', { userId: user?.id || user?.email });\n          }}\n          className=\"bg-orange-600 hover:bg-orange-700\">\n\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Your First Contact\n            </Button>\n        }\n        </div>\n      }\n\n      {/* Dialogs */}\n      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto bg-slate-800 border-slate-700 text-slate-200\">\n          <DialogHeader>\n            <DialogTitle className=\"text-slate-100\">\n              {editingContact ? \"Edit Contact\" : \"Create New Contact\"}\n            </DialogTitle>\n          </DialogHeader>\n          <ContactForm\n            contact={editingContact}\n            accounts={accounts}\n            users={users}\n            employees={employees}\n            user={user}\n            onSubmit={editingContact ? handleUpdate : handleCreate}\n            onCancel={() => {\n              setIsFormOpen(false);\n              setEditingContact(null);\n              logger.debug('Contact form cancelled', 'ContactsPage', { editing: !!editingContact, userId: user?.id || user?.email });\n            }} />\n\n        </DialogContent>\n      </Dialog>\n\n      <ContactDetailPanel\n        contact={detailContact}\n        accountId={detailContact?.account_id}\n        accountName={accountMap.get(detailContact?.account_id)?.name || detailContact?.account_name}\n        assignedUserName={\n        detailContact ?\n        employeeMap.get(detailContact.assigned_to)?.first_name && employeeMap.get(detailContact.assigned_to)?.last_name ?\n        `${employeeMap.get(detailContact.assigned_to).first_name} ${employeeMap.get(detailContact.assigned_to).last_name}` :\n        userMap.get(detailContact.assigned_to)?.full_name || detailContact.assigned_to_name || null :\n        null\n        }\n        open={isDetailOpen}\n        onOpenChange={(open) => {\n          setIsDetailOpen(open);\n          if (!open) {\n            setDetailContact(null);\n            logger.debug('Contact detail panel closed', 'ContactsPage', { contactId: detailContact?.id, userId: user?.id || user?.email });\n          }\n        }}\n        onEdit={handleEdit}\n        onDelete={handleDelete}\n        user={user} />\n\n\n      <CsvImportDialog\n        entityName=\"Contact\"\n        open={isImportOpen}\n        onOpenChange={setIsImportOpen}\n        onImportComplete={() => {\n          clearCacheByKey('Contact');\n          loadContacts();\n          loadTotalStats();\n          logger.info('CSV import complete, refreshing contacts', 'ContactsPage', { userId: user?.id || user?.email, tenantId: selectedTenantId });\n        }} />\n\n\n      {convertingContact &&\n      <ContactToLeadDialog\n        contact={convertingContact}\n        open={!!convertingContact}\n        onOpenChange={(open) => !open && setConvertingContact(null)}\n        onSuccess={() => {\n          setConvertingContact(null);\n          toast.success(\"Contact converted to lead successfully\");\n          logger.info('Contact converted to lead successfully', 'ContactsPage', { contactId: convertingContact?.id, userId: user?.id || user?.email });\n        }} />\n\n      }\n    </div>);\n\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Dashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'initialLoadDone' is assigned a value but never used.","line":60,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"initialLoadDone"},"fix":{"range":[2610,2648],"text":""},"desc":"Remove unused variable 'initialLoadDone'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleRefresh' is assigned a value but never used.","line":234,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":234,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleRefresh"},"fix":{"range":[8892,9460],"text":""},"desc":"Remove unused variable 'handleRefresh'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":334,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12347,12443],"text":"\n                No widgets selected. Click &quot;Customize Dashboard\" to add widgets.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12347,12443],"text":"\n                No widgets selected. Click &ldquo;Customize Dashboard\" to add widgets.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12347,12443],"text":"\n                No widgets selected. Click &#34;Customize Dashboard\" to add widgets.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12347,12443],"text":"\n                No widgets selected. Click &rdquo;Customize Dashboard\" to add widgets.\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":334,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12347,12443],"text":"\n                No widgets selected. Click \"Customize Dashboard&quot; to add widgets.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12347,12443],"text":"\n                No widgets selected. Click \"Customize Dashboard&ldquo; to add widgets.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12347,12443],"text":"\n                No widgets selected. Click \"Customize Dashboard&#34; to add widgets.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12347,12443],"text":"\n                No widgets selected. Click \"Customize Dashboard&rdquo; to add widgets.\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport { User } from \"@/api/entities\";\nimport { Lead } from \"@/api/entities\";\nimport { Contact } from \"@/api/entities\";\nimport { Opportunity } from \"@/api/entities\";\nimport { Activity } from \"@/api/entities\";\n\nimport { useTenant } from \"../components/shared/tenantContext\";\nimport { useApiManager } from \"../components/shared/ApiManager\";\nimport { useEmployeeScope } from \"../components/shared/EmployeeScopeContext\";\nimport DashboardHeader from \"../components/dashboard/DashboardHeader\";\nimport StatsGrid from \"../components/dashboard/StatsGrid\";\nimport LazyWidgetLoader from \"../components/dashboard/LazyWidgetLoader\";\nimport SalesPipeline from \"../components/dashboard/SalesPipeline\";\nimport LeadSourceChart from \"../components/dashboard/LeadSourceChart\";\nimport TopAccounts from \"../components/dashboard/TopAccounts\";\nimport RecentActivities from \"../components/dashboard/RecentActivities\";\nimport LeadAgeReport from \"../components/dashboard/LeadAgeReport\";\nimport { Loader2 } from \"lucide-react\";\nimport WidgetPickerModal from \"../components/dashboard/WidgetPickerModal\";\nimport { toast } from \"sonner\";\nimport { useLogger } from '../components/shared/Logger';\n\nconst ALL_WIDGETS = [\n  { id: 'salesPipeline', name: 'Sales Pipeline', component: SalesPipeline, defaultVisibility: true },\n  { id: 'leadSourceChart', name: 'Lead Sources', component: LeadSourceChart, defaultVisibility: true },\n  { id: 'topAccounts', name: 'Top Accounts', component: TopAccounts, defaultVisibility: true },\n  { id: 'leadAgeReport', name: 'Lead Age Report', component: LeadAgeReport, defaultVisibility: true },\n  { id: 'recentActivities', name: 'Recent Activities', component: RecentActivities, defaultVisibility: true }\n];\n\nexport default function DashboardPage() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState({\n    totalContacts: 0,\n    newLeads: 0,\n    activeOpportunities: 0,\n    pipelineValue: 0,\n    activitiesLogged: 0,\n    trends: {\n      contacts: null,\n      newLeads: null,\n      activeOpportunities: null,\n      pipelineValue: null,\n      activitiesLogged: null,\n    }\n  });\n  const { selectedTenantId } = useTenant();\n  \n  const [widgetPreferences, setWidgetPreferences] = useState({});\n  const [isPickerOpen, setIsPickerOpen] = useState(false);\n  const [showTestData, setShowTestData] = useState(false);\n\n  const { cachedRequest, clearCacheByKey } = useApiManager();\n  const { selectedEmail } = useEmployeeScope();\n  const logger = useLogger();\n\n  const initialLoadDone = useRef(false);\n\n  // Load user\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const currentUser = await User.me();\n        setUser(currentUser);\n        logger.info('User loaded successfully for Dashboard', 'Dashboard', { userId: currentUser?.email });\n      } catch (error) {\n        logger.error('Failed to load user for Dashboard', 'Dashboard', { error: error.message, stack: error.stack });\n        console.error('User load failed:', error);\n        setUser(null);\n      }\n    };\n    loadUser();\n  }, [logger]);\n\n  // Load widget preferences\n  useEffect(() => {\n    const loadUserPreferences = async () => {\n      try {\n        if (user) {\n          const savedPrefs = user.permissions?.dashboard_widgets;\n          if (savedPrefs) {\n            setWidgetPreferences(savedPrefs);\n            logger.info('Loaded user widget preferences', 'Dashboard', { userId: user.email, preferences: savedPrefs });\n          } else {\n            const defaultPrefs = ALL_WIDGETS.reduce((acc, widget) => {\n              acc[widget.id] = widget.defaultVisibility;\n              return acc;\n            }, {});\n            setWidgetPreferences(defaultPrefs);\n            logger.info('Set default widget preferences for user', 'Dashboard', { userId: user.email, defaultPrefs });\n          }\n        }\n      } catch (error) {\n        logger.error(\"Failed to load user preferences\", 'Dashboard', { error: error.message, stack: error.stack, userId: user?.email });\n        console.error(\"Failed to load user preferences:\", error);\n      }\n    };\n    loadUserPreferences();\n  }, [user, logger]);\n\n  const getTenantFilter = useCallback(() => {\n    if (!user) return {};\n    \n    let filter = {};\n    \n    // Tenant filtering\n    if (user.role === 'superadmin' || user.role === 'admin') {\n      if (selectedTenantId) {\n        filter.tenant_id = selectedTenantId;\n      }\n    } else if (user.tenant_id) {\n      filter.tenant_id = user.tenant_id;\n    }\n    \n    // Employee scope filtering from context\n    if (selectedEmail && selectedEmail !== 'all') {\n      if (selectedEmail === 'unassigned') {\n        filter.$or = [{ assigned_to: null }, { assigned_to: '' }];\n      } else {\n        filter.assigned_to = selectedEmail;\n      }\n    } else if (user.employee_role === 'employee' && user.role !== 'admin' && user.role !== 'superadmin') {\n      // Regular employees only see their own data when no filter is selected\n      filter.assigned_to = user.email;\n    }\n    \n    // Test data filtering\n    if (!showTestData) {\n      filter.is_test_data = { $ne: true };\n    }\n    \n    return filter;\n  }, [user, selectedTenantId, showTestData, selectedEmail]);\n\n  // Load dashboard stats\n  useEffect(() => {\n    const loadStats = async () => {\n      if (!user) return;\n      \n      setLoading(true);\n      try {\n        logger.info('Loading dashboard data', 'Dashboard', {\n          userId: user.email,\n          selectedTenantId,\n          selectedEmployeeEmail: selectedEmail,\n          showTestData\n        });\n\n        const tenantFilter = getTenantFilter();\n\n        if (!tenantFilter || !tenantFilter.tenant_id) {\n          logger.warning('No tenant context or invalid tenant filter for dashboard data load', 'Dashboard', {\n            userId: user.email,\n            selectedTenantId,\n            tenantFilter\n          });\n          setLoading(false);\n          // Potentially set an error state or message to the user\n          return;\n        }\n        \n        const [leads, contacts, opportunities, activities] = await Promise.all([\n          cachedRequest('Lead', 'filter', { filter: tenantFilter }, () => Lead.filter(tenantFilter)),\n          cachedRequest('Contact', 'filter', { filter: tenantFilter }, () => Contact.filter(tenantFilter)),\n          cachedRequest('Opportunity', 'filter', { filter: tenantFilter }, () => Opportunity.filter(tenantFilter)),\n          cachedRequest('Activity', 'filter', { filter: tenantFilter }, () => Activity.filter(tenantFilter)),\n        ]);\n\n        // Calculate pipeline value (active opportunities only)\n        const activeOpps = opportunities?.filter(o => \n          o.stage !== 'closed_won' && o.stage !== 'closed_lost'\n        ) || [];\n        \n        const pipelineValue = activeOpps.reduce((sum, opp) => sum + (opp.amount || 0), 0);\n\n        // Get new leads from last 30 days\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        const newLeads = leads?.filter(l => {\n          const createdDate = new Date(l.created_date);\n          return createdDate >= thirtyDaysAgo;\n        }) || [];\n\n        // Get ALL activities created in last 30 days (not just completed)\n        const recentActivities = activities?.filter(a => {\n          const createdDate = new Date(a.created_date);\n          return createdDate >= thirtyDaysAgo;\n        }) || [];\n\n        const calculatedStats = {\n          totalContacts: contacts?.length || 0,\n          newLeads: newLeads.length,\n          activeOpportunities: activeOpps.length,\n          pipelineValue: pipelineValue,\n          activitiesLogged: recentActivities.length,\n          trends: {\n            contacts: null,\n            newLeads: null,\n            activeOpportunities: null,\n            pipelineValue: null,\n            activitiesLogged: null,\n          }\n        };\n\n        setStats(calculatedStats);\n        logger.info('Dashboard data loaded successfully', 'Dashboard', {\n          userId: user.email,\n          contactsCount: contacts?.length || 0,\n          leadsCount: leads?.length || 0,\n          opportunitiesCount: opportunities?.length || 0,\n          activitiesCount: activities?.length || 0\n        });\n      } catch (error) {\n        logger.error('Failed to load dashboard data', 'Dashboard', {\n          error: error.message,\n          stack: error.stack,\n          userId: user?.email,\n          selectedTenantId,\n          selectedEmployeeEmail: selectedEmail\n        });\n        console.error('Failed to load dashboard stats:', error);\n        toast.error('Failed to load dashboard data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadStats();\n  }, [user, selectedTenantId, showTestData, selectedEmail, getTenantFilter, cachedRequest, logger]);\n\n  const handleRefresh = () => {\n    logger.info('Dashboard refresh initiated', 'Dashboard', { userId: user?.email });\n    setLoading(true);\n    setStats({\n      totalContacts: 0,\n      newLeads: 0,\n      activeOpportunities: 0,\n      pipelineValue: 0,\n      activitiesLogged: 0,\n      trends: {\n        contacts: null,\n        newLeads: null,\n        activeOpportunities: null,\n        pipelineValue: null,\n        activitiesLogged: null,\n      }\n    });\n    \n    clearCacheByKey('Activity');\n    \n    setTimeout(() => {\n      window.location.reload();\n    }, 100);\n  };\n\n  const handleSaveWidgetPreferences = async (newPreferences) => {\n    try {\n      if (!user) {\n        logger.warning(\"Attempted to save widget preferences without a loaded user\", 'Dashboard');\n        toast.error(\"User not loaded. Cannot save preferences.\");\n        return;\n      }\n\n      const updatedUser = await User.updateMyUserData({\n        permissions: {\n          ...user.permissions,\n          dashboard_widgets: newPreferences,\n        },\n      });\n      setUser(updatedUser);\n      setWidgetPreferences(newPreferences);\n      logger.info(\"Dashboard preferences saved!\", 'Dashboard', { userId: user.email, newPreferences });\n      toast.success(\"Dashboard preferences saved!\");\n    } catch (error) {\n      logger.error(\"Failed to save widget preferences\", 'Dashboard', { error: error.message, stack: error.stack, userId: user?.email });\n      console.error(\"Failed to save widget preferences:\", error);\n      toast.error(\"Could not save preferences.\");\n    }\n  };\n\n  const visibleWidgets = useMemo(() => {\n    if (Object.keys(widgetPreferences).length === 0 && user) {\n      return ALL_WIDGETS.filter(widget => widget.defaultVisibility);\n    }\n    return ALL_WIDGETS.filter(widget => widgetPreferences[widget.id]);\n  }, [widgetPreferences, user]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-4 sm:p-6\">\n      {loading ? (\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n          <span className=\"ml-3 text-slate-400\">Loading dashboard...</span>\n        </div>\n      ) : (\n        <div className=\"space-y-6\">\n          <DashboardHeader \n            user={user} \n            selectedTenantId={selectedTenantId}\n            onCustomizeClick={() => setIsPickerOpen(true)}\n            showTestData={showTestData}\n            onTestDataToggle={setShowTestData}\n          />\n          \n          <WidgetPickerModal\n            open={isPickerOpen}\n            onOpenChange={setIsPickerOpen}\n            availableWidgets={ALL_WIDGETS}\n            currentPreferences={widgetPreferences}\n            onSave={handleSaveWidgetPreferences}\n          />\n          \n          <StatsGrid stats={stats} />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {visibleWidgets.length > 0 ? (\n              visibleWidgets.map((widget, index) => {\n                return (\n                  <LazyWidgetLoader \n                    key={widget.id}\n                    component={widget.component} \n                    delay={(index + 1) * 500}\n                    user={user}\n                    tenantFilter={getTenantFilter()}\n                    showTestData={showTestData}\n                  />\n                );\n              })\n            ) : (\n              <div className=\"col-span-full text-center p-8 text-gray-500 bg-gray-800 rounded-lg\">\n                No widgets selected. Click \"Customize Dashboard\" to add widgets.\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\DataDiagnostics.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":247,"column":113,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10052,10136],"text":"This section will provide detailed diagnostics related to the current user&apos;s record."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10052,10136],"text":"This section will provide detailed diagnostics related to the current user&lsquo;s record."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10052,10136],"text":"This section will provide detailed diagnostics related to the current user&#39;s record."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10052,10136],"text":"This section will provide detailed diagnostics related to the current user&rsquo;s record."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { User } from '@/api/entities';\nimport { Contact, Account, Lead, Opportunity } from '@/api/entities';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle, Database, Loader2 } from 'lucide-react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport ActivityVisibilityDebug from '../components/settings/ActivityVisibilityDebug'; // New import for ActivityVisibilityDebug\n\n/**\n * Component for General Database Diagnostics tab.\n * Contains the original diagnostic logic for record counts, tenant distribution, etc.\n */\nfunction GeneralDiagnosticsPanel({ user }) {\n  const [loading, setLoading] = useState(false);\n  const [diagnostics, setDiagnostics] = useState(null);\n\n  const runDiagnostics = async () => {\n    setLoading(true);\n    try {\n      // Fetch ALL records without any filter\n      const [allContacts, allAccounts, allLeads, allOpportunities] = await Promise.all([\n        Contact.filter({}),\n        Account.filter({}),\n        Lead.filter({}),\n        Opportunity.filter({})\n      ]);\n\n      // Analyze tenant_id distribution\n      const contactTenants = {};\n      const accountTenants = {};\n      const leadTenants = {};\n      const oppTenants = {};\n\n      allContacts.forEach(c => {\n        const tid = c.tenant_id || 'NULL';\n        contactTenants[tid] = (contactTenants[tid] || 0) + 1;\n      });\n\n      allAccounts.forEach(a => {\n        const tid = a.tenant_id || 'NULL';\n        accountTenants[tid] = (accountTenants[tid] || 0) + 1;\n      });\n\n      allLeads.forEach(l => {\n        const tid = l.tenant_id || 'NULL';\n        leadTenants[tid] = (leadTenants[tid] || 0) + 1;\n      });\n\n      allOpportunities.forEach(o => {\n        const tid = o.tenant_id || 'NULL';\n        oppTenants[tid] = (oppTenants[tid] || 0) + 1;\n      });\n\n      // Analyze is_test_data distribution\n      const contactTestData = {\n        true: allContacts.filter(c => c.is_test_data === true).length,\n        false: allContacts.filter(c => c.is_test_data === false).length,\n        null: allContacts.filter(c => c.is_test_data === null || c.is_test_data === undefined).length\n      };\n\n      setDiagnostics({\n        totalCounts: {\n          contacts: allContacts.length,\n          accounts: allAccounts.length,\n          leads: allLeads.length,\n          opportunities: allOpportunities.length\n        },\n        tenantDistribution: {\n          contacts: contactTenants,\n          accounts: accountTenants,\n          leads: leadTenants,\n          opportunities: oppTenants\n        },\n        testDataDistribution: {\n          contacts: contactTestData\n        },\n        currentUserTenantId: user?.tenant_id,\n        sampleRecords: {\n          contact: allContacts[0],\n          account: allAccounts[0],\n          lead: allLeads[0],\n          opportunity: allOpportunities[0]\n        }\n      });\n\n    } catch (error) {\n      console.error('Diagnostic error:', error);\n      // TODO: Add user-facing error message\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n          <Database className=\"w-6 h-6 text-blue-400\" />\n          General Database Diagnostics\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"bg-yellow-900/20 border border-yellow-700/50 rounded-lg p-4 flex gap-3\">\n          <AlertCircle className=\"w-5 h-5 text-yellow-400 flex-shrink-0 mt-0.5\" />\n          <div className=\"text-sm text-yellow-200\">\n            <p className=\"font-semibold mb-1\">Admin Tool</p>\n            <p>This tool analyzes your entire database to identify data integrity issues like tenant ID distribution.</p>\n          </div>\n        </div>\n\n        <Button onClick={runDiagnostics} disabled={loading} className=\"bg-blue-600 hover:bg-blue-700\">\n          {loading ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              Running Diagnostics...\n            </>\n          ) : (\n            'Run Full Database Diagnostic'\n          )}\n        </Button>\n\n        {diagnostics && (\n          <div className=\"space-y-6 mt-6\">\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-slate-100\">Total Record Counts</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-slate-400\">Contacts</p>\n                    <p className=\"text-2xl font-bold text-slate-100\">{diagnostics.totalCounts.contacts}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-slate-400\">Accounts</p>\n                    <p className=\"text-2xl font-bold text-slate-100\">{diagnostics.totalCounts.accounts}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-slate-400\">Leads</p>\n                    <p className=\"text-2xl font-bold text-slate-100\">{diagnostics.totalCounts.leads}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-slate-400\">Opportunities</p>\n                    <p className=\"text-2xl font-bold text-slate-100\">{diagnostics.totalCounts.opportunities}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-slate-100\">Your Tenant ID</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <code className=\"text-green-400 bg-slate-900 px-3 py-2 rounded\">{diagnostics.currentUserTenantId}</code>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-slate-100\">Tenant ID Distribution</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm font-semibold text-slate-300 mb-2\">Contacts by Tenant:</p>\n                  <div className=\"bg-slate-900 rounded p-3 max-h-48 overflow-auto\">\n                    {Object.entries(diagnostics.tenantDistribution.contacts).map(([tid, count]) => (\n                      <div key={tid} className=\"flex justify-between py-1\">\n                        <code className={`text-sm ${tid === diagnostics.currentUserTenantId ? 'text-green-400 font-bold' : 'text-slate-400'}`}>\n                          {tid === 'NULL' ? '[NO TENANT_ID]' : tid}\n                        </code>\n                        <span className=\"text-slate-300\">{count} records</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <p className=\"text-sm font-semibold text-slate-300 mb-2\">Accounts by Tenant:</p>\n                  <div className=\"bg-slate-900 rounded p-3 max-h-48 overflow-auto\">\n                    {Object.entries(diagnostics.tenantDistribution.accounts).map(([tid, count]) => (\n                      <div key={tid} className=\"flex justify-between py-1\">\n                        <code className={`text-sm ${tid === diagnostics.currentUserTenantId ? 'text-green-400 font-bold' : 'text-slate-400'}`}>\n                          {tid === 'NULL' ? '[NO TENANT_ID]' : tid}\n                        </code>\n                        <span className=\"text-slate-300\">{count} records</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-slate-100\">Test Data Distribution (Contacts)</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-slate-400\">is_test_data: true</p>\n                    <p className=\"text-xl font-bold text-slate-100\">{diagnostics.testDataDistribution.contacts.true}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-slate-400\">is_test_data: false</p>\n                    <p className=\"text-xl font-bold text-slate-100\">{diagnostics.testDataDistribution.contacts.false}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-slate-400\">is_test_data: null</p>\n                    <p className=\"text-xl font-bold text-slate-100\">{diagnostics.testDataDistribution.contacts.null}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-slate-100\">Sample Records</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <pre className=\"bg-slate-900 rounded p-4 text-xs text-slate-300 overflow-auto max-h-96\">\n                  {JSON.stringify(diagnostics.sampleRecords, null, 2)}\n                </pre>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n/**\n * Placeholder component for the User Record tab.\n */\nfunction UserRecordDebug({ user }) {\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n          User Record Diagnostics\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-slate-300\">This section will provide detailed diagnostics related to the current user's record.</p>\n        {user ? (\n          <pre className=\"bg-slate-900 rounded p-4 text-xs text-slate-300 overflow-auto max-h-96 mt-4\">\n            {JSON.stringify(user, null, 2)}\n          </pre>\n        ) : (\n          <p className=\"text-slate-400 mt-4\">User data is not available.</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n/**\n * Placeholder component for the Lead Visibility tab.\n */\nfunction LeadVisibilityDebug() {\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n          Lead Visibility Diagnostics\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-slate-300\">This section will contain diagnostics to investigate lead visibility issues.</p>\n        <p className=\"text-slate-400 mt-2\">Implementation pending.</p>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function DataDiagnosticsPage() {\n  const [user, setUser] = useState(null);\n  const [activeTab, setActiveTab] = useState('activity-visibility'); // Changed default to activity-visibility\n\n  useEffect(() => {\n    const loadUser = async () => {\n      const currentUser = await User.me();\n      setUser(currentUser);\n    };\n    loadUser();\n  }, []);\n\n  if (!user) {\n    return (\n      <div className=\"p-8 min-h-screen bg-slate-900 flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <h1 className=\"text-3xl font-bold text-slate-100 mb-6\">Data Diagnostics Admin Panel</h1>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"bg-slate-800 border-slate-700\">\n            <TabsTrigger value=\"activity-visibility\">Activity Visibility</TabsTrigger>\n            <TabsTrigger value=\"general-diagnostics\">General Diagnostics</TabsTrigger>\n            <TabsTrigger value=\"user-record\">User Record</TabsTrigger>\n            <TabsTrigger value=\"lead-visibility\">Lead Visibility</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"activity-visibility\" className=\"mt-4\">\n            <ActivityVisibilityDebug />\n          </TabsContent>\n\n          <TabsContent value=\"general-diagnostics\" className=\"mt-4\">\n            <GeneralDiagnosticsPanel user={user} />\n          </TabsContent>\n\n          <TabsContent value=\"user-record\" className=\"mt-4\">\n            <UserRecordDebug user={user} />\n          </TabsContent>\n\n          <TabsContent value=\"lead-visibility\" className=\"mt-4\">\n            <LeadVisibilityDebug />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\DataQualityReport.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runAnalysis'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [currentUser, runAnalysis, selectedTenantId]","fix":{"range":[1401,1432],"text":"[currentUser, runAnalysis, selectedTenantId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  AlertTriangle, \n  CheckCircle, \n  XCircle, \n  Users, \n  Building2, \n  TrendingUp,\n  Mail,\n  Phone,\n  FileText,\n  RefreshCw,\n  ChevronDown,\n  ChevronUp\n} from \"lucide-react\";\nimport { User } from \"@/api/entities\";\nimport { useTenant } from \"../components/shared/tenantContext\";\nimport { analyzeDataQuality } from \"@/api/functions\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\n\nexport default function DataQualityReport() {\n  const [loading, setLoading] = useState(true);\n  const [analyzing, setAnalyzing] = useState(false);\n  const [report, setReport] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [error, setError] = useState(null);\n  const [expandedSections, setExpandedSections] = useState({\n    contacts: false,\n    accounts: false,\n    leads: false\n  });\n\n  const { selectedTenantId } = useTenant();\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  useEffect(() => {\n    if (currentUser) {\n      runAnalysis();\n    }\n  }, [currentUser, selectedTenantId]);\n\n  const loadUser = async () => {\n    try {\n      const user = await User.me();\n      setCurrentUser(user);\n    } catch (error) {\n      console.error(\"Failed to load user:\", error);\n      setError(\"Failed to load user information\");\n    }\n  };\n\n  const runAnalysis = async () => {\n    setLoading(true);\n    setAnalyzing(true);\n    setError(null);\n\n    try {\n      const tenantId = selectedTenantId || currentUser?.tenant_id;\n      \n      if (!tenantId && currentUser?.role !== 'superadmin') {\n        setError(\"No tenant selected\");\n        return;\n      }\n\n      const { data } = await analyzeDataQuality({ tenant_id: tenantId });\n      \n      if (data.success) {\n        setReport(data.report);\n      } else {\n        setError(data.error || \"Analysis failed\");\n      }\n    } catch (error) {\n      console.error(\"Error analyzing data quality:\", error);\n      setError(error.message || \"Failed to analyze data quality\");\n    } finally {\n      setLoading(false);\n      setAnalyzing(false);\n    }\n  };\n\n  const toggleSection = (section) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev[section]\n    }));\n  };\n\n  const getQualityColor = (percentage) => {\n    if (percentage >= 90) return \"text-green-400\";\n    if (percentage >= 70) return \"text-yellow-400\";\n    return \"text-red-400\";\n  };\n\n  const getQualityBadge = (percentage) => {\n    if (percentage >= 90) return <Badge className=\"bg-green-900/50 text-green-300 border-green-700\">Excellent</Badge>;\n    if (percentage >= 70) return <Badge className=\"bg-yellow-900/50 text-yellow-300 border-yellow-700\">Fair</Badge>;\n    return <Badge className=\"bg-red-900/50 text-red-300 border-red-700\">Needs Attention</Badge>;\n  };\n\n  const renderEntitySection = (entityType, entityData, IconComponent) => {\n    const qualityPercentage = 100 - entityData.issues_percentage;\n    const isExpanded = expandedSections[entityType.toLowerCase()];\n\n    return (\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 rounded-lg bg-slate-700\">\n                <IconComponent className=\"w-5 h-5 text-slate-300\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-slate-100\">{entityType}</CardTitle>\n                <CardDescription className=\"text-slate-400\">\n                  {entityData.total_records} total records\n                </CardDescription>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className={`text-3xl font-bold ${getQualityColor(qualityPercentage)}`}>\n                {qualityPercentage.toFixed(1)}%\n              </div>\n              {getQualityBadge(qualityPercentage)}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Progress Bar */}\n          <div>\n            <div className=\"flex justify-between text-sm text-slate-400 mb-2\">\n              <span>Data Quality Score</span>\n              <span>{entityData.records_with_issues} issues found</span>\n            </div>\n            <Progress \n              value={qualityPercentage} \n              className=\"h-2\"\n            />\n          </div>\n\n          {/* Issues Summary */}\n          <Collapsible open={isExpanded} onOpenChange={() => toggleSection(entityType.toLowerCase())}>\n            <CollapsibleTrigger asChild>\n              <Button variant=\"ghost\" className=\"w-full justify-between text-slate-300 hover:text-slate-100 hover:bg-slate-700\">\n                <span>View Detailed Issues</span>\n                {isExpanded ? <ChevronUp className=\"w-4 h-4\" /> : <ChevronDown className=\"w-4 h-4\" />}\n              </Button>\n            </CollapsibleTrigger>\n            <CollapsibleContent className=\"space-y-3 mt-4\">\n              {entityData.issues.missing_first_name > 0 && (\n                <div className=\"flex items-center justify-between p-3 rounded-lg bg-slate-700/50 border border-slate-600\">\n                  <div className=\"flex items-center gap-2\">\n                    <AlertTriangle className=\"w-4 h-4 text-yellow-400\" />\n                    <span className=\"text-slate-300\">Missing First Name</span>\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-slate-800 text-slate-200 border-slate-600\">\n                    {entityData.issues.missing_first_name} records\n                  </Badge>\n                </div>\n              )}\n\n              {entityData.issues.missing_last_name > 0 && (\n                <div className=\"flex items-center justify-between p-3 rounded-lg bg-slate-700/50 border border-slate-600\">\n                  <div className=\"flex items-center gap-2\">\n                    <AlertTriangle className=\"w-4 h-4 text-yellow-400\" />\n                    <span className=\"text-slate-300\">Missing Last Name</span>\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-slate-800 text-slate-200 border-slate-600\">\n                    {entityData.issues.missing_last_name} records\n                  </Badge>\n                </div>\n              )}\n\n              {entityData.issues.invalid_name_characters > 0 && (\n                <div className=\"flex items-center justify-between p-3 rounded-lg bg-slate-700/50 border border-slate-600\">\n                  <div className=\"flex items-center gap-2\">\n                    <XCircle className=\"w-4 h-4 text-red-400\" />\n                    <span className=\"text-slate-300\">Invalid Name Characters</span>\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-slate-800 text-slate-200 border-slate-600\">\n                    {entityData.issues.invalid_name_characters} records\n                  </Badge>\n                </div>\n              )}\n\n              {entityData.issues.invalid_email > 0 && (\n                <div className=\"flex items-center justify-between p-3 rounded-lg bg-slate-700/50 border border-slate-600\">\n                  <div className=\"flex items-center gap-2\">\n                    <Mail className=\"w-4 h-4 text-red-400\" />\n                    <span className=\"text-slate-300\">Invalid Email Format</span>\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-slate-800 text-slate-200 border-slate-600\">\n                    {entityData.issues.invalid_email} records\n                  </Badge>\n                </div>\n              )}\n\n              {entityData.issues.missing_contact_info > 0 && (\n                <div className=\"flex items-center justify-between p-3 rounded-lg bg-slate-700/50 border border-slate-600\">\n                  <div className=\"flex items-center gap-2\">\n                    <Phone className=\"w-4 h-4 text-red-400\" />\n                    <span className=\"text-slate-300\">No Contact Info (Email & Phone)</span>\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-slate-800 text-slate-200 border-slate-600\">\n                    {entityData.issues.missing_contact_info} records\n                  </Badge>\n                </div>\n              )}\n\n              {entityData.records_with_issues === 0 && (\n                <div className=\"flex items-center gap-2 p-3 rounded-lg bg-green-900/20 border border-green-700/50\">\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  <span className=\"text-green-300\">No data quality issues found!</span>\n                </div>\n              )}\n            </CollapsibleContent>\n          </Collapsible>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (loading && !report) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"w-12 h-12 text-blue-400 animate-spin mx-auto mb-4\" />\n          <p className=\"text-slate-300\">Analyzing data quality...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert className=\"bg-red-900/20 border-red-700/50\">\n        <AlertTriangle className=\"w-4 h-4 text-red-400\" />\n        <AlertDescription className=\"text-red-300\">\n          {error}\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (!report) {\n    return (\n      <Alert className=\"bg-slate-800 border-slate-700\">\n        <AlertTriangle className=\"w-4 h-4 text-slate-400\" />\n        <AlertDescription className=\"text-slate-300\">\n          No data quality report available.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  const overallQuality = 100 - report.overall.issues_percentage;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-100 flex items-center gap-3\">\n            <div className=\"w-12 h-12 flex items-center justify-center rounded-full bg-blue-900/30 border border-blue-700/50\">\n              <FileText className=\"w-7 h-7 text-blue-400\" />\n            </div>\n            Data Quality Report\n          </h1>\n          <p className=\"text-slate-400 mt-2\">\n            Analyze and monitor data quality across your CRM entities\n          </p>\n        </div>\n        <Button\n          onClick={runAnalysis}\n          disabled={analyzing}\n          className=\"bg-blue-600 hover:bg-blue-700\"\n        >\n          {analyzing ? (\n            <>\n              <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n              Analyzing...\n            </>\n          ) : (\n            <>\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Refresh Report\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Overall Summary */}\n      <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Overall Data Quality</CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Aggregated score across all entities\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className={`text-6xl font-bold ${getQualityColor(overallQuality)}`}>\n                {overallQuality.toFixed(1)}%\n              </div>\n              <p className=\"text-slate-400 mt-2\">\n                {report.overall.total_records} total records analyzed\n              </p>\n              <p className=\"text-slate-500 text-sm\">\n                {report.overall.records_with_issues} records with issues\n              </p>\n            </div>\n            <div className=\"text-right\">\n              {getQualityBadge(overallQuality)}\n              <div className=\"mt-4 space-y-2\">\n                {overallQuality >= 90 && (\n                  <p className=\"text-sm text-green-400\">\n                    Γ£ô Excellent data quality!\n                  </p>\n                )}\n                {overallQuality < 90 && overallQuality >= 70 && (\n                  <p className=\"text-sm text-yellow-400\">\n                    ΓÜá Some issues need attention\n                  </p>\n                )}\n                {overallQuality < 70 && (\n                  <p className=\"text-sm text-red-400\">\n                    Γ£ù Critical issues detected\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Entity-Specific Reports */}\n      <div className=\"grid gap-6\">\n        {report.contacts && renderEntitySection(\"Contacts\", report.contacts, Users)}\n        {report.accounts && renderEntitySection(\"Accounts\", report.accounts, Building2)}\n        {report.leads && renderEntitySection(\"Leads\", report.leads, TrendingUp)}\n      </div>\n\n      {/* Recommendations */}\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"text-slate-100\">Recommendations</CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Actions to improve your data quality\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-start gap-3 p-3 rounded-lg bg-blue-900/20 border border-blue-700/50\">\n            <CheckCircle className=\"w-5 h-5 text-blue-400 flex-shrink-0 mt-0.5\" />\n            <div>\n              <p className=\"text-blue-300 font-medium\">Review Records with Missing Names</p>\n              <p className=\"text-slate-400 text-sm mt-1\">\n                Update records that are missing first or last names to ensure complete contact information.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start gap-3 p-3 rounded-lg bg-blue-900/20 border border-blue-700/50\">\n            <CheckCircle className=\"w-5 h-5 text-blue-400 flex-shrink-0 mt-0.5\" />\n            <div>\n              <p className=\"text-blue-300 font-medium\">Validate Email Addresses</p>\n              <p className=\"text-slate-400 text-sm mt-1\">\n                Correct or remove invalid email addresses to improve communication reliability.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start gap-3 p-3 rounded-lg bg-blue-900/20 border border-blue-700/50\">\n            <CheckCircle className=\"w-5 h-5 text-blue-400 flex-shrink-0 mt-0.5\" />\n            <div>\n              <p className=\"text-blue-300 font-medium\">Add Contact Information</p>\n              <p className=\"text-slate-400 text-sm mt-1\">\n                Ensure all records have at least one method of contact (email or phone number).\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start gap-3 p-3 rounded-lg bg-blue-900/20 border border-blue-700/50\">\n            <CheckCircle className=\"w-5 h-5 text-blue-400 flex-shrink-0 mt-0.5\" />\n            <div>\n              <p className=\"text-blue-300 font-medium\">Clean Invalid Name Characters</p>\n              <p className=\"text-slate-400 text-sm mt-1\">\n                Remove numbers and special characters from name fields (except hyphens, apostrophes, and language-specific characters).\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\DocumentManagement.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\DocumentProcessing.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'uploadMode' is assigned a value but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"uploadMode"},"fix":{"range":[915,925],"text":""},"desc":"Remove unused variable 'uploadMode'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { User } from \"@/api/entities\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Upload, FileText, CreditCard, X, FolderOpen, AlertCircle } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport BusinessCardProcessor from \"../components/documents/BusinessCardProcessor\";\nimport DocumentExtractor from \"../components/documents/DocumentExtractor\";\nimport ProcessingHistory from \"../components/documents/ProcessingHistory\";\nimport CashFlowExtractor from \"../components/documents/CashFlowExtractor\"; // New import\nimport { ArrowRightLeft } from \"lucide-react\"; // New icon import\n\nexport default function DocumentProcessing() {\n  const [activeProcessor, setActiveProcessor] = useState(null);\n  const [uploadMode, setUploadMode] = useState(null); // 'extract' or 'storage'\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const user = await User.me();\n        setCurrentUser(user);\n      } catch (error) {\n        console.error(\"Failed to load user in DocumentProcessing:\", error);\n      }\n    };\n    loadUser();\n  }, []);\n\n  const handleCancel = useCallback(() => {\n    setActiveProcessor(null);\n    setUploadMode(null);\n    setIsProcessing(false);\n  }, []);\n\n  const handleProcessingStateChange = useCallback((processing) => {\n    setIsProcessing(processing);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-4 lg:p-8 space-y-4 lg:space-y-6\">\n      <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl lg:text-3xl font-bold text-slate-100 flex items-center gap-3\">\n            <div className=\"w-10 h-10 lg:w-12 lg:h-12 flex items-center justify-center rounded-full bg-emerald-900/30 border border-emerald-700/50\">\n              <FileText className=\"w-5 h-5 lg:w-7 lg:h-7 text-emerald-400\" />\n            </div>\n            Document Processing\n          </h1>\n          <p className=\"text-slate-400 mt-1 text-sm lg:text-base\">\n            Process business cards and documents with AI, or upload files for storage.\n          </p>\n        </div>\n        \n        {(activeProcessor || isProcessing) && (\n          <Button\n            variant=\"outline\" \n            onClick={handleCancel}\n            className=\"bg-red-700 hover:bg-red-600 text-white border-red-600 flex items-center gap-2\"\n          >\n            <X className=\"w-4 h-4\" />\n            Cancel\n          </Button>\n        )}\n      </div>\n\n      {!activeProcessor && !isProcessing && (\n        <>\n          <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n            <AlertCircle className=\"h-4 w-4 text-blue-400\" />\n            <AlertDescription className=\"text-blue-300\">\n              Choose between AI-powered extraction (which analyzes and extracts data) or simple storage upload (no processing).\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-6\">\n            {/* Business Card Processing */}\n            <Card className=\"bg-slate-800 border-slate-700 hover:bg-slate-700/50 transition-all cursor-pointer\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3 text-slate-100\">\n                  <div className=\"p-2 rounded-lg bg-blue-900/30 border border-blue-700/50\">\n                    <CreditCard className=\"w-6 h-6 text-blue-400\" />\n                  </div>\n                  Business Card Scanner\n                </CardTitle>\n                <CardDescription className=\"text-slate-400\">\n                  Extract contact information from business cards using AI\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button\n                  onClick={() => {\n                    setActiveProcessor('business-card');\n                    setUploadMode('extract');\n                  }}\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Scan Business Card\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Document Extraction */}\n            <Card className=\"bg-slate-800 border-slate-700 hover:bg-slate-700/50 transition-all cursor-pointer\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3 text-slate-100\">\n                  <div className=\"p-2 rounded-lg bg-emerald-900/30 border border-emerald-700/50\">\n                    <FileText className=\"w-6 h-6 text-emerald-400\" />\n                  </div>\n                  Document Extractor\n                </CardTitle>\n                <CardDescription className=\"text-slate-400\">\n                  Extract data from receipts, invoices, and other documents\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button\n                  onClick={() => {\n                    setActiveProcessor('document-extractor');\n                    setUploadMode('extract');\n                  }}\n                  className=\"w-full bg-emerald-600 hover:bg-emerald-700 text-white\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Process Document\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* NEW: Cash Flow Extractor */}\n            <Card className=\"bg-slate-800 border-slate-700 hover:bg-slate-700/50 transition-all cursor-pointer\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3 text-slate-100\">\n                  <div className=\"p-2 rounded-lg bg-green-900/30 border border-green-700/50\">\n                    <ArrowRightLeft className=\"w-6 h-6 text-green-400\" />\n                  </div>\n                  Financial Document Extractor\n                </CardTitle>\n                <CardDescription className=\"text-slate-400\">\n                  Extract income & expenses from spreadsheets, PDFs, etc.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button\n                  onClick={() => {\n                    setActiveProcessor('cash-flow');\n                    setUploadMode('extract');\n                  }}\n                  className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Extract Transactions\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Storage Only Upload */}\n            <Card className=\"bg-slate-800 border-slate-700 hover:bg-slate-700/50 transition-all cursor-pointer\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3 text-slate-100\">\n                  <div className=\"p-2 rounded-lg bg-purple-900/30 border border-purple-700/50\">\n                    <FolderOpen className=\"w-6 h-6 text-purple-400\" />\n                  </div>\n                  Storage Upload\n                </CardTitle>\n                <CardDescription className=\"text-slate-400\">\n                  Upload documents for storage without AI processing\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button\n                  onClick={() => {\n                    setActiveProcessor('storage-only');\n                    setUploadMode('storage');\n                  }}\n                  className=\"w-full bg-purple-600 hover:bg-purple-700 text-white\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Upload for Storage\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </>\n      )}\n\n      {/* Active Processor */}\n      {activeProcessor === 'business-card' && (\n        <BusinessCardProcessor \n          user={currentUser}\n          onCancel={handleCancel}\n          onProcessingChange={handleProcessingStateChange}\n        />\n      )}\n\n      {activeProcessor === 'document-extractor' && (\n        <DocumentExtractor \n          onCancel={handleCancel}\n          onProcessingChange={handleProcessingStateChange}\n        />\n      )}\n\n      {activeProcessor === 'cash-flow' && (\n        <CashFlowExtractor\n          user={currentUser}\n          onCancel={handleCancel}\n          onProcessingChange={handleProcessingStateChange}\n        />\n      )}\n      \n      {activeProcessor === 'storage-only' && (\n        <StorageUploader \n          onCancel={handleCancel}\n          onProcessingChange={handleProcessingStateChange}\n        />\n      )}\n\n      {/* Processing History */}\n      {!activeProcessor && !isProcessing && (\n        <ProcessingHistory user={currentUser} />\n      )}\n    </div>\n  );\n}\n\n// New Storage-Only Upload Component\nfunction StorageUploader({ onCancel, onProcessingChange }) {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadResult, setUploadResult] = useState(null);\n\n  const handleFileSelect = (event) => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n    setUploadResult(null);\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) return;\n\n    setUploading(true);\n    onProcessingChange(true);\n\n    try {\n      const { UploadPrivateFile } = await import(\"@/api/integrations\");\n      const { DocumentationFile } = await import(\"@/api/entities\");\n      const { User } = await import(\"@/api/entities\");\n\n      // Upload file to private storage\n      const uploadResult = await UploadPrivateFile({ file: selectedFile });\n      \n      if (!uploadResult.file_uri) {\n        throw new Error('File upload failed - no URI returned');\n      }\n\n      // Get current user for tenant info\n      const currentUser = await User.me();\n\n      // Create document record for storage\n      const documentRecord = await DocumentationFile.create({\n        title: selectedFile.name,\n        description: \"Document uploaded for storage only\",\n        file_name: selectedFile.name,\n        file_uri: uploadResult.file_uri,\n        file_type: selectedFile.type.split('/')[1] || 'unknown',\n        category: 'other',\n        tenant_id: currentUser.tenant_id,\n        tags: ['storage-upload']\n      });\n\n      setUploadResult({\n        success: true,\n        message: 'Document uploaded successfully for storage!',\n        documentId: documentRecord.id\n      });\n\n    } catch (error) {\n      console.error('Storage upload error:', error);\n      setUploadResult({\n        success: false,\n        message: `Upload failed: ${error.message}`\n      });\n    } finally {\n      setUploading(false);\n      onProcessingChange(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-800 border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between text-slate-100\">\n          <span className=\"flex items-center gap-2\">\n            <FolderOpen className=\"w-6 h-6 text-purple-400\" />\n            Upload for Storage Only\n          </span>\n          <Button variant=\"ghost\" onClick={onCancel} className=\"text-slate-400 hover:text-slate-200\">\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </CardTitle>\n        <CardDescription className=\"text-slate-400\">\n          Upload documents to store them without any AI processing or data extraction.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {!uploadResult && (\n          <>\n            <div className=\"border-2 border-dashed border-slate-600 rounded-lg p-8 text-center\">\n              <input\n                type=\"file\"\n                accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx,.txt\"\n                onChange={handleFileSelect}\n                className=\"hidden\"\n                id=\"storage-file-input\"\n              />\n              <label htmlFor=\"storage-file-input\" className=\"cursor-pointer\">\n                <Upload className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n                <p className=\"text-slate-300 font-medium mb-2\">\n                  Click to select a file for storage\n                </p>\n                <p className=\"text-slate-500 text-sm\">\n                  Supports PDF, images, Word documents, and text files\n                </p>\n              </label>\n            </div>\n\n            {selectedFile && (\n              <Alert className=\"bg-slate-700 border-slate-600\">\n                <FileText className=\"h-4 w-4 text-slate-400\" />\n                <AlertDescription className=\"text-slate-300\">\n                  Selected: <strong>{selectedFile.name}</strong> ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"flex gap-3\">\n              <Button\n                onClick={handleUpload}\n                disabled={!selectedFile || uploading}\n                className=\"flex-1 bg-purple-600 hover:bg-purple-700 text-white\"\n              >\n                {uploading ? 'Uploading...' : 'Upload for Storage'}\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={onCancel}\n                className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </>\n        )}\n\n        {uploadResult && (\n          <Alert className={uploadResult.success ? 'bg-green-900/30 border-green-700/50' : 'bg-red-900/30 border-red-700/50'}>\n            <AlertCircle className={`h-4 w-4 ${uploadResult.success ? 'text-green-400' : 'text-red-400'}`} />\n            <AlertDescription className={uploadResult.success ? 'text-green-300' : 'text-red-300'}>\n              {uploadResult.message}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {uploadResult?.success && (\n          <div className=\"flex gap-3\">\n            <Button\n              onClick={() => {\n                setSelectedFile(null);\n                setUploadResult(null);\n              }}\n              className=\"flex-1 bg-purple-600 hover:bg-purple-700 text-white\"\n            >\n              Upload Another File\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={onCancel}\n              className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\"\n            >\n              Done\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Documentation.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used.","line":2,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardDescription"},"fix":{"range":[101,118],"text":""},"desc":"Remove unused variable 'CardDescription'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[150,198],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Tabs' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tabs"},"fix":{"range":[255,260],"text":""},"desc":"Remove unused variable 'Tabs'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":5,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"TabsContent"},"fix":{"range":[259,272],"text":""},"desc":"Remove unused variable 'TabsContent'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TabsList' is defined but never used.","line":5,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"TabsList"},"fix":{"range":[272,282],"text":""},"desc":"Remove unused variable 'TabsList'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used.","line":5,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"TabsTrigger"},"fix":{"range":[282,295],"text":""},"desc":"Remove unused variable 'TabsTrigger'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CreditCard' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"CreditCard"},"fix":{"range":[565,579],"text":""},"desc":"Remove unused variable 'CreditCard'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Sparkles' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sparkles"},"fix":{"range":[623,635],"text":""},"desc":"Remove unused variable 'Sparkles'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[643,658],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[658,672],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Zap"},"fix":{"range":[672,679],"text":""},"desc":"Remove unused variable 'Zap'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Shield' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Shield"},"fix":{"range":[679,689],"text":""},"desc":"Remove unused variable 'Shield'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Bot' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Bot"},"fix":{"range":[701,708],"text":""},"desc":"Remove unused variable 'Bot'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'isAdmin' is assigned a value but never used.","line":55,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"isAdmin"},"fix":{"range":[1296,1366],"text":""},"desc":"Remove unused variable 'isAdmin'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  Search,\n  Book,\n  Users,\n  Building2,\n  Star,\n  Target,\n  Calendar,\n  DollarSign,\n  FileText,\n  BarChart3,\n  Puzzle,\n  CreditCard,\n  Database,\n  Briefcase,\n  Brain,\n  Wrench,\n  Sparkles,\n  Info,\n  CheckCircle,\n  TrendingUp,\n  Zap,\n  Shield,\n  Settings,\n  Bot,\n  Route\n} from \"lucide-react\";\nimport { User } from \"@/api/entities\";\nimport ReactMarkdown from \"react-markdown\";\n\nexport default function DocumentationPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [activeSection, setActiveSection] = useState(\"overview\");\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const currentUser = await User.me();\n        setUser(currentUser);\n      } catch (error) {\n        console.error(\"Failed to load user:\", error);\n      }\n    };\n    loadUser();\n  }, []);\n\n  const isAdmin = user?.role === 'admin' || user?.role === 'superadmin';\n\n  const documentationSections = [\n    {\n      id: \"overview\",\n      title: \"Overview\",\n      icon: Book,\n      color: \"text-purple-400\",\n      content: `\n# Welcome to Ai-SHA CRM\n\nAi-SHA CRM is a comprehensive customer relationship management system designed to streamline your sales, marketing, and customer service operations.\n\n## Key Features\n\n- **Contact & Account Management**: Centralized customer database\n- **Lead Management**: Track and nurture potential customers\n- **Sales Pipeline**: Visualize and manage your opportunities\n- **Activity Tracking**: Log calls, meetings, emails, and tasks\n- **BizDev Sources**: Import and manage business development prospects\n- **AI-Powered Insights**: Get intelligent recommendations and market analysis\n- **Cash Flow Management**: Track income and expenses\n- **Document Processing**: Extract data from business cards and receipts\n- **Reports & Analytics**: Comprehensive business intelligence\n- **Employee Management**: Manage your team with role-based access\n\n## Getting Started\n\n1. **Complete your profile** in Settings\n2. **Import your contacts** using CSV import\n3. **Set up your pipeline** by creating opportunities\n4. **Start tracking activities** to measure productivity\n5. **Review reports** to gain insights into your business\n      `\n    },\n    {\n      id: \"contacts\",\n      title: \"Contacts\",\n      icon: Users,\n      color: \"text-blue-400\",\n      content: `\n# Contact Management\n\nContacts are individuals you interact with - potential customers, existing clients, partners, or any business relationship.\n\n## Creating Contacts\n\n1. Click **\"+ Add Contact\"** button\n2. Fill in contact details:\n   - **Required**: First Name, Last Name\n   - **Optional**: Email, Phone, Job Title, Department, Account (Company)\n3. Add tags for easy filtering\n4. Assign to a team member\n\n## Key Features\n\n### Bulk Actions\n- **Import**: Upload CSV files to import multiple contacts\n- **Export**: Download contact data as CSV\n- **Bulk Delete**: Remove multiple contacts at once\n- **Bulk Tag**: Add tags to multiple contacts simultaneously\n\n### Contact Details\n- View full contact history and timeline\n- Add notes and track interactions\n- Link to Account (Company)\n- Convert to Lead if needed\n- Track engagement score\n\n### Filtering & Search\n- Filter by status (Active, Inactive, Prospect, Customer)\n- Search by name, email, or company\n- Filter by tags\n- Filter by assigned user (managers only)\n\n## Best Practices\n\nΓ£ô **Link contacts to accounts** for better organization\nΓ£ô **Use tags** to segment your contacts (e.g., \"VIP\", \"Newsletter\")\nΓ£ô **Keep notes updated** after each interaction\nΓ£ô **Assign ownership** for accountability\nΓ£ô **Regular cleanup** - mark inactive contacts\n      `\n    },\n    {\n      id: \"accounts\",\n      title: \"Accounts\",\n      icon: Building2,\n      color: \"text-emerald-400\",\n      content: `\n# Account Management\n\nAccounts represent companies or organizations you do business with. They serve as the parent record for contacts and opportunities.\n\n## Creating Accounts\n\n1. Click **\"+ Add Account\"** button\n2. Fill in company details:\n   - **Required**: Company Name\n   - **Optional**: Website, Phone, Industry, Revenue, Employee Count\n3. Add address information\n4. Assign to a team member\n\n## Key Features\n\n### Account Types\n- **Prospect**: Potential customer\n- **Customer**: Active client\n- **Partner**: Business partner\n- **Competitor**: Competitive intelligence\n- **Vendor**: Supplier relationship\n\n### Industry Categories\nOver 30 industry options including:\n- Technology & Software\n- Healthcare & Medical\n- Construction & Engineering\n- Manufacturing & Industrial\n- Financial Services\n- And many more...\n\n### Account Hierarchy\n- Link multiple contacts to one account\n- Associate opportunities with accounts\n- Track all activities related to the account\n\n## Best Practices\n\nΓ£ô **One account per company** - avoid duplicates\nΓ£ô **Link all contacts** from that company\nΓ£ô **Update regularly** - revenue, employee count\nΓ£ô **Track competitors** for market intelligence\nΓ£ô **Use custom tags** for segmentation\n      `\n    },\n    {\n      id: \"leads\",\n      title: \"Leads\",\n      icon: Star,\n      color: \"text-yellow-400\",\n      content: `\n# Lead Management\n\nLeads are potential customers who haven't been fully qualified yet. Use leads to capture prospects before converting them to contacts and opportunities.\n\n## Lead Lifecycle\n\n1. **New** - Just captured\n2. **Contacted** - Initial outreach made\n3. **Qualified** - Meets criteria, worth pursuing\n4. **Unqualified** - Not a good fit\n5. **Converted** - Promoted to Contact + Opportunity\n6. **Lost** - No longer interested\n\n## Creating Leads\n\n1. Click **\"+ Add Lead\"** button\n2. Fill in lead details:\n   - **Required**: First Name, Last Name\n   - **Optional**: Email, Phone, Company, Job Title\n3. Select lead source (Website, Referral, Cold Call, etc.)\n4. Set priority and status\n\n## Lead Scoring\n\nThe system automatically scores leads (0-100) based on:\n- Completeness of information\n- Engagement level\n- Company size and industry\n- Source quality\n\n**AI Recommendations** suggest next actions:\n- Follow Up\n- Nurture\n- Qualify\n- Disqualify\n\n## Converting Leads\n\nWhen a lead is qualified, convert to:\n- **Contact** - Creates a contact record\n- **Account** - Creates or links to company\n- **Opportunity** - Creates a sales opportunity\n\n**Conversion preserves:**\n- Original lead ID (unique_id)\n- Source information\n- All activity history\n- Tags and notes\n\n## Best Practices\n\nΓ£ô **Qualify quickly** - don't let leads stagnate\nΓ£ô **Use lead scoring** to prioritize outreach\nΓ£ô **Track lead sources** for ROI analysis\nΓ£ô **Add notes** at each touchpoint\nΓ£ô **Convert when ready** - don't wait too long\n      `\n    },\n    {\n      id: \"opportunities\",\n      title: \"Opportunities\",\n      icon: Target,\n      color: \"text-orange-400\",\n      content: `\n# Sales Pipeline Management\n\nOpportunities represent potential deals in your sales pipeline. Track them from initial interest through closed-won or closed-lost.\n\n## Sales Stages\n\n1. **Prospecting** - Initial interest identified\n2. **Qualification** - Budget, authority, need, timeline confirmed\n3. **Proposal** - Solution presented\n4. **Negotiation** - Terms and pricing discussed\n5. **Closed Won** ≡ƒÄë - Deal won!\n6. **Closed Lost** - Deal lost\n\n## Creating Opportunities\n\n1. Click **\"+ Add Opportunity\"** button\n2. Fill in opportunity details:\n   - **Required**: Name, Amount, Close Date\n   - **Recommended**: Account, Contact, Stage, Probability\n3. Set probability (0-100%)\n4. Add description and next steps\n\n## Kanban Board\n\n**Drag-and-drop interface** for visual pipeline management:\n- Move opportunities between stages\n- Quick-edit cards\n- Color-coded by stage\n- Shows total value per stage\n\n## Key Metrics\n\n- **Pipeline Value**: Sum of all open opportunities\n- **Win Rate**: Percentage of won deals\n- **Average Deal Size**: Mean opportunity value\n- **Sales Velocity**: Speed of deals through pipeline\n\n## Best Practices\n\nΓ£ô **Update regularly** - keep stages current\nΓ£ô **Set realistic close dates** - avoid over-optimism\nΓ£ô **Adjust probability** as deals progress\nΓ£ô **Document next steps** for accountability\nΓ£ô **Review pipeline weekly** in team meetings\nΓ£ô **Clean up old opps** - close or disqualify stale deals\n      `\n    },\n    {\n      id: \"activities\",\n      title: \"Activities\",\n      icon: Calendar,\n      color: \"text-indigo-400\",\n      content: `\n# Activity Tracking\n\nActivities are the actions you take to move deals forward - calls, emails, meetings, tasks, and more.\n\n## Activity Types\n\n- **Call** - Phone conversations\n- **Email** - Email correspondence\n- **Meeting** - In-person or virtual meetings\n- **Task** - To-do items\n- **Note** - Quick notes and observations\n- **Demo** - Product demonstrations\n- **Proposal** - Proposal submissions\n- **Scheduled AI Call** - Automated AI-powered calls\n- **Scheduled AI Email** - Automated AI-generated emails\n\n## Creating Activities\n\n1. Click **\"+ Add Activity\"** button\n2. Fill in details:\n   - **Required**: Type, Subject\n   - **Optional**: Description, Due Date, Priority\n3. Link to Contact, Account, Lead, or Opportunity\n4. Set status (Scheduled, In Progress, Completed)\n\n## Activity Management\n\n### Priority Levels\n- **Low** - Nice to have\n- **Normal** - Standard priority\n- **High** - Important\n- **Urgent** - Drop everything\n\n### Status Tracking\n- **Scheduled** - Planned for future\n- **Overdue** - Past due date\n- **In Progress** - Currently working on it\n- **Completed** - Finished\n- **Cancelled** - No longer needed\n- **Failed** - Did not complete successfully\n\n### Calendar Integration\n- View activities in calendar format (Month/Week/Day)\n- Drag-and-drop to reschedule\n- Quick-add from calendar\n- Filter by activity type\n\n## AI-Powered Activities\n\n### Scheduled AI Calls\nConfigure automated calls with:\n- Custom AI prompt/script\n- Contact phone number\n- Call objective (Follow-up, Qualification, etc.)\n- Retry settings\n\n### Scheduled AI Emails\nConfigure automated emails with:\n- Subject template\n- AI-generated body content\n- Personalization variables\n- Send schedule\n\n## Best Practices\n\nΓ£ô **Log everything** - even quick calls\nΓ£ô **Set due dates** - create accountability\nΓ£ô **Use priorities** - focus on what matters\nΓ£ô **Link to records** - maintain relationship history\nΓ£ô **Complete on time** - or reschedule proactively\nΓ£ô **Review daily** - check your activity list each morning\n      `\n    },\n    {\n      id: \"bizdev\",\n      title: \"BizDev Sources\",\n      icon: Database,\n      color: \"text-cyan-400\",\n      content: `\n# Business Development Sources\n\nBizDev Sources help you manage large lists of potential prospects from directories, trade shows, or purchased lists before actively pursuing them.\n\n## What are BizDev Sources?\n\nThink of BizDev Sources as a **staging area** for prospects:\n- Import company lists from directories\n- Store prospect information before qualification\n- Track license status and compliance\n- Promote to Accounts when business is won\n\n## Workflow\n\n\\`\\`\\`\nBizDev Source ΓåÆ Create Lead ΓåÆ Qualify ΓåÆ Win Deal ΓåÆ Promote to Account\n\\`\\`\\`\n\n### Step-by-Step Process\n\n1. **Import Source List**\n   - Upload CSV with company data\n   - Include company name, contact info, industry\n   - Add source identifier (e.g., \"Construction Directory Q4 2025\")\n\n2. **Create Leads**\n   - Generate leads for companies you want to pursue\n   - Link leads back to BizDev Source\n   - Track which sources generate best leads\n\n3. **Pursue Opportunities**\n   - Qualify leads\n   - Create opportunities\n   - Work deals through pipeline\n\n4. **Promote to Account**\n   - When deal is won, promote BizDev Source to Account\n   - Creates permanent Account record\n   - Preserves all linked leads and history\n\n## Key Features\n\n### Bulk Operations\n- **Archive**: Move old sources to archive (preserves data)\n- **Delete**: Permanently remove sources\n- **Promote**: Convert multiple sources to Accounts\n\n### Filtering\n- Filter by status (Active, Promoted, Archived)\n- Search by company name\n- Filter by industry\n- Filter by license status\n\n### License Tracking\nTrack industry-specific licenses:\n- **Active** - License current\n- **Suspended** - Temporarily suspended\n- **Revoked** - License revoked\n- **Expired** - License expired\n- **Not Required** - No license needed\n\n## Best Practices\n\nΓ£ô **Use descriptive source names** (e.g., \"ABC Directory 2025 Q1\")\nΓ£ô **Regular cleanup** - archive old sources\nΓ£ô **Track conversion rates** - which sources perform best\nΓ£ô **Don't promote prematurely** - wait until deal is won\nΓ£ô **Use tags** for additional categorization\n      `\n    },\n    {\n      id: \"cashflow\",\n      title: \"Cash Flow\",\n      icon: DollarSign,\n      color: \"text-green-400\",\n      content: `\n# Cash Flow Management\n\nTrack your business income and expenses to maintain healthy cash flow and make informed financial decisions.\n\n## Transaction Types\n\n### Income Categories\n- **Sales Revenue** - Product/service sales\n- **Recurring Revenue** - Subscriptions, retainers\n- **Refund** - Money returned to customers\n\n### Expense Categories\n- **Operating Expense** - General operations\n- **Marketing** - Advertising and promotion\n- **Equipment** - Tools and equipment purchases\n- **Supplies** - Office and operational supplies\n- **Utilities** - Power, water, internet\n- **Rent** - Facility rent\n- **Payroll** - Employee compensation\n- **Professional Services** - Legal, accounting, consulting\n- **Travel** - Business travel expenses\n- **Meals** - Business meals and entertainment\n- **Other** - Miscellaneous expenses\n\n## Creating Transactions\n\n### Manual Entry\n1. Click **\"+ Add Transaction\"**\n2. Select Income or Expense\n3. Choose category\n4. Enter amount and date\n5. Add description and vendor/client\n6. Optionally link to Account or Opportunity\n\n### Receipt Processing\n1. Upload receipt image or PDF\n2. AI extracts transaction details\n3. Review and confirm\n4. Transaction created automatically\n\n### CRM Integration\nSome transactions auto-create when:\n- Opportunity closed as Won (creates income)\n- Invoice paid (creates income)\n\n## Key Features\n\n### Transaction Status\n- **Actual** - Already occurred\n- **Projected** - Forecasted future transaction\n- **Pending** - Awaiting confirmation\n- **Cancelled** - Transaction cancelled\n\n### Recurring Transactions\nSet up repeating transactions:\n- Weekly\n- Monthly\n- Quarterly\n- Annually\n\n### Tax Categories\n- **Deductible** - Tax deductible\n- **Non-Deductible** - Not deductible\n- **Asset** - Capital asset\n- **Unknown** - Needs review\n\n### Reports & Charts\n- Monthly cash flow trends\n- Income vs Expense comparison\n- Category breakdowns\n- Projections and forecasting\n\n## Best Practices\n\nΓ£ô **Record promptly** - don't wait until month-end\nΓ£ô **Use categories consistently** - easier to analyze\nΓ£ô **Upload receipts** - for tax compliance\nΓ£ô **Set up recurring** - for predictable expenses\nΓ£ô **Review monthly** - check for unusual patterns\nΓ£ô **Project ahead** - plan for upcoming expenses\n      `\n    },\n    {\n      id: \"documents\",\n      title: \"Document Processing\",\n      icon: FileText,\n      color: \"text-pink-400\",\n      content: `\n# Document Processing & Management\n\nUse AI to extract data from business documents, automate data entry, and manage your files.\n\n## Business Card Processing\n\n### Upload & Extract\n1. Take photo of business card or upload image\n2. AI extracts contact information:\n   - Name\n   - Company\n   - Job Title\n   - Email\n   - Phone\n   - Address\n3. Review extracted data\n4. Create Contact and/or Account records\n\n### Supported Formats\n- JPG, PNG images\n- PDF scans\n- Batch upload multiple cards\n\n## Receipt Processing\n\n### For Cash Flow\n1. Upload receipt or invoice\n2. AI extracts:\n   - Merchant name\n   - Total amount\n   - Transaction date\n   - Payment method\n   - Line items\n3. Review and categorize\n4. Creates Cash Flow transaction automatically\n\n### Tax Categories\nAI suggests appropriate tax categories:\n- Operating expenses\n- Meals & entertainment\n- Travel\n- Equipment\n- And more...\n\n## Document Management\n\n### File Storage\n- Upload documents (PDF, Word, Excel, images)\n- Organize by categories\n- Add tags and descriptions\n- Full-text search\n\n### Document Types\n- **User Guide** - Help documentation\n- **API Reference** - Technical docs\n- **Tutorial** - How-to guides\n- **Policy** - Company policies\n- **FAQ** - Frequently asked questions\n- **Receipt** - Financial receipts\n- **Invoice** - Invoices\n- **Other** - Miscellaneous documents\n\n### Search & Discovery\n- Full-text search across documents\n- Filter by category and tags\n- AI-powered content extraction\n- Quick document preview\n\n## Best Practices\n\nΓ£ô **Process immediately** - don't let cards pile up\nΓ£ô **Review AI extraction** - verify accuracy\nΓ£ô **Add notes** - context for later\nΓ£ô **Organize files** - use consistent naming\nΓ£ô **Tag appropriately** - makes finding easier\n      `\n    },\n    {\n      id: \"reports\",\n      title: \"Reports & Analytics\",\n      icon: BarChart3,\n      color: \"text-purple-400\",\n      content: `\n# Reports & Analytics\n\nGain insights into your business performance with comprehensive reporting and analytics.\n\n## Available Reports\n\n### 1. Overview Dashboard\n- Total contacts, accounts, leads, opportunities\n- Pipeline value\n- Activities this month\n- Trend indicators (Γåæ Γåô compared to last period)\n- Lead sources distribution\n- Sales pipeline by stage\n\n### 2. Sales Analytics\n- Pipeline analysis by stage\n- Win rate and conversion metrics\n- Average deal size\n- Sales cycle length\n- Top performing sales reps\n- Closed deals timeline\n\n### 3. Lead Analytics\n- Lead generation trends\n- Lead source performance\n- Conversion rates by source\n- Lead scoring distribution\n- Time-to-conversion analysis\n- Lead aging report\n\n### 4. Productivity Analytics\n- Activity completion rates\n- Most productive activity types\n- Completion patterns by date\n- Overdue task tracking\n- Team performance metrics\n- Individual productivity scores\n\n### 5. Forecasting Dashboard\n- Revenue projections\n- Pipeline weighted forecasts\n- Deal close probability analysis\n- Seasonal trends\n- Growth trajectory\n- Risk analysis\n\n### 6. AI Market Insights\n- Industry trends and analysis\n- Competitive intelligence\n- Market opportunities\n- Growth recommendations\n- Customer segment analysis\n- Strategic suggestions\n\n### 7. Data Quality Report\n- Duplicate detection\n- Missing critical fields\n- Data completeness scores\n- Stale records identification\n- Cleanup recommendations\n\n## Export Options\n\n### PDF Export\n- Professional formatted reports\n- Include charts and graphs\n- Add company branding\n- Suitable for presentations\n\n### CSV Export\n- Raw data export\n- For further analysis in Excel\n- Compatible with BI tools\n- Bulk data extraction\n\n## Filtering & Customization\n\nAll reports support:\n- Date range selection\n- User/employee filtering\n- Status filtering\n- Custom fields\n- Tag-based filtering\n\n## Best Practices\n\nΓ£ô **Review weekly** - stay on top of metrics\nΓ£ô **Share with team** - transparency builds accountability\nΓ£ô **Set benchmarks** - track against goals\nΓ£ô **Export regularly** - for board meetings and reviews\nΓ£ô **Act on insights** - don't just collect data\n      `\n    },\n    {\n      id: \"employees\",\n      title: \"Employee Management\",\n      icon: Briefcase,\n      color: \"text-amber-400\",\n      content: `\n# Employee Management\n\nManage your team members, assign CRM access, and control permissions.\n\n## Employee Records\n\n### Creating Employees\n1. Navigate to **Employees** page\n2. Click **\"+ Add Employee\"**\n3. Fill in employee details:\n   - **Required**: First Name, Last Name, Department, Job Title\n   - **Optional**: Email, Phone, Manager, Skills\n4. Set employment type and status\n\n### Employment Types\n- **Full Time** - Regular full-time employee\n- **Part Time** - Part-time employee\n- **Contractor** - Independent contractor\n- **Seasonal** - Seasonal worker\n\n### Departments\n- Sales\n- Marketing\n- Operations\n- Field Services\n- Construction\n- Maintenance\n- Administration\n- Management\n- Technical\n- Customer Service\n- Other\n\n## CRM Access Management\n\n### Access Tiers\n\n**Tier 3 - Team Lead**\n- View team members' data\n- Full access to own records\n- Cannot access other teams\n- Read/write permissions\n- Can create and edit records\n\n**Tier 4 - Manager/Administrator**\n- View all tenant data\n- Full administrative controls\n- Manage users and settings\n- Access to all modules\n- Export capabilities\n\n### Requesting CRM Access\n\nFor employees without CRM access:\n1. Click **\"Request CRM Access\"**\n2. Select desired tier (Tier 3 or Tier 4)\n3. Choose access level (Read or Read/Write)\n4. Submit request\n5. Admin receives notification\n6. Admin reviews and approves/denies\n\n### Inviting to CRM\n\nAdmins can invite employees:\n1. Select employee record\n2. Click **\"Invite to CRM\"**\n3. System sends invitation email\n4. Employee completes signup\n5. Permissions automatically applied\n\n## Permission Management\n\n### Access Levels\n- **Read Only** - View data only\n- **Read/Write** - Full CRUD operations\n\n### Employee Roles\n- **Manager** - Full tenant visibility\n- **Employee** - Own records + assigned records\n\n### Navigation Permissions\nControl which modules each user can access:\n- Dashboard\n- Contacts, Accounts, Leads\n- Opportunities, Activities\n- Reports, Cash Flow\n- And more...\n\n## Best Practices\n\nΓ£ô **Accurate org chart** - set manager relationships\nΓ£ô **Regular access reviews** - quarterly permission audits\nΓ£ô **Least privilege** - give minimum required access\nΓ£ô **Document skills** - track certifications and training\nΓ£ô **Update promptly** - reflect role changes immediately\n      `\n    },\n    {\n      id: \"ai\",\n      title: \"AI Features\",\n      icon: Brain,\n      color: \"text-pink-400\",\n      content: `\n# AI-Powered Features\n\nLeverage artificial intelligence to automate tasks, gain insights, and work smarter.\n\n## AI Agent (Avatar)\n\n### Access via:\n- **Navigation Menu** - Click AI Agent icon\n- **Agent Page** - Full conversational interface\n- **WhatsApp Integration** - Connect your WhatsApp\n\n### Capabilities\nThe AI Agent can:\n- **Search Records**: Find contacts, leads, opportunities\n- **Create Records**: Add new contacts, leads, activities\n- **Update Records**: Modify existing data\n- **Analyze Data**: Generate insights and summaries\n- **Answer Questions**: About your CRM data\n- **Provide Recommendations**: Next best actions\n- **Web Research**: Search internet for company info\n\n### Using the Agent\n\n**Voice Commands** (if mic enabled):\n- \"Show me all high-value opportunities\"\n- \"Create a new contact for John Smith at Acme Corp\"\n- \"What's my pipeline value this month?\"\n\n**Text Chat**:\n- Type natural language queries\n- Get structured responses\n- Follow-up questions for clarification\n\n### Agent Context\nThe agent has access to:\n- Your tenant data\n- Current user permissions\n- Recent activities and notes\n- Business context and industry\n\n## AI Campaigns\n\n### Automated Outreach\nCreate campaigns for:\n- **Follow-ups** - Re-engage cold leads\n- **Qualification** - Initial discovery calls\n- **Appointment Setting** - Schedule meetings\n- **Customer Service** - Check-in calls\n- **Surveys** - Collect feedback\n\n### Campaign Setup\n1. Create campaign with objectives\n2. Upload target contact list\n3. Write AI prompt/script template\n4. Set calling schedule and rules\n5. Monitor results and outcomes\n\n### AI Call Features\n- Natural conversation flow\n- Handles objections\n- Collects information\n- Schedules callbacks\n- Updates CRM automatically\n\n## AI Email Generation\n\n### Smart Email Drafts\nAI generates emails based on:\n- Context (follow-up, proposal, etc.)\n- Contact information\n- Previous interactions\n- Your writing style\n\n### Use Cases\n- Follow-up after meeting\n- Proposal presentation\n- Case study sharing\n- Event invitations\n- Re-engagement campaigns\n\n## Lead Scoring\n\n### Automatic Scoring (0-100)\nFactors considered:\n- Profile completeness\n- Company size and industry\n- Engagement level\n- Lead source quality\n- Behavioral signals\n\n### AI Recommendations\n- **Follow Up** - Hot lead, contact soon\n- **Nurture** - Warm lead, stay in touch\n- **Qualify** - Needs more information\n- **Disqualify** - Not a good fit\n\n## Market Insights\n\n### Industry Analysis\nAI provides:\n- Market trends and forecasts\n- Competitive landscape\n- Growth opportunities\n- Risk factors\n- Strategic recommendations\n\n### Based on:\n- Your industry\n- Business model (B2B/B2C)\n- Geographic focus\n- Current performance data\n\n## Document Intelligence\n\n### Automatic Extraction\nFrom business cards:\n- Contact information\n- Company details\n- Job titles\n\nFrom receipts:\n- Transaction details\n- Merchant information\n- Line items\n- Tax categories\n\n## Best Practices\n\nΓ£ô **Trust but verify** - Review AI suggestions\nΓ£ô **Provide context** - Better prompts = better results\nΓ£ô **Train over time** - AI learns from corrections\nΓ£ô **Start small** - Test campaigns with small groups\nΓ£ô **Monitor results** - Track AI performance metrics\n      `\n    },\n    {\n      id: \"integrations\",\n      title: \"Integrations\",\n      icon: Puzzle,\n      color: \"text-blue-400\",\n      content: `\n# Integrations & Automation\n\nConnect Ai-SHA CRM with other tools and automate your workflows.\n\n## Available Integrations\n\n### Cloud Storage\n- **Google Drive** - Sync documents\n- **OneDrive** - Microsoft cloud storage\n\n### Calendar & Email\n- **Google Calendar** - Two-way sync\n- **Gmail** - Email integration\n- **Outlook Email** - Microsoft email\n- **Outlook Calendar** - Microsoft calendar\n\n### Automation\n- **Zapier** - Connect 3,000+ apps\n- **n8n** - Open-source automation\n- **Webhooks** - Custom integrations\n\n### AI Providers\n- **OpenAI** - GPT models\n- **Anthropic** - Claude models\n- **Azure OpenAI** - Enterprise AI\n\n### Payments\n- **Stripe** - Payment processing\n- **Billing Portal** - Subscription management\n\n### Communications\n- **Twilio** - SMS and calling\n- **SignalWire** - VoIP softphone\n- **ElevenLabs** - AI voice\n\n## Webhook Configuration\n\n### Creating Webhooks\n1. Navigate to **Integrations ΓåÆ Webhooks**\n2. Click **\"Add Webhook\"**\n3. Select trigger event:\n   - contact.created\n   - contact.updated\n   - lead.created\n   - opportunity.updated\n   - And more...\n4. Enter target URL (your webhook endpoint)\n5. Save and activate\n\n### Webhook Events\nTrigger webhooks when:\n- Records are created, updated, or deleted\n- Opportunities change stages\n- Activities are completed\n- Leads are converted\n\n### Webhook Payload\nIncludes:\n- Event type\n- Record data\n- Timestamp\n- User who triggered event\n- Previous values (for updates)\n\n## Email Integration\n\n### Webhook-Based Email\nSend automated emails via n8n or Make:\n1. Set up webhook in automation tool\n2. Configure email template\n3. Map CRM data fields\n4. Trigger on CRM events\n\n### Email Templates\nSave frequently used emails:\n- Subject templates\n- Body templates\n- Variable substitution\n- Merge fields\n\n## API Access\n\n### REST API\n- Full CRUD operations\n- Authentication via API keys\n- Rate limiting: 100 req/min\n- JSON responses\n\n### Authentication\nGenerate API keys:\n1. **Settings** ΓåÆ **API Keys**\n2. Create new key\n3. Set permissions and expiry\n4. Copy key (shown once)\n\n## Automation Examples\n\n### Lead Nurturing\n\\`\\`\\`\nNew Lead Created\n  Γåô\nAdd to Email Sequence (via Zapier)\n  Γåô\nSchedule Follow-up Activity\n  Γåô\nNotify Assigned Sales Rep\n\\`\\`\\`\n\n### Opportunity Alerts\n\\`\\`\\`\nOpportunity Stage Changed\n  Γåô\nSend Slack Notification\n  Γåô\nUpdate Google Sheet\n  Γåô\nCreate Task in Project Management\n\\`\\`\\`\n\n### Customer Onboarding\n\\`\\`\\`\nOpportunity Closed Won\n  Γåô\nCreate Account (if needed)\n  Γåô\nSend Welcome Email\n  Γåô\nCreate Onboarding Tasks\n  Γåô\nNotify Customer Success Team\n\\`\\`\\`\n\n## Best Practices\n\nΓ£ô **Test webhooks** - use test endpoints first\nΓ£ô **Handle errors** - implement retry logic\nΓ£ô **Secure endpoints** - validate webhook signatures\nΓ£ô **Monitor usage** - check API rate limits\nΓ£ô **Document integrations** - for team reference\n      `\n    },\n    {\n      id: \"calendar\",\n      title: \"Calendar\",\n      icon: Calendar,\n      color: \"text-teal-400\",\n      content: `\n# Calendar Management\n\nVisualize and manage your activities in calendar format with multiple views and drag-and-drop scheduling.\n\n## Calendar Views\n\n### Month View\n- See entire month at a glance\n- Activities shown on their due dates\n- Color-coded by type\n- Click to view details\n- Quick-add new activities\n\n### Week View\n- Detailed weekly schedule\n- Time-based activity placement\n- Hourly slots (8 AM - 6 PM)\n- Drag to reschedule\n- Multi-day activities span\n\n### Day View\n- Hour-by-hour breakdown\n- Ideal for busy schedules\n- Shows duration blocks\n- Quick activity creation\n- Detailed time slots\n\n### Agenda View\n- List format of upcoming activities\n- Grouped by date\n- Overdue items highlighted\n- Easy to scan and prioritize\n- Quick status updates\n\n## Calendar Features\n\n### Drag & Drop\n- Reschedule activities by dragging\n- Move between days or time slots\n- Visual feedback during drag\n- Auto-saves changes\n\n### Quick Add\n- Click any date to create activity\n- Pre-filled with selected date\n- Quick form for fast entry\n- Keyboard shortcuts supported\n\n### Filtering\nFilter calendar by:\n- Activity type (calls, meetings, tasks)\n- Status (scheduled, completed, overdue)\n- Priority level\n- Assigned user\n- Related entity (contact, account, etc.)\n\n### Color Coding\nActivities color-coded by:\n- **Type**: Different colors for calls, meetings, tasks\n- **Status**: Grayed out for completed, red for overdue\n- **Priority**: Border thickness indicates priority\n\n## Quick Actions\n\n### From Calendar\n- **Click date** - Create activity\n- **Click activity** - View/edit details\n- **Drag activity** - Reschedule\n- **Right-click** - Context menu\n- **Double-click** - Quick complete\n\n### Keyboard Shortcuts\n- **N** - New activity\n- **T** - Today\n- **ΓåÉ/ΓåÆ** - Previous/Next period\n- **M/W/D** - Month/Week/Day view\n\n## Activity Time Management\n\n### Scheduling\n- Set specific times (not just dates)\n- Duration in minutes\n- All-day activities\n- Recurring activities\n- Reminder notifications\n\n### Time Zones\n- Respects user timezone settings\n- Convert times for team members\n- Display in 12hr or 24hr format\n\n## Calendar Sync (Coming Soon)\n\n### External Calendar Integration\n- **Google Calendar** - Two-way sync\n- **Outlook Calendar** - Two-way sync\n- **Apple Calendar** - One-way export\n- **iCal Feed** - Subscribe to CRM calendar\n\n## Best Practices\n\nΓ£ô **Block time** - Schedule focused work periods\nΓ£ô **Set realistic durations** - Don't overbook\nΓ£ô **Use recurring** - For regular meetings\nΓ£ô **Update promptly** - Mark as complete when done\nΓ£ô **Review weekly** - Plan upcoming week on Fridays\nΓ£ô **Time blocking** - Group similar activities together\n      `\n    },\n    {\n      id: \"utilities\",\n      title: \"Utilities & Tools\",\n      icon: Wrench,\n      color: \"text-slate-400\",\n      content: `\n# Utilities & Data Tools\n\nPowerful utilities for data management, quality control, and system maintenance.\n\n## Duplicate Detection\n\n### Finding Duplicates\n\n**Contacts**\n- Match by: Email, Phone, Name combination\n- Fuzzy matching for similar names\n- Company name matching\n- Address similarity\n\n**Accounts**\n- Match by: Company name, Website, Phone\n- DBA name variations\n- Address matching\n\n**Leads**\n- Match by: Email, Phone, Name + Company\n- Pre-conversion duplicate check\n\n### Consolidation\n\n**Merge Process**:\n1. Review suggested duplicates\n2. Select records to merge\n3. Choose which record to keep (master)\n4. System merges:\n   - All activities\n   - All notes\n   - All opportunities\n   - All relationships\n5. Duplicate records deleted\n6. History preserved\n\n**What Gets Merged**:\n- Γ£ô Activities and tasks\n- Γ£ô Notes and comments\n- Γ£ô Opportunities (reassigned)\n- Γ£ô Tags (combined)\n- Γ£ô Files and documents\n- Γ£ô Custom field data\n- Γ£ô Relationships\n\n## Data Quality\n\n### Quality Metrics\n- **Completeness Score** - % of required fields filled\n- **Accuracy Score** - Validated data (emails, phones)\n- **Consistency Score** - Standardized formats\n- **Freshness Score** - Recent activity\n\n### Issues Detected\n- Missing critical fields\n- Invalid email formats\n- Invalid phone numbers\n- Orphaned records (broken links)\n- Stale records (no activity >180 days)\n- Duplicate entries\n\n### Cleanup Actions\n- **Bulk Update** - Fix common issues\n- **Validation** - Verify emails and phones\n- **Standardization** - Format consistency\n- **Deletion** - Remove invalid records\n- **Archival** - Move old data to archive\n\n## Data Diagnostics\n\n### System Health Checks\n- Database integrity\n- Referential consistency\n- Orphaned record detection\n- Denormalization sync status\n- Performance metrics\n\n### Access Diagnostics\n- User permission verification\n- Role-based access testing\n- Tenant isolation checks\n- Employee scope validation\n\n### Performance Analysis\n- API response times\n- Query optimization\n- Cache hit rates\n- Database query patterns\n\n## Import & Export\n\n### Bulk Import\n- CSV file support\n- Field mapping interface\n- Validation before import\n- Batch processing (1000 records/batch)\n- Error logging\n- Duplicate detection during import\n\n### Bulk Export\n- Export to CSV\n- Filter data before export\n- Select specific fields\n- Include related records\n- Scheduled exports (admins)\n\n## Data Management\n\n### Archiving\n**Old Activities**\n- Completed activities >365 days\n- Move to R2 cloud storage\n- Retrieve when needed\n- Preserves historical data\n\n**Closed Opportunities**\n- Closed Won/Lost >365 days\n- Archive to free up space\n- Searchable archives\n- Easy restoration\n\n### Data Retention\nConfigure retention policies:\n- Activities: 30-365 days\n- Opportunities: 30-365 days\n- Documents: Custom periods\n- Automatic cleanup jobs\n\n### Backups\n- Automated daily backups\n- Point-in-time recovery\n- Download tenant data\n- Restore capabilities (admin only)\n\n## Testing Tools (Admins Only)\n\n### Unit Tests\n- Entity CRUD operations\n- Form validation logic\n- Data integrity checks\n- Permission system tests\n- Integration tests\n\n### Test Data Management\n- Create test records\n- Mark as test data\n- Bulk cleanup test data\n- Isolated from production reports\n\n## Best Practices\n\nΓ£ô **Run quality checks monthly** - Stay on top of data hygiene\nΓ£ô **Merge duplicates promptly** - Don't let them multiply\nΓ£ô **Import carefully** - Validate data before bulk import\nΓ£ô **Regular exports** - Backup your data externally\nΓ£ô **Archive old data** - Keep system performant\nΓ£ô **Test before production** - Use test data for training\n      `\n    },\n    {\n      id: \"settings\",\n      title: \"Settings & Administration\",\n      icon: Settings,\n      color: \"text-gray-400\",\n      content: `\n# Settings & Administration\n\nConfigure your CRM instance, manage users, and customize the system to your needs.\n\n## User Settings\n\n### Profile Information\n- Full name and display name\n- Email address (login)\n- Phone number (for softphone)\n- Profile picture\n- Timezone and date format\n\n### Preferences\n- **Timezone** - Your local timezone\n- **Date Format** - MM/DD/YYYY, DD/MM/YYYY, YYYY-MM-DD\n- **Time Format** - 12hr or 24hr\n- **Language** - Interface language (future)\n\n## Tenant Settings (Admins)\n\n### Branding\n- **Company Name** - Your business name\n- **Logo Upload** - Company logo (header & footer)\n- **Primary Color** - Brand color for UI\n- **Accent Color** - Secondary brand color\n- **Industry** - Your industry (for AI context)\n- **Business Model** - B2B, B2C, or Hybrid\n\n### Company Information\n- Business address\n- Contact information\n- Tax ID / Business number\n- Website\n- Social media links\n\n## User Management (Admins)\n\n### Inviting Users\n1. **Settings** ΓåÆ **User Management**\n2. Click **\"Invite User\"**\n3. Enter email and name\n4. Select role:\n   - **Superadmin** - Full system access (app owner)\n   - **Admin** - Tenant administrator\n   - **Power User** - Advanced features\n   - **User** - Standard access\n5. Set employee role:\n   - **Manager** - Full tenant visibility\n   - **Employee** - Own records only\n6. Configure navigation permissions\n7. Send invitation\n\n### User Roles Explained\n\n**Superadmin** (App Creator)\n- Access all tenants\n- System-wide settings\n- Create tenants\n- Global user management\n\n**Admin** (Tenant Owner)\n- Full tenant access\n- Manage tenant users\n- Configure integrations\n- Billing and subscriptions\n\n**Power User**\n- Full tenant data access\n- Create and edit all records\n- Export capabilities\n- Limited admin functions\n\n**User** (Standard)\n- View assigned records\n- Create and edit own records\n- Limited export\n- No admin access\n\n### Employee Roles\n\n**Manager**\n- View all tenant records\n- Manage team members\n- Assign leads and opportunities\n- Full reporting access\n\n**Employee**\n- View own records\n- View records assigned to them\n- Limited reporting\n- Cannot see other employees' data\n\n### Navigation Permissions\nCustomize which modules each user can access:\n- Check/uncheck modules\n- Override defaults\n- Per-user customization\n- Security through obscurity + RLS\n\n## Module Settings\n\n### Enable/Disable Modules\nTurn modules on/off for your tenant:\n- Dashboard, Contacts, Accounts\n- Leads, Opportunities, Activities\n- BizDev Sources, Cash Flow\n- Documents, Reports, Integrations\n- AI Campaigns, Calendar\n- Utilities\n\n**Effect**:\n- Hides from navigation\n- Blocks page access\n- Optimizes performance\n- Simplifies interface for specific use cases\n\n## Integration Settings\n\n### API Keys\n- Generate API keys for integrations\n- Set expiration dates\n- Revoke keys\n- Monitor usage\n\n### Webhooks\n- Configure outgoing webhooks\n- Set up event triggers\n- Test webhook endpoints\n- View webhook logs\n\n### Third-Party Integrations\n- Connect Google Workspace\n- Connect Microsoft 365\n- Configure Stripe\n- Set up Zapier/n8n\n\n## Security Settings\n\n### Authentication\n- Password requirements\n- Two-factor authentication (future)\n- Session timeout\n- IP whitelist (future)\n\n### Data Security\n- Encryption at rest\n- Encryption in transit\n- Regular backups\n- Access logging\n\n### Audit Logging\nTrack all actions:\n- User logins/logouts\n- Record changes\n- Permission changes\n- Setting modifications\n- Export activities\n\n## Billing & Subscriptions (Admins)\n\n### Subscription Plans\n- View current plan\n- Upgrade/downgrade\n- Add user licenses\n- Payment method management\n\n### Usage Tracking\n- API call usage\n- Storage used\n- User count\n- Integration limits\n\n### Invoices\n- Download invoices\n- Payment history\n- Billing address\n- Tax information\n\n## Data Management\n\n### Export Options\n- Export all tenant data\n- Scheduled exports\n- Backup downloads\n- GDPR compliance exports\n\n### Import Tools\n- CSV import\n- Data mapping\n- Validation rules\n- Error handling\n\n### Data Retention\n- Set retention policies\n- Auto-archive old data\n- Purge deleted records\n- Compliance settings\n\n## Best Practices\n\nΓ£ô **Regular audits** - Review user access quarterly\nΓ£ô **Strong passwords** - Enforce password policy\nΓ£ô **Least privilege** - Give minimum required permissions\nΓ£ô **Monitor usage** - Check audit logs regularly\nΓ£ô **Backup data** - Export data regularly\nΓ£ô **Update branding** - Keep logo and colors current\nΓ£ô **Test integrations** - Verify webhook functionality\n      `\n    },\n    {\n      id: \"workflow\",\n      title: \"Workflow Guide\",\n      icon: Route,\n      color: \"text-indigo-400\",\n      content: `\n# Workflow Guide\n\nLearn best practices and recommended workflows for common CRM scenarios.\n\n## New Lead to Customer Workflow\n\n\\`\\`\\`\n1. Lead Captured (Website, Referral, etc.)\n   Γåô\n2. Lead Created in CRM\n   - Auto-assigned based on territory/round-robin\n   - AI scores lead automatically\n   Γåô\n3. Initial Contact (within 24 hours)\n   - Phone call or email\n   - Log activity\n   - Update lead status to \"Contacted\"\n   Γåô\n4. Qualification\n   - Assess budget, authority, need, timeline (BANT)\n   - Update lead score\n   - Add qualifying notes\n   Γåô\n5. Convert Lead\n   - Create Contact record\n   - Create/link Account record\n   - Create Opportunity\n   Γåô\n6. Opportunity Management\n   - Move through pipeline stages\n   - Log activities\n   - Update probability\n   Γåô\n7. Deal Close\n   - Closed Won: Promote to customer\n   - Closed Lost: Document reason\n   Γåô\n8. Customer Onboarding (if won)\n   - Welcome email\n   - Schedule kickoff meeting\n   - Create onboarding tasks\n\\`\\`\\`\n\n## Daily Activities Workflow\n\n### Morning Routine (15-30 min)\n1. **Review Calendar**\n   - Check today's activities\n   - Prepare for meetings\n   - Reschedule conflicts\n\n2. **Check Dashboard**\n   - Review overdue tasks\n   - Check new leads assigned\n   - Monitor pipeline changes\n\n3. **Prioritize Tasks**\n   - Focus on urgent/important\n   - Set 3 must-do items for today\n   - Block time for key activities\n\n### Throughout Day\n4. **Log Activities Promptly**\n   - After each call/meeting\n   - Add next steps\n   - Update opportunity stages\n\n5. **Respond to Notifications**\n   - New lead assignments\n   - Activity reminders\n   - Team updates\n\n### End of Day (10-15 min)\n6. **Complete Pending Activities**\n   - Mark tasks as done\n   - Reschedule unfinished items\n   - Add follow-up notes\n\n7. **Plan Tomorrow**\n   - Review calendar for tomorrow\n   - Create task list\n   - Set priorities\n\n## Weekly Pipeline Review\n\n### Monday Morning\n- Review pipeline value and velocity\n- Check deals closing this week\n- Assign new leads\n\n### Mid-Week\n- Follow up on stalled opportunities\n- Update close dates\n- Log all customer interactions\n\n### Friday Afternoon\n- Clean up completed activities\n- Update opportunity probabilities\n- Plan next week's priorities\n- Review team performance\n\n## Monthly Reporting Workflow\n\n### First Week of Month\n1. **Close Last Month**\n   - Mark won/lost deals\n   - Complete overdue activities\n   - Archive old records\n\n2. **Generate Reports**\n   - Sales performance\n   - Lead conversion rates\n   - Team productivity\n   - Pipeline forecast\n\n3. **Review Metrics**\n   - Compare to goals\n   - Identify trends\n   - Spot issues\n\n4. **Plan Ahead**\n   - Set goals for new month\n   - Adjust strategies\n   - Update forecasts\n\n## BizDev Source Workflow\n\n\\`\\`\\`\n1. Import Business Development List\n   - Upload CSV from directory\n   - Tag with source name\n   - Review for duplicates\n   Γåô\n2. Research & Filter\n   - Identify promising companies\n   - Check license status\n   - Prioritize targets\n   Γåô\n3. Create Leads\n   - Generate lead for target company\n   - Link back to BizDev Source\n   - Assign to sales rep\n   Γåô\n4. Pursue Opportunity\n   - Qualify lead\n   - Create opportunity\n   - Work through pipeline\n   Γåô\n5. Upon Winning\n   - Close opportunity as Won\n   - Promote BizDev Source to Account\n   - Begin customer relationship\n   Γåô\n6. Cleanup\n   - Archive non-converted sources\n   - Track conversion rates by source\n   - Refine targeting\n\\`\\`\\`\n\n## Document Processing Workflow\n\n### Business Cards\n\\`\\`\\`\n1. Collect Cards (Networking Event)\n   Γåô\n2. Batch Upload to CRM\n   - Take photos or scan\n   - Upload to Document Processing\n   Γåô\n3. AI Extracts Data\n   - Review extracted information\n   - Correct any errors\n   Γåô\n4. Create Records\n   - Create Contact\n   - Create Account (if new company)\n   - Tag with event name\n   Γåô\n5. Immediate Follow-Up\n   - Send connection email\n   - Add to nurture campaign\n   - Schedule follow-up call\n\\`\\`\\`\n\n### Receipt Processing\n\\`\\`\\`\n1. Receive Receipt\n   Γåô\n2. Upload Immediately\n   - Photo or PDF\n   - Upload to Document Processing\n   Γåô\n3. AI Extracts Transaction\n   - Verify merchant and amount\n   - Confirm category\n   Γåô\n4. Review & Approve\n   - Check tax category\n   - Add notes if needed\n   Γåô\n5. Cash Flow Updated\n   - Transaction created automatically\n   - Reports updated in real-time\n\\`\\`\\`\n\n## Team Collaboration Workflow\n\n### Lead Assignment\n- **Round Robin**: Auto-assign to next available rep\n- **Territory**: Based on geographic location\n- **Specialization**: By industry or product line\n- **Workload**: Balance across team\n\n### Handoffs\nWhen transferring records between team members:\n1. Add detailed handoff notes\n2. Schedule transition call\n3. Update assignment\n4. Notify new owner\n5. Follow up after 1 week\n\n### Team Meetings\n**Weekly Sales Meeting Structure**:\n1. Pipeline review (each rep presents)\n2. Wins and losses discussion\n3. Stuck deals brainstorming\n4. New leads assignment\n5. Next week priorities\n\n## Best Practices Summary\n\nΓ£ô **Consistency is key** - Follow processes every time\nΓ£ô **Log everything** - If it's not in the CRM, it didn't happen\nΓ£ô **Update promptly** - Don't wait until end of day\nΓ£ô **Review regularly** - Daily tasks, weekly pipeline, monthly performance\nΓ£ô **Clean as you go** - Don't let data pile up\nΓ£ô **Communicate** - Use notes to keep team informed\nΓ£ô **Leverage automation** - Let AI and integrations handle routine tasks\nΓ£ô **Measure and improve** - Track metrics and adjust processes\n      `\n    }\n  ];\n\n  // Filter sections based on search\n  const filteredSections = documentationSections.filter(section => {\n    if (!searchTerm) return true;\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      section.title.toLowerCase().includes(searchLower) ||\n      section.content.toLowerCase().includes(searchLower)\n    );\n  });\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-100 flex items-center gap-3\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center rounded-full bg-purple-900/30 border border-purple-700/50\">\n                <Book className=\"w-5 h-5 sm:w-7 sm:h-7 text-purple-400\" />\n              </div>\n              Documentation\n            </h1>\n            <p className=\"text-slate-400 mt-1 text-sm sm:text-base\">\n              Comprehensive guide to using Ai-SHA CRM\n            </p>\n          </div>\n\n          {/* Version Badge */}\n          <Badge variant=\"outline\" className=\"text-xs\">\n            v2.0 - Updated {new Date().toLocaleDateString()}\n          </Badge>\n        </div>\n\n        {/* Search */}\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search documentation...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 bg-slate-700 border-slate-600 text-slate-200 placeholder:text-slate-400\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Links */}\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-3\">\n          {documentationSections.slice(0, 12).map((section) => {\n            const IconComponent = section.icon;\n            return (\n              <button\n                key={section.id}\n                onClick={() => setActiveSection(section.id)}\n                className={`p-4 rounded-lg border-2 transition-all text-left ${\n                  activeSection === section.id\n                    ? 'bg-slate-700 border-purple-500'\n                    : 'bg-slate-800 border-slate-700 hover:border-slate-600'\n                }`}\n              >\n                <IconComponent className={`w-6 h-6 ${section.color} mb-2`} />\n                <p className=\"text-sm font-medium text-slate-200\">{section.title}</p>\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Sidebar Navigation */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-slate-800 border-slate-700 sticky top-4\">\n              <CardHeader>\n                <CardTitle className=\"text-sm text-slate-400 uppercase tracking-wider\">\n                  Sections\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <nav className=\"space-y-1\">\n                  {filteredSections.map((section) => {\n                    const IconComponent = section.icon;\n                    return (\n                      <button\n                        key={section.id}\n                        onClick={() => setActiveSection(section.id)}\n                        className={`w-full px-4 py-3 flex items-center gap-3 transition-colors text-left ${\n                          activeSection === section.id\n                            ? 'bg-purple-600 text-white'\n                            : 'text-slate-300 hover:bg-slate-700'\n                        }`}\n                      >\n                        <IconComponent className=\"w-5 h-5 flex-shrink-0\" />\n                        <span className=\"text-sm font-medium truncate\">{section.title}</span>\n                      </button>\n                    );\n                  })}\n                </nav>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Content Area */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardContent className=\"p-6 sm:p-8\">\n                {filteredSections.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Search className=\"w-12 h-12 text-slate-600 mx-auto mb-4\" />\n                    <p className=\"text-slate-400\">No documentation found matching your search.</p>\n                  </div>\n                ) : (\n                  <div className=\"prose prose-slate prose-invert max-w-none\">\n                    <ReactMarkdown\n                      components={{\n                        h1: ({ children }) => (\n                          <h1 className=\"text-3xl font-bold text-slate-100 mb-4\">{children}</h1>\n                        ),\n                        h2: ({ children }) => (\n                          <h2 className=\"text-2xl font-semibold text-slate-200 mt-8 mb-4\">{children}</h2>\n                        ),\n                        h3: ({ children }) => (\n                          <h3 className=\"text-xl font-semibold text-slate-200 mt-6 mb-3\">{children}</h3>\n                        ),\n                        h4: ({ children }) => (\n                          <h4 className=\"text-lg font-semibold text-slate-300 mt-4 mb-2\">{children}</h4>\n                        ),\n                        p: ({ children }) => (\n                          <p className=\"text-slate-300 leading-relaxed mb-4\">{children}</p>\n                        ),\n                        ul: ({ children }) => (\n                          <ul className=\"list-disc list-inside text-slate-300 space-y-2 mb-4\">{children}</ul>\n                        ),\n                        ol: ({ children }) => (\n                          <ol className=\"list-decimal list-inside text-slate-300 space-y-2 mb-4\">{children}</ol>\n                        ),\n                        li: ({ children }) => (\n                          <li className=\"text-slate-300\">{children}</li>\n                        ),\n                        code: ({ inline, children }) => (\n                          inline ? (\n                            <code className=\"bg-slate-700 px-2 py-1 rounded text-purple-400 text-sm\">\n                              {children}\n                            </code>\n                          ) : (\n                            <code className=\"block bg-slate-900 p-4 rounded-lg text-slate-300 text-sm overflow-x-auto mb-4\">\n                              {children}\n                            </code>\n                          )\n                        ),\n                        blockquote: ({ children }) => (\n                          <blockquote className=\"border-l-4 border-purple-500 pl-4 italic text-slate-400 my-4\">\n                            {children}\n                          </blockquote>\n                        ),\n                        strong: ({ children }) => (\n                          <strong className=\"font-semibold text-slate-100\">{children}</strong>\n                        ),\n                        a: ({ href, children }) => (\n                          <a href={href} className=\"text-purple-400 hover:text-purple-300 underline\">\n                            {children}\n                          </a>\n                        ),\n                      }}\n                    >\n                      {filteredSections.find(s => s.id === activeSection)?.content || ''}\n                    </ReactMarkdown>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Help Section */}\n            <Alert className=\"mt-6 bg-blue-900/20 border-blue-700/50\">\n              <Info className=\"h-4 w-4 text-blue-400\" />\n              <AlertDescription className=\"text-blue-300\">\n                <strong>Need more help?</strong> Contact support at support@ai-sha.com or use the AI Agent for instant assistance.\n              </AlertDescription>\n            </Alert>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\DuplicateAccounts.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'consolidateTarget' is assigned a value but never used.","line":41,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"consolidateTarget"},"fix":{"range":[1920,1937],"text":""},"desc":"Remove unused variable 'consolidateTarget'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport { Account } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Loader2, Building2, Trash2, Eye, AlertTriangle, Mail, Phone, ArrowDownCircle } from \"lucide-react\";\nimport { useTenant } from \"../components/shared/tenantContext\";\nimport { findDuplicates } from \"@/api/functions\";\nimport { bulkDeleteAccounts } from \"@/api/functions\";\nimport { consolidateDuplicateAccounts } from \"@/api/functions\";\nimport AccountDetailPanel from \"../components/accounts/AccountDetailPanel\";\nimport OperationOverlay from \"../components/shared/OperationOverlay\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function DuplicateAccounts() {\n  const [loading, setLoading] = useState(true);\n  const [duplicateGroups, setDuplicateGroups] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [deleting, setDeleting] = useState(false);\n  const [deleteTarget, setDeleteTarget] = useState(null);\n  const [selectedForDeletion, setSelectedForDeletion] = useState(new Set());\n  const [showBulkDeleteConfirm, setShowBulkDeleteConfirm] = useState(false);\n  const [operationProgress, setOperationProgress] = useState({ show: false, current: 0, total: 0 });\n  const { selectedTenantId } = useTenant();\n  const { toast } = useToast();\n\n  const [consolidating, setConsolidating] = useState(false);\n  const [consolidateTarget, setConsolidateTarget] = useState(null);\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  const loadUser = async () => {\n    try {\n      const user = await User.me();\n      setCurrentUser(user);\n    } catch (error) {\n      console.error(\"Failed to load user:\", error);\n    }\n  };\n\n  const loadDuplicates = useCallback(async () => {\n    if (!currentUser) return;\n    \n    setLoading(true);\n    try {\n      const response = await findDuplicates({\n        entity_type: 'Account',\n        tenant_id: selectedTenantId || currentUser?.tenant_id\n      });\n\n      if (response?.data?.success) {\n        const groups = Array.isArray(response.data.groups) ? response.data.groups : [];\n        setDuplicateGroups(groups);\n      } else {\n        setDuplicateGroups([]);\n      }\n    } catch (error) {\n      console.error(\"Failed to load duplicates:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load duplicate accounts\",\n        variant: \"destructive\"\n      });\n      setDuplicateGroups([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [currentUser, selectedTenantId, toast]);\n\n  useEffect(() => {\n    if (currentUser) {\n      loadDuplicates();\n    }\n  }, [currentUser, loadDuplicates]);\n\n  const handleDelete = async (account) => {\n    setDeleting(true);\n    try {\n      await Account.delete(account.id);\n      toast({\n        title: \"Success\",\n        description: \"Account deleted successfully\"\n      });\n      setDeleteTarget(null);\n      await loadDuplicates();\n    } catch (error) {\n      console.error(\"Failed to delete account:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete account\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setDeleting(false);\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    setShowBulkDeleteConfirm(false);\n    setDeleting(true);\n    \n    const accountIds = Array.from(selectedForDeletion);\n    const totalCount = accountIds.length;\n    \n    setOperationProgress({\n      show: true,\n      current: 0,\n      total: totalCount\n    });\n\n    try {\n      // For small batches (< 10), delete directly without backend function\n      if (totalCount < 10) {\n        for (let i = 0; i < accountIds.length; i++) {\n          try {\n            await Account.delete(accountIds[i]);\n            setOperationProgress(prev => ({ ...prev, current: i + 1 }));\n          } catch (error) {\n            console.error(`Failed to delete account ${accountIds[i]}:`, error);\n          }\n        }\n        \n        toast({\n          title: \"Success\",\n          description: `Successfully deleted ${totalCount} account(s)`\n        });\n      } else {\n        // For larger batches, use the backend function for chunked processing\n        const response = await bulkDeleteAccounts({ accountIds });\n        \n        if (response.data?.status === 'success') {\n          toast({\n            title: \"Success\",\n            description: response.data.message\n          });\n        } else {\n          throw new Error(response.data?.message || 'Bulk delete failed');\n        }\n      }\n      \n      setSelectedForDeletion(new Set());\n      await loadDuplicates();\n    } catch (error) {\n      console.error(\"Failed to delete accounts:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete some accounts\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setDeleting(false);\n      setOperationProgress({ show: false, current: 0, total: 0 });\n    }\n  };\n\n  const handleConsolidateGroup = async (records, masterAccountId = null) => {\n    if (!records || records.length < 2) {\n      toast({\n        title: \"Error\",\n        description: \"Need at least 2 accounts to consolidate\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const accountIds = records.map(r => r?.id).filter(Boolean);\n    \n    if (!confirm(`Consolidate ${accountIds.length} accounts into one master record?\\n\\nThis will:\\nΓÇó Merge all data into the oldest account\\nΓÇó Re-link all contacts, opportunities, and activities\\nΓÇó Delete duplicate records\\n\\nThis cannot be undone.`)) {\n      return;\n    }\n\n    setConsolidating(true);\n    setOperationProgress({\n      show: true,\n      current: 0,\n      total: accountIds.length\n    });\n\n    try {\n      const response = await consolidateDuplicateAccounts({ \n        accountIds,\n        masterAccountId \n      });\n\n      if (response.data?.success) {\n        toast({\n          title: \"Success\",\n          description: response.data.message,\n          duration: 5000\n        });\n        \n        // Clear any selections for deleted accounts\n        const deletedIds = new Set(response.data.deleted_account_ids || []);\n        setSelectedForDeletion(prev => {\n          const newSet = new Set(prev);\n          deletedIds.forEach(id => newSet.delete(id));\n          return newSet;\n        });\n        \n        await loadDuplicates();\n      } else {\n        throw new Error(response.data?.error || 'Consolidation failed');\n      }\n    } catch (error) {\n      console.error(\"Failed to consolidate accounts:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to consolidate accounts\",\n        variant: \"destructive\",\n        duration: 5000\n      });\n    } finally {\n      setConsolidating(false);\n      setOperationProgress({ show: false, current: 0, total: 0 });\n      setConsolidateTarget(null);\n    }\n  };\n\n  const toggleSelection = (accountId) => {\n    if (!accountId) return; // Don't add invalid IDs\n    \n    const newSelection = new Set(selectedForDeletion);\n    if (newSelection.has(accountId)) {\n      newSelection.delete(accountId);\n    } else {\n      newSelection.add(accountId);\n    }\n    setSelectedForDeletion(newSelection);\n  };\n\n  const toggleGroupSelection = (records) => {\n    // Filter out any invalid records/IDs\n    const accountIds = records\n      .map(r => r?.id)\n      .filter(id => id && typeof id === 'string'); // Only valid string IDs\n    \n    if (accountIds.length === 0) return;\n    \n    const newSelection = new Set(selectedForDeletion);\n    \n    // Check if all valid accounts in this group are selected\n    const allSelected = accountIds.every(id => newSelection.has(id));\n    \n    if (allSelected) {\n      // Deselect all\n      accountIds.forEach(id => newSelection.delete(id));\n    } else {\n      // Select all\n      accountIds.forEach(id => newSelection.add(id));\n    }\n    \n    setSelectedForDeletion(newSelection);\n  };\n\n  const getGroupSelectionState = (records) => {\n    // Filter out any invalid records/IDs\n    const accountIds = records\n      .map(r => r?.id)\n      .filter(id => id && typeof id === 'string');\n    \n    if (accountIds.length === 0) return 'none';\n    \n    const selectedCount = accountIds.filter(id => selectedForDeletion.has(id)).length;\n    \n    if (selectedCount === 0) return 'none';\n    if (selectedCount === accountIds.length) return 'all';\n    return 'some';\n  };\n\n  const handleView = async (account) => {\n    if (!account?.id) {\n      toast({\n        title: \"Error\",\n        description: \"Invalid account selected\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    try {\n      const fullAccount = await Account.get(account.id);\n      setSelectedAccount(fullAccount);\n    } catch (error) {\n      console.error(\"Failed to fetch account details:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load account details: \" + (error.message || 'Unknown error'),\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-slate-900\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-12 h-12 animate-spin text-blue-400 mx-auto mb-4\" />\n          <p className=\"text-slate-400\">Scanning for duplicate accounts...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const validGroups = Array.isArray(duplicateGroups) ? duplicateGroups : [];\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-4 lg:p-8 space-y-4 lg:space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl lg:text-3xl font-bold text-slate-100 flex items-center gap-3\">\n            <Building2 className=\"w-8 h-8 text-green-400\" />\n            Review Duplicate Accounts\n          </h1>\n          <p className=\"text-slate-400 mt-2\">\n            Found {validGroups.length} potential duplicate group(s)\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          {selectedForDeletion.size > 0 && (\n            <Button \n              onClick={() => setShowBulkDeleteConfirm(true)}\n              variant=\"destructive\"\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={deleting || consolidating}\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Delete Selected ({selectedForDeletion.size})\n            </Button>\n          )}\n          <Button \n            onClick={loadDuplicates} \n            variant=\"outline\" \n            className=\"bg-slate-800 border-slate-700 text-slate-200\" \n            disabled={deleting || consolidating}\n          >\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      <Card className=\"bg-blue-900/30 border-blue-700/50\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start gap-3\">\n            <AlertTriangle className=\"w-5 h-5 text-blue-400 mt-0.5\" />\n            <div className=\"text-sm text-blue-300\">\n              <p className=\"font-semibold mb-1\">How duplicates are detected:</p>\n              <ul className=\"list-disc list-inside space-y-1 text-blue-200\">\n                <li>Similar company names</li>\n                <li>Matching addresses</li>\n                <li>Same legacy ID from imported data</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {validGroups.length === 0 ? (\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-12 text-center\">\n            <Building2 className=\"w-16 h-16 text-slate-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-slate-300 mb-2\">No Duplicates Found</h3>\n            <p className=\"text-slate-400\">Your account records look clean!</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {validGroups.map((group, groupIndex) => {\n            let records = [];\n            let reasons = [];\n\n            if (Array.isArray(group?.records)) {\n              records = group.records;\n            } else if (Array.isArray(group?.items)) {\n              records = group.items;\n            } else if (Array.isArray(group?.accounts)) {\n              records = group.accounts;\n            } else if (group && typeof group === 'object') {\n              records = [group];\n            }\n\n            if (Array.isArray(group?.reasons)) {\n              reasons = group.reasons;\n            } else if (group?.reason) {\n              reasons = [group.reason];\n            } else if (group?.match_type) {\n              reasons = [group.match_type];\n            }\n\n            const selectionState = getGroupSelectionState(records);\n            \n            return (\n              <Card key={groupIndex} className=\"bg-slate-800 border-slate-700\">\n                <CardHeader className=\"border-b border-slate-700\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                      <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />\n                      Duplicate Group {groupIndex + 1}\n                      <Badge variant=\"outline\" className=\"ml-2 bg-yellow-900/30 text-yellow-300 border-yellow-700/50\">\n                        {records.length} records\n                      </Badge>\n                    </CardTitle>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleConsolidateGroup(records)}\n                        disabled={consolidating || records.length < 2 || deleting}\n                        className=\"bg-blue-600 hover:bg-blue-700 text-white border-blue-500\"\n                      >\n                        <ArrowDownCircle className=\"w-4 h-4 mr-2\" />\n                        Consolidate Group\n                      </Button>\n                      \n                      <span className=\"text-sm text-slate-400\">Select All</span>\n                      <Checkbox\n                        checked={selectionState === 'all'}\n                        indeterminate={selectionState === 'some'}\n                        onCheckedChange={() => toggleGroupSelection(records)}\n                        className=\"bg-slate-600 border-slate-500 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n                      />\n                    </div>\n                  </div>\n                  {reasons.length > 0 && (\n                    <p className=\"text-sm text-slate-400 mt-1\">\n                      Match reasons: {reasons.join(\", \")}\n                    </p>\n                  )}\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  {records.length === 0 ? (\n                    <div className=\"text-center py-8 text-slate-500\">\n                      <AlertTriangle className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                      <p>No records found in this group</p>\n                    </div>\n                  ) : (\n                    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                      {records.map((account, idx) => (\n                        <Card key={account?.id || idx} className=\"bg-slate-700/50 border-slate-600 relative\">\n                          <div className=\"absolute top-3 right-3 z-10\">\n                            <Checkbox\n                              checked={selectedForDeletion.has(account?.id)}\n                              onCheckedChange={() => toggleSelection(account?.id)}\n                              className=\"bg-slate-600 border-slate-500 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n                              disabled={deleting || consolidating}\n                            />\n                          </div>\n                          \n                          <CardHeader className=\"pb-3\">\n                            <CardTitle className=\"text-base text-slate-100 flex items-center gap-2 pr-8\">\n                              <Building2 className=\"w-4 h-4 text-green-400\" />\n                              {account?.name || 'Unknown Account'}\n                            </CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-2\">\n                            {account?.email && (\n                              <div className=\"flex items-center gap-2 text-sm text-slate-300\">\n                                <Mail className=\"w-4 h-4 text-slate-400 flex-shrink-0\" />\n                                <a href={`mailto:${account.email}`} className=\"text-blue-400 hover:underline truncate\">\n                                  {account.email}\n                                </a>\n                              </div>\n                            )}\n                            \n                            {account?.phone && (\n                              <div className=\"flex items-center gap-2 text-sm text-slate-300\">\n                                <Phone className=\"w-4 h-4 text-slate-400 flex-shrink-0\" />\n                                <a href={`tel:${account.phone}`} className=\"text-blue-400 hover:underline\">\n                                  {account.phone}\n                                </a>\n                              </div>\n                            )}\n\n                            {account?.industry && (\n                              <p className=\"text-sm text-slate-300\">\n                                <span className=\"font-medium\">Industry:</span> {account.industry.replace(/_/g, ' ')}\n                              </p>\n                            )}\n                            {account?.website && (\n                              <p className=\"text-sm text-slate-300\">\n                                <span className=\"font-medium\">Website:</span>{\" \"}\n                                <a href={account.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-400 hover:underline\">\n                                  {account.website}\n                                </a>\n                              </p>\n                            )}\n                            {(account?.city || account?.state) && (\n                              <p className=\"text-sm text-slate-300\">\n                                <span className=\"font-medium\">Location:</span>{\" \"}\n                                {[account.city, account.state].filter(Boolean).join(\", \")}\n                              </p>\n                            )}\n                            {account?.legacy_id && (\n                              <p className=\"text-sm text-slate-400\">\n                                <span className=\"font-medium\">Legacy ID:</span> {account.legacy_id}\n                              </p>\n                            )}\n                            {account?.id && (\n                              <p className=\"text-xs text-slate-500 mt-2\">\n                                ID: {account.id}\n                              </p>\n                            )}\n                            {account?.created_date && (\n                              <p className=\"text-xs text-slate-500\">\n                                Created: {new Date(account.created_date).toLocaleDateString()}\n                              </p>\n                            )}\n\n                            <div className=\"flex gap-2 mt-4\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleView(account)}\n                                className=\"flex-1 bg-slate-600 border-slate-500 text-slate-200 hover:bg-slate-500\"\n                                disabled={!account?.id || deleting || consolidating}\n                              >\n                                <Eye className=\"w-4 h-4 mr-1\" />\n                                View\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => setDeleteTarget(account)}\n                                className=\"flex-1\"\n                                disabled={deleting || !account?.id || consolidating}\n                              >\n                                <Trash2 className=\"w-4 h-4 mr-1\" />\n                                Delete\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      <OperationOverlay\n        open={operationProgress.show}\n        title={consolidating ? \"Consolidating Accounts\" : \"Deleting Accounts\"}\n        subtitle={consolidating ? \"Please wait while we consolidate duplicate accounts...\" : \"Please wait while we delete the selected accounts...\"}\n        progressCurrent={operationProgress.current}\n        progressTotal={operationProgress.total}\n      />\n\n      {selectedAccount && (\n        <AccountDetailPanel\n          account={selectedAccount}\n          open={!!selectedAccount}\n          onOpenChange={(open) => {\n            if (!open) {\n              setSelectedAccount(null);\n            }\n          }}\n          onUpdate={loadDuplicates}\n          user={currentUser}\n        />\n      )}\n\n      <AlertDialog open={!!deleteTarget} onOpenChange={(open) => !open && setDeleteTarget(null)}>\n        <AlertDialogContent className=\"bg-slate-800 border-slate-700\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-slate-100\">Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-slate-400\">\n              This will permanently delete the account <strong className=\"text-slate-200\">{deleteTarget?.name}</strong>.\n              This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\" disabled={deleting}>\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteTarget && handleDelete(deleteTarget)}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n              disabled={deleting}\n            >\n              {deleting ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Deleting...\n                </>\n              ) : (\n                \"Delete Account\"\n              )}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <AlertDialog open={showBulkDeleteConfirm} onOpenChange={setShowBulkDeleteConfirm}>\n        <AlertDialogContent className=\"bg-slate-800 border-slate-700\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-slate-100\">Delete Multiple Accounts?</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-slate-400\">\n              This will permanently delete <strong className=\"text-slate-200\">{selectedForDeletion.size} account(s)</strong>.\n              This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel className=\"bg-slate-700 border-slate-600 text-slate-200 hover:bg-slate-600\" disabled={deleting}>\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleBulkDelete}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n              disabled={deleting}\n            >\n              {deleting ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Deleting...\n                </>\n              ) : (\n                `Delete ${selectedForDeletion.size} Account(s)`\n              )}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\DuplicateContacts.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Users, Trash2, Eye, AlertTriangle, RefreshCw } from \"lucide-react\";\nimport { Contact } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { findDuplicates } from \"@/api/functions\";\nimport { useTenant } from \"../components/shared/tenantContext\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport ContactDetailPanel from \"../components/contacts/ContactDetailPanel\";\n\nexport default function DuplicateContacts() {\n  const [loading, setLoading] = useState(true);\n  const [duplicateGroups, setDuplicateGroups] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [deleting, setDeleting] = useState(false);\n  const { selectedTenantId } = useTenant();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  const loadUser = async () => {\n    try {\n      const user = await User.me();\n      setCurrentUser(user);\n    } catch (error) {\n      console.error(\"Failed to load user:\", error);\n    }\n  };\n\n  const loadDuplicates = useCallback(async () => {\n    if (!currentUser) return;\n    \n    setLoading(true);\n    try {\n      const response = await findDuplicates({\n        entity_type: 'Contact',\n        tenant_id: selectedTenantId || currentUser?.tenant_id\n      });\n\n      if (response.data?.success) {\n        setDuplicateGroups(response.data.groups || []);\n      }\n    } catch (error) {\n      console.error(\"Failed to load duplicates:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load duplicate contacts\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [currentUser, selectedTenantId, toast]);\n\n  useEffect(() => {\n    if (currentUser) {\n      loadDuplicates();\n    }\n  }, [currentUser, loadDuplicates]);\n\n  const handleDelete = async (contactId) => {\n    if (!confirm(\"Are you sure you want to delete this contact? This action cannot be undone.\")) {\n      return;\n    }\n\n    setDeleting(true);\n    try {\n      await Contact.delete(contactId);\n      toast({\n        title: \"Success\",\n        description: \"Contact deleted successfully\"\n      });\n      await loadDuplicates(); // Refresh the list\n    } catch (error) {\n      console.error(\"Failed to delete contact:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete contact\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setDeleting(false);\n    }\n  };\n\n  const handleView = (contact) => {\n    setSelectedContact(contact);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-slate-900\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-12 h-12 animate-spin text-blue-400 mx-auto mb-4\" />\n          <p className=\"text-slate-400\">Scanning for duplicate contacts...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-100 flex items-center gap-3\">\n            <div className=\"w-12 h-12 flex items-center justify-center rounded-full bg-orange-900/30 border border-orange-700/50\">\n              <AlertTriangle className=\"w-6 h-6 text-orange-400\" />\n            </div>\n            Duplicate Contacts\n          </h1>\n          <p className=\"text-slate-400 mt-1\">Review and manage potential duplicate contact records</p>\n        </div>\n        <Button onClick={loadDuplicates} variant=\"outline\" className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Refresh Scan\n        </Button>\n      </div>\n\n      {duplicateGroups.length === 0 ? (\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"p-12 text-center\">\n            <Users className=\"w-16 h-16 mx-auto mb-4 text-green-600\" />\n            <h3 className=\"text-xl font-semibold mb-2 text-slate-300\">No Duplicates Found</h3>\n            <p className=\"text-slate-400\">All your contacts appear to be unique!</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n          <Alert className=\"bg-orange-900/20 border-orange-700/50 text-orange-300\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Found {duplicateGroups.length} group{duplicateGroups.length !== 1 ? 's' : ''} of potential duplicate contacts. Review each group and delete duplicates as needed.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"space-y-4\">\n            {duplicateGroups.map((group, index) => (\n              <Card key={index} className=\"bg-slate-800 border-slate-700\">\n                <CardHeader className=\"border-b border-slate-700\">\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant=\"outline\" className=\"bg-orange-900/30 text-orange-300 border-orange-700/50\">\n                        Group {index + 1}\n                      </Badge>\n                      <span className=\"text-lg\">\n                        {group.primary.first_name} {group.primary.last_name}\n                      </span>\n                      <Badge className=\"bg-slate-700 text-slate-300\">\n                        {group.total_count} records\n                      </Badge>\n                    </div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    {/* Primary Record */}\n                    <div className=\"flex items-center justify-between p-4 rounded-lg bg-slate-700/50 border border-slate-600\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Badge className=\"bg-blue-900/50 text-blue-300 border-blue-700/50\">Primary</Badge>\n                          <span className=\"font-semibold text-slate-200\">\n                            {group.primary.first_name} {group.primary.last_name}\n                          </span>\n                        </div>\n                        <div className=\"text-sm text-slate-400 space-y-1\">\n                          {group.primary.email && <div>≡ƒôº {group.primary.email}</div>}\n                          {group.primary.phone && <div>≡ƒô₧ {group.primary.phone}</div>}\n                          {group.primary.job_title && <div>≡ƒÆ╝ {group.primary.job_title}</div>}\n                          <div className=\"text-xs text-slate-500\">\n                            Created: {new Date(group.primary.created_date).toLocaleDateString()}\n                          </div>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleView(group.primary)}\n                        className=\"bg-slate-800 border-slate-600 text-slate-200 hover:bg-slate-700\"\n                      >\n                        <Eye className=\"w-4 h-4 mr-2\" />\n                        View\n                      </Button>\n                    </div>\n\n                    {/* Duplicate Records */}\n                    {group.duplicates.map((duplicate) => (\n                      <div key={duplicate.id} className=\"flex items-center justify-between p-4 rounded-lg bg-red-900/10 border border-red-700/30\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <Badge variant=\"outline\" className=\"bg-red-900/30 text-red-300 border-red-700/50\">\n                              Duplicate\n                            </Badge>\n                            <span className=\"font-semibold text-slate-200\">\n                              {duplicate.first_name} {duplicate.last_name}\n                            </span>\n                            {duplicate.duplicate_reason && (\n                              <span className=\"text-xs text-orange-400\">\n                                ({duplicate.duplicate_reason.join(', ')})\n                              </span>\n                            )}\n                          </div>\n                          <div className=\"text-sm text-slate-400 space-y-1\">\n                            {duplicate.email && <div>≡ƒôº {duplicate.email}</div>}\n                            {duplicate.phone && <div>≡ƒô₧ {duplicate.phone}</div>}\n                            {duplicate.job_title && <div>≡ƒÆ╝ {duplicate.job_title}</div>}\n                            <div className=\"text-xs text-slate-500\">\n                              Created: {new Date(duplicate.created_date).toLocaleDateString()}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleView(duplicate)}\n                            className=\"bg-slate-800 border-slate-600 text-slate-200 hover:bg-slate-700\"\n                          >\n                            <Eye className=\"w-4 h-4 mr-2\" />\n                            View\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(duplicate.id)}\n                            disabled={deleting}\n                            className=\"bg-red-900/50 border-red-700/50 text-red-300 hover:bg-red-900/70\"\n                          >\n                            {deleting ? (\n                              <Loader2 className=\"w-4 h-4 animate-spin\" />\n                            ) : (\n                              <>\n                                <Trash2 className=\"w-4 h-4 mr-2\" />\n                                Delete\n                              </>\n                            )}\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </>\n      )}\n\n      {selectedContact && (\n        <ContactDetailPanel\n          contact={selectedContact}\n          onClose={() => setSelectedContact(null)}\n          onEdit={() => {}}\n          onDelete={() => {}}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Employees.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Integrations.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Target' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Target"},"fix":{"range":[485,495],"text":""},"desc":"Remove unused variable 'Target'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":236,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":236,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[6960,6964],"text":""},"desc":"Remove unused variable 'user'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Zap, \n  Webhook, \n  Copy, \n  ExternalLink, \n  Settings,\n  Phone,\n  Mail,\n  Calendar,\n  Database,\n  Bot,\n  CreditCard,\n  FileText,\n  Users,\n  Activity,\n  Building2,\n  Target,\n  TrendingUp,\n  Loader2\n} from \"lucide-react\";\nimport { User } from \"@/api/entities\";\nimport { createPageUrl } from \"@/utils\";\nimport { Link } from \"react-router-dom\";\n\n// Use a hardcoded APP_ID since import.meta isn't available in this context\nconst APP_ID = \"68ad592dcffacef630b477d2\";\n\nconst webhookServices = [\n  {\n    name: \"ElevenLabs AI Assistant\",\n    description: \"Voice-powered CRM queries and AI assistant functionality\",\n    webhook: \"/functions/elevenLabsCRMWebhook\",\n    icon: Bot,\n    color: \"bg-purple-100 text-purple-800\",\n    status: \"active\",\n    method: \"POST\",\n    purpose: \"Handles voice AI queries about CRM data\"\n  },\n  {\n    name: \"CallFluent AI Calling\",\n    description: \"AI-powered phone calling and call results\",\n    webhook: \"/functions/callFluentWebhookV2\",\n    icon: Phone,\n    color: \"bg-blue-100 text-blue-800\", \n    status: \"active\",\n    method: \"POST\",\n    purpose: \"Processes AI call outcomes and updates activities\"\n  },\n  {\n    name: \"Thoughtly AI Calling\",\n    description: \"Alternative AI calling provider with transcripts\",\n    webhook: \"/functions/thoughtlyCallResults\",\n    icon: Phone,\n    color: \"bg-green-100 text-green-800\",\n    status: \"active\", \n    method: \"POST\",\n    purpose: \"Handles Thoughtly AI call results and transcriptions\"\n  },\n  {\n    name: \"Thoughtly Transcripts\",\n    description: \"Call transcript processing from Thoughtly\",\n    webhook: \"/functions/thoughtlyTranscripts\",\n    icon: FileText,\n    color: \"bg-green-100 text-green-800\",\n    status: \"active\",\n    method: \"POST\", \n    purpose: \"Processes call transcripts from Thoughtly AI calls\"\n  },\n  {\n    name: \"Stripe Payments\",\n    description: \"Payment processing and subscription management\",\n    webhook: \"/functions/handleStripeWebhook\",\n    icon: CreditCard,\n    color: \"bg-orange-100 text-orange-800\",\n    status: \"active\",\n    method: \"POST\",\n    purpose: \"Handles Stripe payment events and subscription updates\"\n  },\n  {\n    name: \"General Incoming Webhook\",\n    description: \"Generic webhook for custom integrations\",\n    webhook: \"/functions/incomingWebhook\",\n    icon: Webhook,\n    color: \"bg-gray-100 text-gray-800\",\n    status: \"active\",\n    method: \"POST\",\n    purpose: \"General-purpose webhook for custom data ingestion\"\n  },\n  {\n    name: \"Create Activity\",\n    description: \"Direct activity creation from external systems\",\n    webhook: \"/functions/createActivityWebhook\",\n    icon: Activity,\n    color: \"bg-indigo-100 text-indigo-800\",\n    status: \"active\",\n    method: \"POST\",\n    purpose: \"Creates activities directly from external scheduling systems\"\n  },\n  {\n    name: \"n8n Create Lead\",\n    description: \"Lead creation through n8n automation\",\n    webhook: \"/functions/n8nCreateLead\", \n    icon: TrendingUp,\n    color: \"bg-yellow-100 text-yellow-800\",\n    status: \"active\",\n    method: \"POST\",\n    purpose: \"Creates leads via n8n workflow automation\"\n  },\n  {\n    name: \"n8n Create Contact\",\n    description: \"Contact creation through n8n automation\", \n    webhook: \"/functions/n8nCreateContact\",\n    icon: Users,\n    color: \"bg-yellow-100 text-yellow-800\",\n    status: \"active\",\n    method: \"POST\",\n    purpose: \"Creates contacts via n8n workflow automation\"\n  },\n  {\n    name: \"n8n Update Contact\", \n    description: \"Contact updates through n8n automation\",\n    webhook: \"/functions/n8nUpdateContact\",\n    icon: Users,\n    color: \"bg-yellow-100 text-yellow-800\", \n    status: \"active\",\n    method: \"POST\",\n    purpose: \"Updates contact information via n8n workflows\"\n  },\n  {\n    name: \"n8n Get Data\",\n    description: \"Data retrieval for n8n workflows\",\n    webhook: \"/functions/n8nGetData\",\n    icon: Database,\n    color: \"bg-yellow-100 text-yellow-800\",\n    status: \"active\", \n    method: \"GET/POST\",\n    purpose: \"Retrieves CRM data for n8n workflow processing\"\n  },\n  {\n    name: \"Google Drive Integration\",\n    description: \"Tenant-specific Google Drive file management\",\n    webhook: \"/functions/tenantGoogleDrive\",\n    icon: FileText,\n    color: \"bg-red-100 text-red-800\",\n    status: \"active\",\n    method: \"POST\",\n    purpose: \"Handles Google Drive file operations per tenant\"\n  },\n  {\n    name: \"Zapier Integration\",\n    description: \"Zapier automation webhook\",\n    webhook: \"/functions/tenantZapierWebhook\", \n    icon: Zap,\n    color: \"bg-orange-100 text-orange-800\",\n    status: \"active\",\n    method: \"POST\", \n    purpose: \"Processes Zapier automation triggers and actions\"\n  },\n  {\n    name: \"OneDrive Integration\",\n    description: \"Microsoft OneDrive file operations\",\n    webhook: \"/functions/tenantOneDrive\",\n    icon: FileText,\n    color: \"bg-blue-100 text-blue-800\",\n    status: \"active\",\n    method: \"POST\",\n    purpose: \"Handles OneDrive file management for tenants\"\n  },\n  {\n    name: \"Outlook Email Integration\", \n    description: \"Microsoft Outlook email processing\",\n    webhook: \"/functions/tenantOutlookEmail\",\n    icon: Mail,\n    color: \"bg-blue-100 text-blue-800\",\n    status: \"active\",\n    method: \"POST\",\n    purpose: \"Processes Outlook email integration events\"\n  },\n  {\n    name: \"Outlook Calendar Integration\",\n    description: \"Microsoft Outlook calendar synchronization\", \n    webhook: \"/functions/tenantOutlookCalendar\",\n    icon: Calendar,\n    color: \"bg-blue-100 text-blue-800\",\n    status: \"active\",\n    method: \"POST\",\n    purpose: \"Syncs Outlook calendar events with CRM activities\"\n  }\n];\n\nconst integrationCategories = [\n  {\n    name: \"AI & Voice\",\n    services: [\"ElevenLabs AI Assistant\", \"CallFluent AI Calling\", \"Thoughtly AI Calling\", \"Thoughtly Transcripts\"],\n    icon: Bot,\n    color: \"text-purple-600\"\n  },\n  {\n    name: \"Automation Platforms\", \n    services: [\"n8n Create Lead\", \"n8n Create Contact\", \"n8n Update Contact\", \"n8n Get Data\", \"Zapier Integration\"],\n    icon: Zap,\n    color: \"text-yellow-600\"\n  },\n  {\n    name: \"Microsoft Services\",\n    services: [\"OneDrive Integration\", \"Outlook Email Integration\", \"Outlook Calendar Integration\"],\n    icon: Building2,\n    color: \"text-blue-600\" \n  },\n  {\n    name: \"Google Services\",\n    services: [\"Google Drive Integration\"],\n    icon: FileText,\n    color: \"text-red-600\"\n  },\n  {\n    name: \"Payments & Commerce\",\n    services: [\"Stripe Payments\"], \n    icon: CreditCard,\n    color: \"text-green-600\"\n  },\n  {\n    name: \"General Webhooks\",\n    services: [\"General Incoming Webhook\", \"Create Activity\"],\n    icon: Webhook,\n    color: \"text-gray-600\"\n  }\n];\n\nexport default function IntegrationsPage() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const currentUser = await User.me();\n        setUser(currentUser);\n      } catch (error) {\n        console.error(\"Failed to load user:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n\n  const copyWebhookUrl = (webhook) => {\n    const baseUrl = window.location.origin;\n    const fullUrl = `${baseUrl}/api/apps/${APP_ID}${webhook}`;\n    navigator.clipboard.writeText(fullUrl);\n    // You could add a toast notification here\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-12 h-12 text-blue-600 animate-spin mx-auto mb-4\" />\n          <p className=\"text-slate-300\">Loading integrations...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-6 space-y-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-slate-100 flex items-center gap-3\">\n            <Zap className=\"w-8 h-8 text-blue-500\" />\n            Integrations & Webhooks\n          </h1>\n          <p className=\"text-slate-400 mt-2\">\n            Connect your CRM with external services and automation platforms\n          </p>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"bg-slate-800 border-slate-700 hover:border-slate-600 transition-colors\">\n            <CardContent className=\"p-6 text-center\">\n              <Settings className=\"w-12 h-12 text-blue-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-slate-100 mb-2\">Integration Settings</h3>\n              <p className=\"text-slate-400 text-sm mb-4\">Configure API keys and connection settings</p>\n              <Link to={createPageUrl(\"Settings\")}>\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Manage Settings\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800 border-slate-700 hover:border-slate-600 transition-colors\">\n            <CardContent className=\"p-6 text-center\">\n              <FileText className=\"w-12 h-12 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-slate-100 mb-2\">Documentation</h3>\n              <p className=\"text-slate-400 text-sm mb-4\">API guides and webhook examples</p>\n              <Link to={createPageUrl(\"Documentation\")}>\n                <Button variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  View Docs\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800 border-slate-700 hover:border-slate-600 transition-colors\">\n            <CardContent className=\"p-6 text-center\">\n              <Activity className=\"w-12 h-12 text-purple-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-slate-100 mb-2\">Webhook Logs</h3>\n              <p className=\"text-slate-400 text-sm mb-4\">Monitor webhook activity and debug issues</p>\n              <Link to={createPageUrl(\"AuditLog\")}>\n                <Button variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                  <Activity className=\"w-4 h-4 mr-2\" />\n                  View Logs\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Webhook Services by Category */}\n        {integrationCategories.map((category) => (\n          <Card key={category.name} className=\"bg-slate-800 border-slate-700 mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n                <category.icon className={`w-6 h-6 ${category.color}`} />\n                {category.name}\n              </CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                {category.services.length} webhook{category.services.length !== 1 ? 's' : ''} available\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                {webhookServices\n                  .filter(service => category.services.includes(service.name))\n                  .map((service) => (\n                    <div key={service.name} className=\"border border-slate-600 rounded-lg p-4 bg-slate-700/50\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center gap-3\">\n                          <service.icon className=\"w-8 h-8 text-slate-400\" />\n                          <div>\n                            <h4 className=\"font-semibold text-slate-100\">{service.name}</h4>\n                            <p className=\"text-sm text-slate-400\">{service.description}</p>\n                          </div>\n                        </div>\n                        <Badge className={service.color}>\n                          {service.status}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-slate-400\">Method:</span>\n                          <Badge variant=\"outline\" className=\"border-slate-500 text-slate-300\">\n                            {service.method}\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm\">\n                          <span className=\"text-slate-400\">Purpose:</span>\n                          <p className=\"text-slate-300 mt-1\">{service.purpose}</p>\n                        </div>\n                        <div className=\"flex items-center gap-2 mt-3\">\n                          <code className=\"flex-1 bg-slate-800 text-slate-300 px-3 py-2 rounded text-sm font-mono\">\n                            {service.webhook}\n                          </code>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => copyWebhookUrl(service.webhook)}\n                            className=\"border-slate-500 text-slate-300 hover:bg-slate-600\"\n                          >\n                            <Copy className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n\n        {/* Base URL Information */}\n        <Alert className=\"bg-blue-900/30 border-blue-700/50\">\n          <Webhook className=\"h-4 w-4 text-blue-400\" />\n          <AlertDescription className=\"text-blue-300\">\n            <strong>Base URL:</strong> All webhooks use the base URL: <code className=\"bg-blue-800/50 px-2 py-1 rounded text-blue-200\">\n              {window.location.origin}/api/apps/{APP_ID}\n            </code>\n          </AlertDescription>\n        </Alert>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Layout.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Leads.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'accounts' is assigned a value but never used.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"accounts"},"fix":{"range":[2181,2189],"text":""},"desc":"Remove unused variable 'accounts'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'ageBuckets'. Either include it or remove the dependency array.","line":312,"column":6,"nodeType":"ArrayExpression","endLine":312,"endColumn":104,"suggestions":[{"desc":"Update the dependencies array to be: [user, getTenantFilter, statusFilter, searchTerm, selectedTags, ageFilter, ageBuckets]","fix":{"range":[12205,12303],"text":"[user, getTenantFilter, statusFilter, searchTerm, selectedTags, ageFilter, ageBuckets]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'toggleTag' is assigned a value but never used.","line":775,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":775,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"toggleTag"},"fix":{"range":[26763,27019],"text":""},"desc":"Remove unused variable 'toggleTag'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'clearTags' is assigned a value but never used.","line":785,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":785,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"clearTags"},"fix":{"range":[27023,27118],"text":""},"desc":"Remove unused variable 'clearTags'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport { Lead } from \"@/api/entities\";\nimport { Account } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Employee } from \"@/api/entities\";\nimport { useApiManager } from \"../components/shared/ApiManager\";\nimport LeadCard from \"../components/leads/LeadCard\";\nimport LeadForm from \"../components/leads/LeadForm\";\nimport LeadDetailPanel from \"../components/leads/LeadDetailPanel\";\nimport LeadConversionDialog from \"../components/leads/LeadConversionDialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Search, Upload, Loader2, Grid, List, AlertCircle, X, Edit, Eye, Trash2, UserCheck } from \"lucide-react\";\nimport { AnimatePresence } from \"framer-motion\";\nimport CsvExportButton from \"../components/shared/CsvExportButton\";\nimport CsvImportDialog from \"../components/shared/CsvImportDialog\";\nimport { useTenant } from '../components/shared/tenantContext';\nimport Pagination from \"../components/shared/Pagination\";\nimport { toast } from \"sonner\";\nimport TagFilter from \"../components/shared/TagFilter\";\nimport { useEmployeeScope } from \"../components/shared/EmployeeScopeContext\";\nimport RefreshButton from \"../components/shared/RefreshButton\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport BulkActionsMenu from \"../components/leads/BulkActionsMenu\";\nimport StatusHelper from \"../components/shared/StatusHelper\";\nimport { loadUsersSafely } from \"../components/shared/userLoader\";\n\n// Helper function for delays\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\n\nexport default function LeadsPage() {\n  const [leads, setLeads] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [ageFilter, setAgeFilter] = useState(\"all\");\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingLead, setEditingLead] = useState(null);\n  const [viewMode, setViewMode] = useState(\"list\");\n  const [selectedLeads, setSelectedLeads] = useState(() => new Set());\n  const [selectAllMode, setSelectAllMode] = useState(false);\n  const [isImportOpen, setIsImportOpen] = useState(false);\n  const [user, setUser] = useState(null);\n  const { selectedTenantId } = useTenant();\n  const [detailLead, setDetailLead] = useState(null);\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [convertingLead, setConvertingLead] = useState(null);\n  const [isConversionDialogOpen, setIsConversionDialogOpen] = useState(false);\n  const [showTestData, setShowTestData] = useState(false);\n\n  // Define age buckets matching dashboard\n  const ageBuckets = [\n    { label: 'All Ages', value: 'all' },\n    { label: '0-7 days', min: 0, max: 7, value: '0-7', color: 'text-green-400' },\n    { label: '8-14 days', min: 8, max: 14, value: '8-14', color: 'text-blue-400' },\n    { label: '15-21 days', min: 15, max: 21, value: '15-21', color: 'text-yellow-400' },\n    { label: '22-30 days', min: 22, max: 30, value: '22-30', color: 'text-orange-400' },\n    { label: '30+ days', min: 31, max: 99999, value: '30+', color: 'text-red-400' }\n  ];\n\n  // Helper function to calculate lead age\n  const calculateLeadAge = (createdDate) => {\n    const today = new Date();\n    const created = new Date(createdDate);\n    if (isNaN(created.getTime())) return -1; // Return -1 or handle as error for invalid dates\n    return Math.floor((today - created) / (1000 * 60 * 60 * 24));\n  };\n\n  // Helper function to get age bucket for a lead\n  const getLeadAgeBucket = (lead) => {\n    const age = calculateLeadAge(lead.created_date);\n    return ageBuckets.find(bucket =>\n      bucket.value !== 'all' && age >= bucket.min && age <= bucket.max\n    );\n  };\n\n  // Derived state for manager role\n  const isManager = useMemo(() => {\n    if (!user) return false;\n    return user.role === 'admin' || user.role === 'superadmin' || user.employee_role === 'manager';\n  }, [user]);\n\n  // Derived state for admin role for controlling test data visibility\n  const isAdmin = useMemo(() => {\n    if (!user) return false;\n    return user.role === 'admin' || user.role === 'superadmin';\n  }, [user]);\n\n  // Stats for ALL leads (not just current page)\n  const [totalStats, setTotalStats] = useState({\n    total: 0,\n    new: 0,\n    contacted: 0,\n    qualified: 0,\n    unqualified: 0,\n    converted: 0,\n    lost: 0\n  });\n\n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(25);\n  const [totalItems, setTotalItems] = useState(0);\n\n  const { cachedRequest, clearCache } = useApiManager();\n  const { selectedEmail } = useEmployeeScope();\n\n  // Ref to track if initial load is done\n  const initialLoadDone = useRef(false);\n  const supportingDataLoaded = useRef(false);\n\n  // Load user once\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const currentUser = await User.me();\n        setUser(currentUser);\n      } catch (error) {\n        console.error(\"Failed to load user:\", error);\n        toast.error(\"Failed to load user information\");\n      }\n    };\n    loadUser();\n  }, []);\n\n  // New getTenantFilter function, moved here from tenantContext\n  const getTenantFilter = useCallback(() => {\n    if (!user) return {};\n\n    let filter = {};\n\n    // Tenant filtering\n    if (user.role === 'superadmin' || user.role === 'admin') {\n      if (selectedTenantId) {\n        filter.tenant_id = selectedTenantId;\n      }\n    } else if (user.tenant_id) {\n      filter.tenant_id = user.tenant_id;\n    }\n\n    // Employee scope filtering from context\n    if (selectedEmail && selectedEmail !== 'all') {\n      if (selectedEmail === 'unassigned') {\n        filter.$or = [{ assigned_to: null }, { assigned_to: '' }];\n      } else {\n        filter.assigned_to = selectedEmail;\n      }\n    } else if (user.employee_role === 'employee' && user.role !== 'admin' && user.role !== 'superadmin') {\n      // Regular employees only see their own data\n      filter.assigned_to = user.email;\n    }\n\n    // Test data filtering\n    if (!showTestData) {\n      filter.is_test_data = { $ne: true };\n    }\n\n    return filter;\n  }, [user, selectedTenantId, showTestData, selectedEmail]);\n\n  // Load supporting data (accounts, users, employees) ONCE with delays and error handling\n  useEffect(() => {\n    if (supportingDataLoaded.current || !user) return;\n\n    const loadSupportingData = async () => {\n      try {\n        // Base tenant filter without employee scope for Account and Employee entities\n        let baseTenantFilter = {};\n        if (user.role === 'superadmin' || user.role === 'admin') {\n          if (selectedTenantId) {\n            baseTenantFilter.tenant_id = selectedTenantId;\n          }\n        } else if (user.tenant_id) {\n          baseTenantFilter.tenant_id = user.tenant_id;\n        }\n\n        // Load accounts\n        const accountsData = await cachedRequest('Account', 'filter', { filter: baseTenantFilter }, () => Account.filter(baseTenantFilter));\n        setAccounts(accountsData || []);\n\n        await delay(300);\n\n        // Load users safely\n        const usersData = await loadUsersSafely(user, selectedTenantId, cachedRequest);\n        setUsers(usersData || []);\n\n        await delay(300);\n\n        // Load employees\n        const employeesData = await cachedRequest('Employee', 'filter', { filter: baseTenantFilter }, () => Employee.filter(baseTenantFilter));\n        setEmployees(employeesData || []);\n\n        supportingDataLoaded.current = true; // Mark as loaded\n      } catch (error) {\n        console.error(\"[Leads] Failed to load supporting data:\", error);\n      }\n    };\n\n    loadSupportingData();\n  }, [user, selectedTenantId, cachedRequest]);\n\n  // Load total stats for ALL leads (separate from paginated data)\n  const loadTotalStats = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      // Use the new getTenantFilter which includes employee scope and test data filter\n      let filter = getTenantFilter();\n\n      // Get up to 10000 leads for stats calculation\n      const allLeads = await Lead.filter(filter, 'id', 10000);\n\n      const stats = {\n        total: allLeads?.length || 0,\n        new: allLeads?.filter(l => l.status === 'new').length || 0,\n        contacted: allLeads?.filter(l => l.status === 'contacted').length || 0,\n        qualified: allLeads?.filter(l => l.status === 'qualified').length || 0,\n        unqualified: allLeads?.filter(l => l.status === 'unqualified').length || 0,\n        converted: allLeads?.filter(l => l.status === 'converted').length || 0,\n        lost: allLeads?.filter(l => l.status === 'lost').length || 0\n      };\n\n      setTotalStats(stats);\n    } catch (error) {\n      console.error(\"Failed to load total stats:\", error);\n    }\n  }, [user, getTenantFilter]);\n\n  // Load total stats when dependencies change\n  useEffect(() => {\n    if (user) {\n      loadTotalStats();\n    }\n  }, [user, selectedTenantId, selectedEmail, loadTotalStats, showTestData]); // Added showTestData here\n\n  // Main data loading function with proper pagination and client-side age filtering\n  const loadLeads = useCallback(async (page = 1, size = 25) => {\n    if (!user) return;\n\n    setLoading(true);\n    try {\n      let currentFilter = getTenantFilter();\n\n      if (statusFilter !== \"all\") {\n        currentFilter = { ...currentFilter, status: statusFilter };\n      }\n\n      if (searchTerm) {\n        const searchRegex = { $regex: searchTerm, $options: 'i' };\n        currentFilter = {\n          ...currentFilter,\n          $or: [\n            { first_name: searchRegex },\n            { last_name: searchRegex },\n            { email: searchRegex },\n            { phone: searchRegex },\n            { company: searchRegex },\n            { job_title: searchRegex }\n          ]\n        };\n      }\n\n      if (selectedTags.length > 0) {\n        currentFilter = { ...currentFilter, tags: { $all: selectedTags } };\n      }\n\n      // 1. Fetch all leads matching server-side filters (up to a limit)\n      // We fetch a larger number (e.g., 10000) to accurately determine total count after client-side filtering.\n      const allLeadsMatchingServerFilter = await Lead.filter(currentFilter, '-created_date', 10000);\n\n      // 2. Apply client-side age filter to the full set to determine true total count and to prepare for pagination\n      let ageFilteredAllLeads = allLeadsMatchingServerFilter;\n      if (ageFilter !== 'all') {\n        const selectedBucket = ageBuckets.find(b => b.value === ageFilter);\n        if (selectedBucket) {\n          ageFilteredAllLeads = allLeadsMatchingServerFilter.filter(lead => {\n            const age = calculateLeadAge(lead.created_date);\n            return age >= selectedBucket.min && age <= selectedBucket.max;\n          });\n        }\n      }\n      const totalCount = ageFilteredAllLeads.length;\n\n      // 3. Apply pagination to the age-filtered set\n      const skip = (page - 1) * size;\n      const paginatedLeads = ageFilteredAllLeads.slice(skip, skip + size);\n\n      console.log('[Leads] Loading page:', page, 'size:', size, 'skip:', skip, 'filter:', currentFilter);\n      console.log('[Leads] Loaded (after client filter):', paginatedLeads?.length, 'Total (after client filter):', totalCount);\n\n      setLeads(paginatedLeads || []);\n      setTotalItems(totalCount);\n      setCurrentPage(page);\n      initialLoadDone.current = true;\n    } catch (error) {\n      console.error(\"Failed to load leads:\", error);\n      toast.error(\"Failed to load leads\");\n      setLeads([]);\n      setTotalItems(0);\n    } finally {\n      setLoading(false);\n    }\n  }, [user, getTenantFilter, searchTerm, statusFilter, selectedTags, ageFilter, pageSize, showTestData]); // Added showTestData here\n\n  // Load leads when dependencies change\n  useEffect(() => {\n    if (user) {\n      loadLeads(currentPage, pageSize);\n    }\n  }, [user, selectedTenantId, selectedEmail, currentPage, pageSize, searchTerm, statusFilter, selectedTags, ageFilter, loadLeads]);\n\n  // Handle page change\n  const handlePageChange = useCallback((newPage) => {\n    setCurrentPage(newPage);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // Handle page size change\n  const handlePageSizeChange = useCallback((newSize) => {\n    setPageSize(newSize);\n    setCurrentPage(1);\n  }, []);\n\n  // Extract all tags from leads for TagFilter\n  const allTags = useMemo(() => {\n    if (!Array.isArray(leads)) return [];\n\n    const tagCounts = {};\n    leads.forEach(lead => {\n      if (Array.isArray(lead.tags)) {\n        lead.tags.forEach(tag => {\n          if (tag && typeof tag === 'string') {\n            tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n          }\n        });\n      }\n    });\n\n    return Object.entries(tagCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count);\n  }, [leads]);\n\n  // Create lookup maps for denormalized fields\n  const usersMap = useMemo(() => {\n    return users.reduce((acc, user) => {\n      acc[user.email] = user.full_name || user.email;\n      return acc;\n    }, {});\n  }, [users]);\n\n  const employeesMap = useMemo(() => {\n    return employees.reduce((acc, employee) => {\n      if (employee.email) {\n        acc[employee.email] = `${employee.first_name} ${employee.last_name}`;\n      }\n      return acc;\n    }, {});\n  }, [employees]);\n\n  const handleSave = async (leadData) => {\n    console.log('[Leads.handleSave] Starting save with data:', leadData);\n\n    try {\n      // Guard: Ensure user is available\n      if (!user) {\n        console.error('[Leads.handleSave] User is undefined');\n        toast.error(\"Cannot save lead: User not loaded. Please refresh the page.\");\n        return;\n      }\n\n      // Ensure tenant_id is set based on user\n      const dataWithTenant = {\n        ...leadData,\n        tenant_id: user.role === 'superadmin' && selectedTenantId\n          ? selectedTenantId\n          : user.tenant_id\n      };\n\n      console.log('[Leads.handleSave] Data with tenant:', dataWithTenant);\n\n      if (editingLead) {\n        console.log('[Leads.handleSave] Updating lead:', editingLead.id);\n        await Lead.update(editingLead.id, dataWithTenant);\n        toast.success(\"Lead updated successfully\");\n      } else {\n        console.log('[Leads.handleSave] Creating new lead');\n        const result = await Lead.create(dataWithTenant);\n        console.log('[Leads.handleSave] Lead created:', result);\n        toast.success(\"Lead created successfully\");\n      }\n\n      // Close form and clear editing state\n      setIsFormOpen(false);\n      setEditingLead(null);\n\n      // Clear cache\n      clearCache('Lead');\n\n      // Reload leads and stats\n      console.log('[Leads.handleSave] Reloading data...');\n      await Promise.all([\n        loadLeads(currentPage, pageSize),\n        loadTotalStats()\n      ]);\n      console.log('[Leads.handleSave] Data reloaded successfully');\n    } catch (error) {\n      console.error(\"[Leads.handleSave] Failed to save lead:\", {\n        error,\n        message: error?.message,\n        stack: error?.stack,\n        leadData\n      });\n      toast.error(editingLead ? \"Failed to update lead\" : \"Failed to create lead\");\n    }\n  };\n\n  const handleDelete = async (id) => {\n    if (!window.confirm(\"Are you sure you want to delete this lead?\")) return;\n\n    try {\n      await Lead.delete(id);\n      clearCache('Lead');\n      await Promise.all([\n        loadLeads(currentPage, pageSize),\n        loadTotalStats()\n      ]);\n      toast.success(\"Lead deleted successfully\");\n    } catch (error) {\n      console.error(\"Failed to delete lead:\", error);\n      toast.error(\"Failed to delete lead\");\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    if (selectAllMode) {\n      if (!window.confirm(`Delete ALL ${totalItems} lead(s) matching current filters? This cannot be undone! `)) return;\n\n      try {\n        let currentFilter = getTenantFilter();\n\n        if (statusFilter !== \"all\") {\n          currentFilter = { ...currentFilter, status: statusFilter };\n        }\n\n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          currentFilter = {\n            ...currentFilter,\n            $or: [\n              { first_name: searchRegex },\n              { last_name: searchRegex },\n              { email: searchRegex },\n              { phone: searchRegex },\n              { company: searchRegex },\n              { job_title: searchRegex }\n            ]\n          };\n        }\n\n        if (selectedTags.length > 0) {\n          currentFilter = { ...currentFilter, tags: { $all: selectedTags } };\n        }\n\n        const allLeadsToDeleteServerFilter = await Lead.filter(currentFilter, 'id', 10000);\n        let allLeadsToDelete = allLeadsToDeleteServerFilter;\n\n        if (ageFilter !== 'all') {\n          const selectedBucket = ageBuckets.find(b => b.value === ageFilter);\n          if (selectedBucket) {\n            allLeadsToDelete = allLeadsToDeleteServerFilter.filter(lead => {\n              const age = calculateLeadAge(lead.created_date);\n              return age >= selectedBucket.min && age <= selectedBucket.max;\n            });\n          }\n        }\n        const deleteCount = allLeadsToDelete.length;\n\n        // Delete in batches to avoid overwhelming the system\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allLeadsToDelete.length; i += BATCH_SIZE) {\n          const batch = allLeadsToDelete.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(l => Lead.delete(l.id)));\n        }\n\n        setSelectedLeads(new Set());\n        setSelectAllMode(false);\n        clearCache('Lead');\n        await Promise.all([\n          loadLeads(1, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`${deleteCount} lead(s) deleted`);\n      } catch (error) {\n        console.error(\"Failed to delete leads:\", error);\n        toast.error(\"Failed to delete leads\");\n      }\n    } else {\n      if (!selectedLeads || selectedLeads.size === 0) {\n        toast.error(\"No leads selected\");\n        return;\n      }\n\n      if (!window.confirm(`Delete ${selectedLeads.size} lead(s)?`)) return;\n\n      try {\n        await Promise.all([...selectedLeads].map(id => Lead.delete(id)));\n        setSelectedLeads(new Set());\n        clearCache('Lead');\n        await Promise.all([\n          loadLeads(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`${selectedLeads.size} lead(s) deleted`);\n      } catch (error) {\n        console.error(\"Failed to delete leads:\", error);\n        toast.error(\"Failed to delete leads\");\n      }\n    }\n  };\n\n  const handleBulkStatusChange = async (newStatus) => {\n    if (selectAllMode) {\n      if (!window.confirm(`Update status for ALL ${totalItems} lead(s) matching current filters to ${newStatus}?`)) return;\n\n      try {\n        let currentFilter = getTenantFilter();\n\n        if (statusFilter !== \"all\") {\n          currentFilter = { ...currentFilter, status: statusFilter };\n        }\n\n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          currentFilter = {\n            ...currentFilter,\n            $or: [\n              { first_name: searchRegex },\n              { last_name: searchRegex },\n              { email: searchRegex },\n              { phone: searchRegex },\n              { company: searchRegex },\n              { job_title: searchRegex }\n            ]\n          };\n        }\n\n        if (selectedTags.length > 0) {\n          currentFilter = { ...currentFilter, tags: { $all: selectedTags } };\n        }\n\n        const allLeadsToUpdateServerFilter = await Lead.filter(currentFilter, 'id', 10000);\n        let allLeadsToUpdate = allLeadsToUpdateServerFilter;\n\n        if (ageFilter !== 'all') {\n          const selectedBucket = ageBuckets.find(b => b.value === ageFilter);\n          if (selectedBucket) {\n            allLeadsToUpdate = allLeadsToUpdateServerFilter.filter(lead => {\n              const age = calculateLeadAge(lead.created_date);\n              return age >= selectedBucket.min && age <= selectedBucket.max;\n            });\n          }\n        }\n        const updateCount = allLeadsToUpdate.length;\n\n        // Update in batches\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allLeadsToUpdate.length; i += BATCH_SIZE) {\n          const batch = allLeadsToUpdate.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(l => Lead.update(l.id, { status: newStatus })));\n        }\n\n        setSelectedLeads(new Set());\n        setSelectAllMode(false);\n        clearCache('Lead');\n        await Promise.all([\n          loadLeads(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Updated ${updateCount} lead(s) to ${newStatus}`);\n      } catch (error) {\n        console.error(\"Failed to update leads:\", error);\n        toast.error(\"Failed to update leads\");\n      }\n    } else {\n      if (!selectedLeads || selectedLeads.size === 0) {\n        toast.error(\"No leads selected\");\n        return;\n      }\n\n      try {\n        const promises = [...selectedLeads].map(id =>\n          Lead.update(id, { status: newStatus })\n        );\n\n        await Promise.all(promises);\n        setSelectedLeads(new Set());\n        clearCache('Lead');\n        await Promise.all([\n          loadLeads(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Updated ${promises.length} lead(s) to ${newStatus}`);\n      } catch (error) {\n        console.error(\"Failed to update leads:\", error);\n        toast.error(\"Failed to update leads\");\n      }\n    }\n  };\n\n  const handleBulkAssign = async (assignedTo) => {\n    if (selectAllMode) {\n      if (!window.confirm(`Assign ALL ${totalItems} lead(s) matching current filters?`)) return;\n\n      try {\n        let currentFilter = getTenantFilter();\n\n        if (statusFilter !== \"all\") {\n          currentFilter = { ...currentFilter, status: statusFilter };\n        }\n\n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          currentFilter = {\n            ...currentFilter,\n            $or: [\n              { first_name: searchRegex },\n              { last_name: searchRegex },\n              { email: searchRegex },\n              { phone: searchRegex },\n              { company: searchRegex },\n              { job_title: searchRegex }\n            ]\n          };\n        }\n\n        if (selectedTags.length > 0) {\n          currentFilter = { ...currentFilter, tags: { $all: selectedTags } };\n        }\n\n        const allLeadsToAssignServerFilter = await Lead.filter(currentFilter, 'id', 10000);\n        let allLeadsToAssign = allLeadsToAssignServerFilter;\n\n        if (ageFilter !== 'all') {\n          const selectedBucket = ageBuckets.find(b => b.value === ageFilter);\n          if (selectedBucket) {\n            allLeadsToAssign = allLeadsToAssignServerFilter.filter(lead => {\n              const age = calculateLeadAge(lead.created_date);\n              return age >= selectedBucket.min && age <= selectedBucket.max;\n            });\n          }\n        }\n        const updateCount = allLeadsToAssign.length;\n\n        // Update in batches\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allLeadsToAssign.length; i += BATCH_SIZE) {\n          const batch = allLeadsToAssign.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(l => Lead.update(l.id, { assigned_to: assignedTo || null })));\n        }\n\n        setSelectedLeads(new Set());\n        setSelectAllMode(false);\n        clearCache('Lead');\n        await Promise.all([\n          loadLeads(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Assigned ${updateCount} lead(s)`);\n      } catch (error) {\n        console.error(\"Failed to assign leads:\", error);\n        toast.error(\"Failed to assign leads\");\n      }\n    } else {\n      if (!selectedLeads || selectedLeads.size === 0) {\n        toast.error(\"No leads selected\");\n        return;\n      }\n\n      try {\n        const promises = [...selectedLeads].map(id =>\n          Lead.update(id, { assigned_to: assignedTo || null })\n        );\n\n        await Promise.all(promises);\n        setSelectedLeads(new Set());\n        clearCache('Lead');\n        await Promise.all([\n          loadLeads(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Assigned ${promises.length} lead(s)`);\n      } catch (error) {\n        console.error(\"Failed to assign leads:\", error);\n        toast.error(\"Failed to assign leads\");\n      }\n    }\n  };\n\n  const toggleSelection = (id) => {\n    const newSet = new Set(selectedLeads);\n    if (newSet.has(id)) {\n      newSet.delete(id);\n    } else {\n      newSet.add(id);\n    }\n    setSelectedLeads(newSet);\n    setSelectAllMode(false);\n  };\n\n  const toggleSelectAll = () => {\n    if (selectedLeads.size === leads.length && leads.length > 0) {\n      setSelectedLeads(new Set());\n      setSelectAllMode(false);\n    } else {\n      setSelectedLeads(new Set(leads.map(l => l.id)));\n      setSelectAllMode(false);\n    }\n  };\n\n  const handleSelectAllRecords = () => {\n    setSelectAllMode(true);\n    setSelectedLeads(new Set(leads.map(l => l.id))); // This will still select only current page for display, but logic marks all\n  };\n\n  const handleClearSelection = () => {\n    setSelectedLeads(new Set());\n    setSelectAllMode(false);\n  };\n\n  const handleViewDetails = (lead) => {\n    setDetailLead(lead);\n    setIsDetailOpen(true);\n  };\n\n  const handleConvert = (lead) => {\n    setConvertingLead(lead);\n    setIsConversionDialogOpen(true);\n  };\n\n  const handleConversionSuccess = async () => {\n    setIsConversionDialogOpen(false);\n    setConvertingLead(null);\n    clearCache('Lead');\n    clearCache('Contact');\n    clearCache('Account');\n    await Promise.all([\n      loadLeads(currentPage, pageSize),\n      loadTotalStats()\n    ]);\n  };\n\n  const handleRefresh = async () => {\n    clearCache('Lead');\n    clearCache('Employee');\n    clearCache('User');\n    clearCache('Account');\n    supportingDataLoaded.current = false;\n    await Promise.all([\n      loadLeads(currentPage, pageSize),\n      loadTotalStats()\n    ]);\n    toast.success(\"Leads refreshed\");\n  };\n\n  const toggleTag = useCallback((tagName) => {\n    setSelectedTags(prev => {\n      const newTags = prev.includes(tagName)\n        ? prev.filter(t => t !== tagName)\n        : [...prev, tagName];\n      setCurrentPage(1);\n      return newTags;\n    });\n  }, []);\n\n  const clearTags = useCallback(() => {\n    setSelectedTags([]);\n    setCurrentPage(1);\n  }, []);\n\n  const handleStatusFilterClick = (status) => {\n    setStatusFilter(status);\n    setCurrentPage(1);\n  };\n\n  const handleClearFilters = () => {\n    setSearchTerm(\"\");\n    setStatusFilter(\"all\");\n    setAgeFilter(\"all\");\n    setSelectedTags([]);\n    setCurrentPage(1);\n    handleClearSelection();\n  };\n\n  const hasActiveFilters = useMemo(() => {\n    return searchTerm !== \"\" || statusFilter !== \"all\" || ageFilter !== \"all\" || selectedTags.length > 0;\n  }, [searchTerm, statusFilter, ageFilter, selectedTags]);\n\n  // Matching the stat card colors - semi-transparent backgrounds\n  const statusColors = {\n    new: 'bg-blue-900/20 text-blue-300 border-blue-700',\n    contacted: 'bg-indigo-900/20 text-indigo-300 border-indigo-700',\n    qualified: 'bg-emerald-900/20 text-emerald-300 border-emerald-700',\n    unqualified: 'bg-yellow-900/20 text-yellow-300 border-yellow-700',\n    converted: 'bg-green-900/20 text-green-300 border-green-700',\n    lost: 'bg-red-900/20 text-red-300 border-red-700'\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 p-6 flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-400\" />\n      </div>\n    );\n  }\n\n  return (\n    <TooltipProvider>\n      <div className=\"min-h-screen bg-slate-900 p-4 sm:p-6\">\n        <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto bg-slate-800 border-slate-700 text-slate-200\">\n            <DialogHeader>\n              <DialogTitle className=\"text-slate-100\">\n                {editingLead ? \"Edit Lead\" : \"Add New Lead\"}\n              </DialogTitle>\n            </DialogHeader>\n            <LeadForm\n              lead={editingLead}\n              onSave={handleSave}\n              onCancel={() => {\n                setIsFormOpen(false);\n                setEditingLead(null);\n              }}\n              user={user}\n              employees={employees}\n              isManager={isManager}\n            />\n          </DialogContent>\n        </Dialog>\n\n        <CsvImportDialog\n          open={isImportOpen}\n          onOpenChange={setIsImportOpen}\n          schema={Lead.schema ? Lead.schema() : null}\n          onSuccess={async () => {\n            clearCache('Lead');\n            await Promise.all([\n              loadLeads(1, pageSize),\n              loadTotalStats()\n            ]);\n          }}\n        />\n\n        <LeadConversionDialog\n          lead={convertingLead}\n          open={isConversionDialogOpen}\n          onOpenChange={setIsConversionDialogOpen}\n          onSuccess={handleConversionSuccess}\n        />\n\n        <LeadDetailPanel\n          lead={detailLead}\n          assignedUserName={employeesMap[detailLead?.assigned_to] || usersMap[detailLead?.assigned_to] || detailLead?.assigned_to_name}\n          open={isDetailOpen}\n          onOpenChange={() => {\n            setIsDetailOpen(false);\n            setDetailLead(null);\n          }}\n          onEdit={(lead) => {\n            setEditingLead(lead);\n            setIsFormOpen(true);\n            setIsDetailOpen(false);\n          }}\n          onDelete={async (id) => {\n            await handleDelete(id);\n            setIsDetailOpen(false);\n          }}\n          onConvert={(lead) => {\n            setIsDetailOpen(false);\n            handleConvert(lead);\n          }}\n          user={user}\n        />\n\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-100 mb-2\">Leads</h1>\n            <p className=\"text-slate-400\">\n              Track and manage your sales leads and prospects.\n            </p>\n          </div>\n          <div className=\"flex flex-wrap items-center gap-2\">\n            {isAdmin && (\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant={showTestData ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => {\n                      setShowTestData(!showTestData);\n                      setCurrentPage(1); // Reset page on filter change\n                      clearCache('Lead'); // Clear cache as filter changes leads data\n                    }}\n                    className={showTestData\n                      ? \"bg-amber-600 hover:bg-amber-700 text-white\"\n                      : \"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                    }\n                  >\n                    {showTestData ? (\n                      <>\n                        <Eye className=\"w-4 h-4 mr-2\" />\n                        Showing Test Data\n                      </>\n                    ) : (\n                      <>\n                        <Eye className=\"w-4 h-4 mr-2\" />\n                        Show Test Data\n                      </>\n                    )}\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>{showTestData ? 'Hide test/sample data' : 'Show test/sample data'}</p>\n                </TooltipContent>\n              </Tooltip>\n            )}\n            <RefreshButton onClick={handleRefresh} loading={loading} />\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setViewMode(viewMode === \"list\" ? \"grid\" : \"list\")}\n                  className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                >\n                  {viewMode === \"list\" ? <Grid className=\"w-4 h-4\" /> : <List className=\"w-4 h-4\" />}\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Switch to {viewMode === \"list\" ? \"card\" : \"list\"} view</p>\n              </TooltipContent>\n            </Tooltip>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsImportOpen(true)}\n                  className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Import\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Import leads from CSV</p>\n              </TooltipContent>\n            </Tooltip>\n            <CsvExportButton\n              entityName=\"Lead\"\n              data={leads}\n              filename=\"leads_export\"\n            />\n            {(selectedLeads.size > 0 || selectAllMode) && (\n              <BulkActionsMenu\n                selectedCount={selectAllMode ? totalItems : selectedLeads.size}\n                onBulkStatusChange={handleBulkStatusChange}\n                onBulkAssign={handleBulkAssign}\n                onBulkDelete={handleBulkDelete}\n                employees={employees}\n                selectAllMode={selectAllMode}\n                totalCount={totalItems}\n              />\n            )}\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  onClick={() => {\n                    setEditingLead(null);\n                    setIsFormOpen(true);\n                  }}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Lead\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Create new lead</p>\n              </TooltipContent>\n            </Tooltip>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 md:grid-cols-7 gap-4 mb-6\">\n          {[\n            {\n              label: 'Total Leads',\n              value: totalStats.total,\n              filter: 'all',\n              bgColor: 'bg-slate-800',\n              tooltip: 'total_all'\n            },\n            {\n              label: 'New',\n              value: totalStats.new,\n              filter: 'new',\n              bgColor: 'bg-blue-900/20',\n              borderColor: 'border-blue-700',\n              tooltip: 'lead_new'\n            },\n            {\n              label: 'Contacted',\n              value: totalStats.contacted,\n              filter: 'contacted',\n              bgColor: 'bg-indigo-900/20',\n              borderColor: 'border-indigo-700',\n              tooltip: 'lead_contacted'\n            },\n            {\n              label: 'Qualified',\n              value: totalStats.qualified,\n              filter: 'qualified',\n              bgColor: 'bg-emerald-900/20',\n              borderColor: 'border-emerald-700',\n              tooltip: 'lead_qualified'\n            },\n            {\n              label: 'Unqualified',\n              value: totalStats.unqualified,\n              filter: 'unqualified',\n              bgColor: 'bg-yellow-900/20',\n              borderColor: 'border-yellow-700',\n              tooltip: 'lead_unqualified'\n            },\n            {\n              label: 'Converted',\n              value: totalStats.converted,\n              filter: 'converted',\n              bgColor: 'bg-green-900/20',\n              borderColor: 'border-green-700',\n              tooltip: 'lead_converted'\n            },\n            {\n              label: 'Lost',\n              value: totalStats.lost,\n              filter: 'lost',\n              bgColor: 'bg-red-900/20',\n              borderColor: 'border-red-700',\n              tooltip: 'lead_lost'\n            },\n          ].map((stat) => (\n            <div\n              key={stat.label}\n              className={`${stat.bgColor} ${stat.borderColor || 'border-slate-700'} border rounded-lg p-4 cursor-pointer hover:scale-105 transition-all ${\n                statusFilter === stat.filter ? 'ring-2 ring-blue-500 ring-offset-2 ring-offset-slate-900' : ''\n              }`}\n              onClick={() => handleStatusFilterClick(stat.filter)}\n            >\n              <div className=\"flex items-center justify-between mb-1\">\n                <p className=\"text-sm text-slate-400\">{stat.label}</p>\n                <StatusHelper statusKey={stat.tooltip} />\n              </div>\n              <p className=\"text-2xl font-bold text-slate-100\">{stat.value}</p>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"flex flex-col lg:flex-row gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-3 w-5 h-5 text-slate-500\" />\n            <Input\n              placeholder=\"Search leads by name, email, phone, company, or job title...\"\n              value={searchTerm}\n              onChange={(e) => {\n                setSearchTerm(e.target.value);\n                setCurrentPage(1);\n              }}\n              className=\"pl-10 bg-slate-800 border-slate-700 text-slate-200\"\n            />\n          </div>\n\n          <div className=\"flex flex-wrap gap-2\">\n            {/* Age Filter */}\n            <Select value={ageFilter} onValueChange={(value) => { setAgeFilter(value); setCurrentPage(1); }}>\n              <SelectTrigger className=\"w-40 bg-slate-800 border-slate-700 text-slate-200\">\n                <SelectValue placeholder=\"Age filter\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-700\">\n                {ageBuckets.map(bucket => (\n                  <SelectItem key={bucket.value} value={bucket.value} className=\"text-slate-200 hover:bg-slate-700\">\n                    <span className={bucket.color}>{bucket.label}</span>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <TagFilter\n              allTags={allTags}\n              selectedTags={selectedTags}\n              onTagsChange={(newTags) => {\n                setSelectedTags(newTags);\n                setCurrentPage(1);\n              }}\n            />\n\n            {hasActiveFilters && (\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleClearFilters}\n                    className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                  >\n                    <X className=\"w-4 h-4 mr-1\" />\n                    Clear\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Clear all filters</p>\n                </TooltipContent>\n              </Tooltip>\n            )}\n          </div>\n        </div>\n\n        {/* Select All Banner */}\n        {selectedLeads.size === leads.length && leads.length > 0 && !selectAllMode && totalItems > leads.length && (\n          <div className=\"mb-4 bg-blue-900/20 border border-blue-700 rounded-lg p-4 flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"text-blue-200\">\n                All {leads.length} leads on this page are selected.\n              </span>\n              <Button\n                variant=\"link\"\n                onClick={handleSelectAllRecords}\n                className=\"text-blue-400 hover:text-blue-300 p-0 h-auto\"\n              >\n                Select all {totalItems} leads matching current filters\n              </Button>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClearSelection}\n              className=\"text-slate-400 hover:text-slate-200\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        )}\n\n        {selectAllMode && (\n          <div className=\"mb-4 bg-blue-900/20 border border-blue-700 rounded-lg p-4 flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"text-blue-200 font-semibold\">\n                All {totalItems} leads matching current filters are selected.\n              </span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClearSelection}\n              className=\"text-slate-400 hover:text-slate-200\"\n            >\n              Clear selection\n            </Button>\n          </div>\n        )}\n\n        {loading && !initialLoadDone.current ? (\n          <div className=\"flex items-center justify-center py-20\">\n            <div className=\"text-center\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-blue-400 mx-auto mb-4\" />\n              <p className=\"text-slate-400\">Loading leads...</p>\n            </div>\n          </div>\n        ) : leads.length === 0 ? (\n          <div className=\"bg-slate-800/50 border border-slate-700 rounded-lg p-12 text-center\">\n            <AlertCircle className=\"w-12 h-12 text-slate-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-slate-300 mb-2\">No leads found</h3>\n            <p className=\"text-slate-500 mb-6\">\n              {hasActiveFilters\n                ? \"Try adjusting your filters or search term\"\n                : \"Get started by adding your first lead\"}\n            </p>\n            {!hasActiveFilters && (\n              <Button\n                onClick={() => setIsFormOpen(true)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Your First Lead\n              </Button>\n            )}\n          </div>\n        ) : viewMode === \"list\" ? (\n          <>\n            {/* List/Table View */}\n            <div className=\"bg-slate-800 border border-slate-700 rounded-lg overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-slate-700/50\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-left\">\n                        <Checkbox\n                          checked={selectedLeads.size === leads.length && leads.length > 0 && !selectAllMode}\n                          onCheckedChange={toggleSelectAll}\n                          className=\"border-slate-600\"\n                        />\n                      </th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Name</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Email</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Phone</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Company</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Job Title</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Age (Days)</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Assigned To</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Status</th>\n                      <th className=\"px-4 py-3 text-left text-sm font-medium text-slate-300\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-slate-700\">\n                    {leads.map((lead) => {\n                      const age = calculateLeadAge(lead.created_date);\n                      const ageBucket = getLeadAgeBucket(lead);\n                      \n                      return (\n                        <tr\n                          key={lead.id}\n                          className=\"hover:bg-slate-700/30 transition-colors\"\n                        >\n                          <td className=\"px-4 py-3\">\n                            <Checkbox\n                              checked={selectedLeads.has(lead.id) || selectAllMode}\n                              onCheckedChange={() => toggleSelection(lead.id)}\n                              className=\"border-slate-600\"\n                            />\n                          </td>\n                          <td className=\"px-4 py-3 text-sm text-slate-300\">\n                            {lead.first_name} {lead.last_name}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm text-slate-300\">\n                            {lead.email || <span className=\"text-slate-500\">ΓÇö</span>}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"text-slate-300\">\n                                {lead.phone || <span className=\"text-slate-500\">ΓÇö</span>}\n                              </span>\n                              {lead.do_not_call && (\n                                <Badge className=\"bg-red-900/30 text-red-400 border-red-700 text-xs px-1.5 py-0\">\n                                  DNC\n                                </Badge>\n                              )}\n                              {lead.do_not_text && (\n                                <Badge className=\"bg-red-900/30 text-red-400 border-red-700 text-xs px-1.5 py-0\">\n                                  DNT\n                                </Badge>\n                              )}\n                            </div>\n                          </td>\n                          <td className=\"px-4 py-3 text-sm text-slate-300\">\n                            {lead.company || <span className=\"text-slate-500\">ΓÇö</span>}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm text-slate-300\">\n                            {lead.job_title || <span className=\"text-slate-500\">ΓÇö</span>}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <span className={`font-semibold ${ageBucket?.color || 'text-slate-300'}`}>\n                              {age >= 0 ? `${age} ${age === 1 ? 'day' : 'days'}` : <span className=\"text-slate-500\">ΓÇö</span>}\n                            </span>\n                          </td>\n                          <td className=\"px-4 py-3 text-sm text-slate-300\">\n                            {employeesMap[lead.assigned_to] || usersMap[lead.assigned_to] || lead.assigned_to_name || <span className=\"text-slate-500\">Unassigned</span>}\n                          </td>\n                          <td className=\"cursor-pointer p-3\" onClick={() => handleViewDetails(lead)}>\n                            <Badge className={`${statusColors[lead.status]} capitalize text-xs font-semibold border`}>\n                              {lead.status}\n                            </Badge>\n                          </td>\n                          <td className=\"px-4 py-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"icon\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleViewDetails(lead);\n                                    }}\n                                    className=\"h-8 w-8 text-slate-400 hover:text-blue-400\"\n                                  >\n                                    <Eye className=\"w-4 h-4\" />\n                                  </Button>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p>View details</p>\n                                </TooltipContent>\n                              </Tooltip>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"icon\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      setEditingLead(lead);\n                                      setIsFormOpen(true);\n                                    }}\n                                    className=\"h-8 w-8 text-slate-400 hover:text-blue-400\"\n                                  >\n                                    <Edit className=\"w-4 h-4\" />\n                                  </Button>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p>Edit lead</p>\n                                </TooltipContent>\n                              </Tooltip>\n                              {lead.status !== 'converted' && (\n                                <Tooltip>\n                                  <TooltipTrigger asChild>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"icon\"\n                                      onClick={(e) => {\n                                        e.stopPropagation();\n                                        handleConvert(lead);\n                                      }}\n                                      className=\"h-8 w-8 text-green-400 hover:text-green-300 hover:bg-green-900/20\"\n                                    >\n                                      <UserCheck className=\"w-4 h-4\" />\n                                    </Button>\n                                  </TooltipTrigger>\n                                  <TooltipContent>\n                                    <p>Convert to contact</p>\n                                  </TooltipContent>\n                                </Tooltip>\n                              )}\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"icon\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleDelete(lead.id);\n                                    }}\n                                    className=\"h-8 w-8 text-red-400 hover:text-red-300 hover:bg-red-900/20\"\n                                  >\n                                    <Trash2 className=\"w-4 h-4\" />\n                                  </Button>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p>Delete lead</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </div>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            <Pagination\n              currentPage={currentPage}\n              totalPages={Math.ceil(totalItems / pageSize)}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              onPageChange={handlePageChange}\n              onPageSizeChange={handlePageSizeChange}\n              loading={loading}\n            />\n          </>\n        ) : (\n          <>\n            {/* Card View */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <AnimatePresence>\n                {leads.map((lead) => (\n                  <LeadCard\n                    key={lead.id}\n                    lead={lead}\n                    onEdit={(l) => {\n                      setEditingLead(l);\n                      setIsFormOpen(true);\n                    }}\n                    onDelete={handleDelete}\n                    onViewDetails={handleViewDetails}\n                    onClick={() => handleViewDetails(lead)}\n                    isSelected={selectedLeads.has(lead.id) || selectAllMode}\n                    onSelect={() => toggleSelection(lead.id)}\n                    onConvert={handleConvert}\n                    user={user}\n                  />\n                ))}\n              </AnimatePresence>\n            </div>\n\n            <Pagination\n              currentPage={currentPage}\n              totalPages={Math.ceil(totalItems / pageSize)}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              onPageChange={handlePageChange}\n              onPageSizeChange={handlePageSizeChange}\n              loading={loading}\n            />\n          </>\n        )}\n      </div>\n    </TooltipProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Opportunities.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setShowTestData' is assigned a value but never used.","line":66,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"setShowTestData"},"fix":{"range":[3674,3691],"text":""},"desc":"Remove unused variable 'setShowTestData'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'supportingDataLoaded.current'. Either exclude it or remove the dependency array. Mutable values like 'supportingDataLoaded.current' aren't valid dependencies because mutating them doesn't re-render the component.","line":234,"column":6,"nodeType":"ArrayExpression","endLine":234,"endColumn":105,"suggestions":[{"desc":"Update the dependencies array to be: [user, selectedTenantId, selectedEmail, loadTotalStats, showTestData]","fix":{"range":[10037,10136],"text":"[user, selectedTenantId, selectedEmail, loadTotalStats, showTestData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'selectedTenantId'. Either exclude it or remove the dependency array.","line":293,"column":6,"nodeType":"ArrayExpression","endLine":293,"endColumn":86,"suggestions":[{"desc":"Update the dependencies array to be: [user, searchTerm, stageFilter, selectedTags, getTenantFilter]","fix":{"range":[12053,12133],"text":"[user, searchTerm, stageFilter, selectedTags, getTenantFilter]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'supportingDataLoaded.current'. Either exclude it or remove the dependency array. Mutable values like 'supportingDataLoaded.current' aren't valid dependencies because mutating them doesn't re-render the component.","line":300,"column":6,"nodeType":"ArrayExpression","endLine":300,"endColumn":170,"suggestions":[{"desc":"Update the dependencies array to be: [user, selectedTenantId, currentPage, pageSize, selectedEmail, searchTerm, stageFilter, selectedTags, loadOpportunities, showTestData]","fix":{"range":[12422,12586],"text":"[user, selectedTenantId, currentPage, pageSize, selectedEmail, searchTerm, stageFilter, selectedTags, loadOpportunities, showTestData]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'checked' is defined but never used.","line":1108,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":1108,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"checked"},"fix":{"range":[41825,41832],"text":""},"desc":"Remove unused variable 'checked'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport { Opportunity } from \"@/api/entities\";\nimport { Account } from \"@/api/entities\";\nimport { Contact } from \"@/api/entities\";\nimport { Lead } from \"@/api/entities\";\nimport { User } from \"@/api/entities\";\nimport { Employee } from \"@/api/entities\";\nimport { useApiManager } from \"../components/shared/ApiManager\";\nimport OpportunityCard from \"../components/opportunities/OpportunityCard\";\nimport OpportunityForm from \"../components/opportunities/OpportunityForm\";\nimport OpportunityDetailPanel from \"../components/opportunities/OpportunityDetailPanel\";\nimport OpportunityKanbanBoard from \"../components/opportunities/OpportunityKanbanBoard\";\nimport BulkActionsMenu from \"../components/opportunities/BulkActionsMenu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Search, Upload, Loader2, Grid, List, AlertCircle, X, Edit, Eye, Trash2, AppWindow } from \"lucide-react\";\nimport { AnimatePresence } from \"framer-motion\";\nimport CsvExportButton from \"../components/shared/CsvExportButton\";\nimport CsvImportDialog from \"../components/shared/CsvImportDialog\";\nimport { useTenant } from '../components/shared/tenantContext';\nimport Pagination from \"../components/shared/Pagination\";\nimport { toast } from \"sonner\";\nimport TagFilter from \"../components/shared/TagFilter\";\nimport { useEmployeeScope } from \"../components/shared/EmployeeScopeContext\";\nimport RefreshButton from \"../components/shared/RefreshButton\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { format } from \"date-fns\";\nimport SimpleModal from \"../components/shared/SimpleModal\";\nimport StatusHelper from \"../components/shared/StatusHelper\";\nimport { loadUsersSafely } from \"../components/shared/userLoader\";\n\nconst stageColors = {\n  prospecting: \"bg-blue-900/20 text-blue-300 border-blue-700\",\n  qualification: \"bg-indigo-900/20 text-indigo-300 border-indigo-700\",\n  proposal: \"bg-purple-900/20 text-purple-300 border-purple-700\",\n  negotiation: \"bg-yellow-900/20 text-yellow-300 border-yellow-700\",\n  closed_won: \"bg-emerald-900/20 text-emerald-300 border-emerald-700\",\n  closed_lost: \"bg-red-900/20 text-red-300 border-red-700\"\n};\n\nexport default function OpportunitiesPage() {\n  const [opportunities, setOpportunities] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [contacts, setContacts] = useState([]);\n  const [leads, setLeads] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [stageFilter, setStageFilter] = useState(\"all\");\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingOpportunity, setEditingOpportunity] = useState(null);\n  const [viewMode, setViewMode] = useState(\"table\");\n  const [selectedOpportunities, setSelectedOpportunities] = useState(() => new Set());\n  const [selectAllMode, setSelectAllMode] = useState(false);\n  const [isImportOpen, setIsImportOpen] = useState(false);\n  const [user, setUser] = useState(null);\n  const { selectedTenantId } = useTenant();\n  const [detailOpportunity, setDetailOpportunity] = useState(null);\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [showTestData, setShowTestData] = useState(false); // Added showTestData state\n\n  // Stats for ALL opportunities (not just current page)\n  const [totalStats, setTotalStats] = useState({\n    total: 0,\n    prospecting: 0,\n    qualification: 0,\n    proposal: 0,\n    negotiation: 0,\n    closed_won: 0,\n    closed_lost: 0\n  });\n\n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(25);\n  const [totalItems, setTotalItems] = useState(0);\n\n  const { cachedRequest, clearCache } = useApiManager();\n  const { selectedEmail } = useEmployeeScope();\n\n  // Ref to track if initial load is done\n  const initialLoadDone = useRef(false);\n  const supportingDataLoaded = useRef(false); // NEW: Track if supporting data is loaded\n\n  // Load user once\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const currentUser = await User.me();\n        if (import.meta.env.DEV) {\n          console.log('[Opportunities] User loaded:', {\n            email: currentUser.email,\n            role: currentUser.role,\n            employee_role: currentUser.employee_role,\n            tenant_id: currentUser.tenant_id\n          });\n        }\n        setUser(currentUser);\n      } catch (error) {\n        if (import.meta.env.DEV) {\n          console.error(\"Failed to load user:\", error);\n        }\n        toast.error(\"Failed to load user information\");\n      }\n    };\n    loadUser();\n  }, []);\n\n  const getTenantFilter = useCallback(() => {\n    if (!user) return {};\n    \n    let filter = {};\n    \n    // Tenant filtering\n    if (user.role === 'superadmin' || user.role === 'admin') {\n      if (selectedTenantId) {\n        filter.tenant_id = selectedTenantId;\n      }\n    } else if (user.tenant_id) {\n      filter.tenant_id = user.tenant_id;\n    }\n    \n    // Employee scope filtering from context\n    if (selectedEmail && selectedEmail !== 'all') {\n      if (selectedEmail === 'unassigned') {\n        filter.$or = [{ assigned_to: null }, { assigned_to: '' }];\n      } else {\n        filter.assigned_to = selectedEmail;\n      }\n    } else if (user.employee_role === 'employee' && user.role !== 'admin' && user.role !== 'superadmin') {\n      // Regular employees only see their own data\n      filter.assigned_to = user.email;\n    }\n    \n    // Test data filtering\n    if (!showTestData) {\n      filter.is_test_data = { $ne: true };\n    }\n    \n    return filter;\n  }, [user, selectedTenantId, showTestData, selectedEmail]);\n\n  // Load supporting data (accounts, contacts, users, employees) ONCE - OPTIMIZED WITH CONCURRENT FETCHING\n  useEffect(() => {\n    // CRITICAL: Only load once if supportingDataLoaded.current is true or if user is not available yet.\n    if (!user || supportingDataLoaded.current) return;\n\n    const loadSupportingData = async () => {\n      try {\n        const tenantFilter = getTenantFilter();\n        \n        if (import.meta.env.DEV) {\n          console.log('[Opportunities] Loading supporting data with tenant filter:', tenantFilter);\n        }\n\n        // PERFORMANCE OPTIMIZATION: Load all data concurrently using Promise.all()\n        // This eliminates artificial delays and leverages ApiOptimizer's batching\n        const [accountsData, contactsData, leadsData, usersData, employeesData] = await Promise.all([\n          cachedRequest('Account', 'filter', { filter: tenantFilter }, () => Account.filter(tenantFilter)),\n          cachedRequest('Contact', 'filter', { filter: tenantFilter }, () => Contact.filter(tenantFilter)),\n          cachedRequest('Lead', 'filter', { filter: tenantFilter }, () => Lead.filter(tenantFilter)),\n          loadUsersSafely(user, selectedTenantId, cachedRequest),\n          cachedRequest('Employee', 'filter', { filter: tenantFilter }, () => Employee.filter(tenantFilter))\n        ]);\n\n        // Set all data at once\n        setAccounts(accountsData || []);\n        setContacts(contactsData || []);\n        setLeads(leadsData || []);\n        setUsers(usersData || []);\n        setEmployees(employeesData || []);\n        \n        if (import.meta.env.DEV) {\n          console.log('[Opportunities] Supporting data loaded successfully');\n        }\n        supportingDataLoaded.current = true; // Mark as loaded\n      } catch (error) {\n        if (import.meta.env.DEV) {\n          console.error(\"[pages/Opportunities.js] Failed to load supporting data:\", error);\n        }\n        // Don't show error toast - continue with empty arrays\n        setEmployees([]);\n        setAccounts([]);\n        setContacts([]);\n        setLeads([]);\n        setUsers([user]); // Fallback to current user if all else fails\n      }\n    };\n\n    loadSupportingData();\n  }, [user, selectedTenantId, selectedEmail, showTestData, getTenantFilter, cachedRequest]);\n\n  const loadTotalStats = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      const effectiveFilter = getTenantFilter();\n      \n      console.log('[Opportunities] Loading stats with filter:', effectiveFilter);\n\n      // Get up to 10000 opportunities for stats calculation\n      const allOpportunities = await Opportunity.filter(effectiveFilter, 'id', 10000);\n      \n      console.log('[Opportunities] Loaded opportunities for stats:', allOpportunities?.length);\n      \n      const stats = {\n        total: allOpportunities?.length || 0,\n        prospecting: allOpportunities?.filter(o => o.stage === 'prospecting').length || 0,\n        qualification: allOpportunities?.filter(o => o.stage === 'qualification').length || 0,\n        proposal: allOpportunities?.filter(o => o.stage === 'proposal').length || 0,\n        negotiation: allOpportunities?.filter(o => o.stage === 'negotiation').length || 0,\n        closed_won: allOpportunities?.filter(o => o.stage === 'closed_won').length || 0,\n        closed_lost: allOpportunities?.filter(o => o.stage === 'closed_lost').length || 0\n      };\n\n      console.log('[Opportunities] Calculated stats:', stats);\n      setTotalStats(stats);\n    } catch (error) {\n      console.error(\"Failed to load total stats:\", error);\n    }\n  }, [user, getTenantFilter]); // Removed selectedTenantId, selectedEmail, getFilter as they are implicitly handled by getTenantFilter\n\n  // Load total stats when dependencies change\n  useEffect(() => {\n    if (user && supportingDataLoaded.current) { // Only load total stats after supporting data is loaded\n      loadTotalStats();\n    }\n  }, [user, selectedTenantId, selectedEmail, loadTotalStats, supportingDataLoaded.current, showTestData]); // Added showTestData here\n\n  // Main data loading function with proper pagination\n  const loadOpportunities = useCallback(async (page = 1, size = 25) => {\n    if (!user) return;\n\n    setLoading(true);\n    try {\n      let effectiveFilter = getTenantFilter();\n      \n      // Apply stage filter\n      if (stageFilter !== \"all\") {\n        effectiveFilter = { ...effectiveFilter, stage: stageFilter };\n      }\n\n      // Apply search term filter\n      if (searchTerm) {\n        const searchRegex = { $regex: searchTerm, $options: 'i' };\n        effectiveFilter = {\n          ...effectiveFilter,\n          $or: [\n            { name: searchRegex },\n            { account_name: searchRegex },\n            { contact_name: searchRegex },\n            { description: searchRegex }\n          ]\n        };\n      }\n\n      // Apply tag filter\n      if (selectedTags.length > 0) {\n        effectiveFilter = { ...effectiveFilter, tags: { $all: selectedTags } };\n      }\n\n      // Calculate offset for pagination\n      const skip = (page - 1) * size;\n\n      console.log('[Opportunities] Loading page:', page, 'size:', size, 'skip:', skip, 'filter:', effectiveFilter);\n\n      const opportunitiesData = await Opportunity.filter(effectiveFilter, '-close_date', size, skip);\n      \n      // Get total count for pagination\n      const countQuery = await Opportunity.filter(effectiveFilter, 'id', 10000);\n      const totalCount = countQuery?.length || 0;\n\n      console.log('[Opportunities] Loaded:', opportunitiesData?.length, 'Total:', totalCount);\n\n      setOpportunities(opportunitiesData || []);\n      setTotalItems(totalCount);\n      setCurrentPage(page);\n      initialLoadDone.current = true;\n    } catch (error) {\n      console.error(\"Failed to load opportunities:\", error);\n      toast.error(\"Failed to load opportunities\");\n      setOpportunities([]);\n      setTotalItems(0);\n    } finally {\n      setLoading(false);\n    }\n  }, [user, selectedTenantId, searchTerm, stageFilter, selectedTags, getTenantFilter]); // Removed getFilter, added getTenantFilter\n\n  // Load opportunities when dependencies change\n  useEffect(() => {\n    if (user && supportingDataLoaded.current) { // Ensure supporting data is loaded before loading opportunities\n      loadOpportunities(currentPage, pageSize);\n    }\n  }, [user, selectedTenantId, currentPage, pageSize, selectedEmail, searchTerm, stageFilter, selectedTags, loadOpportunities, supportingDataLoaded.current, showTestData]); // Added showTestData\n\n  const handlePageChange = useCallback((newPage) => {\n    setCurrentPage(newPage);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  const handlePageSizeChange = useCallback((newSize) => {\n    setPageSize(newSize);\n    setCurrentPage(1);\n  }, []);\n\n  const allTags = useMemo(() => {\n    if (!Array.isArray(opportunities)) return [];\n    \n    const tagCounts = {};\n    opportunities.forEach(opp => {\n      if (Array.isArray(opp.tags)) {\n        opp.tags.forEach(tag => {\n          if (tag && typeof tag === 'string') {\n            tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n          }\n        });\n      }\n    });\n\n    return Object.entries(tagCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count);\n  }, [opportunities]);\n\n  const usersMap = useMemo(() => {\n    return users.reduce((acc, user) => {\n      acc[user.email] = user.full_name || user.email;\n      return acc;\n    }, {});\n  }, [users]);\n\n  const employeesMap = useMemo(() => {\n    return employees.reduce((acc, employee) => {\n      if (employee.email) {\n        acc[employee.email] = `${employee.first_name} ${employee.last_name}`;\n      }\n      return acc;\n    }, {});\n  }, [employees]);\n\n  const accountsMap = useMemo(() => {\n    return accounts.reduce((acc, account) => {\n      acc[account.id] = account.name;\n      return acc;\n    }, {});\n  }, [accounts]);\n\n  const handleSave = async () => {\n    setIsFormOpen(false);\n    setEditingOpportunity(null);\n    clearCache('Opportunity');\n    await Promise.all([\n      loadOpportunities(currentPage, pageSize),\n      loadTotalStats()\n    ]);\n    toast.success(editingOpportunity ? \"Opportunity updated successfully\" : \"Opportunity created successfully\");\n  };\n\n  const handleDelete = async (id) => {\n    if (!window.confirm(\"Are you sure you want to delete this opportunity?\")) return;\n\n    try {\n      await Opportunity.delete(id);\n      clearCache('Opportunity');\n      await Promise.all([\n        loadOpportunities(currentPage, pageSize),\n        loadTotalStats()\n      ]);\n      toast.success(\"Opportunity deleted successfully\");\n    } catch (error) {\n      console.error(\"Failed to delete opportunity:\", error);\n      toast.error(\"Failed to delete opportunity\");\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    if (selectAllMode) {\n      if (!window.confirm(`Delete ALL ${totalItems} opportunity/opportunities matching current filters? This cannot be undone!`)) return;\n\n      try {\n        let effectiveFilter = getTenantFilter();\n        \n        if (stageFilter !== \"all\") {\n          effectiveFilter = { ...effectiveFilter, stage: stageFilter };\n        }\n\n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          effectiveFilter = {\n            ...effectiveFilter,\n            $or: [\n              { name: searchRegex },\n              { account_name: searchRegex },\n              { contact_name: searchRegex },\n              { description: searchRegex }\n            ]\n          };\n        }\n\n        if (selectedTags.length > 0) {\n          effectiveFilter = { ...effectiveFilter, tags: { $all: selectedTags } };\n        }\n\n        const allOpportunitiesToDelete = await Opportunity.filter(effectiveFilter, 'id', 10000);\n        const deleteCount = allOpportunitiesToDelete.length;\n\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allOpportunitiesToDelete.length; i += BATCH_SIZE) {\n          const batch = allOpportunitiesToDelete.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(o => Opportunity.delete(o.id)));\n          // removed delay(1000); // Add delay between batches\n        }\n\n        setSelectedOpportunities(new Set());\n        setSelectAllMode(false);\n        clearCache('Opportunity');\n        await Promise.all([\n          loadOpportunities(1, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`${deleteCount} opportunity/opportunities deleted`);\n      } catch (error) {\n        console.error(\"Failed to delete opportunities:\", error);\n        toast.error(\"Failed to delete opportunities\");\n      }\n    } else {\n      if (!selectedOpportunities || selectedOpportunities.size === 0) {\n        toast.error(\"No opportunities selected\");\n        return;\n      }\n\n      if (!window.confirm(`Delete ${selectedOpportunities.size} opportunity/opportunities?`)) return;\n\n      try {\n        await Promise.all([...selectedOpportunities].map(id => Opportunity.delete(id)));\n        setSelectedOpportunities(new Set());\n        clearCache('Opportunity');\n        await Promise.all([\n          loadOpportunities(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`${selectedOpportunities.size} opportunity/opportunities deleted`);\n      } catch (error) {\n        console.error(\"Failed to delete opportunities:\", error);\n        toast.error(\"Failed to delete opportunities\");\n      }\n    }\n  };\n\n  const handleBulkStageChange = async (newStage) => {\n    if (selectAllMode) {\n      if (!window.confirm(`Update stage for ALL ${totalItems} opportunity/opportunities matching current filters to ${newStage.replace(/_/g, ' ')}?`)) return;\n\n      try {\n        let effectiveFilter = getTenantFilter();\n        \n        if (stageFilter !== \"all\") {\n          effectiveFilter = { ...effectiveFilter, stage: stageFilter };\n        }\n\n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          effectiveFilter = {\n            ...effectiveFilter,\n            $or: [\n              { name: searchRegex },\n              { account_name: searchRegex },\n              { contact_name: searchRegex },\n              { description: searchRegex }\n            ]\n          };\n        }\n\n        if (selectedTags.length > 0) {\n          effectiveFilter = { ...effectiveFilter, tags: { $all: selectedTags } };\n        }\n\n        const allOpportunitiesToUpdate = await Opportunity.filter(effectiveFilter, 'id', 10000);\n        const updateCount = allOpportunitiesToUpdate.length;\n\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allOpportunitiesToUpdate.length; i += BATCH_SIZE) {\n          const batch = allOpportunitiesToUpdate.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(o => Opportunity.update(o.id, { stage: newStage })));\n          // removed delay(1000); // Add delay between batches\n        }\n\n        setSelectedOpportunities(new Set());\n        setSelectAllMode(false);\n        clearCache('Opportunity');\n        await Promise.all([\n          loadOpportunities(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Updated ${updateCount} opportunity/opportunities to ${newStage.replace(/_/g, ' ')}`);\n      } catch (error) {\n        console.error(\"Failed to update opportunities:\", error);\n        toast.error(\"Failed to update opportunities\");\n      }\n    } else {\n      if (!selectedOpportunities || selectedOpportunities.size === 0) {\n        toast.error(\"No opportunities selected\");\n        return;\n      }\n\n      try {\n        const promises = [...selectedOpportunities].map(id => \n          Opportunity.update(id, { stage: newStage })\n        );\n        \n        await Promise.all(promises);\n        setSelectedOpportunities(new Set());\n        clearCache('Opportunity');\n        await Promise.all([\n          loadOpportunities(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Updated ${promises.length} opportunity/opportunities to ${newStage.replace(/_/g, ' ')}`);\n      } catch (error) {\n        console.error(\"Failed to update opportunities:\", error);\n        toast.error(\"Failed to update opportunities\");\n      }\n    }\n  };\n\n  const handleBulkAssign = async (assignedTo) => {\n    if (selectAllMode) {\n      if (!window.confirm(`Assign ALL ${totalItems} opportunity/opportunities matching current filters?`)) return;\n\n      try {\n        let effectiveFilter = getTenantFilter();\n        \n        if (stageFilter !== \"all\") {\n          effectiveFilter = { ...effectiveFilter, stage: stageFilter };\n        }\n\n        if (searchTerm) {\n          const searchRegex = { $regex: searchTerm, $options: 'i' };\n          effectiveFilter = {\n            ...effectiveFilter,\n            $or: [\n              { name: searchRegex },\n              { account_name: searchRegex },\n              { contact_name: searchRegex },\n              { description: searchRegex }\n            ]\n          };\n        }\n\n        if (selectedTags.length > 0) {\n          effectiveFilter = { ...effectiveFilter, tags: { $all: selectedTags } };\n        }\n\n        const allOpportunitiesToAssign = await Opportunity.filter(effectiveFilter, 'id', 10000);\n        const updateCount = allOpportunitiesToAssign.length;\n\n        const BATCH_SIZE = 50;\n        for (let i = 0; i < allOpportunitiesToAssign.length; i += BATCH_SIZE) {\n          const batch = allOpportunitiesToAssign.slice(i, i + BATCH_SIZE);\n          await Promise.all(batch.map(o => Opportunity.update(o.id, { assigned_to: assignedTo || null })));\n          // removed delay(1000); // Add delay between batches\n        }\n\n        setSelectedOpportunities(new Set());\n        setSelectAllMode(false);\n        clearCache('Opportunity');\n        await Promise.all([\n          loadOpportunities(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Assigned ${updateCount} opportunity/opportunities`);\n      } catch (error) {\n        console.error(\"Failed to assign opportunities:\", error);\n        toast.error(\"Failed to assign opportunities\");\n      }\n    } else {\n      if (!selectedOpportunities || selectedOpportunities.size === 0) {\n        toast.error(\"No opportunities selected\");\n        return;\n      }\n\n      try {\n        const promises = [...selectedOpportunities].map(id => \n          Opportunity.update(id, { assigned_to: assignedTo || null })\n        );\n        \n        await Promise.all(promises);\n        setSelectedOpportunities(new Set());\n        clearCache('Opportunity');\n        await Promise.all([\n          loadOpportunities(currentPage, pageSize),\n          loadTotalStats()\n        ]);\n        toast.success(`Assigned ${promises.length} opportunity/opportunities`);\n      } catch (error) {\n        console.error(\"Failed to assign opportunities:\", error);\n        toast.error(\"Failed to assign opportunities\");\n      }\n    }\n  };\n\n  const toggleSelection = (id) => {\n    const newSet = new Set(selectedOpportunities);\n    if (newSet.has(id)) {\n      newSet.delete(id);\n    } else {\n      newSet.add(id);\n    }\n    setSelectedOpportunities(newSet);\n    setSelectAllMode(false);\n  };\n\n  const toggleSelectAll = () => {\n    if (selectedOpportunities.size === opportunities.length && opportunities.length > 0) {\n      setSelectedOpportunities(new Set());\n      setSelectAllMode(false);\n    } else {\n      setSelectedOpportunities(new Set(opportunities.map(o => o.id)));\n      setSelectAllMode(false);\n    }\n  };\n\n  const handleSelectAllRecords = () => {\n    setSelectAllMode(true);\n    setSelectedOpportunities(new Set(opportunities.map(o => o.id)));\n  };\n\n  const handleClearSelection = () => {\n    setSelectedOpportunities(new Set());\n    setSelectAllMode(false);\n  };\n\n  const handleViewDetails = (opportunity) => {\n    setDetailOpportunity(opportunity);\n    setIsDetailOpen(true);\n  };\n\n  const handleRefresh = async () => {\n    clearCache('Opportunity');\n    clearCache('Employee');\n    clearCache('Account');\n    clearCache('Contact');\n    clearCache('Lead');\n    clearCache('User'); // Added clearing User cache\n    supportingDataLoaded.current = false; // Force reload supporting data next time\n    await Promise.all([\n      loadOpportunities(currentPage, pageSize),\n      loadTotalStats()\n    ]);\n    toast.success(\"Opportunities refreshed\");\n  };\n\n  const handleStageFilterClick = (stage) => {\n    setStageFilter(stage);\n    setCurrentPage(1);\n  };\n\n  const handleClearFilters = () => {\n    setSearchTerm(\"\");\n    setStageFilter(\"all\");\n    setSelectedTags([]);\n    setCurrentPage(1);\n    handleClearSelection();\n  };\n\n  const hasActiveFilters = useMemo(() => {\n    return searchTerm !== \"\" || stageFilter !== \"all\" || selectedTags.length > 0;\n  }, [searchTerm, stageFilter, selectedTags]);\n\n  const handleStageChange = async (opportunityId, newStage) => {\n    try {\n      await Opportunity.update(opportunityId, { stage: newStage });\n      clearCache('Opportunity');\n      await Promise.all([\n        loadOpportunities(currentPage, pageSize),\n        loadTotalStats()\n      ]);\n      toast.success(`Opportunity moved to ${newStage.replace(/_/g, ' ')}`); // Updated toast message as per outline\n      return await Opportunity.filter({ id: opportunityId }, 'id', 1).then(r => r[0]);\n    } catch (error) {\n      console.error(\"Error updating opportunity stage:\", error);\n      toast.error(\"Failed to update opportunity stage\");\n      return null;\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-blue-400 mx-auto mb-4\" />\n          <p className=\"text-slate-400\">Loading user information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <TooltipProvider>\n      <div className=\"min-h-screen bg-slate-900 p-4 sm:p-6\">\n        <SimpleModal\n          open={isFormOpen}\n          onOpenChange={(open) => {\n            console.log('[Opportunities] Modal onOpenChange:', open);\n            setIsFormOpen(open);\n            if (!open) {\n              setEditingOpportunity(null);\n            }\n          }}\n          title={editingOpportunity ? \"Edit Opportunity\" : \"Add New Opportunity\"}\n          size=\"lg\"\n        >\n          <OpportunityForm\n            opportunity={editingOpportunity}\n            accounts={accounts}\n            contacts={contacts}\n            users={users}\n            leads={leads}\n            onSubmit={async (payload) => {\n              try {\n                console.log('[Opportunities] Form submitted:', { isEdit: !!editingOpportunity, payload });\n                if (editingOpportunity) {\n                  await Opportunity.update(editingOpportunity.id, payload);\n                } else {\n                  await Opportunity.create(payload);\n                }\n                await handleSave();\n              } catch (error) {\n                console.error(\"Error saving opportunity:\", error);\n                toast.error(\"Failed to save opportunity\");\n              }\n            }}\n            onCancel={() => {\n              console.log('[Opportunities] Form cancelled');\n              setIsFormOpen(false);\n              setEditingOpportunity(null);\n            }}\n          />\n        </SimpleModal>\n\n        <CsvImportDialog\n          open={isImportOpen}\n          onOpenChange={setIsImportOpen}\n          schema={Opportunity.schema ? Opportunity.schema() : null}\n          onSuccess={async () => {\n            clearCache('Opportunity');\n            await Promise.all([\n              loadOpportunities(1, pageSize),\n              loadTotalStats()\n            ]);\n          }}\n        />\n\n        {isDetailOpen && detailOpportunity && (\n          <OpportunityDetailPanel\n            opportunity={detailOpportunity}\n            accounts={accounts}\n            contacts={contacts}\n            users={users}\n            leads={leads}\n            onClose={() => {\n              setIsDetailOpen(false);\n              setDetailOpportunity(null);\n            }}\n            onEdit={(opp) => {\n              console.log('[Opportunities] Edit clicked from detail panel:', opp.id);\n              setEditingOpportunity(opp);\n              setIsFormOpen(true);\n              setIsDetailOpen(false);\n            }}\n            onDelete={async (id) => {\n              await handleDelete(id);\n              setIsDetailOpen(false);\n            }}\n            onStageChange={handleStageChange}\n          />\n        )}\n\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-100 mb-2\">Opportunities</h1>\n            <p className=\"text-slate-400\">\n              Track and manage your sales opportunities and pipeline.\n            </p>\n          </div>\n          <div className=\"flex flex-wrap items-center gap-2\">\n            <RefreshButton onClick={handleRefresh} loading={loading} />\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    console.log('[Opportunities] View mode button clicked, current:', viewMode);\n                    if (viewMode === \"table\") setViewMode(\"grid\");\n                    else if (viewMode === \"grid\") setViewMode(\"kanban\");\n                    else setViewMode(\"table\");\n                  }}\n                  className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                >\n                  {viewMode === \"table\" ? <List className=\"w-4 h-4\" /> : viewMode === \"grid\" ? <Grid className=\"w-4 h-4\" /> : <AppWindow className=\"w-4 h-4\" />}\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Switch view</p>\n              </TooltipContent>\n            </Tooltip>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    console.log('[Opportunities] Import button clicked');\n                    setIsImportOpen(true);\n                  }}\n                  className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Import\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Import opportunities from CSV</p>\n              </TooltipContent>\n            </Tooltip>\n            <CsvExportButton\n              entityName=\"Opportunity\"\n              data={opportunities}\n              filename=\"opportunities_export\"\n            />\n            {(selectedOpportunities.size > 0 || selectAllMode) && viewMode !== \"kanban\" && (\n              <BulkActionsMenu\n                selectedCount={selectAllMode ? totalItems : selectedOpportunities.size}\n                onBulkStageChange={handleBulkStageChange}\n                onBulkAssign={handleBulkAssign}\n                onBulkDelete={handleBulkDelete}\n                selectAllMode={selectAllMode}\n                totalCount={totalItems}\n              />\n            )}\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  onClick={() => {\n                    console.log('[Opportunities] Add button clicked');\n                    setEditingOpportunity(null);\n                    setIsFormOpen(true);\n                    console.log('[Opportunities] State after click:', { isFormOpen: true, editingOpportunity: null });\n                  }}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Opportunity\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Create new opportunity</p>\n              </TooltipContent>\n            </Tooltip>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 md:grid-cols-7 gap-4 mb-6\">\n          {[\n            { \n              label: 'Total Pipeline', \n              value: totalStats.total, \n              filter: 'all', \n              bgColor: 'bg-slate-800',\n              tooltip: 'total_all'\n            },\n            { \n              label: 'Prospecting', \n              value: totalStats.prospecting, \n              filter: 'prospecting', \n              bgColor: 'bg-blue-900/20', \n              borderColor: 'border-blue-700',\n              tooltip: 'opportunity_prospecting'\n            },\n            { \n              label: 'Qualification', \n              value: totalStats.qualification, \n              filter: 'qualification', \n              bgColor: 'bg-indigo-900/20', \n              borderColor: 'border-indigo-700',\n              tooltip: 'opportunity_qualification'\n            },\n            { \n              label: 'Proposal', \n              value: totalStats.proposal, \n              filter: 'proposal', \n              bgColor: 'bg-purple-900/20', \n              borderColor: 'border-purple-700',\n              tooltip: 'opportunity_proposal'\n            },\n            { \n              label: 'Negotiation', \n              value: totalStats.negotiation, \n              filter: 'negotiation', \n              bgColor: 'bg-yellow-900/20', \n              borderColor: 'border-yellow-700',\n              tooltip: 'opportunity_negotiation'\n            },\n            { \n              label: 'Closed Won', \n              value: totalStats.closed_won, \n              filter: 'closed_won', \n              bgColor: 'bg-emerald-900/20', \n              borderColor: 'border-emerald-700',\n              tooltip: 'opportunity_closed_won'\n            },\n            { \n              label: 'Closed Lost', \n              value: totalStats.closed_lost, \n              filter: 'closed_lost', \n              bgColor: 'bg-red-900/20', \n              borderColor: 'border-red-700',\n              tooltip: 'opportunity_closed_lost'\n            },\n          ].map((stat) => (\n            <div\n              key={stat.label}\n              className={`${stat.bgColor} ${stat.borderColor || 'border-slate-700'} border rounded-lg p-4 cursor-pointer hover:scale-105 transition-all ${\n                stageFilter === stat.filter ? 'ring-2 ring-blue-500 ring-offset-2 ring-offset-slate-900' : ''\n              }`}\n              onClick={() => handleStageFilterClick(stat.filter)}\n            >\n              <div className=\"flex items-center justify-between mb-1\">\n                <p className=\"text-sm text-slate-400\">{stat.label}</p>\n                <StatusHelper statusKey={stat.tooltip} />\n              </div>\n              <p className=\"text-2xl font-bold text-slate-100\">{stat.value}</p>\n            </div>\n          ))}\n        </div>\n\n        {viewMode !== \"kanban\" && (\n          <div className=\"flex flex-col lg:flex-row gap-4 mb-6\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-3 w-5 h-5 text-slate-500\" />\n              <Input\n                placeholder=\"Search opportunities by name, account, contact, or description...\"\n                value={searchTerm}\n                onChange={(e) => {\n                  setSearchTerm(e.target.value);\n                  setCurrentPage(1);\n                }}\n                className=\"pl-10 bg-slate-800 border-slate-700 text-slate-200\"\n              />\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              <TagFilter\n                allTags={allTags}\n                selectedTags={selectedTags}\n                onTagsChange={(newTags) => {\n                  setSelectedTags(newTags);\n                  setCurrentPage(1);\n                }}\n              />\n\n              {hasActiveFilters && (\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleClearFilters}\n                      className=\"bg-slate-800 border-slate-700 text-slate-200 hover:bg-slate-700\"\n                    >\n                      <X className=\"w-4 h-4 mr-1\" />\n                      Clear\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                        <p>Clear all filters</p>\n                  </TooltipContent>\n                </Tooltip>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Select All Banner */}\n        {viewMode !== \"kanban\" && selectedOpportunities.size === opportunities.length && opportunities.length > 0 && !selectAllMode && totalItems > opportunities.length && (\n          <div className=\"mb-4 bg-blue-900/20 border border-blue-700 rounded-lg p-4 flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"text-blue-200\">\n                All {opportunities.length} opportunities on this page are selected.\n              </span>\n              <Button\n                variant=\"link\"\n                onClick={handleSelectAllRecords}\n                className=\"text-blue-400 hover:text-blue-300 p-0 h-auto\"\n              >\n                Select all {totalItems} opportunities matching current filters\n              </Button>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClearSelection}\n              className=\"text-slate-400 hover:text-slate-200\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        )}\n\n        {viewMode !== \"kanban\" && selectAllMode && (\n          <div className=\"mb-4 bg-blue-900/20 border border-blue-700 rounded-lg p-4 flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-blue-400\" />\n              <span className=\"text-blue-200 font-semibold\">\n                All {totalItems} opportunities matching current filters are selected.\n              </span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClearSelection}\n              className=\"text-slate-400 hover:text-slate-200\"\n            >\n              Clear selection\n            </Button>\n          </div>\n        )}\n\n        {loading && !initialLoadDone.current ? (\n          <div className=\"flex items-center justify-center py-20\">\n            <div className=\"text-center\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-blue-400 mx-auto mb-4\" />\n              <p className=\"text-slate-400\">Loading opportunities...</p>\n            </div>\n          </div>\n        ) : opportunities.length === 0 ? (\n          <div className=\"bg-slate-800/50 border border-slate-700 rounded-lg p-12 text-center\">\n            <AlertCircle className=\"w-12 h-12 text-slate-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-slate-300 mb-2\">No opportunities found</h3>\n            <p className=\"text-slate-500 mb-6\">\n              {hasActiveFilters\n                ? \"Try adjusting your filters or search term\"\n                : \"Get started by adding your first opportunity\"}\n            </p>\n            {!hasActiveFilters && (\n              <Button\n                onClick={() => setIsFormOpen(true)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Your First Opportunity\n              </Button>\n            )}\n          </div>\n        ) : viewMode === \"kanban\" ? (\n          <div className=\"overflow-x-auto\">\n            <OpportunityKanbanBoard\n              opportunities={opportunities}\n              accounts={accounts}\n              contacts={contacts}\n              users={users}\n              leads={leads}\n              onEdit={(opp) => {\n                setEditingOpportunity(opp);\n                setIsFormOpen(true);\n              }}\n              onDelete={handleDelete}\n              onView={handleViewDetails}\n              onStageChange={handleStageChange}\n              onDataRefresh={async () => {\n                clearCache('Opportunity');\n                await Promise.all([\n                  loadOpportunities(currentPage, pageSize),\n                  loadTotalStats()\n                ]);\n              }}\n            />\n          </div>\n        ) : viewMode === \"grid\" ? (\n          <>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <AnimatePresence>\n                {opportunities.map((opp) => {\n                  const account = accounts.find((a) => a.id === opp.account_id);\n                  const contact = contacts.find((c) => c.id === opp.contact_id);\n\n                  return (\n                    <OpportunityCard\n                      key={opp.id}\n                      opportunity={opp}\n                      accountName={account?.name}\n                      contactName={contact ? `${contact.first_name} ${contact.last_name}` : ''}\n                      assignedUserName={employeesMap[opp.assigned_to] || usersMap[opp.assigned_to]}\n                      onEdit={() => {\n                        setEditingOpportunity(opp);\n                        setIsFormOpen(true);\n                      }}\n                      onDelete={() => handleDelete(opp.id)}\n                      onViewDetails={() => handleViewDetails(opp)}\n                      isSelected={selectedOpportunities.has(opp.id)}\n                      onSelect={(checked) => toggleSelection(opp.id)}\n                    />\n                  );\n                })}\n              </AnimatePresence>\n            </div>\n\n            <Pagination\n              currentPage={currentPage}\n              totalPages={Math.ceil(totalItems / pageSize)}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              onPageChange={handlePageChange}\n              onPageSizeChange={handlePageSizeChange}\n              loading={loading}\n            />\n          </>\n        ) : (\n          <>\n            {/* Table View */}\n            <div className=\"bg-slate-800 border border-slate-700 rounded-lg overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader className=\"bg-slate-700/50\">\n                    <TableRow>\n                      <TableHead className=\"w-12 p-3 text-center\">\n                        <Checkbox\n                          checked={selectedOpportunities.size === opportunities.length && opportunities.length > 0 && !selectAllMode}\n                          onCheckedChange={toggleSelectAll}\n                          className=\"border-slate-600\"\n                        />\n                      </TableHead>\n                      <TableHead className=\"text-left p-3 font-medium text-slate-300\">Opportunity</TableHead>\n                      <TableHead className=\"text-center p-3 font-medium text-slate-300\">Stage</TableHead>\n                      <TableHead className=\"text-right p-3 font-medium text-slate-300\">Amount</TableHead>\n                      <TableHead className=\"text-center p-3 font-medium text-slate-300\">Probability</TableHead>\n                      <TableHead className=\"text-center p-3 font-medium text-slate-300\">Close Date</TableHead>\n                      <TableHead className=\"text-center p-3 font-medium text-slate-300\">Assigned To</TableHead>\n                      <TableHead className=\"w-24 p-3 font-medium text-slate-300 text-center\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {opportunities.map((opp) => (\n                      <TableRow key={opp.id} className=\"hover:bg-slate-700/30 transition-colors border-b border-slate-800\">\n                        <TableCell className=\"text-center p-3\">\n                          <Checkbox\n                            checked={selectedOpportunities.has(opp.id) || selectAllMode}\n                            onCheckedChange={() => toggleSelection(opp.id)}\n                            className=\"border-slate-600 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium text-slate-200 cursor-pointer p-3\" onClick={() => handleViewDetails(opp)}>\n                          <div className=\"font-semibold\">{opp.name}</div>\n                          {opp.account_id && <div className=\"text-xs text-slate-400\">{accountsMap[opp.account_id] || opp.account_name}</div>}\n                        </TableCell>\n                        <TableCell className=\"text-center cursor-pointer p-3\" onClick={() => handleViewDetails(opp)}>\n                          <Badge className={`${stageColors[opp.stage]} capitalize text-xs font-semibold whitespace-nowrap border`}>\n                            {opp.stage?.replace(/_/g, ' ')}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-right text-slate-300 cursor-pointer p-3\" onClick={() => handleViewDetails(opp)}>\n                          <div className=\"font-medium\">${(opp.amount || 0).toLocaleString()}</div>\n                        </TableCell>\n                        <TableCell className=\"text-center text-slate-300 cursor-pointer p-3\" onClick={() => handleViewDetails(opp)}>\n                          {opp.probability || 0}%\n                        </TableCell>\n                        <TableCell className=\"text-center text-slate-300 cursor-pointer p-3\" onClick={() => handleViewDetails(opp)}>\n                          {opp.close_date ? format(new Date(opp.close_date), 'MMM d, yyyy') : 'ΓÇö'}\n                        </TableCell>\n                        <TableCell className=\"text-center text-slate-300 cursor-pointer p-3\" onClick={() => handleViewDetails(opp)}>\n                          {employeesMap[opp.assigned_to] || usersMap[opp.assigned_to] || opp.assigned_to_name || <span className=\"text-slate-500\">Unassigned</span>}\n                        </TableCell>\n                        <TableCell className=\"p-3 text-center\">\n                          <div className=\"flex items-center justify-center gap-1\">\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setEditingOpportunity(opp);\n                                    setIsFormOpen(true);\n                                  }}\n                                  className=\"h-8 w-8 text-slate-400 hover:text-slate-200 hover:bg-slate-700\"\n                                >\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>Edit opportunity</p>\n                              </TooltipContent>\n                            </Tooltip>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleViewDetails(opp);\n                                  }}\n                                  className=\"h-8 w-8 text-slate-400 hover:text-slate-200 hover:bg-slate-700\"\n                                >\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>View details</p>\n                              </TooltipContent>\n                            </Tooltip>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleDelete(opp.id);\n                                  }}\n                                  className=\"h-8 w-8 text-red-400 hover:text-red-300 hover:bg-red-900/20\"\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>Delete opportunity</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </div>\n\n            <Pagination\n              currentPage={currentPage}\n              totalPages={Math.ceil(totalItems / pageSize)}\n              totalItems={totalItems}\n              pageSize={pageSize}\n              onPageChange={handlePageChange}\n              onPageSizeChange={handlePageSizeChange}\n              loading={loading}\n            />\n          </>\n        )}\n      </div>\n    </TooltipProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\PaymentPortal.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport StripeSettings from '@/components/settings/StripeSettings';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { CreditCard } from \"lucide-react\";\n\nexport default function PaymentPortalPage() {\n    return (\n        <div className=\"p-4 md:p-6 lg:p-8\">\n            <Card className=\"bg-slate-800 border-slate-700 max-w-4xl mx-auto\">\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n                      <CreditCard className=\"w-5 h-5 text-indigo-500\" />\n                      Payment Portal\n                    </CardTitle>\n                    <CardDescription className=\"text-slate-400\">\n                      Connect your payment providers to manage payments, subscriptions, and billing directly within the CRM. Currently, Stripe is supported.\n                    </CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <StripeSettings />\n                </CardContent>\n            </Card>\n        </div>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\PrivacyPolicy.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":37,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (&quot;we,\" \"our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (&ldquo;we,\" \"our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (&#34;we,\" \"our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (&rdquo;we,\" \"our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":37,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,&quot; \"our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,&ldquo; \"our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,&#34; \"our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,&rdquo; \"our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":37,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" &quot;our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" &ldquo;our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" &#34;our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" &rdquo;our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":37,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,&quot; or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,&ldquo; or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,&#34; or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,&rdquo; or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":37,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,\" or &quot;us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,\" or &ldquo;us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,\" or &#34;us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,\" or &rdquo;us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":37,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,\" or \"us&quot;) operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,\" or \"us&ldquo;) operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,\" or \"us&#34;) operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1452,1677],"text":"\n              4V Data Consulting LLC (\"we,\" \"our,\" or \"us&rdquo;) operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":146,"column":83,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8580,8602],"text":"11. Children&apos;s Privacy"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8580,8602],"text":"11. Children&lsquo;s Privacy"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8580,8602],"text":"11. Children&#39;s Privacy"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8580,8602],"text":"11. Children&rsquo;s Privacy"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":155,"column":175,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9192,9477],"text":"\n              We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the new Privacy Policy on this page and updating the &quot;Last updated\" date. We encourage you to review this Privacy Policy periodically for any changes.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9192,9477],"text":"\n              We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the new Privacy Policy on this page and updating the &ldquo;Last updated\" date. We encourage you to review this Privacy Policy periodically for any changes.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9192,9477],"text":"\n              We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the new Privacy Policy on this page and updating the &#34;Last updated\" date. We encourage you to review this Privacy Policy periodically for any changes.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9192,9477],"text":"\n              We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the new Privacy Policy on this page and updating the &rdquo;Last updated\" date. We encourage you to review this Privacy Policy periodically for any changes.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":155,"column":188,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9192,9477],"text":"\n              We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the new Privacy Policy on this page and updating the \"Last updated&quot; date. We encourage you to review this Privacy Policy periodically for any changes.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9192,9477],"text":"\n              We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the new Privacy Policy on this page and updating the \"Last updated&ldquo; date. We encourage you to review this Privacy Policy periodically for any changes.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9192,9477],"text":"\n              We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the new Privacy Policy on this page and updating the \"Last updated&#34; date. We encourage you to review this Privacy Policy periodically for any changes.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9192,9477],"text":"\n              We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the new Privacy Policy on this page and updating the \"Last updated&rdquo; date. We encourage you to review this Privacy Policy periodically for any changes.\n            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Shield, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from 'react-router-dom';\nimport { createPageUrl } from '@/utils';\n\nexport default function PrivacyPolicy() {\n  return (\n    <div className=\"p-4 lg:p-8 space-y-6 max-w-4xl mx-auto\">\n      <div className=\"flex items-center gap-4\">\n        <Link to={createPageUrl(\"Dashboard\")}>\n          <Button variant=\"ghost\" size=\"sm\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n        </Link>\n      </div>\n\n      <div className=\"flex items-center gap-3\">\n        <Shield className=\"w-8 h-8 text-blue-600\" />\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900\">Privacy Policy</h1>\n          <p className=\"text-slate-600 mt-1\">Ai-SHA CRM Platform - 4V Data Consulting LLC</p>\n        </div>\n      </div>\n\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader>\n          <CardTitle>Privacy Policy</CardTitle>\n          <p className=\"text-sm text-slate-500\">Last updated: January 1, 2025</p>\n        </CardHeader>\n        <CardContent className=\"prose prose-slate max-w-none space-y-6\">\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">1. Introduction</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              4V Data Consulting LLC (\"we,\" \"our,\" or \"us\") operates the Ai-SHA┬« CRM platform. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Service.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">2. Information We Collect</h2>\n            <h3 className=\"text-lg font-medium text-slate-800 mb-2\">Personal Information</h3>\n            <p className=\"text-slate-700 leading-relaxed mb-3\">\n              We collect information you provide directly to us, including:\n            </p>\n            <ul className=\"list-disc pl-6 space-y-2 text-slate-700\">\n              <li>Account information (name, email address, company details)</li>\n              <li>Profile information and preferences</li>\n              <li>Customer and lead data you input into the CRM</li>\n              <li>Communications with our support team</li>\n            </ul>\n            \n            <h3 className=\"text-lg font-medium text-slate-800 mb-2 mt-4\">Usage Information</h3>\n            <p className=\"text-slate-700 leading-relaxed mb-3\">\n              We automatically collect certain information when you use our Service:\n            </p>\n            <ul className=\"list-disc pl-6 space-y-2 text-slate-700\">\n              <li>Log information (IP address, browser type, access times)</li>\n              <li>Usage patterns and feature interaction data</li>\n              <li>Device information and operating system details</li>\n              <li>Cookies and similar tracking technologies</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">3. How We Use Your Information</h2>\n            <p className=\"text-slate-700 leading-relaxed mb-3\">\n              We use the information we collect to:\n            </p>\n            <ul className=\"list-disc pl-6 space-y-2 text-slate-700\">\n              <li>Provide, maintain, and improve our CRM services</li>\n              <li>Process transactions and send related information</li>\n              <li>Send technical notices, updates, and support messages</li>\n              <li>Respond to your comments, questions, and customer service requests</li>\n              <li>Monitor and analyze trends, usage, and activities</li>\n              <li>Detect, investigate, and prevent fraudulent transactions</li>\n              <li>Comply with legal obligations and protect our rights</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">4. Information Sharing and Disclosure</h2>\n            <p className=\"text-slate-700 leading-relaxed mb-3\">\n              We do not sell, trade, or rent your personal information to third parties. We may share your information only in the following circumstances:\n            </p>\n            <ul className=\"list-disc pl-6 space-y-2 text-slate-700\">\n              <li>With your explicit consent</li>\n              <li>To comply with legal obligations or court orders</li>\n              <li>To protect our rights, property, or safety, or that of others</li>\n              <li>With service providers who assist in our operations (under strict confidentiality agreements)</li>\n              <li>In connection with a merger, acquisition, or sale of assets (with prior notice)</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">5. Data Security</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              We implement appropriate technical and organizational security measures to protect your personal information against unauthorized access, alteration, disclosure, or destruction. These measures include encryption, secure data transmission, regular security assessments, and employee training on data protection practices.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">6. Data Retention</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              We retain your personal information for as long as your account is active or as needed to provide you services. We will also retain and use your information as necessary to comply with legal obligations, resolve disputes, and enforce our agreements. Upon account termination, we will delete or anonymize your data within a reasonable timeframe, unless retention is required by law.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">7. Your Privacy Rights</h2>\n            <p className=\"text-slate-700 leading-relaxed mb-3\">\n              Depending on your location, you may have the following rights regarding your personal information:\n            </p>\n            <ul className=\"list-disc pl-6 space-y-2 text-slate-700\">\n              <li>Access: Request a copy of the personal information we hold about you</li>\n              <li>Correction: Request correction of inaccurate or incomplete information</li>\n              <li>Deletion: Request deletion of your personal information</li>\n              <li>Portability: Request transfer of your data to another service provider</li>\n              <li>Objection: Object to certain processing of your personal information</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">8. Cookies and Tracking Technologies</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              We use cookies and similar technologies to enhance your experience, understand usage patterns, and improve our services. You can control cookie settings through your browser preferences, though disabling cookies may affect some functionality of our Service.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">9. Third-Party Integrations</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              Our Service may integrate with third-party applications and services (such as email providers, calendar systems, or analytics tools). These integrations are governed by the privacy policies of those third parties. We encourage you to review their privacy practices before connecting these services to your Ai-SHA account.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">10. International Data Transfers</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              Your information may be transferred to and processed in countries other than your country of residence. We ensure that such transfers comply with applicable data protection laws and implement appropriate safeguards to protect your personal information.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">11. Children's Privacy</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              Our Service is not intended for individuals under the age of 18. We do not knowingly collect personal information from children under 18. If you become aware that a child has provided us with personal information, please contact us, and we will take steps to delete such information.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">12. Changes to This Privacy Policy</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              We may update this Privacy Policy from time to time. We will notify you of any material changes by posting the new Privacy Policy on this page and updating the \"Last updated\" date. We encourage you to review this Privacy Policy periodically for any changes.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">13. Contact Us</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              If you have any questions about this Privacy Policy or our privacy practices, please contact us at:\n            </p>\n            <div className=\"bg-slate-50 p-4 rounded-lg mt-3\">\n              <p className=\"text-slate-700\">\n                <strong>4V Data Consulting LLC</strong><br />\n                Email: privacy@4vdataconsulting.com<br />\n                Subject: Ai-SHA Privacy Policy Inquiry\n              </p>\n            </div>\n          </section>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Reports.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Bell' is defined but never used.","line":3,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"Bell"},"fix":{"range":[81,87],"text":""},"desc":"Remove unused variable 'Bell'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Book' is defined but never used.","line":3,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"Book"},"fix":{"range":[87,93],"text":""},"desc":"Remove unused variable 'Book'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Bot' is defined but never used.","line":3,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"Bot"},"fix":{"range":[93,98],"text":""},"desc":"Remove unused variable 'Bot'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":3,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"Calendar"},"fix":{"range":[109,119],"text":""},"desc":"Remove unused variable 'Calendar'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CreditCard' is defined but never used.","line":3,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":75,"suggestions":[{"messageId":"removeVar","data":{"varName":"CreditCard"},"fix":{"range":[132,144],"text":""},"desc":"Remove unused variable 'CreditCard'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'FileText' is defined but never used.","line":4,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":61,"suggestions":[{"messageId":"removeVar","data":{"varName":"FileText"},"fix":{"range":[196,206],"text":""},"desc":"Remove unused variable 'FileText'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'FolderOpen' is defined but never used.","line":4,"column":63,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":73,"suggestions":[{"messageId":"removeVar","data":{"varName":"FolderOpen"},"fix":{"range":[206,218],"text":""},"desc":"Remove unused variable 'FolderOpen'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'LogOut' is defined but never used.","line":5,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"LogOut"},"fix":{"range":[229,237],"text":""},"desc":"Remove unused variable 'LogOut'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Menu' is defined but never used.","line":5,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"Menu"},"fix":{"range":[237,243],"text":""},"desc":"Remove unused variable 'Menu'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Monitor' is defined but never used.","line":5,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Monitor"},"fix":{"range":[243,252],"text":""},"desc":"Remove unused variable 'Monitor'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Moon' is defined but never used.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Moon"},"fix":{"range":[252,258],"text":""},"desc":"Remove unused variable 'Moon'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Palette' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"Palette"},"fix":{"range":[258,267],"text":""},"desc":"Remove unused variable 'Palette'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Puzzle' is defined but never used.","line":5,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"Puzzle"},"fix":{"range":[267,275],"text":""},"desc":"Remove unused variable 'Puzzle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'RotateCcw' is defined but never used.","line":5,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"RotateCcw"},"fix":{"range":[275,286],"text":""},"desc":"Remove unused variable 'RotateCcw'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Search' is defined but never used.","line":5,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":75,"suggestions":[{"messageId":"removeVar","data":{"varName":"Search"},"fix":{"range":[286,294],"text":""},"desc":"Remove unused variable 'Search'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Settings"},"fix":{"range":[294,306],"text":""},"desc":"Remove unused variable 'Settings'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Sun' is defined but never used.","line":6,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sun"},"fix":{"range":[306,311],"text":""},"desc":"Remove unused variable 'Sun'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":6,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"Users"},"fix":{"range":[331,338],"text":""},"desc":"Remove unused variable 'Users'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":6,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"X"},"fix":{"range":[338,341],"text":""},"desc":"Remove unused variable 'X'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Briefcase' is defined but never used.","line":6,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":64,"suggestions":[{"messageId":"removeVar","data":{"varName":"Briefcase"},"fix":{"range":[348,359],"text":""},"desc":"Remove unused variable 'Briefcase'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Wrench' is defined but never used.","line":6,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":72,"suggestions":[{"messageId":"removeVar","data":{"varName":"Wrench"},"fix":{"range":[359,367],"text":""},"desc":"Remove unused variable 'Wrench'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'base44' is defined but never used.","line":28,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"base44"},"fix":{"range":[1279,1323],"text":""},"desc":"Remove unused variable 'base44'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'isEmployee' is assigned a value but never used.","line":48,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"isEmployee"},"fix":{"range":[2391,2403],"text":""},"desc":"Remove unused variable 'isEmployee'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":240,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":240,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from \"react\";\nimport {\n  BarChart3, Bell, Book, Bot, Building2, Calendar, CheckSquare, CreditCard,\n  Database, DollarSign, FileDigit, FileSpreadsheet, FileText, FolderOpen,\n  Loader2, LogOut, Menu, Monitor, Moon, Palette, Puzzle, RotateCcw, Search,\n  Settings, Sun, Target, TrendingUp, Users, X, Brain, Briefcase, Wrench,\n  Download, ChevronDown\n} from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"@/components/ui/select\";\nimport { User } from \"@/api/entities\";\nimport { Lead } from \"@/api/entities\";\nimport { Contact } from \"@/api/entities\";\nimport { Opportunity } from \"@/api/entities\";\nimport { Activity } from \"@/api/entities\";\nimport { Tenant } from \"@/api/entities\";\nimport { useTenant } from \"../components/shared/tenantContext\";\nimport { useEmployeeScope } from \"../components/shared/EmployeeScopeContext\";\nimport { useApiManager } from \"../components/shared/ApiManager\";\nimport { toast } from \"react-hot-toast\";\nimport { base44 } from \"@/api/base44Client\";\n\nimport OverviewStats from \"../components/reports/OverviewStats\";\nimport SalesAnalytics from \"../components/reports/SalesAnalytics\";\nimport LeadAnalytics from \"../components/reports/LeadAnalytics\";\nimport ProductivityAnalytics from \"../components/reports/ProductivityAnalytics\";\nimport HistoricalTrends from \"../components/reports/HistoricalTrends\";\nimport ForecastingDashboard from \"../components/reports/ForecastingDashboard\";\nimport AIMarketInsights from \"../components/reports/AIMarketInsights\";\nimport DataQualityReport from \"../components/reports/DataQualityReport\";\nimport { exportReportToPDF } from \"@/api/functions\";\nimport { exportReportToCSV } from \"@/api/functions\";\n\nexport default function ReportsPage() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [loadingStats, setLoadingStats] = useState(false);\n  const [stats, setStats] = useState(null);\n  const { selectedTenantId } = useTenant();\n  const { getFilter, canViewAllRecords, isEmployee } = useEmployeeScope();\n  const [isExporting, setIsExporting] = useState(false);\n  const { cachedRequest } = useApiManager();\n  const [currentTenantData, setCurrentTenantData] = useState(null);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      setLoading(true);\n      try {\n        const user = await User.me();\n        setCurrentUser(user);\n      } catch (error) {\n        if (import.meta.env.DEV) {\n          console.error('Reports: Failed to load user:', error);\n        }\n        setCurrentUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n\n  // NEW: Load current tenant data\n  useEffect(() => {\n    const loadTenantData = async () => {\n      if (!currentUser) return;\n      \n      if (currentUser.role === 'superadmin' && selectedTenantId) {\n        try {\n          const tenant = await cachedRequest(\n            'Tenant',\n            'get',\n            { id: selectedTenantId },\n            () => Tenant.get(selectedTenantId)\n          );\n          setCurrentTenantData(tenant);\n        } catch (error) {\n          console.error('Failed to load tenant data:', error);\n          setCurrentTenantData(null);\n        }\n      } else if (currentUser.tenant_id) {\n        try {\n          const tenant = await cachedRequest(\n            'Tenant',\n            'get',\n            { id: currentUser.tenant_id },\n            () => Tenant.get(currentUser.tenant_id)\n          );\n          setCurrentTenantData(tenant);\n        } catch (error) {\n          console.error('Failed to load tenant data:', error);\n          setCurrentTenantData(null);\n        }\n      }\n    };\n\n    loadTenantData();\n  }, [currentUser, selectedTenantId, cachedRequest]);\n\n  const currentScopedFilter = useMemo(() => {\n    let baseFilter = {};\n    if (!currentUser) {\n      return {};\n    }\n\n    if (currentUser.role === 'superadmin') {\n      if (selectedTenantId) {\n        baseFilter.tenant_id = selectedTenantId;\n      }\n    } else if (currentUser.tenant_id) {\n      baseFilter.tenant_id = currentUser.tenant_id;\n    }\n\n    let filter = {};\n    if (canViewAllRecords) {\n      filter = { ...baseFilter };\n    } else {\n      filter = getFilter(baseFilter);\n    }\n\n    if (!('is_test_data' in filter)) {\n      filter.is_test_data = { $ne: true };\n    }\n    return filter;\n  }, [currentUser, selectedTenantId, canViewAllRecords, getFilter]);\n\n  useEffect(() => {\n    const loadStats = async () => {\n      if (!currentUser || Object.keys(currentScopedFilter).length === 0) {\n        setStats(null);\n        return;\n      }\n\n      setLoadingStats(true);\n      try {\n        const [leads, contacts, opportunities, activities] = await Promise.all([\n          cachedRequest('Lead', 'filter', { filter: currentScopedFilter }, () => Lead.filter(currentScopedFilter)),\n          cachedRequest('Contact', 'filter', { filter: currentScopedFilter }, () => Contact.filter(currentScopedFilter)),\n          cachedRequest('Opportunity', 'filter', { filter: currentScopedFilter }, () => Opportunity.filter(currentScopedFilter)),\n          cachedRequest('Activity', 'filter', { filter: currentScopedFilter }, () => Activity.filter(currentScopedFilter)),\n        ]);\n\n        const now = new Date();\n        const currentYear = now.getFullYear();\n        const currentMonth = now.getMonth();\n\n        const startOfCurrentMonth = new Date(currentYear, currentMonth, 1);\n        const endOfCurrentMonth = new Date(currentYear, currentMonth + 1, 0, 23, 59, 59, 999);\n        const startOfPreviousMonth = new Date(currentYear, currentMonth - 1, 1);\n        const endOfPreviousMonth = new Date(currentYear, currentMonth, 0, 23, 59, 59, 999);\n\n        const activitiesThisMonth = activities?.filter(a => {\n          const createdDate = new Date(a.created_date);\n          return createdDate >= startOfCurrentMonth && createdDate <= endOfCurrentMonth;\n        }).length || 0;\n\n        const activitiesLastMonth = activities?.filter(a => {\n          const createdDate = new Date(a.created_date);\n          return createdDate >= startOfPreviousMonth && createdDate <= endOfPreviousMonth;\n        }).length || 0;\n\n        const totalLeads = leads?.length || 0;\n        const totalContacts = contacts?.length || 0;\n        const totalOpportunities = opportunities?.length || 0;\n\n        setStats({\n          totalLeads,\n          totalContacts,\n          totalOpportunities,\n          activitiesThisMonth,\n          activitiesLastMonth,\n        });\n\n      } catch (error) {\n        console.error('Failed to load overview stats:', error);\n        toast.error('Failed to load overview data');\n        setStats(null);\n      } finally {\n        setLoadingStats(false);\n      }\n    };\n\n    loadStats();\n  }, [currentUser, currentScopedFilter, cachedRequest]);\n\n  if (loading) {\n    return (\n      <div className=\"p-4 lg:p-8 text-center text-slate-400 bg-slate-900 min-h-screen\">\n        <div className=\"flex items-center justify-center h-[50vh]\">\n          <div className=\"text-center\">\n            <Loader2 className=\"w-8 h-8 lg:w-12 lg:h-12 animate-spin mx-auto text-blue-400\" />\n            <p className=\"mt-3 text-sm lg:text-base\">Loading reports...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentUser) {\n    return (\n      <div className=\"p-8 text-center bg-slate-900 min-h-screen flex items-center justify-center\">\n        <p className=\"text-slate-400 text-lg\">Please log in to view reports.</p>\n      </div>\n    );\n  }\n\n  if (currentUser.role === 'superadmin' && !selectedTenantId) {\n    return (\n      <div className=\"p-4 lg:p-8 text-center bg-slate-900 min-h-screen\">\n        <div className=\"max-w-md mx-auto bg-orange-950/20 border border-orange-700/50 rounded-lg p-6\">\n          <Building2 className=\"w-8 h-8 lg:w-12 lg:h-12 text-orange-400 mx-auto mb-4\" />\n          <h2 className=\"text-lg lg:text-xl font-semibold text-orange-300 mb-2\">Select a Tenant</h2>\n          <p className=\"text-sm lg:text-base text-orange-500\">\n            Please select a tenant from the dropdown in the header to view their reports.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleExport = async (format) => {\n    setIsExporting(true);\n    try {\n      const tenantName = currentUser?.branding_settings?.companyName || \"Ai-SHA CRM\";\n\n      let aiInsightsData = null;\n      \n      const aiInsightsElement = document.querySelector('[data-ai-insights]');\n      if (aiInsightsElement && aiInsightsElement.dataset.aiInsights) {\n        try {\n          aiInsightsData = JSON.parse(aiInsightsElement.dataset.aiInsights);\n        } catch (e) {\n          console.warn('Could not parse AI insights data for export');\n        }\n      }\n\n      let response;\n      if (format === 'pdf') {\n        response = await exportReportToPDF({ \n          reportType: activeTab, \n          tenantFilter: currentScopedFilter,\n          tenantName,\n          aiInsightsData\n        });\n      } else if (format === 'csv') {\n        response = await exportReportToCSV({ reportType: activeTab, tenantFilter: currentScopedFilter });\n      }\n\n      if (response && response.data) {\n        const blob = new Blob([response.data], { type: response.headers['content-type'] });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n\n        const contentDisposition = response.headers['content-disposition'];\n        let fileName = `${activeTab}_report.${format}`;\n        if (contentDisposition) {\n          const fileNameMatch = contentDisposition.match(/filename=\"?(.+)\"?/);\n          if (fileNameMatch && fileNameMatch.length === 2)\n            fileName = fileNameMatch[1];\n        }\n\n        a.download = fileName;\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n        window.URL.revokeObjectURL(url);\n      } else if (response && response.error) {\n        console.error('Export failed with API error:', response.error);\n        alert(`Export failed: ${response.error}`);\n      } else {\n        const errorData = response?.data ? JSON.parse(new TextDecoder().decode(response.data)) : { error: \"Unknown export error\" };\n        throw new Error(errorData.error || \"Export failed, no data received.\");\n      }\n\n    } catch (error) {\n      console.error(`Error exporting to ${format}:`, error);\n      alert(`Failed to export report: ${error.message}`);\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const reportTabs = [\n    {\n      id: \"overview\",\n      label: \"Overview\",\n      icon: TrendingUp,\n      iconColor: \"text-purple-400\",\n      component: (\n        <>\n          <OverviewStats tenantFilter={currentScopedFilter} stats={stats} loadingStats={loadingStats} />\n          <HistoricalTrends tenantFilter={currentScopedFilter} />\n        </>\n      ),\n    },\n    { id: \"sales\", label: \"Sales Analytics\", icon: DollarSign, iconColor: \"text-green-500\", component: <SalesAnalytics tenantFilter={currentScopedFilter} /> },\n    { id: \"leads\", label: \"Lead Analytics\", icon: TrendingUp, iconColor: \"text-yellow-400\", component: <LeadAnalytics tenantFilter={currentScopedFilter} /> },\n    { id: \"productivity\", label: \"Productivity\", icon: CheckSquare, iconColor: \"text-orange-500\", component: <ProductivityAnalytics tenantFilter={currentScopedFilter} /> },\n    { id: \"forecasting\", label: \"Forecasting\", icon: Target, iconColor: \"text-amber-500\", component: <ForecastingDashboard tenantFilter={currentScopedFilter} /> },\n    { id: \"insights\", label: \"AI Insights\", icon: Brain, iconColor: \"text-pink-500\", component: <AIMarketInsights tenant={currentTenantData} /> },\n    { id: \"data-quality\", label: \"Data Quality\", icon: Database, iconColor: \"text-cyan-400\", component: <DataQualityReport tenantFilter={currentScopedFilter} /> },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-2 sm:p-4 lg:p-8 space-y-4 lg:space-y-6\">\n      <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4\">\n        <div>\n          <h1 className=\"text-xl sm:text-2xl lg:text-3xl font-bold text-slate-100 flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3\">\n            <div className=\"w-8 h-8 sm:w-10 sm:h-10 lg:w-12 lg:h-12 flex items-center justify-center rounded-full bg-purple-900/30 border border-purple-700/50\">\n              <BarChart3 className=\"w-4 h-4 sm:w-5 sm:h-5 lg:w-7 lg:h-7 text-purple-400\" />\n            </div>\n            <span>Reports & Analytics</span>\n          </h1>\n          <p className=\"text-slate-400 mt-1 text-sm lg:text-base\">\n            Comprehensive insights into your business performance.\n          </p>\n        </div>\n\n        <div className=\"flex-shrink-0 w-full sm:w-auto mt-4 lg:mt-0\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" disabled={isExporting} className=\"w-full sm:w-auto bg-slate-700 hover:bg-slate-600 text-slate-200 border-slate-600\">\n                {isExporting ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    <span className=\"hidden sm:inline\">Exporting...</span>\n                    <span className=\"sm:hidden\">Exporting</span>\n                  </>\n                ) : (\n                  <>\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    <span className=\"hidden sm:inline\">Export Report</span>\n                    <span className=\"sm:hidden\">Export</span>\n                    <ChevronDown className=\"ml-2 h-4 w-4\" />\n                  </>\n                )}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"bg-slate-800 border-slate-700 text-slate-200\">\n              <DropdownMenuItem onClick={() => handleExport('pdf')} className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                <FileDigit className=\"mr-2 h-4 w-4 text-red-400\" />\n                <span>Export as PDF</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => handleExport('csv')} className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                <FileSpreadsheet className=\"mr-2 h-4 w-4 text-green-400\" />\n                <span>Export as CSV</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4 lg:space-y-6\">\n        <div className=\"lg:hidden\">\n          <Select value={activeTab} onValueChange={setActiveTab}>\n            <SelectTrigger className=\"w-full bg-slate-800 border-slate-700 text-slate-200\">\n              <SelectValue>\n                {(() => {\n                  const currentReport = reportTabs.find(tab => tab.id === activeTab);\n                  return currentReport ? (\n                    <div className=\"flex items-center gap-2\">\n                      <currentReport.icon className={`w-4 h-4 ${currentReport.iconColor}`} />\n                      <span className=\"truncate\">{currentReport.label}</span>\n                    </div>\n                  ) : 'Select a report...';\n                })()}\n              </SelectValue>\n            </SelectTrigger>\n            <SelectContent className=\"bg-slate-800 border-slate-700 text-slate-200\">\n              {reportTabs.map((report) => (\n                <SelectItem key={report.id} value={report.id} className=\"hover:bg-slate-700 focus:bg-slate-700\">\n                  <div className=\"flex items-center gap-2\">\n                    <report.icon className={`w-4 h-4 ${report.iconColor}`} />\n                    <span>{report.label}</span>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"hidden lg:block bg-slate-800 rounded-lg shadow-sm border border-slate-700 p-4\">\n          <TabsList className=\"flex flex-wrap gap-2 bg-transparent p-0 h-auto\">\n            {reportTabs.map((report) => (\n              <TabsTrigger\n                key={report.id}\n                value={report.id}\n                className=\"flex items-center gap-2 px-3 lg:px-4 py-2 rounded-lg border border-slate-600 bg-slate-700 hover:bg-slate-600 data-[state=active]:bg-purple-600 data-[state=active]:border-purple-500 data-[state=active]:text-white text-slate-300 text-xs lg:text-sm font-medium transition-all duration-200\"\n              >\n                <report.icon className={`w-4 h-4 ${activeTab === report.id ? 'text-white' : report.iconColor}`} />\n                <span className=\"hidden sm:inline\">{report.label}</span>\n              </TabsTrigger>\n            ))}\n          </TabsList>\n        </div>\n\n        <div className=\"bg-slate-800 rounded-lg shadow-sm border border-slate-700\">\n          {reportTabs.map((report) => (\n            <TabsContent key={report.id} value={report.id} className=\"p-3 sm:p-4 lg:p-6 m-0\">\n              <div className=\"lg:hidden mb-4 pb-4 border-b border-slate-700\">\n                <h2 className=\"text-base lg:text-lg font-semibold text-slate-200 flex items-center gap-2\">\n                  <report.icon className={`w-5 h-5 ${report.iconColor}`} />\n                  {report.label}\n                </h2>\n              </div>\n              <div className=\"space-y-4\">\n                {report.component}\n              </div>\n            </TabsContent>\n          ))}\n        </div>\n      </Tabs>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Settings.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\SystemLogs.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport SystemLogsViewer from '../components/settings/SystemLogsViewer';\n\nexport default function SystemLogsPage() {\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-slate-100\">System Logs</h1>\n        <p className=\"text-slate-400 mt-2\">\n          View and manage application logs for debugging and monitoring\n        </p>\n      </div>\n      <SystemLogsViewer />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\TenantDataDebug.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Tenants.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Textarea' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"Textarea"},"fix":{"range":[340,392],"text":""},"desc":"Remove unused variable 'Textarea'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Save' is defined but never used.","line":12,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"Save"},"fix":{"range":[782,788],"text":""},"desc":"Remove unused variable 'Save'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":12,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"X"},"fix":{"range":[788,791],"text":""},"desc":"Remove unused variable 'X'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":179,"column":66,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7856,7947],"text":"\n              The unique Agent ID from ElevenLabs for this tenant&apos;s AI widget\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7856,7947],"text":"\n              The unique Agent ID from ElevenLabs for this tenant&lsquo;s AI widget\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7856,7947],"text":"\n              The unique Agent ID from ElevenLabs for this tenant&#39;s AI widget\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7856,7947],"text":"\n              The unique Agent ID from ElevenLabs for this tenant&rsquo;s AI widget\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Tenant, User } from '@/api/entities';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Building2, Plus, Edit, Save, X, Loader2, AlertCircle } from 'lucide-react';\nimport { toast } from \"sonner\";\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\nconst TenantForm = ({ tenant, onSave, onCancel }) => {\n  const [formData, setFormData] = useState({\n    name: tenant?.name || '',\n    domain: tenant?.domain || '',\n    logo_url: tenant?.logo_url || '',\n    primary_color: tenant?.primary_color || '#3b82f6',\n    accent_color: tenant?.accent_color || '#f59e0b',\n    industry: tenant?.industry || 'other',\n    business_model: tenant?.business_model || 'b2b',\n    geographic_focus: tenant?.geographic_focus || 'north_america',\n    elevenlabs_agent_id: tenant?.elevenlabs_agent_id || '',\n    display_order: tenant?.display_order || 0\n  });\n  const [saving, setSaving] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setSaving(true);\n    try {\n      await onSave(formData);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <Dialog open={!!tenant} onOpenChange={onCancel}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{tenant?.id ? 'Edit Tenant' : 'Create New Tenant'}</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"name\">Tenant Name *</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData({...formData, name: e.target.value})}\n                placeholder=\"Acme Corp\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"domain\">Domain</Label>\n              <Input\n                id=\"domain\"\n                value={formData.domain}\n                onChange={(e) => setFormData({...formData, domain: e.target.value})}\n                placeholder=\"acme.com\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"logo_url\">Logo URL</Label>\n            <Input\n              id=\"logo_url\"\n              value={formData.logo_url}\n              onChange={(e) => setFormData({...formData, logo_url: e.target.value})}\n              placeholder=\"https://example.com/logo.png\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"primary_color\">Primary Color</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  type=\"color\"\n                  value={formData.primary_color}\n                  onChange={(e) => setFormData({...formData, primary_color: e.target.value})}\n                  className=\"w-16 h-10\"\n                />\n                <Input\n                  value={formData.primary_color}\n                  onChange={(e) => setFormData({...formData, primary_color: e.target.value})}\n                  placeholder=\"#3b82f6\"\n                  className=\"flex-1\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"accent_color\">Accent Color</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  type=\"color\"\n                  value={formData.accent_color}\n                  onChange={(e) => setFormData({...formData, accent_color: e.target.value})}\n                  className=\"w-16 h-10\"\n                />\n                <Input\n                  value={formData.accent_color}\n                  onChange={(e) => setFormData({...formData, accent_color: e.target.value})}\n                  placeholder=\"#f59e0b\"\n                  className=\"flex-1\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"industry\">Industry</Label>\n              <Select value={formData.industry} onValueChange={(value) => setFormData({...formData, industry: value})}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"information_technology\">Information Technology</SelectItem>\n                  <SelectItem value=\"healthcare_and_life_sciences\">Healthcare & Life Sciences</SelectItem>\n                  <SelectItem value=\"banking_and_financial_services\">Banking & Financial Services</SelectItem>\n                  <SelectItem value=\"manufacturing\">Manufacturing</SelectItem>\n                  <SelectItem value=\"retail_and_wholesale\">Retail & Wholesale</SelectItem>\n                  <SelectItem value=\"professional_services\">Professional Services</SelectItem>\n                  <SelectItem value=\"real_estate\">Real Estate</SelectItem>\n                  <SelectItem value=\"construction\">Construction</SelectItem>\n                  <SelectItem value=\"education\">Education</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"business_model\">Business Model</Label>\n              <Select value={formData.business_model} onValueChange={(value) => setFormData({...formData, business_model: value})}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"b2b\">B2B</SelectItem>\n                  <SelectItem value=\"b2c\">B2C</SelectItem>\n                  <SelectItem value=\"hybrid\">Hybrid</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"geographic_focus\">Geographic Focus</Label>\n              <Select value={formData.geographic_focus} onValueChange={(value) => setFormData({...formData, geographic_focus: value})}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"north_america\">North America</SelectItem>\n                  <SelectItem value=\"europe\">Europe</SelectItem>\n                  <SelectItem value=\"asia\">Asia</SelectItem>\n                  <SelectItem value=\"south_america\">South America</SelectItem>\n                  <SelectItem value=\"africa\">Africa</SelectItem>\n                  <SelectItem value=\"oceania\">Oceania</SelectItem>\n                  <SelectItem value=\"global\">Global</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"elevenlabs_agent_id\">ElevenLabs Agent ID</Label>\n            <Input\n              id=\"elevenlabs_agent_id\"\n              value={formData.elevenlabs_agent_id}\n              onChange={(e) => setFormData({...formData, elevenlabs_agent_id: e.target.value})}\n              placeholder=\"se8ujo4HwtLbAg1GMvuX\"\n            />\n            <p className=\"text-xs text-slate-500 mt-1\">\n              The unique Agent ID from ElevenLabs for this tenant's AI widget\n            </p>\n          </div>\n\n          <div>\n            <Label htmlFor=\"display_order\">Display Order</Label>\n            <Input\n              id=\"display_order\"\n              type=\"number\"\n              value={formData.display_order}\n              onChange={(e) => setFormData({...formData, display_order: parseInt(e.target.value) || 0})}\n              placeholder=\"0\"\n            />\n          </div>\n\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={saving}>\n              {saving ? <Loader2 className=\"w-4 h-4 animate-spin mr-2\" /> : null}\n              {tenant?.id ? 'Update' : 'Create'} Tenant\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default function TenantsPage() {\n  const [tenants, setTenants] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [editingTenant, setEditingTenant] = useState(null);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      const [tenantsData, userData] = await Promise.all([\n        Tenant.list('display_order'),\n        User.me()\n      ]);\n      setTenants(tenantsData);\n      setCurrentUser(userData);\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.error(\"Error loading tenants:\", error);\n      }\n      toast.error(\"Failed to load tenants\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSaveTenant = async (formData) => {\n    try {\n      if (editingTenant?.id) {\n        await Tenant.update(editingTenant.id, formData);\n        toast.success(\"Tenant updated successfully!\");\n      } else {\n        await Tenant.create(formData);\n        toast.success(\"Tenant created successfully!\");\n      }\n      setEditingTenant(null);\n      setShowCreateForm(false);\n      loadData();\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.error(\"Error saving tenant:\", error);\n      }\n      toast.error(\"Failed to save tenant\");\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingTenant(null);\n    setShowCreateForm(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-12\">\n        <Loader2 className=\"w-8 h-8 animate-spin mr-3\" />\n        <span>Loading tenants...</span>\n      </div>\n    );\n  }\n\n  if (currentUser?.role !== 'admin' && currentUser?.role !== 'superadmin') {\n    return (\n      <Alert variant=\"destructive\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          You do not have permission to manage tenants. Only admins and superadmins can access this page.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Building2 className=\"w-8 h-8 text-blue-600\" />\n            Tenant Management\n          </h1>\n          <p className=\"text-slate-600 mt-1\">Manage client organizations and their settings</p>\n        </div>\n        <Button onClick={() => setShowCreateForm(true)} className=\"bg-blue-600 hover:bg-blue-700\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Tenant\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Active Tenants</CardTitle>\n          <CardDescription>\n            Manage tenant organizations, their branding, and ElevenLabs AI agent configuration\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Name</TableHead>\n                <TableHead>Domain</TableHead>\n                <TableHead>Industry</TableHead>\n                <TableHead>AI Agent</TableHead>\n                <TableHead>Users</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {tenants.map((tenant) => (\n                <TableRow key={tenant.id}>\n                  <TableCell>\n                    <div className=\"flex items-center gap-3\">\n                      {tenant.logo_url ? (\n                        <img src={tenant.logo_url} alt={tenant.name} className=\"w-8 h-8 rounded object-cover\" />\n                      ) : (\n                        <div className=\"w-8 h-8 bg-slate-200 rounded flex items-center justify-center\">\n                          <Building2 className=\"w-4 h-4 text-slate-600\" />\n                        </div>\n                      )}\n                      <div>\n                        <div className=\"font-medium\">{tenant.name}</div>\n                        <div className=\"text-sm text-slate-500\">ID: {tenant.id}</div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {tenant.domain ? (\n                      <Badge variant=\"outline\">{tenant.domain}</Badge>\n                    ) : (\n                      <span className=\"text-slate-400\">No domain</span>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"secondary\">\n                      {tenant.industry ? tenant.industry.replace(/_/g, ' ') : 'Not set'}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {tenant.elevenlabs_agent_id ? (\n                      <Badge className=\"bg-green-100 text-green-800\">Configured</Badge>\n                    ) : (\n                      <Badge variant=\"outline\">Not set</Badge>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">View Users</Badge>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setEditingTenant(tenant)}\n                    >\n                      <Edit className=\"w-4 h-4 mr-1\" />\n                      Edit\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {tenants.length === 0 && (\n            <div className=\"text-center py-8 text-slate-500\">\n              No tenants found. Create your first tenant to get started.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {editingTenant && (\n        <TenantForm\n          tenant={editingTenant}\n          onSave={handleSaveTenant}\n          onCancel={handleCancelEdit}\n        />\n      )}\n\n      {showCreateForm && (\n        <TenantForm\n          tenant={{}}\n          onSave={handleSaveTenant}\n          onCancel={handleCancelEdit}\n        />\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\TermsConditions.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":37,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1481,1723],"text":"\n              By accessing and using the Ai-SHA┬« CRM platform (&quot;Service\"), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1481,1723],"text":"\n              By accessing and using the Ai-SHA┬« CRM platform (&ldquo;Service\"), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1481,1723],"text":"\n              By accessing and using the Ai-SHA┬« CRM platform (&#34;Service\"), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1481,1723],"text":"\n              By accessing and using the Ai-SHA┬« CRM platform (&rdquo;Service\"), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":37,"column":72,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1481,1723],"text":"\n              By accessing and using the Ai-SHA┬« CRM platform (\"Service&quot;), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1481,1723],"text":"\n              By accessing and using the Ai-SHA┬« CRM platform (\"Service&ldquo;), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1481,1723],"text":"\n              By accessing and using the Ai-SHA┬« CRM platform (\"Service&#34;), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1481,1723],"text":"\n              By accessing and using the Ai-SHA┬« CRM platform (\"Service&rdquo;), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":76,"column":84,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4160,4235],"text":"Attempt to gain unauthorized access to our systems or other users&apos; accounts"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4160,4235],"text":"Attempt to gain unauthorized access to our systems or other users&lsquo; accounts"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4160,4235],"text":"Attempt to gain unauthorized access to our systems or other users&#39; accounts"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4160,4235],"text":"Attempt to gain unauthorized access to our systems or other users&rsquo; accounts"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FileText, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from 'react-router-dom';\nimport { createPageUrl } from '@/utils';\n\nexport default function TermsConditions() {\n  return (\n    <div className=\"p-4 lg:p-8 space-y-6 max-w-4xl mx-auto\">\n      <div className=\"flex items-center gap-4\">\n        <Link to={createPageUrl(\"Dashboard\")}>\n          <Button variant=\"ghost\" size=\"sm\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n        </Link>\n      </div>\n\n      <div className=\"flex items-center gap-3\">\n        <FileText className=\"w-8 h-8 text-blue-600\" />\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900\">Terms & Conditions</h1>\n          <p className=\"text-slate-600 mt-1\">Ai-SHA CRM Platform - 4V Data Consulting LLC</p>\n        </div>\n      </div>\n\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader>\n          <CardTitle>Terms of Service Agreement</CardTitle>\n          <p className=\"text-sm text-slate-500\">Last updated: January 1, 2025</p>\n        </CardHeader>\n        <CardContent className=\"prose prose-slate max-w-none space-y-6\">\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">1. Acceptance of Terms</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              By accessing and using the Ai-SHA┬« CRM platform (\"Service\"), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">2. Description of Service</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              Ai-SHA┬« (Ai-Super Hi-performing Assistant) is a comprehensive Customer Relationship Management (CRM) platform provided by 4V Data Consulting LLC. The Service includes contact management, lead tracking, opportunity management, reporting tools, and AI-powered business intelligence features.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">3. User Accounts and Security</h2>\n            <p className=\"text-slate-700 leading-relaxed mb-3\">\n              Users are responsible for maintaining the confidentiality of their account credentials and for all activities that occur under their account. You agree to:\n            </p>\n            <ul className=\"list-disc pl-6 space-y-2 text-slate-700\">\n              <li>Provide accurate and complete information when creating your account</li>\n              <li>Maintain the security of your login credentials</li>\n              <li>Notify us immediately of any unauthorized use of your account</li>\n              <li>Be responsible for all activities under your account</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">4. Data Privacy and Security</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              We take data privacy seriously and implement industry-standard security measures to protect your data. Your customer data remains your property, and we will not access, use, or share it except as necessary to provide the Service or as required by law. For detailed information about our data practices, please refer to our Privacy Policy.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">5. Acceptable Use Policy</h2>\n            <p className=\"text-slate-700 leading-relaxed mb-3\">\n              You agree not to use the Service to:\n            </p>\n            <ul className=\"list-disc pl-6 space-y-2 text-slate-700\">\n              <li>Upload, store, or transmit any unlawful, harmful, or objectionable content</li>\n              <li>Violate any applicable laws or regulations</li>\n              <li>Attempt to gain unauthorized access to our systems or other users' accounts</li>\n              <li>Interfere with or disrupt the integrity or performance of the Service</li>\n              <li>Use the Service for any commercial purpose other than your intended business use</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">6. Intellectual Property Rights</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              Ai-SHA┬« is a registered trademark of 4V Data Consulting LLC. All content, features, and functionality of the Service are owned by 4V Data Consulting LLC and are protected by copyright, trademark, and other intellectual property laws.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">7. Payment Terms</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              Subscription fees are billed in advance and are non-refundable. We reserve the right to change our pricing with 30 days written notice. Failure to pay may result in suspension or termination of your account.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">8. Service Availability</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              While we strive to maintain high availability, we do not guarantee that the Service will be available 100% of the time. We may perform maintenance that temporarily interrupts service, and we will provide advance notice when possible.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">9. Limitation of Liability</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              In no event shall 4V Data Consulting LLC be liable for any indirect, incidental, special, consequential, or punitive damages, or any loss of profits or revenues, whether incurred directly or indirectly, or any loss of data, use, goodwill, or other intangible losses.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">10. Termination</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              Either party may terminate this agreement at any time. Upon termination, your access to the Service will be discontinued, and you may request an export of your data within 30 days of termination.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">11. Changes to Terms</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              We reserve the right to modify these terms at any time. We will provide notice of significant changes and continued use of the Service constitutes acceptance of the modified terms.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-3\">12. Contact Information</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              For questions about these Terms & Conditions, please contact 4V Data Consulting LLC at support@4vdataconsulting.com.\n            </p>\n          </section>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\UnitTests.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Utilities.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[8,14],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[382,386],"text":""},"desc":"Remove unused variable 'user'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from \"react\";\nimport { User } from \"@/api/entities\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Loader2, Database, Wrench } from \"lucide-react\";\nimport { Link } from \"react-router-dom\";\nimport { createPageUrl } from \"@/utils\";\n\nexport default function UtilitiesPage() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // REMOVED: Local module permission check\n  // Module visibility is now controlled centrally by ModuleSettings in Layout\n\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const currentUser = await User.me();\n        setUser(currentUser);\n      } catch (error) {\n        if (import.meta.env.DEV) {\n          console.error(\"Error loading user:\", error);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n\n  const utilities = [\n    {\n      id: \"cleanup-orphaned-data\",\n      name: \"Clean Up Orphaned Data\",\n      description: \"Removes records without a tenant_id, ensuring data integrity.\",\n      icon: Database,\n      page: \"CleanupOrphanedData\",\n    },\n    {\n      id: \"data-diagnostics\",\n      name: \"Data Diagnostics\",\n      description: \"Analyze and troubleshoot data inconsistencies across your system.\",\n      icon: Database,\n      page: \"DataDiagnostics\",\n    },\n    // Add more utility tools here as needed\n    // {\n    //   id: \"another-utility\",\n    //   name: \"Another Utility Tool\",\n    //   description: \"Description of another utility tool.\",\n    //   icon: SomeIcon,\n    //   page: \"AnotherUtilityPage\",\n    // },\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-blue-500\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-slate-800 border-slate-700\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-slate-100\">\n            <Wrench className=\"w-5 h-5 text-blue-400\" />\n            System Utilities\n          </CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Administrative tools for data management and system maintenance\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {utilities.map((utility) => (\n              <Link\n                key={utility.id}\n                to={createPageUrl(utility.page)}\n                className=\"block\"\n              >\n                <Card className=\"bg-slate-700/50 border-slate-600 hover:bg-slate-700 hover:border-blue-500 transition-all cursor-pointer h-full\">\n                  <CardHeader>\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"w-10 h-10 rounded-lg bg-blue-600/20 flex items-center justify-center flex-shrink-0\">\n                        <utility.icon className=\"w-5 h-5 text-blue-400\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <CardTitle className=\"text-slate-100 text-base\">\n                          {utility.name}\n                        </CardTitle>\n                        <CardDescription className=\"text-slate-400 text-sm mt-1\">\n                          {utility.description}\n                        </CardDescription>\n                      </div>\n                    </div>\n                  </CardHeader>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\WorkflowGuide.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createPageUrl } from \"@/utils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Database,\n  TrendingUp,\n  Target,\n  CheckSquare,\n  Trophy,\n  Users,\n  Building2,\n  ArrowDown,\n  ArrowRight,\n  ArrowLeft,\n  Lightbulb,\n  BookOpen,\n} from \"lucide-react\";\n\nconst WorkflowStage = ({ icon: Icon, title, description, onClick, color = \"blue\", className = \"\" }) => {\n  return (\n    <Card\n      className={`bg-slate-800 border-slate-700 hover:border-${color}-500 hover:shadow-lg hover:shadow-${color}-500/20 transition-all duration-300 cursor-pointer ${className}`}\n      onClick={onClick}\n    >\n      <CardContent className=\"p-6 text-center\">\n        <div className={`inline-flex items-center justify-center w-16 h-16 rounded-lg bg-${color}-600/20 mb-4`}>\n          <Icon className={`w-8 h-8 text-${color}-500`} />\n        </div>\n        <h3 className=\"text-xl font-bold text-slate-100 mb-2\">{title}</h3>\n        <p className=\"text-sm text-slate-400\">{description}</p>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst WorkflowArrow = ({ direction = \"down\", className = \"\" }) => {\n  const ArrowIcon = direction === \"down\" ? ArrowDown : direction === \"right\" ? ArrowRight : ArrowLeft;\n  return (\n    <div className={`flex items-center justify-center ${className}`}>\n      <ArrowIcon className=\"w-8 h-8 text-slate-500 animate-pulse\" />\n    </div>\n  );\n};\n\nconst DecisionDiamond = ({ title, onClick, color = \"green\" }) => {\n  return (\n    <div className=\"flex items-center justify-center\">\n      <div\n        className={`relative w-32 h-32 bg-${color}-600/20 border-2 border-${color}-500 hover:border-${color}-400 hover:shadow-lg hover:shadow-${color}-500/30 transition-all duration-300 cursor-pointer`}\n        style={{ transform: \"rotate(45deg)\" }}\n        onClick={onClick}\n      >\n        <div\n          className=\"absolute inset-0 flex items-center justify-center\"\n          style={{ transform: \"rotate(-45deg)\" }}\n        >\n          <div className=\"text-center\">\n            <Trophy className={`w-8 h-8 text-${color}-500 mx-auto mb-1`} />\n            <span className=\"text-sm font-bold text-slate-100\">{title}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function WorkflowGuide() {\n  const navigate = useNavigate();\n\n  const stages = [\n    {\n      icon: Database,\n      title: \"BizDev Sources\",\n      description: \"Import and manage potential business leads from external sources\",\n      page: \"BizDevSources\",\n      color: \"cyan\",\n    },\n    {\n      icon: TrendingUp,\n      title: \"Leads\",\n      description: \"Qualify and nurture prospects through the sales funnel\",\n      page: \"Leads\",\n      color: \"blue\",\n    },\n    {\n      icon: Target,\n      title: \"Opportunities\",\n      description: \"Track active deals and move them through sales stages\",\n      page: \"Opportunities\",\n      color: \"purple\",\n    },\n    {\n      icon: CheckSquare,\n      title: \"Activities\",\n      description: \"Schedule and complete tasks, calls, meetings, and follow-ups\",\n      page: \"Activities\",\n      color: \"indigo\",\n    },\n  ];\n\n  const finalStages = [\n    {\n      icon: Users,\n      title: \"Contacts\",\n      description: \"Manage individual customer relationships and communication\",\n      page: \"Contacts\",\n      color: \"emerald\",\n    },\n    {\n      icon: Building2,\n      title: \"Accounts\",\n      description: \"Track company-level relationships and organizational details\",\n      page: \"Accounts\",\n      color: \"teal\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-4 lg:p-8\">\n      <div className=\"max-w-6xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"inline-flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 mb-4\">\n            <Lightbulb className=\"w-10 h-10 text-white\" />\n          </div>\n          <h1 className=\"text-4xl font-bold text-slate-100\">CRM Workflow Guide</h1>\n          <p className=\"text-lg text-slate-400 max-w-2xl mx-auto\">\n            Follow this visual guide to understand how data flows through your CRM.\n            Click on any stage to navigate directly to that section.\n          </p>\n        </div>\n\n        {/* Workflow Visual */}\n        <div className=\"space-y-6\">\n          {/* Stage 1: Sources */}\n          <div className=\"flex flex-col items-center\">\n            <WorkflowStage\n              icon={stages[0].icon}\n              title={stages[0].title}\n              description={stages[0].description}\n              onClick={() => navigate(createPageUrl(stages[0].page))}\n              color={stages[0].color}\n              className=\"w-full max-w-md\"\n            />\n            <WorkflowArrow direction=\"down\" className=\"my-4\" />\n          </div>\n\n          {/* Stage 2: Leads */}\n          <div className=\"flex flex-col items-center\">\n            <WorkflowStage\n              icon={stages[1].icon}\n              title={stages[1].title}\n              description={stages[1].description}\n              onClick={() => navigate(createPageUrl(stages[1].page))}\n              color={stages[1].color}\n              className=\"w-full max-w-md\"\n            />\n            <WorkflowArrow direction=\"down\" className=\"my-4\" />\n          </div>\n\n          {/* Stage 3: Opportunities */}\n          <div className=\"flex flex-col items-center\">\n            <WorkflowStage\n              icon={stages[2].icon}\n              title={stages[2].title}\n              description={stages[2].description}\n              onClick={() => navigate(createPageUrl(stages[2].page))}\n              color={stages[2].color}\n              className=\"w-full max-w-md\"\n            />\n            <WorkflowArrow direction=\"down\" className=\"my-4\" />\n          </div>\n\n          {/* Stage 4: Activities */}\n          <div className=\"flex flex-col items-center\">\n            <WorkflowStage\n              icon={stages[3].icon}\n              title={stages[3].title}\n              description={stages[3].description}\n              onClick={() => navigate(createPageUrl(stages[3].page))}\n              color={stages[3].color}\n              className=\"w-full max-w-md\"\n            />\n            <WorkflowArrow direction=\"down\" className=\"my-4\" />\n          </div>\n\n          {/* Decision: Won */}\n          <div className=\"flex flex-col items-center my-8\">\n            <DecisionDiamond\n              title=\"Won\"\n              onClick={() => navigate(createPageUrl(\"Opportunities\") + \"?filter=closed_won\")}\n              color=\"green\"\n            />\n            <div className=\"mt-8 text-center\">\n              <p className=\"text-sm text-slate-400\">Deal Closed Successfully! ≡ƒÄë</p>\n            </div>\n          </div>\n\n          {/* Final Stages: Contacts & Accounts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-8\">\n            {finalStages.map((stage, index) => (\n              <WorkflowStage\n                key={index}\n                icon={stage.icon}\n                title={stage.title}\n                description={stage.description}\n                onClick={() => navigate(createPageUrl(stage.page))}\n                color={stage.color}\n              />\n            ))}\n          </div>\n\n          {/* Bidirectional Arrow between Contacts and Accounts */}\n          <div className=\"flex items-center justify-center gap-4 my-4\">\n            <ArrowLeft className=\"w-6 h-6 text-slate-500\" />\n            <span className=\"text-sm text-slate-400\">Contacts & Accounts are interconnected</span>\n            <ArrowRight className=\"w-6 h-6 text-slate-500\" />\n          </div>\n        </div>\n\n        {/* Additional Info Cards */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-12\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <Lightbulb className=\"w-5 h-5 text-yellow-500\" />\n                Key Workflow Tips\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-slate-300 space-y-2 text-sm\">\n              <p>ΓÇó <strong>Sources:</strong> Import bulk data from directories, trade shows, or marketing campaigns</p>\n              <p>ΓÇó <strong>Leads:</strong> Qualify prospects and track their journey through your sales funnel</p>\n              <p>ΓÇó <strong>Opportunities:</strong> Convert qualified leads into active deals with revenue potential</p>\n              <p>ΓÇó <strong>Activities:</strong> Schedule follow-ups, calls, and meetings to move deals forward</p>\n              <p>ΓÇó <strong>Contacts & Accounts:</strong> Maintain relationships after deals are won</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-100 flex items-center gap-2\">\n                <BookOpen className=\"w-5 h-5 text-blue-500\" />\n                Role-Based Workflows\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-slate-300 space-y-3 text-sm\">\n              <div>\n                <Badge className=\"bg-purple-600 text-white mb-2\">Manager Role</Badge>\n                <p className=\"text-slate-400\">Full visibility across all stages. Focus on pipeline review, team performance, and strategic decisions.</p>\n              </div>\n              <div>\n                <Badge className=\"bg-blue-600 text-white mb-2\">Employee Role</Badge>\n                <p className=\"text-slate-400\">Focus on assigned leads and opportunities. Execute activities and update progress daily.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* CTA */}\n        <div className=\"text-center mt-12\">\n          <Button\n            onClick={() => navigate(createPageUrl(\"Documentation\"))}\n            className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\"\n          >\n            <BookOpen className=\"w-4 h-4 mr-2\" />\n            View Full Documentation\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\Workflows.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'XCircle' is defined but never used.","line":2,"column":68,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":75,"suggestions":[{"messageId":"removeVar","data":{"varName":"XCircle"},"fix":{"range":[117,126],"text":""},"desc":"Remove unused variable 'XCircle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":4,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardHeader"},"fix":{"range":[225,237],"text":""},"desc":"Remove unused variable 'CardHeader'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":4,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardTitle"},"fix":{"range":[237,248],"text":""},"desc":"Remove unused variable 'CardTitle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[740,744],"text":""},"desc":"Remove unused variable 'user'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Plus, Play, Pause, Trash2, Edit, Zap, Clock, CheckCircle, XCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Workflow } from '@/api/entities';\nimport { User } from '@/api/entities';\nimport WorkflowBuilder from '../components/workflows/WorkflowBuilder';\nimport { format } from 'date-fns';\nimport { toast } from 'sonner';\n\nexport default function WorkflowsPage() {\n  const [workflows, setWorkflows] = useState([]);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [showBuilder, setShowBuilder] = useState(false);\n  const [editingWorkflow, setEditingWorkflow] = useState(null);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      const [currentUser, workflowsData] = await Promise.all([\n        User.me(),\n        Workflow.list('-created_date')\n      ]);\n      setUser(currentUser);\n      setWorkflows(workflowsData || []);\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.error('Failed to load workflows:', error);\n      }\n      toast.error('Failed to load workflows');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateNew = () => {\n    setEditingWorkflow(null);\n    setShowBuilder(true);\n  };\n\n  const handleEdit = (workflow) => {\n    setEditingWorkflow(workflow);\n    setShowBuilder(true);\n  };\n\n  const handleToggleActive = async (workflow) => {\n    try {\n      await Workflow.update(workflow.id, { is_active: !workflow.is_active });\n      toast.success(`Workflow ${!workflow.is_active ? 'activated' : 'deactivated'}`);\n      loadData();\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.error('Failed to toggle workflow:', error);\n      }\n      toast.error('Failed to update workflow');\n    }\n  };\n\n  const handleDelete = async (workflow) => {\n    if (!confirm(`Delete workflow \"${workflow.name}\"?`)) return;\n    \n    try {\n      await Workflow.delete(workflow.id);\n      toast.success('Workflow deleted');\n      loadData();\n    } catch (error) {\n      if (import.meta.env.DEV) {\n        console.error('Failed to delete workflow:', error);\n      }\n      toast.error('Failed to delete workflow');\n    }\n  };\n\n  const handleSave = async () => {\n    setShowBuilder(false);\n    loadData();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-slate-400\">Loading workflows...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-100 flex items-center gap-3\">\n              <Zap className=\"w-8 h-8 text-purple-400\" />\n              Workflows\n            </h1>\n            <p className=\"text-slate-400 mt-1\">Automate your CRM with custom workflows</p>\n          </div>\n          <Button onClick={handleCreateNew} className=\"bg-purple-600 hover:bg-purple-700\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Workflow\n          </Button>\n        </div>\n\n        {/* Workflows List */}\n        {workflows.length === 0 ? (\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardContent className=\"py-12 text-center\">\n              <Zap className=\"w-16 h-16 text-slate-600 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-slate-300 mb-2\">No workflows yet</h3>\n              <p className=\"text-slate-500 mb-4\">Create your first workflow to automate your CRM</p>\n              <Button onClick={handleCreateNew} className=\"bg-purple-600 hover:bg-purple-700\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Your First Workflow\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid gap-4\">\n            {workflows.map((workflow) => (\n              <Card key={workflow.id} className=\"bg-slate-800 border-slate-700 hover:bg-slate-700/50 transition-colors\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <h3 className=\"text-lg font-semibold text-slate-100\">{workflow.name}</h3>\n                        <Badge variant={workflow.is_active ? 'default' : 'secondary'} className={workflow.is_active ? 'bg-green-600' : 'bg-slate-600'}>\n                          {workflow.is_active ? 'Active' : 'Inactive'}\n                        </Badge>\n                      </div>\n                      <p className=\"text-slate-400 text-sm mb-3\">{workflow.description || 'No description'}</p>\n                      \n                      <div className=\"flex items-center gap-4 text-xs text-slate-500\">\n                        <div className=\"flex items-center gap-1\">\n                          <Zap className=\"w-3 h-3\" />\n                          <span>{workflow.trigger?.type || 'webhook'}</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <CheckCircle className=\"w-3 h-3\" />\n                          <span>{workflow.execution_count || 0} executions</span>\n                        </div>\n                        {workflow.last_executed && (\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"w-3 h-3\" />\n                            <span>Last run: {format(new Date(workflow.last_executed), 'MMM d, h:mm a')}</span>\n                          </div>\n                        )}\n                      </div>\n\n                      {workflow.webhook_url && (\n                        <div className=\"mt-3 p-2 bg-slate-900 rounded border border-slate-700\">\n                          <p className=\"text-xs text-slate-500 mb-1\">Webhook URL:</p>\n                          <code className=\"text-xs text-blue-400 break-all\">{workflow.webhook_url}</code>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex items-center gap-2 ml-4\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleToggleActive(workflow)}\n                        className=\"text-slate-400 hover:text-slate-200\"\n                      >\n                        {workflow.is_active ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleEdit(workflow)}\n                        className=\"text-slate-400 hover:text-slate-200\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleDelete(workflow)}\n                        className=\"text-red-400 hover:text-red-300\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Workflow Builder Dialog */}\n        <Dialog open={showBuilder} onOpenChange={setShowBuilder}>\n          <DialogContent className=\"max-w-6xl h-[90vh] bg-slate-900 border-slate-700\">\n            <DialogHeader>\n              <DialogTitle className=\"text-slate-100\">\n                {editingWorkflow ? 'Edit Workflow' : 'Create New Workflow'}\n              </DialogTitle>\n            </DialogHeader>\n            <WorkflowBuilder \n              workflow={editingWorkflow}\n              onSave={handleSave}\n              onCancel={() => setShowBuilder(false)}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\pages\\index.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\andre\\Documents\\GitHub\\ai-sha-crm-copy-c872be53\\src\\utils\\apiHealthMonitor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
